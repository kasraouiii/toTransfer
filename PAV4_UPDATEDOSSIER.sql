CREATE OR REPLACE PACKAGE TRSGMPRD.PAV4_UPDATEDOSSIER AS

PROCEDURE I_DOSSIER (
  nDosId                IN OUT DOSSIER.DOSID%TYPE,
  sDevCode              DOSSIER.DEVCODE%TYPE,
  nActId                DOSSIER.ACTID%TYPE,
  sTpgCode 			      DOSSIER.TPGCODE%TYPE,
  sTacCode 			      DOSSIER.TPGCODE%TYPE,
  sUtiCode 			      DOSSIER.UTICODE%TYPE,
  sDosNum 			      DOSSIER.DOSNUM%TYPE,
  sDosNom 			      DOSSIER.DOSNOM%TYPE,
  nDosAvenant 		      DOSSIER.DOSAVENANT%TYPE,
  sDosEtat		         DOSSIER.DOSETAT%TYPE,
  nDosDureeJour 		   DOSSIER.DOSDUREEJOUR%TYPE,
  nDosDureeMois 		   DOSSIER.DOSDUREEMOIS%TYPE,
  nDosDureeAn 		      DOSSIER.DOSDUREEAN%TYPE,
  nDosDureeActualJour   DOSSIER.DOSDUREEACTUALJOUR%TYPE,
  nDosDureeActualMois	DOSSIER.DOSDUREEACTUALMOIS%TYPE,
  nDosDureeActualAn 	   DOSSIER.DOSDUREEACTUALAN%TYPE,
  dtDosDtDeb			   DOSSIER.DOSDTDEB%TYPE,
  dtDosDtFin 			   DOSSIER.DOSDTFIN%TYPE,
  dtDosDtSigne 		   DOSSIER.DOSDTSIGNE%TYPE,
  dtDosDtOpAchat 		   DOSSIER.DOSDTOPACHAT%TYPE,
  dtDosDtComite 		   DOSSIER.DOSDTCOMITE%TYPE,
  dtDosDtEffet 		   DOSSIER.DOSDTEFFET%TYPE,
  dtDosDtProduct		   DOSSIER.DOSDTPRODUCT%TYPE,
  nDosPreavis 		      DOSSIER.DOSPREAVIS%TYPE,
  sDosTypePenalite		DOSSIER.DOSTYPEPENALITE%TYPE,
  sDosTypeFinancement	DOSSIER.DOSTYPEFINANCEMENT%TYPE,
  nDosMtPenalite		   DOSSIER.DOSMTPENALITE%TYPE,
  sDosRegimeFiscal		DOSSIER.DOSREGIMEFISCAL%TYPE,
  nDosMtSign			   DOSSIER.DOSMTSIGN%TYPE,
  nDosMtComite		      DOSSIER.DOSMTCOMITE%TYPE,
  nDosMtProduct		   DOSSIER.DOSMTPRODUCT%TYPE,
  nDosMtOuvert		      DOSSIER.DOSMTOUVERT%TYPE,
  dtDosDtOuvert		   DOSSIER.DOSDTOUVERT%TYPE,
  sDosPool			      DOSSIER.DOSPOOL%TYPE,
  nDosTauxCal			   DOSSIER.DOSTAUXCAL%TYPE,
  nDosTaux			      DOSSIER.DOSTAUX%TYPE,
  nDosTxMarge			   DOSSIER.DOSTXMARGE%TYPE,
  nDosFlagIndexable		DOSSIER.DOSFLAGINDEXABLE%TYPE,
  sDosBareme			   DOSSIER.DOSBAREME%TYPE,
  sDosSectGestion		   DOSSIER.DOSSECTGESTION%TYPE,
			-- CBI --
  sDimZone			      DOSSIERIMMOBILIER.DIMZONE%TYPE,
  nDimNbSalarie		   DOSSIERIMMOBILIER.DIMNBSALARIE%TYPE,
  nDimPctCapital		   DOSSIERIMMOBILIER.DIMPCTCAPITAL%TYPE,
  nDimBilanMF			   DOSSIERIMMOBILIER.DIMBILANMF%TYPE,
  nDimCaMF			      DOSSIERIMMOBILIER.DIMCAMF%TYPE,
  nDimAnCritere	      DOSSIERIMMOBILIER.DIMANCRITERE%TYPE,
  nDimMarge			      DOSSIERIMMOBILIER.DIMMARGE%TYPE,
  sDimPosCC			      DOSSIERIMMOBILIER.DIMPOSCC%TYPE,
  nDimMtCC			      DOSSIERIMMOBILIER.DIMMTCC%TYPE,
  --nDimMtApportClient  DOSSIERIMMOBILIER.DIMMTAPPORTCLIENT%TYPE,
  sDimMemoVR			   DOSSIERIMMOBILIER.DIMMEMOVR%TYPE,
				-- CREDIT --
  sDcrType			      DOSSIERCREDIT.DCRTYPE%TYPE,
  sDcrClasse			   DOSSIERCREDIT.DCRCLASSE%TYPE,
  nDcrFlagEligBDF		   DOSSIERCREDIT.DCRFLAGELIGBDF%TYPE,
  nDcrFlagEligIEOM		DOSSIERCREDIT.DCRFLAGELIGIEOM%TYPE,
  nDcrFlagEligIEDOM		DOSSIERCREDIT.DCRFLAGELIGIEDOM%TYPE,
  nDcrFlagEligMH		   DOSSIERCREDIT.DCRFLAGELIGMH%TYPE,
  sDcrBAFI			      DOSSIERCREDIT.DCRBAFI%TYPE,
  sPhaCode			      DOSPHASE.PHACODE%TYPE,
  sJalCode			      DOSPHASE.JALCODE%TYPE,
  dtCreaPhase           IN DATE,
  nDosIdRefinance       DOSSIER.DOSIDREFINANCE%TYPE,
  nDosMtMarge           DOSSIER.DOSMTMARGE%TYPE,
  sDosFinStruct         DOSSIER.DOSFINSTRUCT%TYPE,
  nDosMtForfaitRachat   DOSSIER.DOSMTFORFAITRACHAT%TYPE,    -- CV-04122001 FSA-7310
  nDosPctPenaliteRachat DOSSIER.DOSPCTPENALITERACHAT%TYPE,  -- CV-04122001 FSA-7310
  sDosUsGaap            DOSSIER.DOSUSGAAP%TYPE,
  nManId                DOSSIER.MANID%TYPE,
  nDosTypePenResil      DOSSIER.DOSTYPEPENALITERESIL%TYPE,  -- hn22/04/03 FSA 11951
  nDosMtPenResil        DOSSIER.DOSMTPENALITERESIL%TYPE,    -- hn22/04/03
  nDosPctPenResil       DOSSIER.DOSPCTPENALITERESIL%TYPE,
  sNapCode              DOSSIER.NAPCODE%TYPE,               -- CV-25072003 FSA-12787
  sPayCode                      DOSSIER.PAYCODE%TYPE,
  sDosTransFerabilite   DOSSIER.DOSTRANSFERABILITE%TYPE,
  nDosFlagConfidentiel  DOSSIER.DOSFLAGCONFIDENTIEL%TYPE,
  nDcrFlagPretRevocable DOSSIERCREDIT.DCRFLAGPRETREVOCABLE%TYPE,
  nDcrDureeMoisPreavis  DOSSIERCREDIT.DCRDUREEMOISPREAVIS%TYPE,
  nDcrPctTiragePrevu    DOSSIERCREDIT.DCRPCTTIRAGEPREVU%TYPE,
  nDcrFlagConvertibilite DOSSIERCREDIT.DCRFLAGCONVERTIBILITE%TYPE,
  nDcrFlagTaciteRecond   DOSSIERCREDIT.DCRFLAGTACITERECOND%TYPE,
  nDcrFlagRevolving      DOSSIERCREDIT. DCRFLAGREVOLVING%TYPE,
  nDosFlagRestruct        DOSSIER.DOSFLAGRESTRUCT%TYPE,
  dtDosDtDebRestruct      DOSSIER.DOSDTDEBRESTRUCT%TYPE,
  nDosIASExerciceCritere   DOSSIER.DOSIASEXERCICECRITERE%TYPE,
  sDosIASClassement        DOSSIER.DOSIASCLASSEMENT%TYPE,
  nDosIASFlagMicroOuverture   DOSSIER.DOSIASFLAGMICROCOUVERTURE%TYPE,
  nDosIASFlagNatureSpecifique DOSSIER.DOSIASFLAGNATURESPECIFIQUE%TYPE,
  nDosIASFlagLocationFinale   DOSSIER.DOSIASFLAGLOCATIONFINALE%TYPE,
  nDosIASFlagTransfertFinal   DOSSIER.DOSIASFLAGTRANSFERTFINAL%TYPE,
  nDosIASDureeEconomique      DOSSIER.DOSIASDUREEECONOMIQUEAN%TYPE,
  nDosIASDureeMoisEconomique  DOSSIER.DOSIASDUREEECONOMIQUEMOIS%TYPE,
  nDosIASMtValeurInitiale     DOSSIER.DOSIASMTVALEURINITIALE%TYPE,
  nDosIASDureeJourEco         DOSSIER.DOSIASDUREEECONOMIQUEJOUR%TYPE,
  nDosIASFlagMajClassement    DOSSIER.DOSIASFLAGMAJCLASSEMENT%TYPE,
  sDosIASMemoMajClassement    DOSSIER.DOSIASMEMOMAJCLASSEMENT%TYPE,
  nDosFlagVRAuto					DOSSIER.DOSFLAGVRAUTO%TYPE,
  nDosIdLocatif               DOSSIER.DOSIDLOCATIF%TYPE,
  nDosTauxCalcActuel          DOSSIER.DOSTAUXCALCACTUEL%TYPE,
  sTauCode                    DOSSIER.TAUCODE%TYPE,
  sDosIasMarche               DOSSIER.DOSIASMARCHE%TYPE,
  sDosIasProduit              DOSSIER.DOSIASPRODUIT%TYPE,
  nDosIasDosTxMarche          DOSSIER.DOSIASTXMARCHE%TYPE,
  nDosIasToleranceMarche      DOSSIER.DOSIASTOLERANCEMARCHE%TYPE,
  nDosIasToleranceHorsMarche  DOSSIER.DOSIASTOLERANCEHORSMARCHE%TYPE,
  nDosIasDecoteInitiale       DOSSIER.DOSIASDECOTEINITIALE%TYPE,
  sDosIasInstrumentFinancier  DOSSIER.DOSIASINSTRUMENTFINANCIER%TYPE,
  nDosFlagGrpRubrique         DOSSIERMOBILIER.DOSFLAGGRPRUBRIQUE%TYPE,
  sDexNumContrat              DOSSIEREXTERNE.DEXNUMCONTRAT%TYPE,
  nCalId                      DOSSIER.CALID%TYPE,
  dtDosDtEndCommittee         DOSSIER.DOSDTENDCOMMITTEE%TYPE,
  sDoscomment                 DOSSIER.DOSCOMMENT%TYPE,
  nReturnCode 		     IN OUT NUMBER ) ;

  PROCEDURE I_DOSSIER (
  nDosId                IN OUT DOSSIER.DOSID%TYPE,
  nDosIdIn                IN  DOSSIER.DOSID%TYPE,
  sDevCode              DOSSIER.DEVCODE%TYPE,
  nActId                DOSSIER.ACTID%TYPE,
  sTpgCode 			      DOSSIER.TPGCODE%TYPE,
  sTacCode 			      DOSSIER.TPGCODE%TYPE,
  sUtiCode 			      DOSSIER.UTICODE%TYPE,
  sDosNum 			      DOSSIER.DOSNUM%TYPE,
  sDosNom 			      DOSSIER.DOSNOM%TYPE,
  nDosAvenant 		      DOSSIER.DOSAVENANT%TYPE,
  sDosEtat		         DOSSIER.DOSETAT%TYPE,
  nDosDureeJour 		   DOSSIER.DOSDUREEJOUR%TYPE,
  nDosDureeMois 		   DOSSIER.DOSDUREEMOIS%TYPE,
  nDosDureeAn 		      DOSSIER.DOSDUREEAN%TYPE,
  nDosDureeActualJour   DOSSIER.DOSDUREEACTUALJOUR%TYPE,
  nDosDureeActualMois	DOSSIER.DOSDUREEACTUALMOIS%TYPE,
  nDosDureeActualAn 	   DOSSIER.DOSDUREEACTUALAN%TYPE,
  dtDosDtDeb			   DOSSIER.DOSDTDEB%TYPE,
  dtDosDtFin 			   DOSSIER.DOSDTFIN%TYPE,
  dtDosDtSigne 		   DOSSIER.DOSDTSIGNE%TYPE,
  dtDosDtOpAchat 		   DOSSIER.DOSDTOPACHAT%TYPE,
  dtDosDtComite 		   DOSSIER.DOSDTCOMITE%TYPE,
  dtDosDtEffet 		   DOSSIER.DOSDTEFFET%TYPE,
  dtDosDtProduct		   DOSSIER.DOSDTPRODUCT%TYPE,
  nDosPreavis 		      DOSSIER.DOSPREAVIS%TYPE,
  sDosTypePenalite		DOSSIER.DOSTYPEPENALITE%TYPE,
  sDosTypeFinancement	DOSSIER.DOSTYPEFINANCEMENT%TYPE,
  nDosMtPenalite		   DOSSIER.DOSMTPENALITE%TYPE,
  sDosRegimeFiscal		DOSSIER.DOSREGIMEFISCAL%TYPE,
  nDosMtSign			   DOSSIER.DOSMTSIGN%TYPE,
  nDosMtComite		      DOSSIER.DOSMTCOMITE%TYPE,
  nDosMtProduct		   DOSSIER.DOSMTPRODUCT%TYPE,
  nDosMtOuvert		      DOSSIER.DOSMTOUVERT%TYPE,
  dtDosDtOuvert		   DOSSIER.DOSDTOUVERT%TYPE,
  sDosPool			      DOSSIER.DOSPOOL%TYPE,
  nDosTauxCal			   DOSSIER.DOSTAUXCAL%TYPE,
  nDosTaux			      DOSSIER.DOSTAUX%TYPE,
  nDosTxMarge			   DOSSIER.DOSTXMARGE%TYPE,
  nDosFlagIndexable		DOSSIER.DOSFLAGINDEXABLE%TYPE,
  sDosBareme			   DOSSIER.DOSBAREME%TYPE,
  sDosSectGestion		   DOSSIER.DOSSECTGESTION%TYPE,
			-- CBI --
  sDimZone			      DOSSIERIMMOBILIER.DIMZONE%TYPE,
  nDimNbSalarie		   DOSSIERIMMOBILIER.DIMNBSALARIE%TYPE,
  nDimPctCapital		   DOSSIERIMMOBILIER.DIMPCTCAPITAL%TYPE,
  nDimBilanMF			   DOSSIERIMMOBILIER.DIMBILANMF%TYPE,
  nDimCaMF			      DOSSIERIMMOBILIER.DIMCAMF%TYPE,
  nDimAnCritere	      DOSSIERIMMOBILIER.DIMANCRITERE%TYPE,
  nDimMarge			      DOSSIERIMMOBILIER.DIMMARGE%TYPE,
  sDimPosCC			      DOSSIERIMMOBILIER.DIMPOSCC%TYPE,
  nDimMtCC			      DOSSIERIMMOBILIER.DIMMTCC%TYPE,
  --nDimMtApportClient  DOSSIERIMMOBILIER.DIMMTAPPORTCLIENT%TYPE,
  sDimMemoVR			   DOSSIERIMMOBILIER.DIMMEMOVR%TYPE,
				-- CREDIT --
  sDcrType			      DOSSIERCREDIT.DCRTYPE%TYPE,
  sDcrClasse			   DOSSIERCREDIT.DCRCLASSE%TYPE,
  nDcrFlagEligBDF		   DOSSIERCREDIT.DCRFLAGELIGBDF%TYPE,
  nDcrFlagEligIEOM		DOSSIERCREDIT.DCRFLAGELIGIEOM%TYPE,
  nDcrFlagEligIEDOM		DOSSIERCREDIT.DCRFLAGELIGIEDOM%TYPE,
  nDcrFlagEligMH		   DOSSIERCREDIT.DCRFLAGELIGMH%TYPE,
  sDcrBAFI			      DOSSIERCREDIT.DCRBAFI%TYPE,
  sPhaCode			      DOSPHASE.PHACODE%TYPE,
  sJalCode			      DOSPHASE.JALCODE%TYPE,
  dtCreaPhase           IN DATE,
  nDosIdRefinance       DOSSIER.DOSIDREFINANCE%TYPE,
  nDosMtMarge           DOSSIER.DOSMTMARGE%TYPE,
  sDosFinStruct         DOSSIER.DOSFINSTRUCT%TYPE,
  nDosMtForfaitRachat   DOSSIER.DOSMTFORFAITRACHAT%TYPE,    -- CV-04122001 FSA-7310
  nDosPctPenaliteRachat DOSSIER.DOSPCTPENALITERACHAT%TYPE,  -- CV-04122001 FSA-7310
  sDosUsGaap            DOSSIER.DOSUSGAAP%TYPE,
  nManId                DOSSIER.MANID%TYPE,
  nDosTypePenResil      DOSSIER.DOSTYPEPENALITERESIL%TYPE,  -- hn22/04/03 FSA 11951
  nDosMtPenResil        DOSSIER.DOSMTPENALITERESIL%TYPE,    -- hn22/04/03
  nDosPctPenResil       DOSSIER.DOSPCTPENALITERESIL%TYPE,
  sNapCode              DOSSIER.NAPCODE%TYPE,               -- CV-25072003 FSA-12787
  sPayCode                      DOSSIER.PAYCODE%TYPE,
  sDosTransFerabilite   DOSSIER.DOSTRANSFERABILITE%TYPE,
  nDosFlagConfidentiel  DOSSIER.DOSFLAGCONFIDENTIEL%TYPE,
  nDcrFlagPretRevocable DOSSIERCREDIT.DCRFLAGPRETREVOCABLE%TYPE,
  nDcrDureeMoisPreavis  DOSSIERCREDIT.DCRDUREEMOISPREAVIS%TYPE,
  nDcrPctTiragePrevu    DOSSIERCREDIT.DCRPCTTIRAGEPREVU%TYPE,
  nDcrFlagConvertibilite DOSSIERCREDIT.DCRFLAGCONVERTIBILITE%TYPE,
  nDcrFlagTaciteRecond   DOSSIERCREDIT.DCRFLAGTACITERECOND%TYPE,
  nDcrFlagRevolving      DOSSIERCREDIT. DCRFLAGREVOLVING%TYPE,
  nDosFlagRestruct        DOSSIER.DOSFLAGRESTRUCT%TYPE,
  dtDosDtDebRestruct      DOSSIER.DOSDTDEBRESTRUCT%TYPE,
  nDosIASExerciceCritere   DOSSIER.DOSIASEXERCICECRITERE%TYPE,
  sDosIASClassement        DOSSIER.DOSIASCLASSEMENT%TYPE,
  nDosIASFlagMicroOuverture   DOSSIER.DOSIASFLAGMICROCOUVERTURE%TYPE,
  nDosIASFlagNatureSpecifique DOSSIER.DOSIASFLAGNATURESPECIFIQUE%TYPE,
  nDosIASFlagLocationFinale   DOSSIER.DOSIASFLAGLOCATIONFINALE%TYPE,
  nDosIASFlagTransfertFinal   DOSSIER.DOSIASFLAGTRANSFERTFINAL%TYPE,
  nDosIASDureeEconomique      DOSSIER.DOSIASDUREEECONOMIQUEAN%TYPE,
  nDosIASDureeMoisEconomique  DOSSIER.DOSIASDUREEECONOMIQUEMOIS%TYPE,
  nDosIASMtValeurInitiale     DOSSIER.DOSIASMTVALEURINITIALE%TYPE,
  nDosIASDureeJourEco         DOSSIER.DOSIASDUREEECONOMIQUEJOUR%TYPE,
  nDosIASFlagMajClassement    DOSSIER.DOSIASFLAGMAJCLASSEMENT%TYPE,
  sDosIASMemoMajClassement    DOSSIER.DOSIASMEMOMAJCLASSEMENT%TYPE,
  nDosFlagVRAuto					DOSSIER.DOSFLAGVRAUTO%TYPE,
  nDosIdLocatif               DOSSIER.DOSIDLOCATIF%TYPE,
  nDosTauxCalcActuel          DOSSIER.DOSTAUXCALCACTUEL%TYPE,
  sTauCode                    DOSSIER.TAUCODE%TYPE,
  sDosIasMarche               DOSSIER.DOSIASMARCHE%TYPE,
  sDosIasProduit              DOSSIER.DOSIASPRODUIT%TYPE,
  nDosIasDosTxMarche          DOSSIER.DOSIASTXMARCHE%TYPE,
  nDosIasToleranceMarche      DOSSIER.DOSIASTOLERANCEMARCHE%TYPE,
  nDosIasToleranceHorsMarche  DOSSIER.DOSIASTOLERANCEHORSMARCHE%TYPE,
  nDosIasDecoteInitiale       DOSSIER.DOSIASDECOTEINITIALE%TYPE,
  sDosIasInstrumentFinancier  DOSSIER.DOSIASINSTRUMENTFINANCIER%TYPE,
  nDosFlagGrpRubrique         DOSSIERMOBILIER.DOSFLAGGRPRUBRIQUE%TYPE,
  sDexNumContrat              DOSSIEREXTERNE.DEXNUMCONTRAT%TYPE,
  nCalId                      DOSSIER.CALID%TYPE,
  dtDosDtEndCommittee         DOSSIER.DOSDTENDCOMMITTEE%TYPE,
  sDoscomment                 DOSSIER.DOSCOMMENT%TYPE,
  nReturnCode 		     IN OUT NUMBER ) ;

PROCEDURE I_DOSCURRENCY(
   nDosId      					IN     	DOSCURRENCY.DOSID%TYPE,
   nDcuOrdre   					IN     	DOSCURRENCY.DCUORDRE%TYPE,
   sDevCode    					IN     	DOSCURRENCY.DEVCODE%TYPE,
   dtDcuDtBeg  					IN     	DOSCURRENCY.DCUDTBEG%TYPE,
   dtDcuDtEnd  					IN     	DOSCURRENCY.DCUDTEND%TYPE,
   nDcuScale   					IN     	DOSCURRENCY.DCUSCALE%TYPE,
   sDcuTarget  					IN	  	DOSCURRENCY.DCUTARGET%TYPE,
   sDcuRoundingMethod			IN		DOSCURRENCY.DCUROUNDINGMETHOD%TYPE,
   nDcumtirminimalRounding  	IN	  	DOSCURRENCY.DCUMTIRMINIMALROUNDING%TYPE,
   nDcumtirlumpRounding  		IN	  	DOSCURRENCY.DCUMTIRLUMPROUNDING%TYPE,
   nDcumtfloorinterestRounding  IN	  	DOSCURRENCY.DCUMTFLOORINTERESTROUNDING%TYPE,
   nDcumtlumpinterestRounding  	IN	  	DOSCURRENCY.DCUMTLUMPINTERESTROUNDING%TYPE,
   nDacOrdre  					IN	  	DOSCURRENCY.DACORDRE%TYPE,
   nFxfId                       IN      DOSCURRENCY.FXFID%TYPE,
   nReturnCode 					IN OUT NUMBER );

PROCEDURE U_DOSCURRENCY(
   nDosId      					IN     DOSCURRENCY.DOSID%TYPE,
   nDcuOrdre   					IN     DOSCURRENCY.DCUORDRE%TYPE,
   sDevCode    					IN     DOSCURRENCY.DEVCODE%TYPE,
   dtDcuDtBeg  					IN     DOSCURRENCY.DCUDTBEG%TYPE,
   dtDcuDtEnd  					IN     DOSCURRENCY.DCUDTEND%TYPE,
   nDcuScale   					IN     DOSCURRENCY.DCUSCALE%TYPE,
   sDcuTarget  					IN	   DOSCURRENCY.DCUTARGET%TYPE,
   sDcuRoundingMethod			IN	   DOSCURRENCY.DCUROUNDINGMETHOD%TYPE,
   nDcumtirminimalRounding  	IN	   DOSCURRENCY.DCUMTIRMINIMALROUNDING%TYPE,
   nDcumtirlumpRounding  		IN	   DOSCURRENCY.DCUMTIRLUMPROUNDING%TYPE,
   nDcumtfloorinterestRounding  IN	   DOSCURRENCY.DCUMTFLOORINTERESTROUNDING%TYPE,
   nDcumtlumpinterestRounding  	IN	   DOSCURRENCY.DCUMTLUMPINTERESTROUNDING%TYPE,
   nDacOrdre  					IN	   DOSCURRENCY.DACORDRE%TYPE,
   nFxfId                       IN     DOSCURRENCY.FXFID%TYPE,
   nReturnCode 					IN OUT NUMBER );

PROCEDURE I_DOSCURVALUE(
	nDosId          IN     DOSCURVALUE.DOSID%TYPE,
	nDcuOrdre       IN     DOSCURVALUE.DCUORDRE%TYPE,
	nDcvOrdre       IN     DOSCURVALUE.DCVORDRE%TYPE,
	sDcvChangeType  IN     DOSCURVALUE.DCVCHANGETYPE%TYPE,
	dtDcvDtValue    IN     DOSCURVALUE.DCVDTVALUE%TYPE,
	nDcvValue       IN     DOSCURVALUE.DCVVALUE%TYPE,
	nDcvFlagUpdated IN     DOSCURVALUE.DCVFLAGUPDATED%TYPE,
	nCreId          IN     DOSCURVALUE.CREID%TYPE,
    nDcvMargin  	IN     DOSCURVALUE.DCVMARGIN%TYPE,
	sDcvDateReference     IN     DOSCURVALUE.DCVDATEREFERENCE%TYPE,
	sDcvPeriod      IN     DOSCURVALUE.DCVPERIOD%TYPE,
	nDcvMultiple    IN     DOSCURVALUE.DCVMULTIPLE%TYPE,
	sDcvShiftType   IN     DOSCURVALUE.DCVSHIFTTYPE%TYPE,
	nDcvShiftValue  IN     DOSCURVALUE.DCVSHIFTVALUE%TYPE,
	dtDcvDtEnd IN     DOSCURVALUE.DCVDTEND%TYPE,
   nReturnCode     IN OUT NUMBER );

PROCEDURE U_DOSCURVALUE(
    nDosId          IN     DOSCURVALUE.DOSID%TYPE,
    nDcuOrdre       IN     DOSCURVALUE.DCUORDRE%TYPE,
    nDcvOrdre       IN     DOSCURVALUE.DCVORDRE%TYPE,
    sDcvChangeType  IN     DOSCURVALUE.DCVCHANGETYPE%TYPE,
    dtDcvDtValue    IN     DOSCURVALUE.DCVDTVALUE%TYPE,
    nDcvValue       IN     DOSCURVALUE.DCVVALUE%TYPE,
    nDcvFlagUpdated IN     DOSCURVALUE.DCVFLAGUPDATED%TYPE,
    nCreId          IN     DOSCURVALUE.CREID%TYPE,
    nDcvMargin  	IN     DOSCURVALUE.DCVMARGIN%TYPE,
	sDcvDateReference     IN     DOSCURVALUE.DCVDATEREFERENCE%TYPE,
	sDcvPeriod      IN     DOSCURVALUE.DCVPERIOD%TYPE,
	nDcvMultiple    IN     DOSCURVALUE.DCVMULTIPLE%TYPE,
	sDcvShiftType   IN     DOSCURVALUE.DCVSHIFTTYPE%TYPE,
	nDcvShiftValue  IN     DOSCURVALUE.DCVSHIFTVALUE%TYPE,
	dtDcvDtEnd IN     DOSCURVALUE.DCVDTEND%TYPE,
    nReturnCode     IN OUT NUMBER );

--PROCEDURE P_EVDAUTECLAT
--(
--  nCreId             CREVT.CREID%TYPE,
--  dtEffet            DOSFINANCE.DFIDTFINANCE%TYPE,
--  nDosId             DOSSIER.DOSID%TYPE,
--  aDosIdAut          NUMBER_ARRAY,
--  nMontant           IN NUMBER,
--  nReturnCode        IN OUT NUMBER
--);

PROCEDURE P_EVDAUTECLAT
(
  nCreId             CREVT.CREID%TYPE,
  dtEffet            DOSFINANCE.DFIDTFINANCE%TYPE,
  nDosId             DOSSIER.DOSID%TYPE,
  sDosIdAut          VARCHAR2,
  nMontant           IN NUMBER,
  nReturnCode        IN OUT NUMBER
);

PROCEDURE U_DOSACTADRESSE (
  nDosId                DOSACTADRESSE.DOSID%TYPE,
  nDaaOrdre             DOSACTADRESSE.DAAORDRE%TYPE,
  nDacOrdre             DOSACTADRESSE.DACORDRE%TYPE,
  nAadOrdre             DOSACTADRESSE.AADORDRE%TYPE,
  dtDaaDtDeb            DOSACTADRESSE.DAADTDEB%TYPE,
  dtDaaDtFin            DOSACTADRESSE.DAADTFIN%TYPE,
  nCreId                DOSACTADRESSE.CREID%TYPE,
  nReturnCode           IN OUT NUMBER
  );

PROCEDURE I_DOSCOVENANT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	dtDcoDtBeg	IN DOSCOVENANT.DCODTBEG%TYPE,
	dtDcoDtEnd	IN DOSCOVENANT.DCODTEND%TYPE,
	nCreId		IN DOSCOVENANT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER);

PROCEDURE U_DOSCOVENANT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	dtDcoDtBeg	IN DOSCOVENANT.DCODTBEG%TYPE,
	dtDcoDtEnd	IN DOSCOVENANT.DCODTEND%TYPE,
	nCreId		IN DOSCOVENANT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER);

 PROCEDURE D_DOSCOVENANT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nReturnCode	IN OUT NUMBER);

PROCEDURE I_DOSCOVRESULT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nDcrOrdre	IN DOSCOVRESULT.DCRORDRE%TYPE,
	sDcrDesc	IN DOSCOVRESULT.DCRDESCRIPTION%TYPE,
	sDcrLongDesc	IN DOSCOVRESULT.DCRLONGDESCRIPTION%TYPE,
	sDcrStatus	IN DOSCOVRESULT.DCRSTATUS%TYPE,
	nTbaId		IN DOSCOVRESULT.TBAID%TYPE,
	nCreId		IN DOSCOVRESULT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER);

PROCEDURE U_DOSCOVRESULT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nDcrOrdre	IN DOSCOVRESULT.DCRORDRE%TYPE,
	sDcrDesc	IN DOSCOVRESULT.DCRDESCRIPTION%TYPE,
	sDcrLongDesc	IN DOSCOVRESULT.DCRLONGDESCRIPTION%TYPE,
	sDcrStatus	IN DOSCOVRESULT.DCRSTATUS%TYPE,
	nTbaId		IN DOSCOVRESULT.TBAID%TYPE,
	nCreId		IN DOSCOVRESULT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER);

PROCEDURE D_DOSCOVRESULT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nDcrOrdre	IN DOSCOVRESULT.DCRORDRE%TYPE,
	nReturnCode	IN OUT NUMBER);

PROCEDURE I_DOSACTEUR (
  nDosId              DOSACTEUR.DOSID%TYPE,
  nActId              DOSACTEUR.ACTID%TYPE,
  sRolCode            DOSACTEUR.ROLCODE%TYPE,
  sRdeDelegCode       DOSACTEUR.RDEDELEGCODE%TYPE,
  nAcoOrdre           DOSACTEUR.ACOORDRE%TYPE,
  sTaxCode            DOSACTEUR.TAXCODE%TYPE,
  nRubId              DOSACTEUR.RUBID%TYPE,
  nTciId              DOSACTEUR.TCIID%TYPE,
  dtDacDtDeb          DOSACTEUR.DACDTDEB%TYPE,
  dtDacDtFin          DOSACTEUR.DACDTFIN%TYPE,
  sDacGrpFac          DOSACTEUR.DACGRPFAC%TYPE,
  nDacFlagCorrDoc     DOSACTEUR.DACFLAGCORRDOC%TYPE,
  nDacFlagIRFacture   DOSACTEUR.DACFLAGIRFACTURE%TYPE,
  nDacFlagIRChq       DOSACTEUR.DACFLAGIRCHQ%TYPE,
  nDacDelaiA          DOSACTEUR.DACDELAIA%TYPE,
  nDacDelaiE          DOSACTEUR.DACDELAIE%TYPE,
  nDacFacAvance       DOSACTEUR.DACFACAVANCE%TYPE,
  sDacArrondi         DOSACTEUR.DACARRONDI%TYPE,
  sDacComment         DOSACTEUR.DACCOMMENT%TYPE,
  sDacRefCli          DOSACTEUR.DACREFCLI%TYPE,
  nDacDgTaux          DOSACTEUR.DACDGTAUX%TYPE,
  nDacDescripBien     DOSACTEUR.DACDESCRIPBIEN%TYPE,
  nDacOrdre           DOSACTEUR.DACORDRE%TYPE,
  nDacOrdreDelegant   DOSACTEUR.DACORDREDELEGANT%TYPE,
  nActIdGestion            DOSACTEUR.ACTID%TYPE,
  nCreId                   DOSACTEUR.CREID%TYPE,
  nDacMtIrMinimal          DOSACTEUR.DACMTIRMINIMAL%TYPE,
  nDacMtIrForfait          DOSACTEUR.DACMTIRFORFAIT%TYPE,
  nDacTxIrPlancher         DOSACTEUR.DACTXIRPLANCHER%TYPE,
  nDacTxIrPlafond          DOSACTEUR.DACTXIRPLAFOND%TYPE,
  nDacOrdreRemplace        DOSACTEUR.DACORDREREMPLACE%TYPE,
  --bd10102000
  nDacIrMarge              DOSACTEUR.DACIRMARGE%TYPE,
  nDacTxIrFixe             DOSACTEUR.DACTXIRFIXE%TYPE,
  nDacNbMoisDg             DOSACTEUR.DACNBMOISDG%TYPE,
  nDacQuotePartDg          DOSACTEUR.DACQUOTEPARTDG%TYPE,
  nDacMtDg                 DOSACTEUR.DACMTDG%TYPE,
  nDacFlagRevisableDg      DOSACTEUR.DACFLAGREVISABLEDG%TYPE,
  nDacFlagPalierDg         DOSACTEUR.DACFLAGPALIERDG%TYPE,
  nDacFlagLoyTtcDg         DOSACTEUR.DACFLAGLOYTTCDG%TYPE,
  nDacFtvIdPlafond         DOSACTEUR.FTVIDPLAFOND%TYPE,           --LG 12112002
  nDacFtvIdPlancher        DOSACTEUR.FTVIDPLANCHER%TYPE,
  sDacMotifNonRelance      DOSACTEUR.DACMOTIFNONRELANCE%TYPE,
  nDacPctIrForfait         DOSACTEUR.DACPCTIRFORFAIT%TYPE,
  nDacPctCommissionPrevu   DOSACTEUR.DACPCTCOMMISSIONPREVUE%TYPE,
  nDacTypeDelai            DOSACTEUR.DACTYPEDELAI%TYPE,
  nDacNbExFac              DOSACTEUR.DACNBEXFAC%TYPE,
  nDacFlagIRNonReverse     DOSACTEUR.DACFLAGIRNONREVERSE%TYPE,    -- CV-13062005 FSA-14373 SG : Passage v3.47
  sDacManqueAPayer		     DOSACTEUR.DACMANQUEAPAYER%TYPE,		--ALA Waterfall d1
  sDacTropPercu			       DOSACTEUR.DACTROPPERCU%TYPE,			--ALA Waterfall d1
  nDosIdCapitalization	   DOSACTEUR.DOSIDCAPITALIZATION%TYPE,	--ALA Waterfall d1
  nDruOrdreCapitalization  DOSACTEUR.DRUORDRECAPITALIZATION%TYPE,--ALA Waterfall d1
  nRubIdTropPercu		       DOSACTEUR.RUBIDTROPPERCU%TYPE,		--ALA Waterfall d1
  sDacEmailFac             DOSACTEUR.DACEMAILFAC%TYPE,
  sDacEnvoiNotice          DOSACTEUR.DACENVOINOTICE%TYPE,
  sDacQpMethodeRemise 	   DOSACTEUR.DACQPMETHODEREMISE%TYPE,
  nManId							     DOSACTEUR.MANID%TYPE,
  nDacFlagNomProf          DOSACTEUR.DACFLAGNONPROF%TYPE,		--ALA 020507
  nDacMtFloorInterest      DOSACTEUR.DACMTFLOORINTEREST%TYPE,
  nDacMtLumpInterest       DOSACTEUR.DACMTLUMPINTEREST%TYPE,
  nDacPctLumpInterest      DOSACTEUR.DACPCTLUMPINTEREST%TYPE,
  nDacFixedDay    	       	DOSACTEUR.DACFIXEDDAY%TYPE,
  sDacinvoicemethod			DOSACTEUR.DACINVOICEMETHOD%TYPE,
  sDacreftaxfree			DOSACTEUR.DACREFTAXFREE%TYPE,
  dtDacdttaxfreeagreement	DOSACTEUR.DACDTTAXFREEAGREEMENT%TYPE,
  dtDacdttaxfreebegin		DOSACTEUR.DACDTTAXFREEBEGIN%TYPE,
  sDactypenoremind			DOSACTEUR.DACTYPENOREMIND%TYPE,
  dtDacdtendnoremind		DOSACTEUR.DACDTENDNOREMIND%TYPE,
  nReturnCode  IN OUT NUMBER );

PROCEDURE P_EVVENTETOTALE (
   nDosId         IN     DOSSIER.DOSID%TYPE,
   nActId         IN     DOSSIER.ACTID%TYPE,
   nCreId         IN OUT NUMBER,
   dtEffet        IN     DATE,
   nVente         IN     NUMBER,
   nPVF           IN     NUMBER,
   sDevCode       IN     DOSSIER.DEVCODE%TYPE,     --bd311001
   nImaId         IN     NUMBER,
   dtCroComptable IN     CRO.CRODTCOMPTABLE%TYPE,
   nCro           IN 	 NUMBER,
   sTcrCode       IN     TCRO.TCRCODE%TYPE,
   nReturnCode    IN OUT NUMBER );

PROCEDURE P_EVPROFOR
 (
   nDosId         IN     DOSSIER.DOSID%TYPE,
   nActId         IN     DOSSIER.ACTID%TYPE,
   nCreId         IN OUT NUMBER,
   dtEffet        IN     DATE,
   nVente         IN     NUMBER,
   nPVF           IN     NUMBER,
   sDevCode       IN     DOSSIER.DEVCODE%TYPE,     --bd311001
   nImaId         IN     NUMBER,
   dtCroComptable IN     CRO.CRODTCOMPTABLE%TYPE,
   nCro           IN 	 NUMBER,
   sTcrCode       IN     TCRO.TCRCODE%TYPE,
   nReturnCode    IN OUT NUMBER );


PROCEDURE P_EVRESILIATION (
   nDosId               IN DOSSIER.DOSID%TYPE,
   nActId               IN DOSSIER.ACTID%TYPE,
   nCreId	       	IN OUT NUMBER,
   dtEffet              IN DATE,
   nVente               IN NUMBER,
   nRebut               IN NUMBER,
   nImaId               IN NUMBER,
   sDevCode 			IN CREVT.DEVCODE%TYPE,
   nReturnCode		IN OUT NUMBER);

PROCEDURE P_EVFINNORMALE (
   nDosId         IN     DOSSIER.DOSID%TYPE,
   nActId         IN     DOSSIER.ACTID%TYPE,
   nCreId         IN OUT NUMBER,
   dtEffet        IN     DATE,
   nVente         IN     NUMBER,
   nPVF           IN     NUMBER,
   nRebut         IN     NUMBER,
   nImaId         IN     NUMBER,
   dtCroComptable IN     CRO.CRODTCOMPTABLE%TYPE,
   sDevCode 	  IN	 CREVT.DEVCODE%TYPE,
   sTcrCode       IN OUT CRO.TCRCODE%TYPE,
   nReturnCode    IN OUT NUMBER );

PROCEDURE I_DOSRUBECHEANCIER (
  nDosId DOSRUBECHEANCIER.DOSID%TYPE,
  nDruOrdre DOSRUBECHEANCIER.DRUORDRE%TYPE,
  dtDreDtEch DOSRUBECHEANCIER.DREDTECH%TYPE,
  sDreType DOSRUBECHEANCIER.DRETYPE%TYPE,
  nDreTaux DOSRUBECHEANCIER.DRETAUX%TYPE,
  nDreMtAmo DOSRUBECHEANCIER.DREMTAMO%TYPE,
  nDreMtIndexation DOSRUBECHEANCIER.DREMTINDEXATION%TYPE,
  nDreMtEcF DOSRUBECHEANCIER.DREMTECF%TYPE,
  nDreMtTaxe DOSRUBECHEANCIER.DREMTTAXE%TYPE,
  nDreMtBase DOSRUBECHEANCIER.DREMTBASE%TYPE,
  dtDreDtDeb DOSRUBECHEANCIER.DREDTDEB%TYPE,
  dtDreDtFin DOSRUBECHEANCIER.DREDTFIN%TYPE,
  nDreMtAssiette DOSRUBECHEANCIER.DREMTASSIETTE%TYPE,
  nDreMtVrActual DOSRUBECHEANCIER.DREMTVRACTUAL%TYPE,
  nDreMtActual DOSRUBECHEANCIER.DREMTACTUAL%TYPE,
  nDreMtIntCompEns DOSRUBECHEANCIER.DREMTINTCOMPENS%TYPE,
  nDreMtIntDiffere DOSRUBECHEANCIER.DREMTINTDIFFERE%TYPE,
  nDreMtIntPeriode DOSRUBECHEANCIER.DREMTINTPERIODE%TYPE,
  nDreMtIntReporte DOSRUBECHEANCIER.DREMTINTREPORTE%TYPE,
  nDreMtIntSolde DOSRUBECHEANCIER.DREMTINTSOLDE%TYPE,
  nDreMtVers DOSRUBECHEANCIER.DREMTVERS%TYPE,
  nDreNum DOSRUBECHEANCIER.DRENUM%TYPE,
  nDreOrdre DOSRUBECHEANCIER.DREORDRE%TYPE,
  nDreTauxPrefixe DOSRUBECHEANCIER.DRETAUXPREFIXE%TYPE,
  nDreMtCumulCC DOSRUBECHEANCIER.DREMTCUMULCC%TYPE,
  nDreMtIntCC DOSRUBECHEANCIER.DREMTINTCC%TYPE,
  nDreMtSoldeHtCC DOSRUBECHEANCIER.DREMTSOLDEHTCC%TYPE,
  nDreMtSoldeTvaCC DOSRUBECHEANCIER.DREMTSOLDETVACC%TYPE,
  nDrePalNum DOSRUBECHEANCIER.DREPALNUM%TYPE,
  nDreSaiNum DOSRUBECHEANCIER.DRESAINUM%TYPE,
  nDrfOrdre DOSRUBECHEANCIER.DRFORDRE%TYPE,
  nFacId DOSRUBECHEANCIER.FACID%TYPE,
  nDepId DOSRUBECHEANCIER.DEPID%TYPE,
  nFliOrdre DOSRUBECHEANCIER.FLIORDRE%TYPE,
  nDliOrdre DOSRUBECHEANCIER.DLIORDRE%TYPE,
  nDemId DOSRUBECHEANCIER.DEMID%TYPE,
  nDreMtIntGageCapitalise DOSRUBECHEANCIER.DREMTINTGAGECAPITALISE%TYPE,
  nCreId                  DOSRUBECHEANCIER.CREID%TYPE,
  nDreTauxNominal		DOSRUBECHEANCIER.DRETAUXNOMINAL%TYPE,
  nReturnCode IN OUT NUMBER
  );

PROCEDURE U_DOSRUBECHEANCIER (
  nDosId DOSRUBECHEANCIER.DOSID%TYPE,
  nDruOrdre DOSRUBECHEANCIER.DRUORDRE%TYPE,
  dtDreDtEch DOSRUBECHEANCIER.DREDTECH%TYPE,
  sDreType DOSRUBECHEANCIER.DRETYPE%TYPE,
  nDreTaux DOSRUBECHEANCIER.DRETAUX%TYPE,
  nDreMtAmo DOSRUBECHEANCIER.DREMTAMO%TYPE,
  nDreMtIndexation DOSRUBECHEANCIER.DREMTINDEXATION%TYPE,
  nDreMtEcF DOSRUBECHEANCIER.DREMTECF%TYPE,
  nDreMtTaxe DOSRUBECHEANCIER.DREMTTAXE%TYPE,
  nDreMtBase DOSRUBECHEANCIER.DREMTBASE%TYPE,
  dtDreDtDeb DOSRUBECHEANCIER.DREDTDEB%TYPE,
  dtDreDtFin DOSRUBECHEANCIER.DREDTFIN%TYPE,
  nDreMtAssiette DOSRUBECHEANCIER.DREMTASSIETTE%TYPE,
  nDreMtVrActual DOSRUBECHEANCIER.DREMTVRACTUAL%TYPE,
  nDreMtActual DOSRUBECHEANCIER.DREMTACTUAL%TYPE,
  nDreMtIntCompEns DOSRUBECHEANCIER.DREMTINTCOMPENS%TYPE,
  nDreMtIntDiffere DOSRUBECHEANCIER.DREMTINTDIFFERE%TYPE,
  nDreMtIntPeriode DOSRUBECHEANCIER.DREMTINTPERIODE%TYPE,
  nDreMtIntReporte DOSRUBECHEANCIER.DREMTINTREPORTE%TYPE,
  nDreMtIntSolde DOSRUBECHEANCIER.DREMTINTSOLDE%TYPE,
  nDreMtVers DOSRUBECHEANCIER.DREMTVERS%TYPE,
  nDreNum DOSRUBECHEANCIER.DRENUM%TYPE,
  nDreOrdre DOSRUBECHEANCIER.DREORDRE%TYPE,
  nDreTauxPrefixe DOSRUBECHEANCIER.DRETAUXPREFIXE%TYPE,
  nDreMtCumulCC DOSRUBECHEANCIER.DREMTCUMULCC%TYPE,
  nDreMtIntCC DOSRUBECHEANCIER.DREMTINTCC%TYPE,
  nDreMtSoldeHtCC DOSRUBECHEANCIER.DREMTSOLDEHTCC%TYPE,
  nDreMtSoldeTvaCC DOSRUBECHEANCIER.DREMTSOLDETVACC%TYPE,
  nDrePalNum DOSRUBECHEANCIER.DREPALNUM%TYPE,
  nDreSaiNum DOSRUBECHEANCIER.DRESAINUM%TYPE,
  nDrfOrdre DOSRUBECHEANCIER.DRFORDRE%TYPE,
  nFacId DOSRUBECHEANCIER.FACID%TYPE,
  nDepId DOSRUBECHEANCIER.DEPID%TYPE,
  nDreMtEchActual DOSRUBECHEANCIER.DREMTECHACTUAL%TYPE,
  nDreMtSoldeIndCC DOSRUBECHEANCIER.DREMTSOLDEINDCC%TYPE,
  nFliOrdre DOSRUBECHEANCIER.FLIORDRE%TYPE,
  nDliOrdre DOSRUBECHEANCIER.DLIORDRE%TYPE,
  nDemId DOSRUBECHEANCIER.DEMID%TYPE,
  nDreMtIntGageCapitalise DOSRUBECHEANCIER.DREMTINTGAGECAPITALISE%TYPE,
  nCreId                  DOSRUBECHEANCIER.CREID%TYPE,
  nDreTauxNominal		DOSRUBECHEANCIER.DRETAUXNOMINAL%TYPE,
  nReturnCode IN OUT NUMBER
  );

PROCEDURE U_DOSRUBFLUX (
  nDosId DOSRUBFLUX.DOSID%TYPE,
  nDruOrdre DOSRUBFLUX.DRUORDRE%TYPE,
  nDrfOrdre DOSRUBFLUX.DRFORDRE%TYPE,
  sDrfPerception DOSRUBFLUX.DRFPERCEPTION%TYPE,
  nDrfNbPeriode DOSRUBFLUX.DRFNBPERIODE%TYPE,
  nDrfMultiple DOSRUBFLUX.DRFMULTIPLE%TYPE,
  nDrfPeriode DOSRUBFLUX.DRFPERIODE%TYPE,
  nDrfDtDeb DOSRUBFLUX.DRFDTDEB%TYPE,
  nDrfMt DOSRUBFLUX.DRFMT%TYPE,
  nDrfDtFin DOSRUBFLUX.DRFDTFIN%TYPE,
  nDrfFlagFinMois DOSRUBFLUX.DRFFLAGFINMOIS%TYPE,
  sDrfProgression DOSRUBFLUX.DRFPROGRESSION%TYPE,
  nDrfCoefProg DOSRUBFLUX.DRFCOEFPROG%TYPE,
  nDrfFrequence DOSRUBFLUX.DRFFREQUENCE%TYPE,
  nDrfNbLoyPer DOSRUBFLUX.DRFNBLOYPER%TYPE,
  nFlagJourFixe DOSRUBFLUX.DRFFLAGJOURFIXE%TYPE,
  nDrfNbJDecale DOSRUBFLUX.DRFNBJDECALE%TYPE,
  nDrfNbSaison DOSRUBFLUX.DRFNBSAISON%TYPE,
  nDrfTxAssiette DOSRUBFLUX.DRFTXASSIETTE%TYPE,
  sDrfIntPerception DOSRUBFLUX.DRFINTPERCEPTION%TYPE,
  nDrfIntNbPeriode DOSRUBFLUX.DRFINTNBPERIODE%TYPE,
  nDrfIntPeriode DOSRUBFLUX.DRFINTPERIODE%TYPE,
  nDrfIntMultiple DOSRUBFLUX.DRFINTMULTIPLE%TYPE,
  nDrfFranchise DOSRUBFLUX.DRFFRANCHISE%TYPE,
  dtDrfDtIntDiffere DOSRUBFLUX.DRFDTINTDIFFERE%TYPE,
  nDrfIntNbJDecale DOSRUBFLUX.DRFINTNBJDECALE%TYPE,
  nDrfFlagIntJourFixe DOSRUBFLUX.DRFFLAGINTJOURFIXE%TYPE,
  nDrfFlagIntFinMois DOSRUBFLUX.DRFFLAGINTFINMOIS%TYPE,
  sDrfTypeAmoPer DOSRUBFLUX.DRFTYPEAMOPER%TYPE,
  nTrbId            DOSRUBFLUX.TRBID%TYPE,
  nDrfFlagLendemain           DOSRUBFLUX.DRFFLAGLENDEMAIN%TYPE,
  nDrfFlagChangeMoisEcheance  DOSRUBFLUX.DRFFLAGCHANGEMOISECHEANCE%TYPE,
  sDrfGracePeriodType    DOSRUBFLUX.DRFGRACEPERIODTYPE%TYPE,
  nDrfGracePeriodInDays   DOSRUBFLUX.DRFGRACEPERIODINDAYS%TYPE,
  dtDrfDtIntBeg DOSRUBFLUX.DRFDTINTBEG%TYPE,
  dtDrfDtIntEnd DOSRUBFLUX.DRFDTINTEND%TYPE,
  nReturnCode IN OUT NUMBER
  );

PROCEDURE I_DOSRUBFLUX ( nDosId   DOSRUBFLUX.DOSID%TYPE,
     nDruOrdre   DOSRUBFLUX.DRUORDRE%TYPE,
     nDrfOrdre   DOSRUBFLUX.DRFORDRE%TYPE,
     sDrfPerception  DOSRUBFLUX.DRFPERCEPTION%TYPE,
     nDrfNbPeriode  DOSRUBFLUX.DRFNBPERIODE%TYPE,
     nDrfMultiple  DOSRUBFLUX.DRFMULTIPLE%TYPE,
     nDrfPeriode   DOSRUBFLUX.DRFPERIODE%TYPE,
     nDrfDtDeb   DOSRUBFLUX.DRFDTDEB%TYPE,
     nDrfMt   DOSRUBFLUX.DRFMT%TYPE,
     nDrfDtFin   DOSRUBFLUX.DRFDTFIN%TYPE,
     nDrfFlagFinMois  DOSRUBFLUX.DRFFLAGFINMOIS%TYPE,
     sDrfProgression  DOSRUBFLUX.DRFPROGRESSION%TYPE,
     nDrfCoefProg  DOSRUBFLUX.DRFCOEFPROG%TYPE,
     nDrfFrequence  DOSRUBFLUX.DRFFREQUENCE%TYPE,
     nDrfNbLoyPer  DOSRUBFLUX.DRFNBLOYPER%TYPE,
     nFlagJourFixe  DOSRUBFLUX.DRFFLAGJOURFIXE%TYPE,
     nDrfNbJDecale  DOSRUBFLUX.DRFNBJDECALE%TYPE,
     nDrfNbSaison  DOSRUBFLUX.DRFNBSAISON%TYPE,
     nDrfTxAssiette  DOSRUBFLUX.DRFTXASSIETTE%TYPE,
     sDrfIntPerception  DOSRUBFLUX.DRFINTPERCEPTION%TYPE,
     nDrfIntNbPeriode  DOSRUBFLUX.DRFINTNBPERIODE%TYPE,
     nDrfIntPeriode  DOSRUBFLUX.DRFINTPERIODE%TYPE,
     nDrfIntMultiple  DOSRUBFLUX.DRFINTMULTIPLE%TYPE,
     nDrfFranchise  DOSRUBFLUX.DRFFRANCHISE%TYPE,
     dtDrfDtIntDiffere  DOSRUBFLUX.DRFDTINTDIFFERE%TYPE,
     nDrfIntNbJDecale  DOSRUBFLUX.DRFINTNBJDECALE%TYPE,
     nDrfFlagInt   DOSRUBFLUX.DRFFLAGINTJOURFIXE%TYPE,
     nDrfFlagIntFinMois DOSRUBFLUX.DRFFLAGINTFINMOIS%TYPE,
     sDrfTypeAmoPer    DOSRUBFLUX.DRFTYPEAMOPER%TYPE,
     nTrbId            DOSRUBFLUX.TRBID%TYPE,
     nDrfFlagLendemain    DOSRUBFLUX.DRFFLAGLENDEMAIN%TYPE,
     nDrfFlagChangeMoisEcheance DOSRUBFLUX.DRFFLAGCHANGEMOISECHEANCE%TYPE,
     sDrfGracePeriodType    DOSRUBFLUX.DRFGRACEPERIODTYPE%TYPE,
     nDrfGracePeriodInDays   DOSRUBFLUX.DRFGRACEPERIODINDAYS%TYPE,
     dtDrfDtIntBeg DOSRUBFLUX.DRFDTINTBEG%TYPE,
     dtDrfDtIntEnd DOSRUBFLUX.DRFDTINTEND%TYPE,
     nReturnCode   IN OUT NUMBER);

PROCEDURE I_DOSRUBTAX(
     nDOSID     IN DOSRUBTAX.DOSID%TYPE
    ,nDRUORDRE  IN DOSRUBTAX.DRUORDRE%TYPE
    ,sTAXCODE   IN DOSRUBTAX.TAXCODE%TYPE
    ,nDRTTXRATE IN DOSRUBTAX.DRTTXRATE%TYPE
	,nReturnCode IN OUT NUMBER);

PROCEDURE U_DOSRUBTAX(
     nDOSID     IN DOSRUBTAX.DOSID%TYPE
    ,nDRUORDRE  IN DOSRUBTAX.DRUORDRE%TYPE
    ,sTAXCODE   IN DOSRUBTAX.TAXCODE%TYPE
    ,nDRTTXRATE IN DOSRUBTAX.DRTTXRATE%TYPE
	,nReturnCode IN OUT NUMBER);

PROCEDURE D_DOSRUBTAX(
     nDOSID     IN DOSRUBTAX.DOSID%TYPE
    ,nDRUORDRE  IN DOSRUBTAX.DRUORDRE%TYPE
    ,sTAXCODE   IN DOSRUBTAX.TAXCODE%TYPE
	,nReturnCode IN OUT NUMBER);

PROCEDURE I_PTP
    (
     nDOSID     IN DOSSIER.DOSID%TYPE
    ,nACTID	    IN ACTEUR.ACTID%TYPE
    ,sCOMMENT   IN DOSSIER.DOSCOMMENT%TYPE
	,sUTICODE   IN UTILISATEUR.UTICODE%TYPE
	,nCREID 	IN CREVT.CREID%TYPE
	,dtEvent	IN DATE
	,nReturnCode   IN OUT NUMBER);

PROCEDURE I_DOSRUBECHMONTHEND	(
	nDosId 			IN DOSRUBECHMONTHEND.DOSID%TYPE,
	nDruOrdre 		IN DOSRUBECHMONTHEND.DRUORDRE%TYPE,
	nDrmOrdre 		IN DOSRUBECHMONTHEND.DRMORDRE%TYPE,
	dtDrmDtech 		IN DOSRUBECHMONTHEND.DRMDTECH%TYPE,
	sDrmCode 		IN DOSRUBECHMONTHEND.DRMCODE%TYPE,
	nDrmmTecf 		IN DOSRUBECHMONTHEND.DRMMTECF%TYPE,
	nDrmmTamo 		IN DOSRUBECHMONTHEND.DRMMTAMO%TYPE,
	nDrmmtInteret 	IN DOSRUBECHMONTHEND.DRMMTINTERET%TYPE,
	nDrmmtSumInteret IN DOSRUBECHMONTHEND.DRMMTSUMINTERET%TYPE,
	nDrmmtBase 		IN DOSRUBECHMONTHEND.DRMMTBASE%TYPE,
	nDrmmtBalance 	IN DOSRUBECHMONTHEND.DRMMTBALANCE%TYPE,
	nReturnCode   	IN OUT NUMBER
    );

PROCEDURE U_DOSRUBECHMONTHEND	(
	nDosId 			IN DOSRUBECHMONTHEND.DOSID%TYPE,
	nDruOrdre 		IN DOSRUBECHMONTHEND.DRUORDRE%TYPE,
	nDrmOrdre 		IN DOSRUBECHMONTHEND.DRMORDRE%TYPE,
	dtDrmDtech 		IN DOSRUBECHMONTHEND.DRMDTECH%TYPE,
	sDrmCode 		IN DOSRUBECHMONTHEND.DRMCODE%TYPE,
	nDrmmTecf 		IN DOSRUBECHMONTHEND.DRMMTECF%TYPE,
	nDrmmTamo 		IN DOSRUBECHMONTHEND.DRMMTAMO%TYPE,
	nDrmmtInteret 	IN DOSRUBECHMONTHEND.DRMMTINTERET%TYPE,
	nDrmmtSumInteret IN DOSRUBECHMONTHEND.DRMMTSUMINTERET%TYPE,
	nDrmmtBase 		IN DOSRUBECHMONTHEND.DRMMTBASE%TYPE,
	nDrmmtBalance 	IN DOSRUBECHMONTHEND.DRMMTBALANCE%TYPE,
	nReturnCode   	IN OUT NUMBER
	);

PROCEDURE D_DOSRUBECHMONTHEND	(
	nDosId 			IN DOSRUBECHMONTHEND.DOSID%TYPE,
	nDruOrdre 		IN DOSRUBECHMONTHEND.DRUORDRE%TYPE,
	nDrmOrdre 		IN DOSRUBECHMONTHEND.DRMORDRE%TYPE,
    nReturnCode IN OUT NUMBER
    );

PROCEDURE P_EVENGA3 (
   nDosId               IN DOSSIER.DOSID%TYPE,
   nActId               IN DOSSIER.ACTID%TYPE,
   nCreId	       		IN OUT NUMBER,
   dtEffet              IN DATE,
   nVarEngQp            IN NUMBER,
   nImaId         		IN NUMBER,
   sUgeCode  			IN TOPPARAM.UGECODE%TYPE,
   nReturnCode			IN OUT NUMBER
	);
PROCEDURE P_COLLATERALROLLOVER (
   nDosId              DOSSIER.DOSID%TYPE,
   nDacOrdre           DOSACTGARANTIE.DACORDRE%TYPE,
   nDagOrdre           DOSACTGARANTIE.DAGORDRE%TYPE,
   dtRollOverDate		DATE,
   nCreId				CREVT.CREID%TYPE,
   nType				NUMBER, -- 1 for renew or 0 for stop
   nReturnCode			IN OUT NUMBER);

PROCEDURE P_VARFIN_IMADOSSIER (
	nDosId 		DOSSIER.DOSID%TYPE,
	nImaId		IMADOSSIER.IMAID%TYPE,
	nCreId		CREVT.CREID%TYPE,
	dtEffet		DATE,
	nReturnCode	IN OUT NUMBER);

END PAV4_UPDATEDOSSIER;
-------------------------------------------------------------------------------
/

CREATE OR REPLACE PACKAGE BODY TRSGMPRD.PAV4_UPDATEDOSSIER AS
-- Declaration des exceptions a trapper

ERR_CHILD_FOUND          EXCEPTION;
ERR_PARENT_NOT_FOUND     EXCEPTION;
ERR_NULL_MANDATORY_KEY   EXCEPTION;
ERR_I_NULL_MANDATORY_KEY EXCEPTION;
ERR_U_NULL_MANDATORY_KEY EXCEPTION;
LINE_LOCKED              EXCEPTION;

-- Association des exceptions avec les erreurs ORACLE

PRAGMA EXCEPTION_INIT( ERR_PARENT_NOT_FOUND    , -2291 );
PRAGMA EXCEPTION_INIT( ERR_CHILD_FOUND         , -2292 );
PRAGMA EXCEPTION_INIT( ERR_NULL_MANDATORY_KEY  , -1400 );
PRAGMA EXCEPTION_INIT( ERR_I_NULL_MANDATORY_KEY, -1400 );
PRAGMA EXCEPTION_INIT( ERR_U_NULL_MANDATORY_KEY, -1407 );

-- Association des exceptions avec les erreurs ORACLE
PRAGMA EXCEPTION_INIT( LINE_LOCKED, -54 );

-- Declaration des constantes de codes retours a renvoyer

ERR_CHILD_FOUND_CONST		constant integer := 1045;
ERR_PARENT_NOT_FOUND_CONST	constant integer := 1044;
ERR_DUP_VAL_ON_INDEX_CONST	constant integer := 1046;
ERR_DUP_VAL_DOSSIER_CONST	constant integer := 1047;
ERR_NULL_MANDATORY_KEY_CONST	constant integer := 1055;
ERR_NO_ROWS_CONST               constant integer := 1;

ERR_PARENT_ACN_FOUND_CONST constant integer := 6417;
ERR_DUP_VAL_ON_ACN_CONST  constant integer := 7326;
ERR_VAL_CONTACT_NULL_CONST    constant integer := 1056;


EN_ADMINISTRATIF_M_KEY_CONST	        constant integer := 1791;
EN_DOSSIER_M_KEY_CONST	                constant integer := 1792;

EP_LKDOSUTITSM_NF						CONSTANT INTEGER := 8167;	-- 1044;
EP_DOSEXP_NF	        				CONSTANT INTEGER := 8168;	-- 1044;
EP_CREDIT_NF	        				CONSTANT INTEGER := 8169;	-- 1044;
EP_IMMOBILIER_NF						CONSTANT INTEGER := 8170;	-- 1044;
EP_ECHEANCIER_NF						CONSTANT INTEGER := 8171;	-- 1044;
EP_ECHECHELLE_NF						CONSTANT INTEGER := 11248;
EP_L1DOSRUBRIQUE_NF					CONSTANT INTEGER := 8172;	-- ;
EP_L2DOSRUBRIQUE_NF					CONSTANT INTEGER := 8173;	-- ;
EP_LKDOSRUBITRRUB_NF					CONSTANT INTEGER := 8174;	--;
EP_LKDOSRUBPOOACT_NF					CONSTANT INTEGER := 8175;
EP_DOSPRIORITY_NF                CONSTANT INTEGER := 10028;
EP_DOSRUBTAUXECHVALEUR_NF        CONSTANT INTEGER := 10044;


EN_DOSMODEINDEX_M_KEY_CONST		CONSTANT INTEGER := 8153; -- 1055
EN_LKDOSUTITSM_M_KEY_CONST	      CONSTANT INTEGER := 8154;	-- 1055;
EN_DOSEXP_M_KEY_CONST	         CONSTANT INTEGER := 8155;	-- 1055;
EN_POOACTEUR_M_KEY_CONST	      CONSTANT INTEGER := 8156;	-- 1055;
EN_DOSSIERCREDIT_M_KEY_CONST	   CONSTANT INTEGER := 8157;	-- 1055;
EN_IMMOBILIER_M_KEY_CONST        CONSTANT INTEGER := 8158;	-- 1055;
EN_TXVAR_M_KEY_CONST	            CONSTANT INTEGER := 8159;	-- 1055;
EN_DOSPOOL_M_KEY_CONST	         CONSTANT INTEGER := 8160;	-- 1055;
EN_ECHEANCIER_M_KEY_CONST	      CONSTANT INTEGER := 8161;	-- 1055;
EN_ECHECHELLE_M_KEY_CONST	      CONSTANT INTEGER := 11429;
EN_L1DOSRUBRIQUE_M_KEY_CONST	   CONSTANT INTEGER := 8163;	-- 1055;
EN_L2DOSRUBRIQUE_M_KEY_CONST	   CONSTANT INTEGER := 8162;	-- 1055;
EN_LKDOSRUBITRRUB_M_KEY_CONST	   CONSTANT INTEGER := 8164;	-- 1055;
EN_LKDAGDRU_M_KEY_CONST          CONSTANT INTEGER := 8165;	-- 1055;
EN_LKDOSRUBPOOACT_M_KEY_CONST    CONSTANT INTEGER := 8166;	-- 1055;
EN_STATISTIQUE_M_KEY_CONST	        constant integer := 1793;
EN_DOSPHASE_M_KEY_CONST	                constant integer := 1794;
EN_PALIER_M_KEY_CONST	                constant integer := 1795;
EN_DOSRUBFLUX_M_KEY_CONST	        constant integer := 1796;
EN_DOSRUBAMOFISCAL_M_KEY_CONST	        constant integer := 1797;
EN_DOSRUBASSIETTE_M_KEY_CONST	        constant integer := 1798;
EN_DOSRACHAT_M_KEY_CONST	        constant integer := 10134;
EN_DOSRUBRIQUE_M_KEY_CONST	        constant integer := 1799;
EN_DOSRUBSAISON_M_KEY_CONST	        constant integer := 1800;
EN_DOSFINANCE_M_KEY_CONST	        constant integer := 1801;
EN_DOSACTEUR_M_KEY_CONST          	constant integer := 2694;
EN_DOSACTADRESSE_M_KEY_CONST	        constant integer := 1802;
EN_DEPOTGARANTIE_M_KEY_CONST	        constant integer := 1803;
EN_DOSACTPAIEMENT_M_KEY_CONST	        constant integer := 1804;
EN_DOSACTGARANTIE_M_KEY_CONST           CONSTANT INTEGER := 1805;
EN_DOSPRIORITY_M_KEY_CONST					 CONSTANT INTEGER := 10030;
EN_DRUTAUXECHVAL_M_KEY_CONST		 CONSTANT INTEGER := 10045;

ERR_DUP_DOSADMINISTRATIF_V     	constant integer := 1806;
ERR_DUP_DOSSIER_V              	constant integer := 1807;
ERR_DUP_DOSMODEINDEX_V         	constant integer := 1808;
ERR_DUP_LKDOSUTITSM_V	        constant integer := 8844;
ERR_DUP_DOSSTATISTIQUE_V       	constant integer := 1809;
ERR_DUP_DOSPHASE_V             	constant integer := 1810;
ERR_DUP_DOSEXP_V             	constant integer := 1046;
ERR_DUP_DOSPOOL_V              	constant integer := 1811;
ERR_DUP_POOACTEUR_V            	constant integer := 1811;
ERR_DUP_DOSSIERCREDIT_V        	constant integer := 1046;
ERR_DUP_DOSSIERIMMOBILIER_V    	constant integer := 1046;
ERR_DUP_DOSRUBFLUPALIER_V       constant integer := 1812;
ERR_DUP_DOSRUBFLUX_V           	constant integer := 1813;
ERR_DUP_DOSRUBAMOFISCAL_V      	constant integer := 1814;
ERR_DUP_DOSRUBASSIETTE_V       	constant integer := 1815;
ERR_DUP_DOSRACHAT_V       			constant integer := 10135;
ERR_DUP_DOSRUBECHEANCIER_V     	constant integer := 1046;
ERR_DUP_DOSRUBECHELLE_V     	constant integer := 1046;
ERR_DUP_DOSRUBRIQUE_V          	constant integer := 1816;
ERR_DUP_TXVAR_V                	constant integer := 1046;
ERR_DUP_DOSRUBSAISON_V	        	constant integer := 1817;
ERR_DUP_L1DOSRUBRIQUE_V        	constant integer := 1046;
ERR_DUP_L2DOSRUBRIQUE_V        	constant integer := 1874;
ERR_DUP_LKDOSRUBITRRUB_V       	constant integer := 4347;
ERR_DUP_LKDOSRUBPOOACT_V       	constant integer := 1046;
ERR_DUP_DOSFINANCE_V           	constant integer := 1818;
ERR_DUP_DOSACTEUR_V            	constant integer := 1819;
ERR_DUP_DOSACTADRESSE_V	        	constant integer := 1820;
ERR_DUP_DOSACTGARANTIE_V       	constant integer := 1821;
ERR_DUP_LKDAGDRU_V             	constant integer := 1046;
ERR_DUP_DOSACTDEPOTGARANTIE_V  	constant integer := 1822;
ERR_DUP_DOSACTPAIEMENT_V       	constant integer := 1823;
ERR_DUP_DOSPRIORITY_V				constant integer := 10029;
ERR_DUP_DOSRUBTAUXECHVALEUR_V		CONSTANT integer := 10046;

--ALA 010606
EP_I_DAPDETAIL_NF					constant integer := 9529;
EN_I_DAPDETAIL_M_KEY_CONST			constant integer := 9530;
ERR_I_DUP_DAPDETAIL_V				constant integer := 9531;
EP_U_DAPDETAIL_NF					constant integer := 9532;
EN_U_DAPDETAIL_M_KEY_CONST			constant integer := 9533;
ERR_U_DUP_DAPDETAIL_V				constant integer := 9534;
EC_DAPDETAIL_FC					constant integer := 9535;
--FIN ALA

EC_L1DOSRUBRIQUE_FC		constant integer := 1045;
EC_L2DOSRUBRIQUE_FC		constant integer := 1045;
EC_DOSRUBREVISION_FC		constant integer := 1045;
EC_DOSRUBASSIETTE_FC		constant integer := 1775;
EC_DOSRACHAT_FC		constant integer := 10132;
EC_DOSRUBECHEANCIER_FC		constant integer := 1776;
EC_DOSRUBECHECHELLE_FC		constant integer := 1776;
EC_DOSRUBSAISON_FC		constant integer := 1777;
EC_DOSRUBAMOFISCAL_FC		constant integer := 1778;
EC_DOSRUBFLUX_FC		constant integer := 1779;
EC_DOSRUBFLUPALIER_FC		constant integer := 1780;
EC_TXVAR_FC		        constant integer := 1045;
EC_LKDOSRUBPOOACT_FC		constant integer := 1045;
EC_DOSRUBRIQUE_FC		constant integer := 1781;
EC_DOSACTEUR_FC		        constant integer := 1782;
EC_DOSFINANCE_FC		constant integer := 1783;
EC_LKDOSUTITSM_FC		constant integer := 1045;
EC_DOSADMINISTRATIF_FC		constant integer := 1784;
EC_DOSPHASE_FC		        constant integer := 1786;
EC_DOSEXP_FC		        constant integer := 1045;
EC_DOSPOOL_FC		        constant integer := 1787;
EC_POOACTEUR_FC		        constant integer := 1788;
EC_DOSSTATISTIQUE_FC		constant integer := 1045;
EC_DOSMODEINDEX_FC		constant integer := 1789;
EC_DOSSIER_FC		        constant integer := 1790;
EC_LKDOSRUBITRRUB_FC            CONSTANT INTEGER := 1045;
EC_DOSDOUTEUX_FC                CONSTANT INTEGER := 1045;

EP_ADMINISTRATIF_NF     constant integer := 1824;
EP_DOSSIER_NF	        constant integer := 1825;
EP_DOSMODEINDEX_NF	constant integer := 1826;
EP_STATISTIQUE_NF	constant integer := 1827;
EP_DOSPHASE_NF	        constant integer := 1828;
EP_DOSPOOL_NF	        constant integer := 1829;
EP_POOACTEUR_NF	        constant integer := 1829;
EP_PALIER_NF	        constant integer := 1830;
EP_DOSRUBFLUX_NF	constant integer := 1831;
EP_DOSRUBAMOFISCAL_NF	constant integer := 1832;
EP_DOSRUBASSIETTE_NF	constant integer := 1833;
EP_DOSRACHAT_NF	constant integer := 10133;
EP_DOSRUBRIQUE_NF	constant integer := 1834;
EP_TXVAR_NF	        constant integer := 1835;
EP_SAISON_NF	        constant integer := 1836;
EP_DOSFINANCE_NF	constant integer := 1837;
EP_DOSACTEUR_NF	         constant integer := 1838;
EP_DOSACTADRESSE_NF	      constant integer := 1839;
EP_GARANTIE_NF	            constant integer := 1840;
EP_LKDAGDRU_NF	            constant integer := 1840;
EP_DEPOTGARANTIE_NF	      constant integer := 1841;
EP_PAIEMENT_NF	            constant integer := 1842;


-- Constante de mise a jour de la base pour DOSRUBMODEINDEX
EP_DOSRUBMODEINDEX_NF          CONSTANT INTEGER := 3038;
EN_DOSRUBMODEINDEX_M_KEY_CONST CONSTANT INTEGER := 3039;
ERR_DUP_DOSRUBMODEINDEX_V      CONSTANT INTEGER := 3040;
EC_DOSRUBMODEINDEX_FC          CONSTANT INTEGER := 3041;

-- evenement change company
ERR_MAJ_POOL                   CONSTANT INTEGER := 9448;
ERR_MAJ_FACTURE                CONSTANT INTEGER := 9449;
ERR_MAJ_DEPENSE                CONSTANT INTEGER := 9450;
ERR_MAJ_REGLEMENT              CONSTANT INTEGER := 9451;
ERR_RUBCODE_NO_FOUND           CONSTANT INTEGER := 80125;

-- DOSCURRENCY
ERR_PARENT_DCU_FOUND_CONST CONSTANT INTEGER := 10692;
ERR_CHILD_DCU_FOUND_CONST  CONSTANT INTEGER := 10693;
ERR_DUP_DCU_INDEX_CONST    CONSTANT INTEGER := 10694;
ERR_NULL_DCU_KEY_CONST     CONSTANT INTEGER := 10695;

-- DOSCURVALUE
ERR_PARENT_DCV_FOUND_CONST CONSTANT INTEGER := 10696;
ERR_CHILD_DCV_FOUND_CONST  CONSTANT INTEGER := 10697;
ERR_DUP_DCV_INDEX_CONST    CONSTANT INTEGER := 10698;
ERR_NULL_DCV_KEY_CONST     CONSTANT INTEGER := 10699;

ERR_CHILD_DCO_FOUND_CONST 	CONSTANT INTEGER := 11497;
ERR_PARENT_DCO_FOUND_CONST	CONSTANT INTEGER := 11496;
ERR_NULL_DCO_KEY_CONST		CONSTANT INTEGER := 1055;
ERR_DUP_DCO_INDEX_CONST 	CONSTANT INTEGER := 11499;
ERR_CHILD_DCOR_FOUND_CONST 	CONSTANT INTEGER := 11498;
ERR_PARENT_DCOR_FOUND_CONST CONSTANT INTEGER := 11496;
ERR_NULL_DCOR_KEY_CONST 	CONSTANT INTEGER := 1055;
ERR_DUP_DCOR_INDEX_CONST	CONSTANT INTEGER := 11499;

--DosRubTax
EP_DOSRUBTAX_NF CONSTANT INTEGER := 12308;
EN_DOSRUBTAX_M_KEY_CONST 	CONSTANT INTEGER := 1055;
ERR_DUP_DOSRUBTAX_V	CONSTANT INTEGER := 1046;

-- Fonctions I_Dossier et U_Dossier
PROCEDURE I_DOSSIER (
  nDosId                IN OUT DOSSIER.DOSID%TYPE,
  sDevCode              DOSSIER.DEVCODE%TYPE,
  nActId                DOSSIER.ACTID%TYPE,
  sTpgCode 			      DOSSIER.TPGCODE%TYPE,
  sTacCode 			      DOSSIER.TPGCODE%TYPE,
  sUtiCode 			      DOSSIER.UTICODE%TYPE,
  sDosNum 			      DOSSIER.DOSNUM%TYPE,
  sDosNom 			      DOSSIER.DOSNOM%TYPE,
  nDosAvenant 		      DOSSIER.DOSAVENANT%TYPE,
  sDosEtat		         DOSSIER.DOSETAT%TYPE,
  nDosDureeJour 		   DOSSIER.DOSDUREEJOUR%TYPE,
  nDosDureeMois 		   DOSSIER.DOSDUREEMOIS%TYPE,
  nDosDureeAn 		      DOSSIER.DOSDUREEAN%TYPE,
  nDosDureeActualJour   DOSSIER.DOSDUREEACTUALJOUR%TYPE,
  nDosDureeActualMois	DOSSIER.DOSDUREEACTUALMOIS%TYPE,
  nDosDureeActualAn 	   DOSSIER.DOSDUREEACTUALAN%TYPE,
  dtDosDtDeb			   DOSSIER.DOSDTDEB%TYPE,
  dtDosDtFin 			   DOSSIER.DOSDTFIN%TYPE,
  dtDosDtSigne 		   DOSSIER.DOSDTSIGNE%TYPE,
  dtDosDtOpAchat 		   DOSSIER.DOSDTOPACHAT%TYPE,
  dtDosDtComite 		   DOSSIER.DOSDTCOMITE%TYPE,
  dtDosDtEffet 		   DOSSIER.DOSDTEFFET%TYPE,
  dtDosDtProduct		   DOSSIER.DOSDTPRODUCT%TYPE,
  nDosPreavis 		      DOSSIER.DOSPREAVIS%TYPE,
  sDosTypePenalite		DOSSIER.DOSTYPEPENALITE%TYPE,
  sDosTypeFinancement	DOSSIER.DOSTYPEFINANCEMENT%TYPE,
  nDosMtPenalite		   DOSSIER.DOSMTPENALITE%TYPE,
  sDosRegimeFiscal		DOSSIER.DOSREGIMEFISCAL%TYPE,
  nDosMtSign			   DOSSIER.DOSMTSIGN%TYPE,
  nDosMtComite		      DOSSIER.DOSMTCOMITE%TYPE,
  nDosMtProduct		   DOSSIER.DOSMTPRODUCT%TYPE,
  nDosMtOuvert		      DOSSIER.DOSMTOUVERT%TYPE,
  dtDosDtOuvert		   DOSSIER.DOSDTOUVERT%TYPE,
  sDosPool			      DOSSIER.DOSPOOL%TYPE,
  nDosTauxCal			   DOSSIER.DOSTAUXCAL%TYPE,
  nDosTaux			      DOSSIER.DOSTAUX%TYPE,
  nDosTxMarge			   DOSSIER.DOSTXMARGE%TYPE,
  nDosFlagIndexable		DOSSIER.DOSFLAGINDEXABLE%TYPE,
  sDosBareme			   DOSSIER.DOSBAREME%TYPE,
  sDosSectGestion		   DOSSIER.DOSSECTGESTION%TYPE,
			-- CBI --
  sDimZone			      DOSSIERIMMOBILIER.DIMZONE%TYPE,
  nDimNbSalarie		   DOSSIERIMMOBILIER.DIMNBSALARIE%TYPE,
  nDimPctCapital		   DOSSIERIMMOBILIER.DIMPCTCAPITAL%TYPE,
  nDimBilanMF			   DOSSIERIMMOBILIER.DIMBILANMF%TYPE,
  nDimCaMF			      DOSSIERIMMOBILIER.DIMCAMF%TYPE,
  nDimAnCritere	      DOSSIERIMMOBILIER.DIMANCRITERE%TYPE,
  nDimMarge			      DOSSIERIMMOBILIER.DIMMARGE%TYPE,
  sDimPosCC			      DOSSIERIMMOBILIER.DIMPOSCC%TYPE,
  nDimMtCC			      DOSSIERIMMOBILIER.DIMMTCC%TYPE,
  --nDimMtApportClient  DOSSIERIMMOBILIER.DIMMTAPPORTCLIENT%TYPE,
  sDimMemoVR			   DOSSIERIMMOBILIER.DIMMEMOVR%TYPE,
				-- CREDIT --
  sDcrType			      DOSSIERCREDIT.DCRTYPE%TYPE,
  sDcrClasse			   DOSSIERCREDIT.DCRCLASSE%TYPE,
  nDcrFlagEligBDF		   DOSSIERCREDIT.DCRFLAGELIGBDF%TYPE,
  nDcrFlagEligIEOM		DOSSIERCREDIT.DCRFLAGELIGIEOM%TYPE,
  nDcrFlagEligIEDOM		DOSSIERCREDIT.DCRFLAGELIGIEDOM%TYPE,
  nDcrFlagEligMH		   DOSSIERCREDIT.DCRFLAGELIGMH%TYPE,
  sDcrBAFI			      DOSSIERCREDIT.DCRBAFI%TYPE,
  sPhaCode			      DOSPHASE.PHACODE%TYPE,
  sJalCode			      DOSPHASE.JALCODE%TYPE,
  dtCreaPhase           IN DATE,
  nDosIdRefinance       DOSSIER.DOSIDREFINANCE%TYPE,
  nDosMtMarge           DOSSIER.DOSMTMARGE%TYPE,
  sDosFinStruct         DOSSIER.DOSFINSTRUCT%TYPE,
  nDosMtForfaitRachat   DOSSIER.DOSMTFORFAITRACHAT%TYPE,    -- CV-04122001 FSA-7310
  nDosPctPenaliteRachat DOSSIER.DOSPCTPENALITERACHAT%TYPE,  -- CV-04122001 FSA-7310
  sDosUsGaap            DOSSIER.DOSUSGAAP%TYPE,
  nManId                DOSSIER.MANID%TYPE,
  nDosTypePenResil      DOSSIER.DOSTYPEPENALITERESIL%TYPE,  -- hn22/04/03 FSA 11951
  nDosMtPenResil        DOSSIER.DOSMTPENALITERESIL%TYPE,    -- hn22/04/03
  nDosPctPenResil       DOSSIER.DOSPCTPENALITERESIL%TYPE,
  sNapCode              DOSSIER.NAPCODE%TYPE,               -- CV-25072003 FSA-12787
  sPayCode                      DOSSIER.PAYCODE%TYPE,
  sDosTransFerabilite   DOSSIER.DOSTRANSFERABILITE%TYPE,
  nDosFlagConfidentiel  DOSSIER.DOSFLAGCONFIDENTIEL%TYPE,
  nDcrFlagPretRevocable DOSSIERCREDIT.DCRFLAGPRETREVOCABLE%TYPE,
  nDcrDureeMoisPreavis  DOSSIERCREDIT.DCRDUREEMOISPREAVIS%TYPE,
  nDcrPctTiragePrevu    DOSSIERCREDIT.DCRPCTTIRAGEPREVU%TYPE,
  nDcrFlagConvertibilite DOSSIERCREDIT.DCRFLAGCONVERTIBILITE%TYPE,
  nDcrFlagTaciteRecond   DOSSIERCREDIT.DCRFLAGTACITERECOND%TYPE,
  nDcrFlagRevolving      DOSSIERCREDIT. DCRFLAGREVOLVING%TYPE,
  nDosFlagRestruct        DOSSIER.DOSFLAGRESTRUCT%TYPE,
  dtDosDtDebRestruct      DOSSIER.DOSDTDEBRESTRUCT%TYPE,
  nDosIASExerciceCritere   DOSSIER.DOSIASEXERCICECRITERE%TYPE,
  sDosIASClassement        DOSSIER.DOSIASCLASSEMENT%TYPE,
  nDosIASFlagMicroOuverture   DOSSIER.DOSIASFLAGMICROCOUVERTURE%TYPE,
  nDosIASFlagNatureSpecifique DOSSIER.DOSIASFLAGNATURESPECIFIQUE%TYPE,
  nDosIASFlagLocationFinale   DOSSIER.DOSIASFLAGLOCATIONFINALE%TYPE,
  nDosIASFlagTransfertFinal   DOSSIER.DOSIASFLAGTRANSFERTFINAL%TYPE,
  nDosIASDureeEconomique      DOSSIER.DOSIASDUREEECONOMIQUEAN%TYPE,
  nDosIASDureeMoisEconomique  DOSSIER.DOSIASDUREEECONOMIQUEMOIS%TYPE,
  nDosIASMtValeurInitiale     DOSSIER.DOSIASMTVALEURINITIALE%TYPE,
  nDosIASDureeJourEco         DOSSIER.DOSIASDUREEECONOMIQUEJOUR%TYPE,
  nDosIASFlagMajClassement    DOSSIER.DOSIASFLAGMAJCLASSEMENT%TYPE,
  sDosIASMemoMajClassement    DOSSIER.DOSIASMEMOMAJCLASSEMENT%TYPE,
  nDosFlagVRAuto					DOSSIER.DOSFLAGVRAUTO%TYPE,
  nDosIdLocatif               DOSSIER.DOSIDLOCATIF%TYPE,
  nDosTauxCalcActuel          DOSSIER.DOSTAUXCALCACTUEL%TYPE,
  sTauCode                    DOSSIER.TAUCODE%TYPE,
  sDosIasMarche               DOSSIER.DOSIASMARCHE%TYPE,
  sDosIasProduit              DOSSIER.DOSIASPRODUIT%TYPE,
  nDosIasDosTxMarche          DOSSIER.DOSIASTXMARCHE%TYPE,
  nDosIasToleranceMarche      DOSSIER.DOSIASTOLERANCEMARCHE%TYPE,
  nDosIasToleranceHorsMarche  DOSSIER.DOSIASTOLERANCEHORSMARCHE%TYPE,
  nDosIasDecoteInitiale       DOSSIER.DOSIASDECOTEINITIALE%TYPE,
  sDosIasInstrumentFinancier  DOSSIER.DOSIASINSTRUMENTFINANCIER%TYPE,
  nDosFlagGrpRubrique         DOSSIERMOBILIER.DOSFLAGGRPRUBRIQUE%TYPE,
  sDexNumContrat              DOSSIEREXTERNE.DEXNUMCONTRAT%TYPE,
  nCalId                      DOSSIER.CALID%TYPE,
  dtDosDtEndCommittee         DOSSIER.DOSDTENDCOMMITTEE%TYPE,
  sDoscomment                 DOSSIER.DOSCOMMENT%TYPE,
  nReturnCode 		     IN OUT NUMBER ) AS
BEGIN
   DECLARE
      nCount 	    NUMBER;
      sTevDest	    TEVENEMENT.TEVDEST%TYPE :='DOSSIER';
      sTmoModule    TEVENEMENT.TMOMODULE%TYPE :='DOSSIER';
      sTmfFonction  TEVENEMENT.TMFFONCTION%TYPE :='EVD_NEW';
      nCreId        NUMBER;
      nSynchro 	    NUMBER :=1;
	  nMaxOrdre 	DOSPHASE.DPHORDRE%TYPE;
	  nLogique		TOPTPGPARAM.TTPLOGIQUE%TYPE;
   BEGIN

	BEGIN
	  SELECT NVL(TTPLOGIQUE, 0)
	    INTO nLogique
		FROM TOPTPGPARAM
	   WHERE TOPTABLE = 'FRONT_DEAL'
	     AND TTPPARAM = 'KEEPDOSID'
		 AND TPGCODE  = sTpgCode;
	EXCEPTION
		WHEN OTHERS THEN
			nLogique := 0;
	END;

	--SRA20102911 Negative DOSID issue BEGIN
	--IF nLogique = 0 THEN
	IF NVL(nDosId, -1) < 0 THEN
	--SRA20102911 Negative DOSID issue END
		SELECT SEQ_DOSID.NEXTVAL INTO nDosId FROM DUAL;
	END IF;

    INSERT INTO DOSSIER
      (  DOSID,
		   DEVCODE,
		   ACTID,
		   TPGCODE,
		   TACCODE,
		   UTICODE,
		   DOSNUM,
		   DOSNOM,
		   DOSAVENANT,
		   DOSETAT,
		   DOSDUREEJOUR,
		   DOSDUREEMOIS,
		   DOSDUREEAN,
		   DOSDUREEACTUALJOUR,
		   DOSDUREEACTUALMOIS,
		   DOSDUREEACTUALAN,
		   DOSDTDEB,
		   DOSDTFIN,
		   DOSDTMODIF,
		   DOSDTSIGNE,
		   DOSDTOPACHAT,
		   DOSDTCOMITE,
		   DOSDTEFFET,
		   DOSDTPRODUCT,
		   DOSPREAVIS,
		   DOSTYPEPENALITE,
		   DOSTYPEFINANCEMENT,
		   DOSMTPENALITE,
		   DOSREGIMEFISCAL,
		   DOSMTSIGN,
		   DOSMTCOMITE,
		   DOSMTPRODUCT,
		   DOSMTOUVERT,
		   DOSDTOUVERT,
		   DOSPOOL,
		   DOSTAUXCAL,
		   DOSTAUX,
		   DOSTXMARGE,
		   DOSFLAGINDEXABLE,
		   DOSBAREME,
         DOSSECTGESTION,
         DOSIDREFINANCE,
         DOSMTMARGE,
         DOSFINSTRUCT,
         DOSMTFORFAITRACHAT,        -- CV-04122001 FSA-7310
         DOSPCTPENALITERACHAT,      -- CV-04122001 FSA-7310
         DOSUSGAAP,
         MANID,
         DOSTYPEPENALITERESIL,
         DOSMTPENALITERESIL,
         DOSPCTPENALITERESIL,
         NAPCODE,                        -- CV-25072003 FSA-12787
         PAYCODE,
         DOSTRANSFERABILITE,
         DOSFLAGCONFIDENTIEL,
         DOSFLAGRESTRUCT,
         DOSDTDEBRESTRUCT,
         DOSIASEXERCICECRITERE,
         DOSIASCLASSEMENT,
         DOSIASFLAGMICROCOUVERTURE,
         DOSIASFLAGNATURESPECIFIQUE,
         DOSIASFLAGLOCATIONFINALE,
         DOSIASFLAGTRANSFERTFINAL,
         DOSIASDUREEECONOMIQUEAN,
         DOSIASDUREEECONOMIQUEMOIS,
         DOSIASMTVALEURINITIALE,
         DOSIASDUREEECONOMIQUEJOUR,
         DOSIASFLAGMAJCLASSEMENT,
         DOSIASMEMOMAJCLASSEMENT,
         DOSFLAGVRAUTO ,
         DOSIDLOCATIF,
         DOSTAUXCALCACTUEL,
         TAUCODE,
         DOSIASMARCHE,
         DOSIASPRODUIT,
         DOSIASTXMARCHE,
         DOSIASTOLERANCEMARCHE,
         DOSIASTOLERANCEHORSMARCHE,
         DOSIASDECOTEINITIALE,
         DOSIASINSTRUMENTFINANCIER,
         CALID,
         DOSDTENDCOMMITTEE,
         DOSCOMMENT
          )
    VALUES
      (  nDosId,
        	sDevCode,
		   nActId,
		   sTpgCode,
		   sTacCode,
		   sUtiCode,
		   sDosNum,
		   sDosNom,
		   nDosAvenant,
		   sDosEtat,
		   nDosDureeJour,
		   nDosDureeMois,
		   nDosDureeAn,
		   nDosDureeActualJour,
		   nDosDureeActualMois,
		   nDosDureeActualAn,
		   dtDosDtDeb,
		   dtDosDtFin,
		   TRUNC(SYSDATE),
		   dtDosDtSigne,
		   dtDosDtOpAchat,
		   dtDosDtComite,
		   dtDosDtEffet,
		   dtDosDtProduct,
		   nDosPreavis,
		   sDosTypePenalite,
		   sDosTypeFinancement,
		   nDosMtPenalite,
		   sDosRegimeFiscal,
		   nDosMtSign,
		   nDosMtComite,
		   nDosMtProduct,
		   nDosMtOuvert,
		   dtDosDtOuvert,
		   sDosPool,
		   nDosTauxCal,
		   nDosTaux,
		   nDosTxMarge,
		   nDosFlagIndexable,
		   sDosBareme,
         sDosSectGestion,
         nDosIdRefinance,
         nDosMtMarge,
         sDosFinStruct,
         nDosMtForfaitRachat,       -- CV-04122001 FSA-7310
         nDosPctPenaliteRachat,     -- CV-04122001 FSA-7310
         sDosUsGaap ,
         nManId,
         nDosTypePenResil ,
         nDosMtPenResil ,
         nDosPctPenResil,
	      sNapCode,                         -- CV-25072003 FSA-12787
         sPayCode,
         sDosTransFerabilite,
         nDosFlagConfidentiel,
         nDosFlagRestruct,
         dtDosDtDebRestruct ,
         nDosIASExerciceCritere,
         sDosIASClassement,
         nDosIASFlagMicroOuverture,
         nDosIASFlagNatureSpecifique  ,
         nDosIASFlagLocationFinale    ,
         nDosIASFlagTransfertFinal    ,
         nDosIASDureeEconomique       ,
         nDosIASDureeMoisEconomique   ,
         nDosIASMtValeurInitiale    ,
         nDosIASDureeJourEco     ,
         nDosIASFlagMajClassement,
         sDosIASMemoMajClassement,
         nDosFlagVRAuto,
         nDosIdLocatif,
         nDosTauxCalcActuel,
         sTauCode,
         sDosIasMarche,
         sDosIasProduit,
         nDosIasDosTxMarche,
         nDosIasToleranceMarche,
         nDosIasToleranceHorsMarche,
         nDosIasDecoteInitiale,
         sDosIasInstrumentFinancier,
         nCalId,
         dtDosDtEndCommittee,
         sDoscomment
          );
      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;

      IF ( nReturnCode = 0 ) AND ( sTacCode IN ( 'EMPRUNT', 'PRET' ) ) THEN
         BEGIN
		   INSERT INTO DOSSIERCREDIT
		   (  DOSID,
		      DCRTYPE,
		      DCRCLASSE,
		      DCRFLAGELIGBDF,
       		DCRFLAGELIGIEOM,
      		DCRFLAGELIGIEDOM,
       		DCRFLAGELIGMH,
       		DCRBAFI,
            DCRFLAGPRETREVOCABLE,
            DCRDUREEMOISPREAVIS,
            DCRPCTTIRAGEPREVU,
            DCRFLAGCONVERTIBILITE,
            DCRFLAGTACITERECOND,
            DCRFLAGREVOLVING
 		)
		   VALUES
		(
			nDosId,
			sDcrType,
			sDcrClasse,
			nDcrFlagEligBDF,
			nDcrFlagEligIEOM,
			nDcrFlagEligIEDOM,
			nDcrFlagEligMH,
			sDcrBAFI,
         nDcrFlagPretRevocable,
         nDcrDureeMoisPreavis ,
         nDcrPctTiragePrevu ,
         nDcrFlagConvertibilite ,
         nDcrFlagTaciteRecond ,
         nDcrFlagRevolving
		);
          IF SQL%ROWCOUNT = 0 THEN
          nReturnCode := ERR_NO_ROWS_CONST;
          END IF;
        END;
      END IF;

      IF ( nReturnCode = 0 ) AND ( sTacCode IN ( 'CBI', 'CBMIXTE' ) )  THEN
        BEGIN
          INSERT INTO DOSSIERIMMOBILIER
	    (
		DOSID,
		DIMZONE,
		DIMNBSALARIE,
          	DIMPCTCAPITAL,
          	DIMBILANMF,
          	DIMCAMF,
          	DIMANCRITERE,
          	DIMMARGE,
          	DIMPOSCC,
          	DIMMTCC,
          	--DIMMTAPPORTCLIENT,
          	DIMMEMOVR
		)
	    VALUES
	    (
		nDosId,
		sDimZone,
		nDimNbSalarie,
          	nDimPctCapital,
          	nDimBilanMF,
          	nDimCaMF,
          	nDimAnCritere,
          	nDimMarge,
          	sDimPosCC,
          	nDimMtCC,
          	--nDimMtApportClient,
          	sDimMemoVR
 		);
          IF SQL%ROWCOUNT = 0 THEN
          nReturnCode := ERR_NO_ROWS_CONST;
          END IF;
        END;
      END IF;

      IF ( nReturnCode = 0 ) AND ( sTacCode IN ( 'CBM', 'CBMIXTE', 'LOCFIN' ) ) THEN
         INSERT INTO DOSSIERMOBILIER(
            DOSID,
            DOSFLAGGRPRUBRIQUE )
         VALUES(
            nDosId,
            nDosFlagGrpRubrique );

         IF SQL%ROWCOUNT = 0 THEN
            nReturnCode := ERR_NO_ROWS_CONST;
         END IF;
         IF ( nReturnCode = 0 ) THEN
            SELECT COUNT(1)
            INTO   nCount
            FROM   TBATCH
            WHERE  TBAID = 0;
            IF ( nCount = 1 ) THEN
               INSERT INTO DOSSIEREXTERNE(
                  TBAID,
                  DOSID,
                  DEXNUMCONTRAT )
               VALUES(
                  0,
                  nDosId,
                  sDexNumContrat );
               IF ( SQL%ROWCOUNT = 0 ) THEN
                  nReturnCode := ERR_NO_ROWS_CONST;
               END IF;
            END IF;
         END IF;
      END IF;

	IF (nReturnCode = 0) THEN
		IF sPhaCode != 'INI' THEN
			 PA_UPDATEDOSSIER.I_DOSPHASE(
		   		nDosId,
				'INI',
				1,
				sUtiCode,
				'OUVERT',
				'',
				trunc(NVL(dtDosDtOuvert, to_date('01-01-1980','DD-MM-YYYY'))),
				trunc(NVL(dtDosDtOuvert, to_date('01-01-1980','DD-MM-YYYY'))),
				NULL,NULL,
				nReturnCode);
		END IF;

		SELECT NVL(MAX(DPHORDRE),0)
        INTO   nMaxOrdre
        FROM   DOSPHASE
        WHERE  DOSID = nDosId;

	    PA_UPDATEDOSSIER.I_DOSPHASE  (
		nDosId,
		sPhaCode,
		nMaxOrdre + 1,
		sUtiCode,
		sJalCode,
		'',
		trunc(NVL(dtDosDtOuvert, to_date('01-01-1980','DD-MM-YYYY'))),
		--dtCreaPhase,
		NULL,NULL,NULL,
		nReturnCode);
	END IF;

	IF nReturnCode = 0 THEN
		PA_EVT4.I_EVT(
                            sTevDest,
                            sTmoModule,
                            sTmfFonction,
                            nCreId,
                            nDosId,
                            SYSDATE,
                            sTacCode,
                            nSynchro,
                            nReturnCode);

	END IF;

	IF nReturnCode = 0 THEN
		PA_EVT.U_EVT_VALIDE(nCreId, nReturnCode);
	END IF;

  EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
          nReturnCode := EP_DOSSIER_NF;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_DOSSIER_M_KEY_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
          nReturnCode := ERR_DUP_VAL_DOSSIER_CONST;
    WHEN OTHERS THEN
          nReturnCode := -1 * SQLCODE;
  END;
END I_DOSSIER;

PROCEDURE I_DOSSIER (
  nDosId                IN OUT DOSSIER.DOSID%TYPE,
  nDosIdIn                IN  DOSSIER.DOSID%TYPE,
  sDevCode              DOSSIER.DEVCODE%TYPE,
  nActId                DOSSIER.ACTID%TYPE,
  sTpgCode 			      DOSSIER.TPGCODE%TYPE,
  sTacCode 			      DOSSIER.TPGCODE%TYPE,
  sUtiCode 			      DOSSIER.UTICODE%TYPE,
  sDosNum 			      DOSSIER.DOSNUM%TYPE,
  sDosNom 			      DOSSIER.DOSNOM%TYPE,
  nDosAvenant 		      DOSSIER.DOSAVENANT%TYPE,
  sDosEtat		         DOSSIER.DOSETAT%TYPE,
  nDosDureeJour 		   DOSSIER.DOSDUREEJOUR%TYPE,
  nDosDureeMois 		   DOSSIER.DOSDUREEMOIS%TYPE,
  nDosDureeAn 		      DOSSIER.DOSDUREEAN%TYPE,
  nDosDureeActualJour   DOSSIER.DOSDUREEACTUALJOUR%TYPE,
  nDosDureeActualMois	DOSSIER.DOSDUREEACTUALMOIS%TYPE,
  nDosDureeActualAn 	   DOSSIER.DOSDUREEACTUALAN%TYPE,
  dtDosDtDeb			   DOSSIER.DOSDTDEB%TYPE,
  dtDosDtFin 			   DOSSIER.DOSDTFIN%TYPE,
  dtDosDtSigne 		   DOSSIER.DOSDTSIGNE%TYPE,
  dtDosDtOpAchat 		   DOSSIER.DOSDTOPACHAT%TYPE,
  dtDosDtComite 		   DOSSIER.DOSDTCOMITE%TYPE,
  dtDosDtEffet 		   DOSSIER.DOSDTEFFET%TYPE,
  dtDosDtProduct		   DOSSIER.DOSDTPRODUCT%TYPE,
  nDosPreavis 		      DOSSIER.DOSPREAVIS%TYPE,
  sDosTypePenalite		DOSSIER.DOSTYPEPENALITE%TYPE,
  sDosTypeFinancement	DOSSIER.DOSTYPEFINANCEMENT%TYPE,
  nDosMtPenalite		   DOSSIER.DOSMTPENALITE%TYPE,
  sDosRegimeFiscal		DOSSIER.DOSREGIMEFISCAL%TYPE,
  nDosMtSign			   DOSSIER.DOSMTSIGN%TYPE,
  nDosMtComite		      DOSSIER.DOSMTCOMITE%TYPE,
  nDosMtProduct		   DOSSIER.DOSMTPRODUCT%TYPE,
  nDosMtOuvert		      DOSSIER.DOSMTOUVERT%TYPE,
  dtDosDtOuvert		   DOSSIER.DOSDTOUVERT%TYPE,
  sDosPool			      DOSSIER.DOSPOOL%TYPE,
  nDosTauxCal			   DOSSIER.DOSTAUXCAL%TYPE,
  nDosTaux			      DOSSIER.DOSTAUX%TYPE,
  nDosTxMarge			   DOSSIER.DOSTXMARGE%TYPE,
  nDosFlagIndexable		DOSSIER.DOSFLAGINDEXABLE%TYPE,
  sDosBareme			   DOSSIER.DOSBAREME%TYPE,
  sDosSectGestion		   DOSSIER.DOSSECTGESTION%TYPE,
			-- CBI --
  sDimZone			      DOSSIERIMMOBILIER.DIMZONE%TYPE,
  nDimNbSalarie		   DOSSIERIMMOBILIER.DIMNBSALARIE%TYPE,
  nDimPctCapital		   DOSSIERIMMOBILIER.DIMPCTCAPITAL%TYPE,
  nDimBilanMF			   DOSSIERIMMOBILIER.DIMBILANMF%TYPE,
  nDimCaMF			      DOSSIERIMMOBILIER.DIMCAMF%TYPE,
  nDimAnCritere	      DOSSIERIMMOBILIER.DIMANCRITERE%TYPE,
  nDimMarge			      DOSSIERIMMOBILIER.DIMMARGE%TYPE,
  sDimPosCC			      DOSSIERIMMOBILIER.DIMPOSCC%TYPE,
  nDimMtCC			      DOSSIERIMMOBILIER.DIMMTCC%TYPE,
  --nDimMtApportClient  DOSSIERIMMOBILIER.DIMMTAPPORTCLIENT%TYPE,
  sDimMemoVR			   DOSSIERIMMOBILIER.DIMMEMOVR%TYPE,
				-- CREDIT --
  sDcrType			      DOSSIERCREDIT.DCRTYPE%TYPE,
  sDcrClasse			   DOSSIERCREDIT.DCRCLASSE%TYPE,
  nDcrFlagEligBDF		   DOSSIERCREDIT.DCRFLAGELIGBDF%TYPE,
  nDcrFlagEligIEOM		DOSSIERCREDIT.DCRFLAGELIGIEOM%TYPE,
  nDcrFlagEligIEDOM		DOSSIERCREDIT.DCRFLAGELIGIEDOM%TYPE,
  nDcrFlagEligMH		   DOSSIERCREDIT.DCRFLAGELIGMH%TYPE,
  sDcrBAFI			      DOSSIERCREDIT.DCRBAFI%TYPE,
  sPhaCode			      DOSPHASE.PHACODE%TYPE,
  sJalCode			      DOSPHASE.JALCODE%TYPE,
  dtCreaPhase           IN DATE,
  nDosIdRefinance       DOSSIER.DOSIDREFINANCE%TYPE,
  nDosMtMarge           DOSSIER.DOSMTMARGE%TYPE,
  sDosFinStruct         DOSSIER.DOSFINSTRUCT%TYPE,
  nDosMtForfaitRachat   DOSSIER.DOSMTFORFAITRACHAT%TYPE,    -- CV-04122001 FSA-7310
  nDosPctPenaliteRachat DOSSIER.DOSPCTPENALITERACHAT%TYPE,  -- CV-04122001 FSA-7310
  sDosUsGaap            DOSSIER.DOSUSGAAP%TYPE,
  nManId                DOSSIER.MANID%TYPE,
  nDosTypePenResil      DOSSIER.DOSTYPEPENALITERESIL%TYPE,  -- hn22/04/03 FSA 11951
  nDosMtPenResil        DOSSIER.DOSMTPENALITERESIL%TYPE,    -- hn22/04/03
  nDosPctPenResil       DOSSIER.DOSPCTPENALITERESIL%TYPE,
  sNapCode              DOSSIER.NAPCODE%TYPE,               -- CV-25072003 FSA-12787
  sPayCode                      DOSSIER.PAYCODE%TYPE,
  sDosTransFerabilite   DOSSIER.DOSTRANSFERABILITE%TYPE,
  nDosFlagConfidentiel  DOSSIER.DOSFLAGCONFIDENTIEL%TYPE,
  nDcrFlagPretRevocable DOSSIERCREDIT.DCRFLAGPRETREVOCABLE%TYPE,
  nDcrDureeMoisPreavis  DOSSIERCREDIT.DCRDUREEMOISPREAVIS%TYPE,
  nDcrPctTiragePrevu    DOSSIERCREDIT.DCRPCTTIRAGEPREVU%TYPE,
  nDcrFlagConvertibilite DOSSIERCREDIT.DCRFLAGCONVERTIBILITE%TYPE,
  nDcrFlagTaciteRecond   DOSSIERCREDIT.DCRFLAGTACITERECOND%TYPE,
  nDcrFlagRevolving      DOSSIERCREDIT. DCRFLAGREVOLVING%TYPE,
  nDosFlagRestruct        DOSSIER.DOSFLAGRESTRUCT%TYPE,
  dtDosDtDebRestruct      DOSSIER.DOSDTDEBRESTRUCT%TYPE,
  nDosIASExerciceCritere   DOSSIER.DOSIASEXERCICECRITERE%TYPE,
  sDosIASClassement        DOSSIER.DOSIASCLASSEMENT%TYPE,
  nDosIASFlagMicroOuverture   DOSSIER.DOSIASFLAGMICROCOUVERTURE%TYPE,
  nDosIASFlagNatureSpecifique DOSSIER.DOSIASFLAGNATURESPECIFIQUE%TYPE,
  nDosIASFlagLocationFinale   DOSSIER.DOSIASFLAGLOCATIONFINALE%TYPE,
  nDosIASFlagTransfertFinal   DOSSIER.DOSIASFLAGTRANSFERTFINAL%TYPE,
  nDosIASDureeEconomique      DOSSIER.DOSIASDUREEECONOMIQUEAN%TYPE,
  nDosIASDureeMoisEconomique  DOSSIER.DOSIASDUREEECONOMIQUEMOIS%TYPE,
  nDosIASMtValeurInitiale     DOSSIER.DOSIASMTVALEURINITIALE%TYPE,
  nDosIASDureeJourEco         DOSSIER.DOSIASDUREEECONOMIQUEJOUR%TYPE,
  nDosIASFlagMajClassement    DOSSIER.DOSIASFLAGMAJCLASSEMENT%TYPE,
  sDosIASMemoMajClassement    DOSSIER.DOSIASMEMOMAJCLASSEMENT%TYPE,
  nDosFlagVRAuto					DOSSIER.DOSFLAGVRAUTO%TYPE,
  nDosIdLocatif               DOSSIER.DOSIDLOCATIF%TYPE,
  nDosTauxCalcActuel          DOSSIER.DOSTAUXCALCACTUEL%TYPE,
  sTauCode                    DOSSIER.TAUCODE%TYPE,
  sDosIasMarche               DOSSIER.DOSIASMARCHE%TYPE,
  sDosIasProduit              DOSSIER.DOSIASPRODUIT%TYPE,
  nDosIasDosTxMarche          DOSSIER.DOSIASTXMARCHE%TYPE,
  nDosIasToleranceMarche      DOSSIER.DOSIASTOLERANCEMARCHE%TYPE,
  nDosIasToleranceHorsMarche  DOSSIER.DOSIASTOLERANCEHORSMARCHE%TYPE,
  nDosIasDecoteInitiale       DOSSIER.DOSIASDECOTEINITIALE%TYPE,
  sDosIasInstrumentFinancier  DOSSIER.DOSIASINSTRUMENTFINANCIER%TYPE,
  nDosFlagGrpRubrique         DOSSIERMOBILIER.DOSFLAGGRPRUBRIQUE%TYPE,
  sDexNumContrat              DOSSIEREXTERNE.DEXNUMCONTRAT%TYPE,
  nCalId                      DOSSIER.CALID%TYPE,
  dtDosDtEndCommittee         DOSSIER.DOSDTENDCOMMITTEE%TYPE,
  sDoscomment                 DOSSIER.DOSCOMMENT%TYPE,
  nReturnCode 		     IN OUT NUMBER ) AS
BEGIN
   DECLARE
      nCount 	    NUMBER;
      sTevDest	    TEVENEMENT.TEVDEST%TYPE :='DOSSIER';
      sTmoModule    TEVENEMENT.TMOMODULE%TYPE :='DOSSIER';
      sTmfFonction  TEVENEMENT.TMFFONCTION%TYPE :='EVD_NEW';
      nCreId        NUMBER;
      nSynchro 	    NUMBER :=1;
	  nMaxOrdre 	DOSPHASE.DPHORDRE%TYPE;
	  nLogique		TOPTPGPARAM.TTPLOGIQUE%TYPE;
   BEGIN

	BEGIN
	  SELECT NVL(TTPLOGIQUE, 0)
	    INTO nLogique
		FROM TOPTPGPARAM
	   WHERE TOPTABLE = 'FRONT_DEAL'
	     AND TTPPARAM = 'KEEPDOSID'
		 AND TPGCODE  = sTpgCode;
	EXCEPTION
		WHEN OTHERS THEN
			nLogique := 0;
	END;

	--SRA20102911 Negative DOSID issue BEGIN
	--IF nLogique = 0 THEN
	IF NVL(nDosIdIn, -1) < 0 THEN
	--SRA20102911 Negative DOSID issue END
		SELECT SEQ_DOSID.NEXTVAL INTO nDosId FROM DUAL;
	ELSE
        nDosId := nDosIdIn;
	END IF;

    INSERT INTO DOSSIER
      (  DOSID,
		   DEVCODE,
		   ACTID,
		   TPGCODE,
		   TACCODE,
		   UTICODE,
		   DOSNUM,
		   DOSNOM,
		   DOSAVENANT,
		   DOSETAT,
		   DOSDUREEJOUR,
		   DOSDUREEMOIS,
		   DOSDUREEAN,
		   DOSDUREEACTUALJOUR,
		   DOSDUREEACTUALMOIS,
		   DOSDUREEACTUALAN,
		   DOSDTDEB,
		   DOSDTFIN,
		   DOSDTMODIF,
		   DOSDTSIGNE,
		   DOSDTOPACHAT,
		   DOSDTCOMITE,
		   DOSDTEFFET,
		   DOSDTPRODUCT,
		   DOSPREAVIS,
		   DOSTYPEPENALITE,
		   DOSTYPEFINANCEMENT,
		   DOSMTPENALITE,
		   DOSREGIMEFISCAL,
		   DOSMTSIGN,
		   DOSMTCOMITE,
		   DOSMTPRODUCT,
		   DOSMTOUVERT,
		   DOSDTOUVERT,
		   DOSPOOL,
		   DOSTAUXCAL,
		   DOSTAUX,
		   DOSTXMARGE,
		   DOSFLAGINDEXABLE,
		   DOSBAREME,
         DOSSECTGESTION,
         DOSIDREFINANCE,
         DOSMTMARGE,
         DOSFINSTRUCT,
         DOSMTFORFAITRACHAT,        -- CV-04122001 FSA-7310
         DOSPCTPENALITERACHAT,      -- CV-04122001 FSA-7310
         DOSUSGAAP,
         MANID,
         DOSTYPEPENALITERESIL,
         DOSMTPENALITERESIL,
         DOSPCTPENALITERESIL,
         NAPCODE,                        -- CV-25072003 FSA-12787
         PAYCODE,
         DOSTRANSFERABILITE,
         DOSFLAGCONFIDENTIEL,
         DOSFLAGRESTRUCT,
         DOSDTDEBRESTRUCT,
         DOSIASEXERCICECRITERE,
         DOSIASCLASSEMENT,
         DOSIASFLAGMICROCOUVERTURE,
         DOSIASFLAGNATURESPECIFIQUE,
         DOSIASFLAGLOCATIONFINALE,
         DOSIASFLAGTRANSFERTFINAL,
         DOSIASDUREEECONOMIQUEAN,
         DOSIASDUREEECONOMIQUEMOIS,
         DOSIASMTVALEURINITIALE,
         DOSIASDUREEECONOMIQUEJOUR,
         DOSIASFLAGMAJCLASSEMENT,
         DOSIASMEMOMAJCLASSEMENT,
         DOSFLAGVRAUTO ,
         DOSIDLOCATIF,
         DOSTAUXCALCACTUEL,
         TAUCODE,
         DOSIASMARCHE,
         DOSIASPRODUIT,
         DOSIASTXMARCHE,
         DOSIASTOLERANCEMARCHE,
         DOSIASTOLERANCEHORSMARCHE,
         DOSIASDECOTEINITIALE,
         DOSIASINSTRUMENTFINANCIER,
         CALID,
         DOSDTENDCOMMITTEE,
         DOSCOMMENT
          )
    VALUES
      (  nDosId,
        	sDevCode,
		   nActId,
		   sTpgCode,
		   sTacCode,
		   sUtiCode,
		   sDosNum,
		   sDosNom,
		   nDosAvenant,
		   sDosEtat,
		   nDosDureeJour,
		   nDosDureeMois,
		   nDosDureeAn,
		   nDosDureeActualJour,
		   nDosDureeActualMois,
		   nDosDureeActualAn,
		   dtDosDtDeb,
		   dtDosDtFin,
		   TRUNC(SYSDATE),
		   dtDosDtSigne,
		   dtDosDtOpAchat,
		   dtDosDtComite,
		   dtDosDtEffet,
		   dtDosDtProduct,
		   nDosPreavis,
		   sDosTypePenalite,
		   sDosTypeFinancement,
		   nDosMtPenalite,
		   sDosRegimeFiscal,
		   nDosMtSign,
		   nDosMtComite,
		   nDosMtProduct,
		   nDosMtOuvert,
		   dtDosDtOuvert,
		   sDosPool,
		   nDosTauxCal,
		   nDosTaux,
		   nDosTxMarge,
		   nDosFlagIndexable,
		   sDosBareme,
         sDosSectGestion,
         nDosIdRefinance,
         nDosMtMarge,
         sDosFinStruct,
         nDosMtForfaitRachat,       -- CV-04122001 FSA-7310
         nDosPctPenaliteRachat,     -- CV-04122001 FSA-7310
         sDosUsGaap ,
         nManId,
         nDosTypePenResil ,
         nDosMtPenResil ,
         nDosPctPenResil,
	      sNapCode,                         -- CV-25072003 FSA-12787
         sPayCode,
         sDosTransFerabilite,
         nDosFlagConfidentiel,
         nDosFlagRestruct,
         dtDosDtDebRestruct ,
         nDosIASExerciceCritere,
         sDosIASClassement,
         nDosIASFlagMicroOuverture,
         nDosIASFlagNatureSpecifique  ,
         nDosIASFlagLocationFinale    ,
         nDosIASFlagTransfertFinal    ,
         nDosIASDureeEconomique       ,
         nDosIASDureeMoisEconomique   ,
         nDosIASMtValeurInitiale    ,
         nDosIASDureeJourEco     ,
         nDosIASFlagMajClassement,
         sDosIASMemoMajClassement,
         nDosFlagVRAuto,
         nDosIdLocatif,
         nDosTauxCalcActuel,
         sTauCode,
         sDosIasMarche,
         sDosIasProduit,
         nDosIasDosTxMarche,
         nDosIasToleranceMarche,
         nDosIasToleranceHorsMarche,
         nDosIasDecoteInitiale,
         sDosIasInstrumentFinancier,
         nCalId,
         dtDosDtEndCommittee,
         sDoscomment
          );
      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;

      IF ( nReturnCode = 0 ) AND ( sTacCode IN ( 'EMPRUNT', 'PRET' ) ) THEN
         BEGIN
		   INSERT INTO DOSSIERCREDIT
		   (  DOSID,
		      DCRTYPE,
		      DCRCLASSE,
		      DCRFLAGELIGBDF,
       		DCRFLAGELIGIEOM,
      		DCRFLAGELIGIEDOM,
       		DCRFLAGELIGMH,
       		DCRBAFI,
            DCRFLAGPRETREVOCABLE,
            DCRDUREEMOISPREAVIS,
            DCRPCTTIRAGEPREVU,
            DCRFLAGCONVERTIBILITE,
            DCRFLAGTACITERECOND,
            DCRFLAGREVOLVING
 		)
		   VALUES
		(
			nDosId,
			sDcrType,
			sDcrClasse,
			nDcrFlagEligBDF,
			nDcrFlagEligIEOM,
			nDcrFlagEligIEDOM,
			nDcrFlagEligMH,
			sDcrBAFI,
         nDcrFlagPretRevocable,
         nDcrDureeMoisPreavis ,
         nDcrPctTiragePrevu ,
         nDcrFlagConvertibilite ,
         nDcrFlagTaciteRecond ,
         nDcrFlagRevolving
		);
          IF SQL%ROWCOUNT = 0 THEN
          nReturnCode := ERR_NO_ROWS_CONST;
          END IF;
        END;
      END IF;

      IF ( nReturnCode = 0 ) AND ( sTacCode IN ( 'CBI', 'CBMIXTE' ) )  THEN
        BEGIN
          INSERT INTO DOSSIERIMMOBILIER
	    (
		DOSID,
		DIMZONE,
		DIMNBSALARIE,
          	DIMPCTCAPITAL,
          	DIMBILANMF,
          	DIMCAMF,
          	DIMANCRITERE,
          	DIMMARGE,
          	DIMPOSCC,
          	DIMMTCC,
          	--DIMMTAPPORTCLIENT,
          	DIMMEMOVR
		)
	    VALUES
	    (
		nDosId,
		sDimZone,
		nDimNbSalarie,
          	nDimPctCapital,
          	nDimBilanMF,
          	nDimCaMF,
          	nDimAnCritere,
          	nDimMarge,
          	sDimPosCC,
          	nDimMtCC,
          	--nDimMtApportClient,
          	sDimMemoVR
 		);
          IF SQL%ROWCOUNT = 0 THEN
          nReturnCode := ERR_NO_ROWS_CONST;
          END IF;
        END;
      END IF;

      IF ( nReturnCode = 0 ) AND ( sTacCode IN ( 'CBM', 'CBMIXTE', 'LOCFIN' ) ) THEN
         INSERT INTO DOSSIERMOBILIER(
            DOSID,
            DOSFLAGGRPRUBRIQUE )
         VALUES(
            nDosId,
            nDosFlagGrpRubrique );

         IF SQL%ROWCOUNT = 0 THEN
            nReturnCode := ERR_NO_ROWS_CONST;
         END IF;
         IF ( nReturnCode = 0 ) THEN
            SELECT COUNT(1)
            INTO   nCount
            FROM   TBATCH
            WHERE  TBAID = 0;
            IF ( nCount = 1 ) THEN
               INSERT INTO DOSSIEREXTERNE(
                  TBAID,
                  DOSID,
                  DEXNUMCONTRAT )
               VALUES(
                  0,
                  nDosId,
                  sDexNumContrat );
               IF ( SQL%ROWCOUNT = 0 ) THEN
                  nReturnCode := ERR_NO_ROWS_CONST;
               END IF;
            END IF;
         END IF;
      END IF;

	IF (nReturnCode = 0) THEN
		IF sPhaCode != 'INI' THEN
			 PA_UPDATEDOSSIER.I_DOSPHASE(
		   		nDosId,
				'INI',
				1,
				sUtiCode,
				'OUVERT',
				'',
				trunc(NVL(dtDosDtOuvert, to_date('01-01-1980','DD-MM-YYYY'))),
				trunc(NVL(dtDosDtOuvert, to_date('01-01-1980','DD-MM-YYYY'))),
				NULL,NULL,
				nReturnCode);
		END IF;

		SELECT NVL(MAX(DPHORDRE),0)
        INTO   nMaxOrdre
        FROM   DOSPHASE
        WHERE  DOSID = nDosId;

	    PA_UPDATEDOSSIER.I_DOSPHASE  (
		nDosId,
		sPhaCode,
		nMaxOrdre + 1,
		sUtiCode,
		sJalCode,
		'',
		trunc(NVL(dtDosDtOuvert, to_date('01-01-1980','DD-MM-YYYY'))),
		--dtCreaPhase,
		sysdate,
		NULL,NULL,
		nReturnCode);
	END IF;

	IF nReturnCode = 0 THEN
		PAV4_EVT4.I_EVT(
                            sTevDest,
                            sTmoModule,
                            sTmfFonction,
                            nCreId,
                            nDosId,
                            SYSDATE,
                            sTacCode,
                            nSynchro,
							sUtiCode,
                            nReturnCode);

	END IF;

	IF nReturnCode = 0 THEN
		PA_EVT.U_EVT_UTICODEVALID(nCreId, sUtiCode, nReturnCode);
	END IF;

  EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
          nReturnCode := EP_DOSSIER_NF;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_DOSSIER_M_KEY_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
          nReturnCode := ERR_DUP_VAL_DOSSIER_CONST;
    WHEN OTHERS THEN
          nReturnCode := -1 * SQLCODE;
  END;
END I_DOSSIER;

PROCEDURE I_DOSCURRENCY(
   nDosId      					IN     	DOSCURRENCY.DOSID%TYPE,
   nDcuOrdre   					IN     	DOSCURRENCY.DCUORDRE%TYPE,
   sDevCode    					IN     	DOSCURRENCY.DEVCODE%TYPE,
   dtDcuDtBeg  					IN     	DOSCURRENCY.DCUDTBEG%TYPE,
   dtDcuDtEnd  					IN     	DOSCURRENCY.DCUDTEND%TYPE,
   nDcuScale   					IN     	DOSCURRENCY.DCUSCALE%TYPE,
   sDcuTarget  					IN	  	DOSCURRENCY.DCUTARGET%TYPE,
   sDcuRoundingMethod			IN		DOSCURRENCY.DCUROUNDINGMETHOD%TYPE,
   nDcumtirminimalRounding  	IN	  	DOSCURRENCY.DCUMTIRMINIMALROUNDING%TYPE,
   nDcumtirlumpRounding  		IN	  	DOSCURRENCY.DCUMTIRLUMPROUNDING%TYPE,
   nDcumtfloorinterestRounding  IN	  	DOSCURRENCY.DCUMTFLOORINTERESTROUNDING%TYPE,
   nDcumtlumpinterestRounding  	IN	  	DOSCURRENCY.DCUMTLUMPINTERESTROUNDING%TYPE,
   nDacOrdre  					IN	  	DOSCURRENCY.DACORDRE%TYPE,
   nFxfId                       IN      DOSCURRENCY.FXFID%TYPE,
   nReturnCode 					IN OUT NUMBER ) AS
BEGIN
   BEGIN
      INSERT INTO DOSCURRENCY(
         DOSID,
         DCUORDRE,
         DEVCODE,
         DCUDTBEG,
         DCUDTEND,
		 DCUTARGET,
		 DCUROUNDINGMETHOD,
		 DCUSCALE,
		 DCUMTIRMINIMALROUNDING,
		 DCUMTIRLUMPROUNDING,
		 DCUMTFLOORINTERESTROUNDING,
		 DCUMTLUMPINTERESTROUNDING,
		 DACORDRE,
		 FXFID)
      VALUES(
         nDosId,
         nDcuOrdre,
         sDevCode,
         dtDcuDtBeg,
         dtDcuDtEnd,
		 sDcuTarget,
		 sDcuRoundingMethod,
		 nDcuScale,
		 nDcumtirminimalRounding,
		 nDcumtirlumpRounding,
		 nDcumtfloorinterestRounding,
		 nDcumtlumpinterestRounding,
		 nDacOrdre,
		 nFxfId
		 );

      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCU_FOUND_CONST;
      WHEN ERR_I_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCU_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCU_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END I_DOSCURRENCY;

PROCEDURE U_DOSCURRENCY(
   nDosId      					IN     DOSCURRENCY.DOSID%TYPE,
   nDcuOrdre   					IN     DOSCURRENCY.DCUORDRE%TYPE,
   sDevCode    					IN     DOSCURRENCY.DEVCODE%TYPE,
   dtDcuDtBeg  					IN     DOSCURRENCY.DCUDTBEG%TYPE,
   dtDcuDtEnd  					IN     DOSCURRENCY.DCUDTEND%TYPE,
   nDcuScale   					IN     DOSCURRENCY.DCUSCALE%TYPE,
   sDcuTarget  					IN	   DOSCURRENCY.DCUTARGET%TYPE,
   sDcuRoundingMethod			IN	   DOSCURRENCY.DCUROUNDINGMETHOD%TYPE,
   nDcumtirminimalRounding  	IN	   DOSCURRENCY.DCUMTIRMINIMALROUNDING%TYPE,
   nDcumtirlumpRounding  		IN	   DOSCURRENCY.DCUMTIRLUMPROUNDING%TYPE,
   nDcumtfloorinterestRounding  IN	   DOSCURRENCY.DCUMTFLOORINTERESTROUNDING%TYPE,
   nDcumtlumpinterestRounding  	IN	   DOSCURRENCY.DCUMTLUMPINTERESTROUNDING%TYPE,
   nDacOrdre  					IN	   DOSCURRENCY.DACORDRE%TYPE,
   nFxfId                       IN     DOSCURRENCY.FXFID%TYPE,
   nReturnCode 					IN OUT NUMBER ) AS
BEGIN
   BEGIN
      UPDATE DOSCURRENCY
      SET    DEVCODE  = sDevCode,
             DCUDTBEG = dtDcuDtBeg,
             DCUDTEND = dtDcuDtEnd,
			 DCUSCALE = nDcuScale,
			 DCUTARGET = sDcuTarget,
			 DCUROUNDINGMETHOD = sDcuRoundingMethod,
			 DCUMTIRMINIMALROUNDING = nDcumtirminimalRounding,
			 DCUMTIRLUMPROUNDING = nDcumtirlumpRounding,
			 DCUMTFLOORINTERESTROUNDING = nDcumtfloorinterestRounding,
			 DCUMTLUMPINTERESTROUNDING = nDcumtlumpinterestRounding,
			 DACORDRE = nDacOrdre,
			 FXFID = nFxfId
      WHERE  DOSID    = nDosId
      AND  DCUORDRE = nDcuOrdre;

      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCU_FOUND_CONST;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCU_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCU_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END U_DOSCURRENCY;

PROCEDURE I_DOSCURVALUE(
	nDosId          IN     DOSCURVALUE.DOSID%TYPE,
	nDcuOrdre       IN     DOSCURVALUE.DCUORDRE%TYPE,
	nDcvOrdre       IN     DOSCURVALUE.DCVORDRE%TYPE,
	sDcvChangeType  IN     DOSCURVALUE.DCVCHANGETYPE%TYPE,
	dtDcvDtValue    IN     DOSCURVALUE.DCVDTVALUE%TYPE,
	nDcvValue       IN     DOSCURVALUE.DCVVALUE%TYPE,
	nDcvFlagUpdated IN     DOSCURVALUE.DCVFLAGUPDATED%TYPE,
	nCreId          IN     DOSCURVALUE.CREID%TYPE,
    nDcvMargin  	IN     DOSCURVALUE.DCVMARGIN%TYPE,
	sDcvDateReference     IN     DOSCURVALUE.DCVDATEREFERENCE%TYPE,
	sDcvPeriod      IN     DOSCURVALUE.DCVPERIOD%TYPE,
	nDcvMultiple    IN     DOSCURVALUE.DCVMULTIPLE%TYPE,
	sDcvShiftType   IN     DOSCURVALUE.DCVSHIFTTYPE%TYPE,
	nDcvShiftValue  IN     DOSCURVALUE.DCVSHIFTVALUE%TYPE,
	dtDcvDtEnd IN     DOSCURVALUE.DCVDTEND%TYPE,
   nReturnCode     IN OUT NUMBER ) AS
BEGIN
   BEGIN
      INSERT INTO DOSCURVALUE(
		 DOSID,
		 DCUORDRE,
		 DCVORDRE,
		 DCVCHANGETYPE,
		 DCVDTVALUE,
		 DCVVALUE,
		 DCVFLAGUPDATED,
		 CREID,
		 DCVMARGIN ,
		 DCVDATEREFERENCE ,
	     DCVPERIOD ,
	     DCVMULTIPLE ,
	     DCVSHIFTTYPE ,
	     DCVSHIFTVALUE,
	     DCVDTEND 		 )
      VALUES(
         nDosId,
         nDcuOrdre,
         nDcvOrdre,
         sDcvChangeType,
         dtDcvDtValue,
         nDcvValue,
         nDcvFlagUpdated,
         nCreId,
		 nDcvMargin ,
		 sDcvDateReference ,
	     sDcvPeriod ,
	     nDcvMultiple ,
	     sDcvShiftType ,
	     nDcvShiftValue,
	     dtDcvDtEnd );

      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCV_FOUND_CONST;
      WHEN ERR_I_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCV_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCV_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END I_DOSCURVALUE;

PROCEDURE U_DOSCURVALUE(
    nDosId          IN     DOSCURVALUE.DOSID%TYPE,
    nDcuOrdre       IN     DOSCURVALUE.DCUORDRE%TYPE,
    nDcvOrdre       IN     DOSCURVALUE.DCVORDRE%TYPE,
    sDcvChangeType  IN     DOSCURVALUE.DCVCHANGETYPE%TYPE,
    dtDcvDtValue    IN     DOSCURVALUE.DCVDTVALUE%TYPE,
    nDcvValue       IN     DOSCURVALUE.DCVVALUE%TYPE,
    nDcvFlagUpdated IN     DOSCURVALUE.DCVFLAGUPDATED%TYPE,
    nCreId          IN     DOSCURVALUE.CREID%TYPE,
    nDcvMargin  	IN     DOSCURVALUE.DCVMARGIN%TYPE,
	sDcvDateReference     IN     DOSCURVALUE.DCVDATEREFERENCE%TYPE,
	sDcvPeriod      IN     DOSCURVALUE.DCVPERIOD%TYPE,
	nDcvMultiple    IN     DOSCURVALUE.DCVMULTIPLE%TYPE,
	sDcvShiftType   IN     DOSCURVALUE.DCVSHIFTTYPE%TYPE,
	nDcvShiftValue  IN     DOSCURVALUE.DCVSHIFTVALUE%TYPE,
	dtDcvDtEnd IN     DOSCURVALUE.DCVDTEND%TYPE,
    nReturnCode     IN OUT NUMBER ) AS
BEGIN
   BEGIN
      UPDATE DOSCURVALUE
      SET    DCVCHANGETYPE  = sDcvChangeType,
            DCVDTVALUE     = dtDcvDtValue,
            DCVVALUE       = nDcvValue,
            DCVFLAGUPDATED = nDcvFlagUpdated,
            CREID          = nCreId,
			DCVMARGIN 		= nDcvMargin ,
			DCVDATEREFERENCE  	= sDcvDateReference ,
			DCVPERIOD       = sDcvPeriod ,
			DCVMULTIPLE 	= nDcvMultiple ,
			DCVSHIFTTYPE    = sDcvShiftType ,
			DCVSHIFTVALUE   = nDcvShiftValue,
			DCVDTEND   = dtDcvDtEnd
      WHERE  DOSID    = nDosId
        AND  DCUORDRE = nDcuOrdre
        AND  DCVORDRE = nDcvOrdre;

      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCV_FOUND_CONST;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCV_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCV_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END U_DOSCURVALUE;

--PROCEDURE P_EVDAUTECLAT
--(
--  nCreId             CREVT.CREID%TYPE,
--  dtEffet            DOSFINANCE.DFIDTFINANCE%TYPE,
--  nDosId             DOSSIER.DOSID%TYPE,
--  aDosIdAut          NUMBER_ARRAY,
--  nMontant           IN NUMBER,
--  nReturnCode        IN OUT NUMBER
--)
--AS
--   nDosIdNew         DOSSIER.DOSID%TYPE;
--   nDosIdTemp        DOSSIER.DOSID%TYPE;
--   sTpgCodeTemp      DOSSIER.TPGCODE%TYPE;
--   sTacCodetemp      DOSSIER.TACCODE%TYPE;
--   sTypeFinTemp      DOSSIER.DOSTYPEFINANCEMENT%TYPE;
--   nDtfOrdre         DOSTACFIN.DTFORDRE%TYPE;
--   nIndex            NUMBER;
--   nDfiOrdre         DOSFINANCE.DFIORDRE%TYPE;
--   sRefNewDossier    CREDATA.CDADATASTRING%TYPE;
--
--BEGIN
--
--   SELECT SEQ_DOSID.NEXTVAL
--   INTO nDosIdNew
--   FROM DUAL ;
--
--   -- dossier
--   INSERT INTO DOSSIER
--   (
--      DOSID,
--      DEVCODE,
--      ACTID,
--      UTICODE,
--      TACCODE,
--      DOSNUM,
--      DOSNOM,
--      MANID,
--      DOSAVENANT,
--      DOSETAT,
--      DOSDUREEJOUR,
--      DOSDUREEMOIS,
--      DOSDUREEAN,
--      DOSDTDEB,
--      DOSDTFIN,
--      DOSDTMODIF,
--      DOSDTSIGNE,
--      DOSDTOPACHAT,
--      DOSDTCOMITE,
--      DOSDTEFFET,
--      DOSDTOUVERT,
--      DOSDTPRODUCT,
--      DOSPREAVIS,
--      DOSTYPEPENALITE,
--      DOSMTPENALITE,
--      DOSREGIMEFISCAL,
--      DOSPOOL,
--      DOSTAUXCAL,
--      DOSTAUX,
--      DOSTXMARGE,
--      DOSFLAGINDEXABLE,
--      DOSTYPEFINANCEMENT,
--      DOSDUREEACTUALAN,
--      DOSDUREEACTUALMOIS,
--      DOSDUREEACTUALJOUR,
--      DOSMTSIGN,
--      DOSMTCOMITE,
--      DOSMTOUVERT,
--      DOSMTPRODUCT,
--      TPGCODE,
--      DOSSECTGESTION,
--      DOSBAREME,
--      DOSMTMARGE,
--      DOSIDREFINANCE,
--      DOSFINSTRUCT,
--      DOSMTFORFAITRACHAT,
--      DOSPCTPENALITERACHAT,
--      DOSUSGAAP,
--      DOSTYPEPENALITERESIL,
--      DOSMTPENALITERESIL,
--      DOSPCTPENALITERESIL,
--      NAPCODE,
--      PAYCODE,
--      DOSFLAGRESTRUCT,
--      DOSDTDEBRESTRUCT,
--      DOSTRANSFERABILITE,
--      DOSFLAGCONFIDENTIEL,
--      DOSTAUXCALCACTUEL,
--      DOSIASEXERCICECRITERE,
--      DOSIASCLASSEMENT,
--      DOSIASFLAGMICROCOUVERTURE,
--      DOSIASFLAGNATURESPECIFIQUE,
--      DOSIASFLAGLOCATIONFINALE,
--      DOSIASFLAGTRANSFERTFINAL,
--      DOSIASDUREEECONOMIQUEAN,
--      DOSFLAGVRAUTO,
--      DOSIASDUREEECONOMIQUEMOIS,
--      DOSIASDUREEECONOMIQUEJOUR,
--      DOSIASMTVALEURINITIALE,
--      DOSIDLOCATIF,
--      DOSTXACTUALISE,
--      DOSIASFLAGMAJCLASSEMENT,
--      DOSIASMEMOMAJCLASSEMENT,
--      DOSFLAGDOUTEUXCOMPROMIS,
--      DOSDTDOUTEUXCOMPROMIS,
--      TAUCODE,
--      DOSIASMARCHE,
--      DOSIASPRODUIT,
--      DOSIASTXMARCHE,
--      DOSIASTOLERANCEMARCHE,
--      DOSIASTOLERANCEHORSMARCHE,
--      DOSIASDECOTEINITIALE,
--      DOSIASINSTRUMENTFINANCIER,
--      CALID
--   )
--   (  SELECT
--      nDosIdNew,
--      DEVCODE,
--      ACTID,
--      UTICODE,
--      TACCODE,
--      DOSNUM,
--      DOSNOM,
--      MANID,
--      DOSAVENANT+1,
--      DOSETAT,
--      DOSDUREEJOUR,
--      DOSDUREEMOIS,
--      DOSDUREEAN,
--      DOSDTDEB,
--      DOSDTFIN,
--      DOSDTMODIF,
--      DOSDTSIGNE,
--      DOSDTOPACHAT,
--      DOSDTCOMITE,
--      DOSDTEFFET,
--      DOSDTOUVERT,
--      DOSDTPRODUCT,
--      DOSPREAVIS,
--      DOSTYPEPENALITE,
--      DOSMTPENALITE,
--      DOSREGIMEFISCAL,
--      DOSPOOL,
--      DOSTAUXCAL,
--      DOSTAUX,
--      DOSTXMARGE,
--      DOSFLAGINDEXABLE,
--      DOSTYPEFINANCEMENT,
--      DOSDUREEACTUALAN,
--      DOSDUREEACTUALMOIS,
--      DOSDUREEACTUALJOUR,
--      DOSMTSIGN,
--      DOSMTCOMITE,
--      DOSMTOUVERT,
--      DOSMTPRODUCT,
--      TPGCODE,
--      DOSSECTGESTION,
--      DOSBAREME,
--      DOSMTMARGE,
--      DOSIDREFINANCE,
--      DOSFINSTRUCT,
--      DOSMTFORFAITRACHAT,
--      DOSPCTPENALITERACHAT,
--      DOSUSGAAP,
--      DOSTYPEPENALITERESIL,
--      DOSMTPENALITERESIL,
--      DOSPCTPENALITERESIL,
--      NAPCODE,
--      PAYCODE,
--      DOSFLAGRESTRUCT,
--      DOSDTDEBRESTRUCT,
--      DOSTRANSFERABILITE,
--      DOSFLAGCONFIDENTIEL,
--      DOSTAUXCALCACTUEL,
--      DOSIASEXERCICECRITERE,
--      DOSIASCLASSEMENT,
--      DOSIASFLAGMICROCOUVERTURE,
--      DOSIASFLAGNATURESPECIFIQUE,
--      DOSIASFLAGLOCATIONFINALE,
--      DOSIASFLAGTRANSFERTFINAL,
--      DOSIASDUREEECONOMIQUEAN,
--      DOSFLAGVRAUTO,
--      DOSIASDUREEECONOMIQUEMOIS,
--      DOSIASDUREEECONOMIQUEJOUR,
--      DOSIASMTVALEURINITIALE,
--      DOSIDLOCATIF,
--      DOSTXACTUALISE,
--      DOSIASFLAGMAJCLASSEMENT,
--      DOSIASMEMOMAJCLASSEMENT,
--      DOSFLAGDOUTEUXCOMPROMIS,
--      DOSDTDOUTEUXCOMPROMIS,
--      TAUCODE,
--      DOSIASMARCHE,
--      DOSIASPRODUIT,
--      DOSIASTXMARCHE,
--      DOSIASTOLERANCEMARCHE,
--      DOSIASTOLERANCEHORSMARCHE,
--      DOSIASDECOTEINITIALE,
--      DOSIASINSTRUMENTFINANCIER,
--      CALID
--      FROM DOSSIER
--      WHERE DOSID = nDosId
--   ) ;
--
--   SELECT DOSNUM || '/' || LPAD( DOSAVENANT, 2, '0' )
--   INTO sRefNewDossier
--   FROM DOSSIER
--   WHERE DOSID =  nDosIdNew ;
--
--   -- DOSACTEUR
--   INSERT INTO DOSACTEUR
--   (
--      DOSID,
--      DACORDRE,
--      FTVIDPLANCHER,
--      FTVIDPLAFOND,
--      DACORDREDELEGANT,
--      ACTID,
--      ACOORDRE,
--      ROLCODE,
--      RDEDELEGCODE,
--      TAXCODE,
--      RUBID,
--      TCIID,
--      CREID,
--      DACORDREREMPLACE,
--      DACDTDEB,
--      DACDTFIN,
--      DACGRPFAC,
--      DACFLAGCORRDOC,
--      DACDELAIA,
--      DACDELAIE,
--      DACFACAVANCE,
--      DACARRONDI,
--      DACCOMMENT,
--      DACREFCLI,
--      DACDGTAUX,
--      DACDESCRIPBIEN,
--      DACFLAGIRFACTURE,
--      DACFLAGIRCHQ,
--      DACMTIRMINIMAL,
--      DACMTIRFORFAIT,
--      DACTXIRPLANCHER,
--      DACTXIRPLAFOND,
--      DACNBMOISDG,
--      DACQUOTEPARTDG,
--      DACMTDG,
--      DACFLAGREVISABLEDG,
--      DACFLAGPALIERDG,
--      DACFLAGLOYTTCDG,
--      DACIRMARGE,
--      DACTXIRFIXE,
--      DACPCTIRFORFAIT,
--      DACMOTIFNONRELANCE,
--      DACPCTCOMMISSIONPREVUE,
--      DACTYPEDELAI,
--      DACNBEXFAC,
--      DACFLAGIRNONREVERSE,
--      DACFLAGNONPROF,
--      DACMANQUEAPAYER,
--      DOSIDCAPITALIZATION,
--      DRUORDRECAPITALIZATION,
--      DACTROPPERCU,
--      RUBIDTROPPERCU
--   )
--   (
--      SELECT
--      nDosIdNew,
--      DACORDRE,
--      FTVIDPLANCHER,
--      FTVIDPLAFOND,
--      DACORDREDELEGANT,
--      ACTID,
--      ACOORDRE,
--      ROLCODE,
--      RDEDELEGCODE,
--      TAXCODE,
--      RUBID,
--      TCIID,
--      CREID,
--      DACORDREREMPLACE,
--      DACDTDEB,
--      DACDTFIN,
--      DACGRPFAC,
--      DACFLAGCORRDOC,
--      DACDELAIA,
--      DACDELAIE,
--      DACFACAVANCE,
--      DACARRONDI,
--      DACCOMMENT,
--      DACREFCLI,
--      DACDGTAUX,
--      DACDESCRIPBIEN,
--      DACFLAGIRFACTURE,
--      DACFLAGIRCHQ,
--      DACMTIRMINIMAL,
--      DACMTIRFORFAIT,
--      DACTXIRPLANCHER,
--      DACTXIRPLAFOND,
--      DACNBMOISDG,
--      DACQUOTEPARTDG,
--      DACMTDG,
--      DACFLAGREVISABLEDG,
--      DACFLAGPALIERDG,
--      DACFLAGLOYTTCDG,
--      DACIRMARGE,
--      DACTXIRFIXE,
--      DACPCTIRFORFAIT,
--      DACMOTIFNONRELANCE,
--      DACPCTCOMMISSIONPREVUE,
--      DACTYPEDELAI,
--      DACNBEXFAC,
--      DACFLAGIRNONREVERSE,
--      DACFLAGNONPROF,
--      DACMANQUEAPAYER,
--      DOSIDCAPITALIZATION,
--      DRUORDRECAPITALIZATION,
--      DACTROPPERCU,
--      RUBIDTROPPERCU
--      FROM DOSACTEUR
--      WHERE DOSID = nDosId
--   ) ;
--
--
--
--   INSERT INTO DOSACTPAIEMENT
--   (
--      DOSID,
--      DAPTYPE,
--      DAPDTDEB,
--      DACORDRE,
--      RIBID,
--      DAPDTFIN,
--      CREID,
--      TMPCODE,
--      DAPDELAIPMT,
--      DAPBASEDEPART,
--      DAPJOUR,
--      DAPPCTESCOMPTE
--   )
--   (
--      SELECT
--      nDosIdNew,
--      DAPTYPE,
--      DAPDTDEB,
--      DACORDRE,
--      RIBID,
--      DAPDTFIN,
--      CREID,
--      TMPCODE,
--      DAPDELAIPMT,
--      DAPBASEDEPART,
--      DAPJOUR,
--      DAPPCTESCOMPTE
--      FROM DOSACTPAIEMENT
--      WHERE DOSID = nDosId
--   ) ;
--
--   INSERT INTO DOSACTADRESSE
--   (
--      DOSID,
--      ACTID,
--      DAAORDRE,
--      AADORDRE,
--      DACORDRE,
--      DAADTDEB,
--      DAADTFIN,
--      CREID
--   )
--   (
--      SELECT
--      nDosIdNew,
--      ACTID,
--      DAAORDRE,
--      AADORDRE,
--      DACORDRE,
--      DAADTDEB,
--      DAADTFIN,
--      CREID
--      FROM DOSACTADRESSE
--      WHERE DOSID = nDosId
--   );
--
--
--   INSERT INTO DOSPHASE
--   (
--      DOSID,
--      DPHORDRE,
--      PHACODE,
--      PHADEST,
--      UTICODE,
--      JALCODE,
--      DPHMOTIF,
--      DPHDTEFFET,
--      DPHDTFIN,
--      DPHDTMAJ,
--      CREID
--   )
--   (
--      SELECT
--      nDosIdNew,
--      DPHORDRE,
--      PHACODE,
--      PHADEST,
--      UTICODE,
--      JALCODE,
--      DPHMOTIF,
--      DPHDTEFFET,
--      DPHDTFIN,
--      DPHDTMAJ,
--      CREID
--      FROM DOSPHASE
--      WHERE DOSID = nDosId
--      AND  DPHDTFIN IS NULL
--   );
--
--   nDosIdTemp := aDosIdAut(1);
--
--   SELECT TACCODE
--   INTO sTacCodeTemp
--   FROM DOSSIER
--   WHERE DOSID = nDosIdTemp ;
--
--
--
--   UPDATE DOSSIER
--   SET TACCODE = sTacCodeTemp
--   WHERE DOSID = nDosIdNew ;
--
--
--
--
--   -- DOSTACFIN
--   SELECT TACCODE,
--          TPGCODE,
--          DOSTYPEFINANCEMENT
--   INTO   sTacCodeTemp,
--          sTpgCodeTemp,
--          sTypeFinTemp
--   FROM   DOSSIER
--   WHERE  DOSID = nDosIdNew ;
--   nDtfOrdre := 1 ;
--
--
--
--   INSERT INTO DOSTACFIN
--   (
--      DOSID,
--      DTFORDRE,
--      TPGCODE,
--      TACCODE,
--      DTFFINANCEMENT,
--      DTFFLAGPRINCIPAL
--   )
--   VALUES
--   (
--      nDosIdNew,
--      nDtfOrdre,
--      sTpgCodeTemp,
--      sTacCodeTemp,
--      sTypeFinTemp,
--      1
--   );
--
--   nIndex := 1;
--
--for indx in aDosIdAut.first..aDosIdAut.last loop
--   BEGIN
--         nDosIdTemp := aDosIdAut(indx);
--
--         UPDATE DOSSIER
--         SET DOSIDREFINANCE = nDosIdNew
--         WHERE DOSID = nDosIdTemp;
--
--
--
--         SELECT TACCODE,
--                TPGCODE,
--                DOSTYPEFINANCEMENT
--         INTO   sTacCodeTemp,
--                sTpgCodeTemp,
--                sTypeFinTemp
--         FROM   DOSSIER
--         WHERE  DOSID = nDosIdTemp ;
--
--         nDtfOrdre := nDtfOrdre + 1 ;
--
--         INSERT INTO DOSTACFIN
--         (
--            DOSID,
--            DTFORDRE,
--            TPGCODE,
--            TACCODE,
--            DTFFINANCEMENT,
--            DTFFLAGPRINCIPAL
--         )
--         VALUES
--         (
--            nDosIdTemp,
--            nDtfOrdre,
--            sTpgCodeTemp,
--            sTacCodeTemp,
--            sTypeFinTemp,
--            NULL
--         );
--
--         PA_EVT.I_CREDATA( nCreId, NULL, NULL,NULL , NULL , NULL, sRefNewDossier, nDosIdTemp, NULL, NULL, NULL, NULL, NULL, nReturnCode );
--
----        nIndex := nIndex + 1 ;
--    EXCEPTION
--       WHEN NO_DATA_FOUND THEN
--          EXIT;
--      END;
--   END LOOP;
--
--
--   SELECT Max(DFIORDRE)
--   INTO nDfiOrdre
--   FROM DOSFINANCE
--   WHERE DOSID = nDosId ;
--
--   INSERT INTO DOSFINANCE
--   (
--      DOSID,
--      DFIORDRE,
--      DFIDTFINANCE,
--      DFIMTEVT,
--      DFIMTTOTAL,
--      DFIMTVR,
--      DFIMTCBIFRAIS,
--      DFIMTCBIAMORTI,
--      DFIMTCBINONAMORTI,
--      DFIFLAGINDEXVR,
--      DFIPCTVR,
--      CREID,
--      POOID
--   )
--   (
--      SELECT
--      DOSID,
--      nDfiOrdre + 1,
--      dtEffet,
--      -nMontant,
--      DFIMTTOTAL - nMontant ,
--      DFIMTVR,
--      DFIMTCBIFRAIS,
--      DFIMTCBIAMORTI,
--      DFIMTCBINONAMORTI,
--      DFIFLAGINDEXVR,
--      DFIPCTVR,
--      nCreId,
--      POOID
--      FROM DOSFINANCE
--      WHERE DOSID = nDosID
--      AND DFIORDRE = nDfiOrdre
--   ) ;
--
--   INSERT INTO DOSFINANCE
--   (
--      DOSID,
--      DFIORDRE,
--      DFIDTFINANCE,
--      DFIMTEVT,
--      DFIMTTOTAL,
--      DFIMTVR,
--      DFIMTCBIFRAIS,
--      DFIMTCBIAMORTI,
--      DFIMTCBINONAMORTI,
--      DFIFLAGINDEXVR,
--      DFIPCTVR,
--      CREID,
--      POOID
--   )
--   VALUES
--   (
--      nDosIdNew,
--      1,
--      dtEffet,
--      nMontant,
--      nMontant,
--      NULL,
--      NULL,
--      NULL,
--      NULL,
--      NULL,
--      NULL,
--      nCreId,
--      NULL
--   ) ;
--END P_EVDAUTECLAT;

 FUNCTION F_CONVERT_TO_Tbl_dosid (
   sStr IN VARCHAR2) RETURN  PA_DEVTBLDOSSIER.Tbl_dosid IS
BEGIN
   DECLARE
      tblArray  PA_DEVTBLDOSSIER.Tbl_dosid;
      sTmp VARCHAR2(255);
      nIndexOfLastComma INTEGER;
      nIndexOfComma INTEGER;
      nNumberOfCommas INTEGER;
   BEGIN
      nNumberOfCommas := 1;
      nIndexOfLastComma := 0;
      nIndexOfComma := INSTRC(sStr, ',', 1, nNumberOfCommas);
      WHILE nIndexOfComma > 0
      LOOP
        sTmp := SUBSTRC( sStr, nIndexOfLastComma + 1, nIndexOfComma - nIndexOfLastComma - 1 );
        IF LENGTH(TRIM(sTmp)) <> 0 THEN
          tblArray( nNumberOfCommas  ) := TO_NUMBER(sTmp);
        END IF;
        nNumberOfCommas := nNumberOfCommas + 1;
        nIndexOfLastComma := nIndexOfComma;
        nIndexOfComma := INSTRC(sStr, ',', 1, nNumberOfCommas);
      END LOOP;
      IF nNumberOfCommas >= 1  THEN
        sTmp := SUBSTRC( sStr, nIndexOfLastComma + 1, LENGTH(sStr) - nIndexOfLastComma + 1 );
        IF LENGTH(TRIM(sTmp)) <> 0 THEN
          tblArray( nNumberOfCommas  ) := TO_NUMBER(sTmp);
        END IF;
      END IF;
  RETURN tblArray;
   END;
END F_CONVERT_TO_Tbl_dosid;

PROCEDURE P_EVDAUTECLAT
(
  nCreId             CREVT.CREID%TYPE,
  dtEffet            DOSFINANCE.DFIDTFINANCE%TYPE,
  nDosId             DOSSIER.DOSID%TYPE,
  sDosIdAut          VARCHAR2,
  nMontant           IN NUMBER,
  nReturnCode        IN OUT NUMBER
)
AS
   nDosIdNew         DOSSIER.DOSID%TYPE;
   nDosIdTemp        DOSSIER.DOSID%TYPE;
   sTpgCodeTemp      DOSSIER.TPGCODE%TYPE;
   sTacCodetemp      DOSSIER.TACCODE%TYPE;
   sTypeFinTemp      DOSSIER.DOSTYPEFINANCEMENT%TYPE;
   nDtfOrdre         DOSTACFIN.DTFORDRE%TYPE;
   nIndex            NUMBER;
   nDfiOrdre         DOSFINANCE.DFIORDRE%TYPE;
   sRefNewDossier    CREDATA.CDADATASTRING%TYPE;
    aDosIdAut          PA_DEVTBLDOSSIER.Tbl_dosid;
BEGIN
aDosIdAut := F_CONVERT_TO_Tbl_dosid( sDosIdAut);
   SELECT SEQ_DOSID.NEXTVAL
   INTO nDosIdNew
   FROM DUAL ;

   -- dossier
   INSERT INTO DOSSIER
   (
      DOSID,
      DEVCODE,
      ACTID,
      UTICODE,
      TACCODE,
      DOSNUM,
      DOSNOM,
      MANID,
      DOSAVENANT,
      DOSETAT,
      DOSDUREEJOUR,
      DOSDUREEMOIS,
      DOSDUREEAN,
      DOSDTDEB,
      DOSDTFIN,
      DOSDTMODIF,
      DOSDTSIGNE,
      DOSDTOPACHAT,
      DOSDTCOMITE,
      DOSDTEFFET,
      DOSDTOUVERT,
      DOSDTPRODUCT,
      DOSPREAVIS,
      DOSTYPEPENALITE,
      DOSMTPENALITE,
      DOSREGIMEFISCAL,
      DOSPOOL,
      DOSTAUXCAL,
      DOSTAUX,
      DOSTXMARGE,
      DOSFLAGINDEXABLE,
      DOSTYPEFINANCEMENT,
      DOSDUREEACTUALAN,
      DOSDUREEACTUALMOIS,
      DOSDUREEACTUALJOUR,
      DOSMTSIGN,
      DOSMTCOMITE,
      DOSMTOUVERT,
      DOSMTPRODUCT,
      TPGCODE,
      DOSSECTGESTION,
      DOSBAREME,
      DOSMTMARGE,
      DOSIDREFINANCE,
      DOSFINSTRUCT,
      DOSMTFORFAITRACHAT,
      DOSPCTPENALITERACHAT,
      DOSUSGAAP,
      DOSTYPEPENALITERESIL,
      DOSMTPENALITERESIL,
      DOSPCTPENALITERESIL,
      NAPCODE,
      PAYCODE,
      DOSFLAGRESTRUCT,
      DOSDTDEBRESTRUCT,
      DOSTRANSFERABILITE,
      DOSFLAGCONFIDENTIEL,
      DOSTAUXCALCACTUEL,
      DOSIASEXERCICECRITERE,
      DOSIASCLASSEMENT,
      DOSIASFLAGMICROCOUVERTURE,
      DOSIASFLAGNATURESPECIFIQUE,
      DOSIASFLAGLOCATIONFINALE,
      DOSIASFLAGTRANSFERTFINAL,
      DOSIASDUREEECONOMIQUEAN,
      DOSFLAGVRAUTO,
      DOSIASDUREEECONOMIQUEMOIS,
      DOSIASDUREEECONOMIQUEJOUR,
      DOSIASMTVALEURINITIALE,
      DOSIDLOCATIF,
      DOSTXACTUALISE,
      DOSIASFLAGMAJCLASSEMENT,
      DOSIASMEMOMAJCLASSEMENT,
      DOSFLAGDOUTEUXCOMPROMIS,
      DOSDTDOUTEUXCOMPROMIS,
      TAUCODE,
      DOSIASMARCHE,
      DOSIASPRODUIT,
      DOSIASTXMARCHE,
      DOSIASTOLERANCEMARCHE,
      DOSIASTOLERANCEHORSMARCHE,
      DOSIASDECOTEINITIALE,
      DOSIASINSTRUMENTFINANCIER,
      CALID
   )
   (  SELECT
      nDosIdNew,
      DEVCODE,
      ACTID,
      UTICODE,
      TACCODE,
      DOSNUM,
      DOSNOM,
      MANID,
      DOSAVENANT+1,
      DOSETAT,
      DOSDUREEJOUR,
      DOSDUREEMOIS,
      DOSDUREEAN,
      DOSDTDEB,
      DOSDTFIN,
      DOSDTMODIF,
      DOSDTSIGNE,
      DOSDTOPACHAT,
      DOSDTCOMITE,
      DOSDTEFFET,
      DOSDTOUVERT,
      DOSDTPRODUCT,
      DOSPREAVIS,
      DOSTYPEPENALITE,
      DOSMTPENALITE,
      DOSREGIMEFISCAL,
      DOSPOOL,
      DOSTAUXCAL,
      DOSTAUX,
      DOSTXMARGE,
      DOSFLAGINDEXABLE,
      DOSTYPEFINANCEMENT,
      DOSDUREEACTUALAN,
      DOSDUREEACTUALMOIS,
      DOSDUREEACTUALJOUR,
      DOSMTSIGN,
      DOSMTCOMITE,
      DOSMTOUVERT,
      DOSMTPRODUCT,
      TPGCODE,
      DOSSECTGESTION,
      DOSBAREME,
      DOSMTMARGE,
      DOSIDREFINANCE,
      DOSFINSTRUCT,
      DOSMTFORFAITRACHAT,
      DOSPCTPENALITERACHAT,
      DOSUSGAAP,
      DOSTYPEPENALITERESIL,
      DOSMTPENALITERESIL,
      DOSPCTPENALITERESIL,
      NAPCODE,
      PAYCODE,
      DOSFLAGRESTRUCT,
      DOSDTDEBRESTRUCT,
      DOSTRANSFERABILITE,
      DOSFLAGCONFIDENTIEL,
      DOSTAUXCALCACTUEL,
      DOSIASEXERCICECRITERE,
      DOSIASCLASSEMENT,
      DOSIASFLAGMICROCOUVERTURE,
      DOSIASFLAGNATURESPECIFIQUE,
      DOSIASFLAGLOCATIONFINALE,
      DOSIASFLAGTRANSFERTFINAL,
      DOSIASDUREEECONOMIQUEAN,
      DOSFLAGVRAUTO,
      DOSIASDUREEECONOMIQUEMOIS,
      DOSIASDUREEECONOMIQUEJOUR,
      DOSIASMTVALEURINITIALE,
      DOSIDLOCATIF,
      DOSTXACTUALISE,
      DOSIASFLAGMAJCLASSEMENT,
      DOSIASMEMOMAJCLASSEMENT,
      DOSFLAGDOUTEUXCOMPROMIS,
      DOSDTDOUTEUXCOMPROMIS,
      TAUCODE,
      DOSIASMARCHE,
      DOSIASPRODUIT,
      DOSIASTXMARCHE,
      DOSIASTOLERANCEMARCHE,
      DOSIASTOLERANCEHORSMARCHE,
      DOSIASDECOTEINITIALE,
      DOSIASINSTRUMENTFINANCIER,
      CALID
      FROM DOSSIER
      WHERE DOSID = nDosId
   ) ;

   SELECT DOSNUM || '/' || LPAD( DOSAVENANT, 2, '0' )
   INTO sRefNewDossier
   FROM DOSSIER
   WHERE DOSID =  nDosIdNew ;

   -- DOSACTEUR
   INSERT INTO DOSACTEUR
   (
      DOSID,
      DACORDRE,
      FTVIDPLANCHER,
      FTVIDPLAFOND,
      DACORDREDELEGANT,
      ACTID,
      ACOORDRE,
      ROLCODE,
      RDEDELEGCODE,
      TAXCODE,
      RUBID,
      TCIID,
      CREID,
      DACORDREREMPLACE,
      DACDTDEB,
      DACDTFIN,
      DACGRPFAC,
      DACFLAGCORRDOC,
      DACDELAIA,
      DACDELAIE,
      DACFACAVANCE,
      DACARRONDI,
      DACCOMMENT,
      DACREFCLI,
      DACDGTAUX,
      DACDESCRIPBIEN,
      DACFLAGIRFACTURE,
      DACFLAGIRCHQ,
      DACMTIRMINIMAL,
      DACMTIRFORFAIT,
      DACTXIRPLANCHER,
      DACTXIRPLAFOND,
      DACNBMOISDG,
      DACQUOTEPARTDG,
      DACMTDG,
      DACFLAGREVISABLEDG,
      DACFLAGPALIERDG,
      DACFLAGLOYTTCDG,
      DACIRMARGE,
      DACTXIRFIXE,
      DACPCTIRFORFAIT,
      DACMOTIFNONRELANCE,
      DACPCTCOMMISSIONPREVUE,
      DACTYPEDELAI,
      DACNBEXFAC,
      DACFLAGIRNONREVERSE,
      DACFLAGNONPROF,
      DACMANQUEAPAYER,
      DOSIDCAPITALIZATION,
      DRUORDRECAPITALIZATION,
      DACTROPPERCU,
      RUBIDTROPPERCU
   )
   (
      SELECT
      nDosIdNew,
      DACORDRE,
      FTVIDPLANCHER,
      FTVIDPLAFOND,
      DACORDREDELEGANT,
      ACTID,
      ACOORDRE,
      ROLCODE,
      RDEDELEGCODE,
      TAXCODE,
      RUBID,
      TCIID,
      CREID,
      DACORDREREMPLACE,
      DACDTDEB,
      DACDTFIN,
      DACGRPFAC,
      DACFLAGCORRDOC,
      DACDELAIA,
      DACDELAIE,
      DACFACAVANCE,
      DACARRONDI,
      DACCOMMENT,
      DACREFCLI,
      DACDGTAUX,
      DACDESCRIPBIEN,
      DACFLAGIRFACTURE,
      DACFLAGIRCHQ,
      DACMTIRMINIMAL,
      DACMTIRFORFAIT,
      DACTXIRPLANCHER,
      DACTXIRPLAFOND,
      DACNBMOISDG,
      DACQUOTEPARTDG,
      DACMTDG,
      DACFLAGREVISABLEDG,
      DACFLAGPALIERDG,
      DACFLAGLOYTTCDG,
      DACIRMARGE,
      DACTXIRFIXE,
      DACPCTIRFORFAIT,
      DACMOTIFNONRELANCE,
      DACPCTCOMMISSIONPREVUE,
      DACTYPEDELAI,
      DACNBEXFAC,
      DACFLAGIRNONREVERSE,
      DACFLAGNONPROF,
      DACMANQUEAPAYER,
      DOSIDCAPITALIZATION,
      DRUORDRECAPITALIZATION,
      DACTROPPERCU,
      RUBIDTROPPERCU
      FROM DOSACTEUR
      WHERE DOSID = nDosId
   ) ;



   INSERT INTO DOSACTPAIEMENT
   (
      DOSID,
      DAPTYPE,
      DAPDTDEB,
      DACORDRE,
      RIBID,
      DAPDTFIN,
      CREID,
      TMPCODE,
      DAPDELAIPMT,
      DAPBASEDEPART,
      DAPJOUR,
      DAPPCTESCOMPTE
   )
   (
      SELECT
      nDosIdNew,
      DAPTYPE,
      DAPDTDEB,
      DACORDRE,
      RIBID,
      DAPDTFIN,
      CREID,
      TMPCODE,
      DAPDELAIPMT,
      DAPBASEDEPART,
      DAPJOUR,
      DAPPCTESCOMPTE
      FROM DOSACTPAIEMENT
      WHERE DOSID = nDosId
   ) ;

   INSERT INTO DOSACTADRESSE
   (
      DOSID,
      ACTID,
      DAAORDRE,
      AADORDRE,
      DACORDRE,
      DAADTDEB,
      DAADTFIN,
      CREID
   )
   (
      SELECT
      nDosIdNew,
      ACTID,
      DAAORDRE,
      AADORDRE,
      DACORDRE,
      DAADTDEB,
      DAADTFIN,
      CREID
      FROM DOSACTADRESSE
      WHERE DOSID = nDosId
   );


   INSERT INTO DOSPHASE
   (
      DOSID,
      DPHORDRE,
      PHACODE,
      PHADEST,
      UTICODE,
      JALCODE,
      DPHMOTIF,
      DPHDTEFFET,
      DPHDTFIN,
      DPHDTMAJ,
      CREID
   )
   (
      SELECT
      nDosIdNew,
      DPHORDRE,
      PHACODE,
      PHADEST,
      UTICODE,
      JALCODE,
      DPHMOTIF,
      DPHDTEFFET,
      DPHDTFIN,
      DPHDTMAJ,
      CREID
      FROM DOSPHASE
      WHERE DOSID = nDosId
      AND  DPHDTFIN IS NULL
   );

   nDosIdTemp := aDosIdAut(1);


   SELECT TACCODE
   INTO sTacCodeTemp
   FROM DOSSIER
   WHERE DOSID = nDosIdTemp ;



   UPDATE DOSSIER
   SET TACCODE = sTacCodeTemp
   WHERE DOSID = nDosIdNew ;




   -- DOSTACFIN
   SELECT TACCODE,
          TPGCODE,
          DOSTYPEFINANCEMENT
   INTO   sTacCodeTemp,
          sTpgCodeTemp,
          sTypeFinTemp
   FROM   DOSSIER
   WHERE  DOSID = nDosIdNew ;
   nDtfOrdre := 1 ;



   INSERT INTO DOSTACFIN
   (
      DOSID,
      DTFORDRE,
      TPGCODE,
      TACCODE,
      DTFFINANCEMENT,
      DTFFLAGPRINCIPAL
   )
   VALUES
   (
      nDosIdNew,
      nDtfOrdre,
      sTpgCodeTemp,
      sTacCodeTemp,
      sTypeFinTemp,
      1
   );

   nIndex := 1;
   LOOP
      BEGIN
         nDosIdTemp := aDosIdAut(nIndex);


         UPDATE DOSSIER
         SET DOSIDREFINANCE = nDosIdNew
         WHERE DOSID = nDosIdTemp;



         SELECT TACCODE,
                TPGCODE,
                DOSTYPEFINANCEMENT
         INTO   sTacCodeTemp,
                sTpgCodeTemp,
                sTypeFinTemp
         FROM   DOSSIER
         WHERE  DOSID = nDosIdTemp ;

         nDtfOrdre := nDtfOrdre + 1 ;

         INSERT INTO DOSTACFIN
         (
            DOSID,
            DTFORDRE,
            TPGCODE,
            TACCODE,
            DTFFINANCEMENT,
            DTFFLAGPRINCIPAL
         )
         VALUES
         (
            nDosIdTemp,
            nDtfOrdre,
            sTpgCodeTemp,
            sTacCodeTemp,
            sTypeFinTemp,
            NULL
         );

         PA_EVT.I_CREDATA( nCreId, NULL, NULL,NULL , NULL , NULL, sRefNewDossier, nDosIdTemp, NULL, NULL, NULL, NULL, NULL, nReturnCode );

         nIndex := nIndex + 1 ;
      EXCEPTION
         WHEN NO_DATA_FOUND THEN
           EXIT;
      END;
   END LOOP;


   SELECT Max(DFIORDRE)
   INTO nDfiOrdre
   FROM DOSFINANCE
   WHERE DOSID = nDosId ;

   INSERT INTO DOSFINANCE
   (
      DOSID,
      DFIORDRE,
      DFIDTFINANCE,
      DFIMTEVT,
      DFIMTTOTAL,
      DFIMTVR,
      DFIMTCBIFRAIS,
      DFIMTCBIAMORTI,
      DFIMTCBINONAMORTI,
      DFIFLAGINDEXVR,
      DFIPCTVR,
      CREID,
      POOID
   )
   (
      SELECT
      DOSID,
      nDfiOrdre + 1,
      dtEffet,
      -nMontant,
      DFIMTTOTAL - nMontant ,
      DFIMTVR,
      DFIMTCBIFRAIS,
      DFIMTCBIAMORTI,
      DFIMTCBINONAMORTI,
      DFIFLAGINDEXVR,
      DFIPCTVR,
      nCreId,
      POOID
      FROM DOSFINANCE
      WHERE DOSID = nDosID
      AND DFIORDRE = nDfiOrdre
   ) ;

   INSERT INTO DOSFINANCE
   (
      DOSID,
      DFIORDRE,
      DFIDTFINANCE,
      DFIMTEVT,
      DFIMTTOTAL,
      DFIMTVR,
      DFIMTCBIFRAIS,
      DFIMTCBIAMORTI,
      DFIMTCBINONAMORTI,
      DFIFLAGINDEXVR,
      DFIPCTVR,
      CREID,
      POOID
   )
   VALUES
   (
      nDosIdNew,
      1,
      dtEffet,
      nMontant,
      nMontant,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      NULL,
      nCreId,
      NULL
   ) ;
END P_EVDAUTECLAT;

PROCEDURE U_DOSACTADRESSE (
  nDosId                DOSACTADRESSE.DOSID%TYPE,
  nDaaOrdre             DOSACTADRESSE.DAAORDRE%TYPE,
  nDacOrdre             DOSACTADRESSE.DACORDRE%TYPE,
  nAadOrdre             DOSACTADRESSE.AADORDRE%TYPE,
  dtDaaDtDeb            DOSACTADRESSE.DAADTDEB%TYPE,
  dtDaaDtFin            DOSACTADRESSE.DAADTFIN%TYPE,
  nCreId                DOSACTADRESSE.CREID%TYPE,
  nReturnCode           IN OUT NUMBER
  )
AS
BEGIN
    UPDATE DOSACTADRESSE
    SET  DAADTFIN = dtDaaDtFin,
         CREID = nCreId,
    		AADORDRE = nAadOrdre,
			DAADTDEB = dtDaaDtDeb
    WHERE DOSID = nDosId
    AND DACORDRE = nDacOrdre
    AND DAAORDRE = nDaaOrdre ;

    nReturnCode := 0;
    IF SQL%ROWCOUNT = 0 THEN
      nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := EP_DOSACTADRESSE_NF;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_DOSACTADRESSE_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_DOSACTADRESSE_V;
      WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
END U_DOSACTADRESSE;

PROCEDURE I_DOSCOVENANT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	dtDcoDtBeg	IN DOSCOVENANT.DCODTBEG%TYPE,
	dtDcoDtEnd	IN DOSCOVENANT.DCODTEND%TYPE,
	nCreId		IN DOSCOVENANT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
   BEGIN
      INSERT INTO DOSCOVENANT(
         DOSID,
         COVID,
         DCOORDRE,
         DCODTBEG,
         DCODTEND,
         CREID )
      VALUES(
         nDosId,
         nCovId,
         nDcoOrdre,
         dtDcoDtBeg,
         dtDcoDtEnd,
         nCreId );
      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCO_FOUND_CONST;
      WHEN ERR_I_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCO_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCO_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END I_DOSCOVENANT;

PROCEDURE U_DOSCOVENANT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	dtDcoDtBeg	IN DOSCOVENANT.DCODTBEG%TYPE,
	dtDcoDtEnd	IN DOSCOVENANT.DCODTEND%TYPE,
	nCreId		IN DOSCOVENANT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
   BEGIN
      UPDATE DOSCOVENANT
      SET    DCODTBEG       = dtDcoDtBeg,
             DCODTEND = dtDcoDtEnd,
             CREID          = nCreId
      WHERE  DOSID    = nDosId
        AND  COVID = nCovId
        AND  DCOORDRE = nDcoOrdre;

      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCO_FOUND_CONST;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCO_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCO_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END U_DOSCOVENANT;

 PROCEDURE D_DOSCOVENANT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
   DECLARE
        CURSOR cDoc IS
			SELECT DMAID
			FROM   DOCUMENTMANAGEMENT
	         WHERE  DOSID  = nDosId
	           AND	COVID  = nCovId
			   AND	DCOORDRE = nDcoOrdre;
		CURSOR cAdm IS
	         SELECT ADMID
	         FROM   ADMINISTRATIF
	         WHERE  DOSID  = nDosId
	           AND	COVID  = nCovId
			   AND	DCOORDRE = nDcoOrdre;
   BEGIN
	  FOR cDoc_rec IN cDoc LOOP
		 PA_UPDATEADMINISTRATIF.D_DOCUMENTMANAGEMENT( cDoc_rec.DMAID,nReturnCode);
		 IF nReturnCode != 0 THEN
			EXIT;
		END IF;
	  END LOOP;
	  FOR cAdm_rec IN cAdm LOOP
		 IF nReturnCode != 0 THEN
			EXIT;
		END IF;
		 PA_UPDATEADMINISTRATIF.D_ADMINISTRATIF( cAdm_rec.ADMID,nReturnCode);
	  END LOOP;
	  IF nReturnCode = 0 THEN
		  DELETE DOSCOVRESULT
	      WHERE  DOSID    = nDosId
	        AND  COVID = nCovId
	        AND  DCOORDRE = nDcoOrdre;
	      DELETE FROM DOSCOVENANT
	      WHERE  DOSID    = nDosId
	        AND  COVID = nCovId
	        AND  DCOORDRE = nDcoOrdre;

      nReturnCode := 0;
      IF SQL%ROWCOUNT=0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
	end if;
   EXCEPTION
      WHEN ERR_CHILD_FOUND THEN
         nReturnCode := ERR_CHILD_DCO_FOUND_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END D_DOSCOVENANT;

PROCEDURE I_DOSCOVRESULT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nDcrOrdre	IN DOSCOVRESULT.DCRORDRE%TYPE,
	sDcrDesc	IN DOSCOVRESULT.DCRDESCRIPTION%TYPE,
	sDcrLongDesc	IN DOSCOVRESULT.DCRLONGDESCRIPTION%TYPE,
	sDcrStatus	IN DOSCOVRESULT.DCRSTATUS%TYPE,
	nTbaId		IN DOSCOVRESULT.TBAID%TYPE,
	nCreId		IN DOSCOVRESULT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
   BEGIN
      INSERT INTO DOSCOVRESULT(
         DOSID,
         COVID,
         DCOORDRE,
         DCRORDRE,
         DCRDESCRIPTION,
		 DCRLONGDESCRIPTION,
		 DCRSTATUS,
		 TBAID,
         CREID )
      VALUES(
         nDosId,
         nCovId,
         nDcoOrdre,
         nDcrOrdre,
         sDcrDesc,
		 sDcrLongDesc,
		 sDcrStatus,
		 nTbaId,
         nCreId );
      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCOR_FOUND_CONST;
      WHEN ERR_I_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCOR_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCOR_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END I_DOSCOVRESULT;

PROCEDURE U_DOSCOVRESULT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nDcrOrdre	IN DOSCOVRESULT.DCRORDRE%TYPE,
	sDcrDesc	IN DOSCOVRESULT.DCRDESCRIPTION%TYPE,
	sDcrLongDesc	IN DOSCOVRESULT.DCRLONGDESCRIPTION%TYPE,
	sDcrStatus	IN DOSCOVRESULT.DCRSTATUS%TYPE,
	nTbaId		IN DOSCOVRESULT.TBAID%TYPE,
	nCreId		IN DOSCOVRESULT.CREID%TYPE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
   BEGIN
      UPDATE DOSCOVRESULT
      SET    DCRDESCRIPTION = sDcrDesc,
             DCRLONGDESCRIPTION = sDcrLongDesc,
             DCRSTATUS = sDcrStatus,
             TBAID = nTbaId,
             CREID          = nCreId
      WHERE  DOSID    = nDosId
        AND  COVID = nCovId
        AND  DCOORDRE = nDcoOrdre
		AND  DCRORDRE = nDcrOrdre;

      nReturnCode := 0;
      IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := ERR_PARENT_DCO_FOUND_CONST;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
         nReturnCode := ERR_NULL_DCO_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DCO_INDEX_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END U_DOSCOVRESULT;

PROCEDURE D_DOSCOVRESULT(
	nDosId		IN DOSCOVENANT.DOSID%TYPE,
	nCovId		IN DOSCOVENANT.COVID%TYPE,
	nDcoOrdre	IN DOSCOVENANT.DCOORDRE%TYPE,
	nDcrOrdre	IN DOSCOVRESULT.DCRORDRE%TYPE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
   BEGIN
      DELETE FROM DOSCOVRESULT
      WHERE  DOSID    = nDosId
        AND  COVID = nCovId
        AND  DCOORDRE = nDcoOrdre
		AND	 DCRORDRE = nDcrOrdre;

      nReturnCode := 0;
      IF SQL%ROWCOUNT=0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_CHILD_FOUND THEN
         nReturnCode := ERR_CHILD_DCO_FOUND_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
   END;
END D_DOSCOVRESULT;

PROCEDURE I_DOSACTEUR (
  nDosId              DOSACTEUR.DOSID%TYPE,
  nActId              DOSACTEUR.ACTID%TYPE,
  sRolCode            DOSACTEUR.ROLCODE%TYPE,
  sRdeDelegCode       DOSACTEUR.RDEDELEGCODE%TYPE,
  nAcoOrdre           DOSACTEUR.ACOORDRE%TYPE,
  sTaxCode            DOSACTEUR.TAXCODE%TYPE,
  nRubId              DOSACTEUR.RUBID%TYPE,
  nTciId              DOSACTEUR.TCIID%TYPE,
  dtDacDtDeb          DOSACTEUR.DACDTDEB%TYPE,
  dtDacDtFin          DOSACTEUR.DACDTFIN%TYPE,
  sDacGrpFac          DOSACTEUR.DACGRPFAC%TYPE,
  nDacFlagCorrDoc     DOSACTEUR.DACFLAGCORRDOC%TYPE,
  nDacFlagIRFacture   DOSACTEUR.DACFLAGIRFACTURE%TYPE,
  nDacFlagIRChq       DOSACTEUR.DACFLAGIRCHQ%TYPE,
  nDacDelaiA          DOSACTEUR.DACDELAIA%TYPE,
  nDacDelaiE          DOSACTEUR.DACDELAIE%TYPE,
  nDacFacAvance       DOSACTEUR.DACFACAVANCE%TYPE,
  sDacArrondi         DOSACTEUR.DACARRONDI%TYPE,
  sDacComment         DOSACTEUR.DACCOMMENT%TYPE,
  sDacRefCli          DOSACTEUR.DACREFCLI%TYPE,
  nDacDgTaux          DOSACTEUR.DACDGTAUX%TYPE,
  nDacDescripBien     DOSACTEUR.DACDESCRIPBIEN%TYPE,
  nDacOrdre           DOSACTEUR.DACORDRE%TYPE,
  nDacOrdreDelegant   DOSACTEUR.DACORDREDELEGANT%TYPE,
  nActIdGestion            DOSACTEUR.ACTID%TYPE,
  nCreId                   DOSACTEUR.CREID%TYPE,
  nDacMtIrMinimal          DOSACTEUR.DACMTIRMINIMAL%TYPE,
  nDacMtIrForfait          DOSACTEUR.DACMTIRFORFAIT%TYPE,
  nDacTxIrPlancher         DOSACTEUR.DACTXIRPLANCHER%TYPE,
  nDacTxIrPlafond          DOSACTEUR.DACTXIRPLAFOND%TYPE,
  nDacOrdreRemplace        DOSACTEUR.DACORDREREMPLACE%TYPE,
  --bd10102000
  nDacIrMarge              DOSACTEUR.DACIRMARGE%TYPE,
  nDacTxIrFixe             DOSACTEUR.DACTXIRFIXE%TYPE,
  nDacNbMoisDg             DOSACTEUR.DACNBMOISDG%TYPE,
  nDacQuotePartDg          DOSACTEUR.DACQUOTEPARTDG%TYPE,
  nDacMtDg                 DOSACTEUR.DACMTDG%TYPE,
  nDacFlagRevisableDg      DOSACTEUR.DACFLAGREVISABLEDG%TYPE,
  nDacFlagPalierDg         DOSACTEUR.DACFLAGPALIERDG%TYPE,
  nDacFlagLoyTtcDg         DOSACTEUR.DACFLAGLOYTTCDG%TYPE,
  nDacFtvIdPlafond         DOSACTEUR.FTVIDPLAFOND%TYPE,           --LG 12112002
  nDacFtvIdPlancher        DOSACTEUR.FTVIDPLANCHER%TYPE,
  sDacMotifNonRelance      DOSACTEUR.DACMOTIFNONRELANCE%TYPE,
  nDacPctIrForfait         DOSACTEUR.DACPCTIRFORFAIT%TYPE,
  nDacPctCommissionPrevu   DOSACTEUR.DACPCTCOMMISSIONPREVUE%TYPE,
  nDacTypeDelai            DOSACTEUR.DACTYPEDELAI%TYPE,
  nDacNbExFac              DOSACTEUR.DACNBEXFAC%TYPE,
  nDacFlagIRNonReverse     DOSACTEUR.DACFLAGIRNONREVERSE%TYPE,    -- CV-13062005 FSA-14373 SG : Passage v3.47
  sDacManqueAPayer		     DOSACTEUR.DACMANQUEAPAYER%TYPE,		--ALA Waterfall d1
  sDacTropPercu			       DOSACTEUR.DACTROPPERCU%TYPE,			--ALA Waterfall d1
  nDosIdCapitalization	   DOSACTEUR.DOSIDCAPITALIZATION%TYPE,	--ALA Waterfall d1
  nDruOrdreCapitalization  DOSACTEUR.DRUORDRECAPITALIZATION%TYPE,--ALA Waterfall d1
  nRubIdTropPercu		       DOSACTEUR.RUBIDTROPPERCU%TYPE,		--ALA Waterfall d1
  sDacEmailFac             DOSACTEUR.DACEMAILFAC%TYPE,
  sDacEnvoiNotice          DOSACTEUR.DACENVOINOTICE%TYPE,
  sDacQpMethodeRemise 	   DOSACTEUR.DACQPMETHODEREMISE%TYPE,
  nManId							     DOSACTEUR.MANID%TYPE,
  nDacFlagNomProf          DOSACTEUR.DACFLAGNONPROF%TYPE,		--ALA 020507
  nDacMtFloorInterest      DOSACTEUR.DACMTFLOORINTEREST%TYPE,
  nDacMtLumpInterest       DOSACTEUR.DACMTLUMPINTEREST%TYPE,
  nDacPctLumpInterest      DOSACTEUR.DACPCTLUMPINTEREST%TYPE,
  nDacFixedDay    	       	DOSACTEUR.DACFIXEDDAY%TYPE,
  sDacinvoicemethod			DOSACTEUR.DACINVOICEMETHOD%TYPE,
  sDacreftaxfree			DOSACTEUR.DACREFTAXFREE%TYPE,
  dtDacdttaxfreeagreement	DOSACTEUR.DACDTTAXFREEAGREEMENT%TYPE,
  dtDacdttaxfreebegin		DOSACTEUR.DACDTTAXFREEBEGIN%TYPE,
  sDactypenoremind			DOSACTEUR.DACTYPENOREMIND%TYPE,
  dtDacdtendnoremind		DOSACTEUR.DACDTENDNOREMIND%TYPE,
  nReturnCode  IN OUT NUMBER ) AS
BEGIN
   BEGIN
      nReturnCode := 0;

      PA_UPDATEACTEUR2.P_MAJDTVALIDE_AROAGE(
         nActId,
         sRolCode,
         nActIdGestion,
         dtDacDtDeb,
         nReturnCode );

      IF ( nReturnCode = 0 ) THEN
          INSERT INTO DOSACTEUR (
             DOSID,
             ACTID,
             ROLCODE,
             RDEDELEGCODE,
             ACOORDRE,
             TAXCODE,
             RUBID,
             TCIID,
             DACDTDEB,
             DACDTFIN,
             DACGRPFAC,
             DACFLAGCORRDOC,
             DACFLAGIRFACTURE,
             DACFLAGIRCHQ,
             DACDELAIA,
             DACDELAIE,
             DACFACAVANCE,
             DACARRONDI,
             DACCOMMENT,
             DACREFCLI,
             DACDGTAUX,
             DACDESCRIPBIEN,
             DACORDRE,
             DACORDREDELEGANT,
             CREID,
             DACMTIRMINIMAL,
	          DACMTIRFORFAIT,
	          DACTXIRPLANCHER,
	          DACTXIRPLAFOND,
             --bd10102000
             DACIRMARGE,
             DACTXIRFIXE,
             DACNBMOISDG,
             DACQUOTEPARTDG,
             DACMTDG,
             DACFLAGREVISABLEDG,
             DACFLAGPALIERDG,
             DACFLAGLOYTTCDG,
             FTVIDPLAFOND,          --LG 12112002
             FTVIDPLANCHER,
             DACMOTIFNONRELANCE,
             DACPCTIRFORFAIT,
             DACPCTCOMMISSIONPREVUE,
             DACTYPEDELAI,
             DACNBEXFAC,
             DACFLAGIRNONREVERSE,
             DACMANQUEAPAYER,
             DACTROPPERCU,
             DOSIDCAPITALIZATION,
             DRUORDRECAPITALIZATION,
             RUBIDTROPPERCU,
             DACEMAILFAC,
  				   DACENVOINOTICE,
             DACQPMETHODEREMISE,
             MANID,
             DACFLAGNONPROF,
             DACMTFLOORINTEREST,
  				 DACMTLUMPINTEREST,
  				 DACPCTLUMPINTEREST,
  				 DACFIXEDDAY,
				 DACINVOICEMETHOD,
				 DACREFTAXFREE,
				 DACDTTAXFREEAGREEMENT,
				 DACDTTAXFREEBEGIN,
				 DACTYPENOREMIND,
				 DACDTENDNOREMIND
              )
          VALUES (
			nDosId,
			nActId,
			sRolCode,
			sRdeDelegCode,
			nAcoOrdre,
			sTaxCode,
			nRubId,
			nTciId,
			dtDacDtDeb,
			dtDacDtFin,
			sDacGrpFac,
			nDacFlagCorrDoc,
			nDacFlagIRFacture,
			nDacFlagIRChq,
			nDacDelaiA,
			nDacDelaiE,
			nDacFacAvance,
			sDacArrondi,
			sDacComment,
			sDacRefCli,
			nDacDgTaux,
			nDacDescripBien,
			nDacOrdre,
			nDacOrdreDelegant,
			nCreId,
			nDacMtIrMinimal,
			nDacMtIrForfait,
			nDacTxIrPlancher,
			nDacTxIrPlafond,
			--bd10102000
			nDacIrMarge,
			nDacTxIrFixe,
			nDacNbMoisDg,
			nDacQuotePartDg,
			nDacMtDg,
			nDacFlagRevisableDg,
			nDacFlagPalierDg,
			nDacFlagLoyTtcDg,
			nDacFtvIdPlafond,
			nDacFtvIdPlancher,
			sDacMotifNonRelance,
			nDacPctIrForfait,
			nDacPctCommissionPrevu,
			nDacTypeDelai,
			nDacNbExFac,
			nDacFlagIRNonReverse,
			sDacManqueAPayer,
			sDacTropPercu,
			nDosIdCapitalization,
			nDruOrdreCapitalization,
			nRubIdTropPercu,
			sDacEmailFac,
  	   	sDacEnvoiNotice,
      	sDacQpMethodeRemise,
      	nManId,
      	nDacFlagNomProf,
      	nDacMtFloorInterest,
  			nDacMtLumpInterest,
  			nDacPctLumpInterest,
  			nDacFixedDay,
			sDacinvoicemethod,
			sDacreftaxfree,
			dtDacdttaxfreeagreement,
			dtDacdttaxfreebegin,
			sDactypenoremind,
			dtDacdtendnoremind );

          IF nDacOrdreRemplace IS NOT NULL THEN
             UPDATE DOSACTEUR SET DACORDREREMPLACE = nDacOrdre WHERE DOSID = nDosId AND DACORDRE = nDacOrdreRemplace;
          END IF;
		IF SQL%ROWCOUNT = 0 THEN
         nReturnCode := ERR_NO_ROWS_CONST;
		END IF;
      END IF;
  /* EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := EP_DOSACTEUR_NF;
	  WHEN ERR_I_NULL_MANDATORY_KEY THEN
         nReturnCode := EN_DOSACTEUR_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DOSACTEUR_V;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;*/
   END;
END I_DOSACTEUR;

PROCEDURE P_EVPROFOR
 (
   nDosId         IN     DOSSIER.DOSID%TYPE,
   nActId         IN     DOSSIER.ACTID%TYPE,
   nCreId         IN OUT NUMBER,
   dtEffet        IN     DATE,
   nVente         IN     NUMBER,
   nPVF           IN     NUMBER,
   sDevCode       IN     DOSSIER.DEVCODE%TYPE,     --bd311001
   nImaId         IN     NUMBER,
   dtCroComptable IN     CRO.CRODTCOMPTABLE%TYPE,
   nCro           IN 	 NUMBER,
   sTcrCode       IN     TCRO.TCRCODE%TYPE,
   nReturnCode    IN OUT NUMBER ) AS
BEGIN
	DECLARE
		nCount           NUMBER:=0;
		nEcfProFor       NUMBER;
		nVrProFor 			NUMBER:=0;
      nPenaliteProFor 	NUMBER:=0;
      nComProFor 			NUMBER:=0;
      dtDtDebProFor		DATE;
      nNbDayProFor		NUMBER:=0;
      nTotResProFor 		NUMBER:=0;
      nTotIrProFor		NUMBER:=0;
		nTauxIrProFor		NUMBER:=0;
		nMtIrProfor			NUMBER:=0;
		dtDateTempo	DATE;
	BEGIN
		SELECT COUNT(1) INTO nCount
      FROM 	DOSVENTEPROV
      WHERE CREID = nCreId AND DOSID = nDosId;

      IF nCount = 1 THEN

		SELECT SUM(NVL(DVLMTHTBASE,0))
		  INTO nEcfProFor
		  FROM DOSVENLIGNE
		 WHERE CREID = nCreId
		   AND DOSID = nDosId
		   AND F_ISRUBIDONFILTRE(RUBID, 'VTEACC') = 0;

		nVrProFor := nEcfProFor;

      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'ECF', dtEffet, NULL, nEcfProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'VR', dtEffet, NULL, nVrProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );

		SELECT SUM(NVL(DVLMTHTBASE,0))
		  INTO nPenaliteProFor
		  FROM DOSVENLIGNE
		 WHERE CREID = nCreId
		   AND DOSID = nDosId
		   AND F_ISRUBIDONFILTRE(RUBID, 'VTEACC') = 1;
		PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'PENALITE', dtEffet, NULL, nPenaliteProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );

      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'COM', dtEffet, NULL, nComProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );

		dtDateTempo := dtEffet - 1;
		SELECT MIN(DREDTDEB)
		  INTO dtDtDebProFor
		  FROM DOSRUBECHEANCIER dre, DOSRUBRIQUE dru
		 WHERE dru.DOSID = nDosId
		   AND dre.DOSID = nDosId
		   AND dre.DRUORDRE = dru.DRUORDRE
		   AND F_ISRUBIDONFILTRE(dru.RUBID, 'DOWNP') = 0
		   AND dtDateTempo BETWEEN DREDTDEB AND DREDTFIN;
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'DTDEB', dtDtDebProFor, NULL, NULL, NULL, NULL, NULL, NULL, NULL, nReturnCode );

		dtDateTempo := F_PlGetOldUnpaidContract(nDosId, dtEffet);
		IF dtDateTempo IS NOT NULL THEN
			nNbDayProFor := GREATEST (0, dtEffet - dtDateTempo);
		END IF;
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'NBDAY', dtEffet, NULL, nNbDayProFor, NULL, NULL, NULL, NULL, NULL, nReturnCode );

		nTotResProFor := f_MtImpDossier( nActId,nDosId, sDevCode, dtEffet, 1);
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'TOTRES', dtEffet, NULL, nTotResProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );

		SELECT NVL(SUM(FACMTTTC),0)
		  INTO nTotIrProFor
		  FROM FACTURE fac, FACREFERENCE fre
		 WHERE fac.FACID = fre.FACID
		   AND fac.FACTYPE = 'FACIR'
		   AND fre.FREDOSID = nDosId;
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'TOTIR', dtEffet, NULL, nTotIrProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );

		SELECT MAX(FECTAUX)
		  INTO nTauxIrProFor
		  FROM FACIR fir, FIRECHELLE fec, FACREFERENCE fre
		 WHERE fre.FREDOSID = nDosId
		   AND fir.FACID = fre.FACID
		   AND fec.FACID = fir.FACID
		   AND fec.FECTAUX IS NOT NULL;
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'TXIR', dtEffet, NULL, nTauxIrProFor , NULL, NULL, NULL, NULL, NULL, nReturnCode );

		SELECT SUM(NVL(FIRMTINTCALCULE,0))
		  INTO nMtIrProfor
		  FROM FACIR fir, FACREFERENCE fre
		 WHERE fre.FREDOSID = nDosId
		   AND fir.FACID = fre.FACID;
      	PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'PROFOR', 'MTIR', dtEffet, NULL, nMtIrProfor, NULL, NULL, NULL, NULL, NULL, nReturnCode );
      END IF;
	END;
END P_EVPROFOR;


PROCEDURE P_EVVENTETOTALE (
   nDosId         IN     DOSSIER.DOSID%TYPE,
   nActId         IN     DOSSIER.ACTID%TYPE,
   nCreId         IN OUT NUMBER,
   dtEffet        IN     DATE,
   nVente         IN     NUMBER,
   nPVF           IN     NUMBER,
   sDevCode       IN     DOSSIER.DEVCODE%TYPE,     --bd311001
   nImaId         IN     NUMBER,
   dtCroComptable IN     CRO.CRODTCOMPTABLE%TYPE,
   nCro           IN 	 NUMBER,
   sTcrCode       IN     TCRO.TCRCODE%TYPE,
   nReturnCode    IN OUT NUMBER ) AS
BEGIN
   BEGIN
      DECLARE
         sTmfFonction     CREVT.TMFFONCTION%TYPE;
         sCpaFiFonction   CREVT.TMFFONCTION%TYPE;
         sTacCode         DOSSIER.TACCODE%TYPE;
         sDosRegimeFiscal DOSSIER.DOSREGIMEFISCAL%TYPE;
         sDosPool         DOSSIER.DOSPOOL%TYPE;
         nDosIdRefinance  DOSSIER.DOSIDREFINANCE%TYPE;
         dtDateExeOuvert  DATE;
         nOk              NUMBER;
         nFacId           FACTURE.FACID%TYPE;
         nManId           DOSSIER.MANID%TYPE;
         nDepId           DEPENSE.DEPID%TYPE;
         nCroIdImmoSor    CRO.CROID%TYPE;
         nCroIdRegDot     CRO.CROID%TYPE;
         dtMinAmo         DATE;
         dtExeOuvert      DATE;
         sItrDevCode      IMMOTRANCHE.DEVCODE%TYPE;
         nIruMtOrigine    ITRRUBRIQUE.IRUMTORIGINE%TYPE;

         CURSOR C1 IS
            SELECT DISTINCT ITRID, IRUORDRE
            FROM   ITRRUBPHASE
            WHERE  CREID = nCreId
            ORDER BY 1, 2;

         CURSOR cIruDotPast IS
            SELECT DISTINCT ITRID, IRUORDREPREC IRUORDRE
            FROM   ITRRUBRIQUE
            WHERE  ( ITRID, IRUORDREPREC ) IN ( SELECT DISTINCT ITRID, IRUORDRE
                                                FROM   ITRRUBPHASE
                                                WHERE  CREID = nCreId )
            UNION
            SELECT DISTINCT ITRID, IRUORDRE
            FROM   ITRRUBRIQUE
            WHERE  ( ITRID, IRUORDREPREC ) IN ( SELECT DISTINCT ITRID, IRUORDRE
                                                FROM   ITRRUBPHASE
                                                WHERE  CREID = nCreId )
            ORDER BY 1, 2;
      BEGIN
         nReturnCode := 0;

         BEGIN
            SELECT TMFFONCTION
            INTO   sTmfFonction
            FROM   CREVT
            WHERE  CREID = nCreId;
         EXCEPTION
            WHEN OTHERS THEN
               sTmfFonction := 'EVD_VENTE';
         END;

         --bd10102000
         SELECT   TACCODE, DOSREGIMEFISCAL, DOSPOOL, DOSIDREFINANCE
         INTO     sTacCode, sDosRegimeFiscal, sDosPool, nDosIdRefinance
         FROM     DOSSIER
         WHERE    DOSID = nDosId;   --bd311001 suppr de sDevCode

         DBMS_OUTPUT.PUT_LINE('Taccode : ' || sTacCode);
         IF ( sTacCode != 'EMPRUNT' ) THEN
            IF ( dtCroComptable IS NOT NULL ) THEN
               dtDateExeOuvert := dtCroComptable;
            ELSE
               PA_COMMON.S_EXERCICEPERIODEOUVERTE( nActId, dtEffet-1, dtDateExeOuvert, nOk);
               IF ( dtEffet-1 >= dtDateExeOuvert ) THEN
                  dtDateExeOuvert := dtEffet-1;
               END IF;
            END IF;
            IF ( nVente IS NOT NULL ) THEN
               BEGIN
                  SELECT FACID, MANID
                  INTO   nFacId, nManId
                  FROM   FACTURE
                  WHERE  CREID         = nCreId
                    AND  FACIDORIGINE IS NULL;
               EXCEPTION
                  WHEN OTHERS THEN
                     nFacId := NULL;
               END;
               IF ( nCro = 1 ) THEN
                  --IF nManId IS NOT NULL AND sTacCode = 'LOCATIF' THEN
                  -- PA_GENERECRO.I_CRO( nActId, nCreId, NULL, nFacId, NULL, 'FACGD', dtDateExeOuvert, nReturnCode );
                  --ELSE
                  -- PA_GENERECRO.I_CRO( nActId, nCreId, NULL, nFacId, NULL, 'FACVENT', dtDateExeOuvert, nReturnCode );
                  PA_GENERECRO.I_CRO( nActId, nCreId, NULL, nFacId, NULL, sTcrCode, dtDateExeOuvert, nReturnCode );
                  --END IF;
               END IF;

               IF ( nReturnCode = 0 ) AND ( sDosPool = 'REFI' ) AND ( nDosIdRefinance IS NOT NULL ) THEN
                  BEGIN
                     SELECT DEPID
                     INTO   nDepId
                     FROM   DEPENSE
                     WHERE  CREID         = nCreId
                       AND  DEPIDORIGINE IS NULL;
                  EXCEPTION
                     WHEN OTHERS THEN
                        PA_GENERECRO.I_CRO( nActId, nCreId, nDepId, NULL, NULL, 'DEPENSE', dtDateExeOuvert, nReturnCode );
                  END;
               END IF;
            END IF;

            IF ( nReturnCode = 0 ) THEN
               IF ( sTmfFonction = 'EVD_VPART' ) THEN
                  BEGIN
                     SELECT CROID
                     INTO   nCroIdImmoSor
                     FROM   CRO
                     WHERE  CREID   = nCreId
                       AND  TCRCODE = 'IMMOSOR';
                  EXCEPTION
                     WHEN OTHERS THEN
                        nCroIdImmoSor := NULL;
                  END;

                  -- Ici on passe les dotations sur les periodes closes : annulation et redotation suite eclatement
                  nCroIdRegDot := NULL;
                  FOR cIdp_rec IN cIruDotPast LOOP
                     SELECT MIN(IFADTDEB)
                     INTO   dtMinAmo
                     FROM   ITRRUBFLUAMORT
                     WHERE  ITRID    = cIdp_rec.ITRID
                       AND  IRUORDRE = cIdp_rec.IRUORDRE;
                     PA_COMMON.S_EXERCICEPERIODEOUVERTE( nActId, dtMinAmo, dtExeOuvert, nOk );
                     IF ( nOk = 1 ) AND ( dtMinAmo < dtExeOuvert ) THEN
                        SELECT ITR.DEVCODE, IRU.IRUMTORIGINE
                        INTO   sItrDevCode, nIruMtOrigine
                        FROM   ITRRUBRIQUE IRU,
                               IMMOTRANCHE ITR
                        WHERE  IRU.ITRID    = cIdp_rec.ITRID
                          AND  IRU.IRUORDRE = cIdp_rec.IRUORDRE
                          AND  ITR.ITRID    = IRU.ITRID;

                        IF ( nCroIdRegDot IS NULL ) THEN
                           PA_GENERECRO.I_GENCRO_PERIODEOUVERTE(
                              nActId,
                              nCreId,
                              NULL,
                              NULL,
                              NULL,
                              'REGDOT',
                              dtDateExeOuvert,
                              1,
                              nCroIdRegDot,
                              nReturnCode );
                           IF ( nReturnCode != 0 ) THEN
                              EXIT;
                           END IF;
                        END IF;

                        PA_UPDATEDOSSIER2.U_DOTATION(
                           cIdp_rec.ITRID,
                           cIdp_rec.IRUORDRE,
                           nDosId,
                           nActId,
                           sTacCode,
                           NULL,
                           sDosRegimeFiscal,
                           NULL,
                           nCreId,
                           dtMinAmo,
                           nCroIdRegDot,
                           'ES',
                           NULL,
                           nIruMtOrigine,
                           sItrDevCode,
                           'ANCIEN',
                           nReturnCode );
                        IF ( nReturnCode != 0 ) THEN
                           EXIT;
                        END IF;
                     END IF;
                  END LOOP;

                  IF ( nReturnCode = 0 ) THEN
                     IF ( nCroIdRegDot IS NOT NULL ) THEN
                        PA_UPDATEDOSSIER2.P_DELCRO_SANSSOTATION( nCroIdRegDot );
                     END IF;

                     -- Ici on passe les dotations par rapport a la date d'evenement
                     PA_UPDATEDOSSIER2.U_DOSIDDOTATION(
                        nDosId,
                        nActId,
                        sTacCode,
                        NULL,
                        sDosRegimeFiscal,
                        NULL,
                        nCreId,
                        dtEffet,
                        nCroIdImmoSor,
                        'ES',
                        NULL,
                        nReturnCode );
                  END IF;
                  --
                  sCpaFiFonction := sTmfFonction;
               ELSE
                  sCpaFiFonction := 'EVD_VENTE';
               END IF;

               IF ( nReturnCode = 0 ) THEN
                  PA_UPDATEDOSSIER3.U_COMPTAFINANCIERE(
                     nDosId,
                     nActId,
                     dtDateExeOuvert,
                     sTacCode,
                     sDosRegimeFiscal,
                     nCreId,
                     sCpaFiFonction,
                     nReturnCode );

                  --mp200402 ajout nReturnCode
                  IF ( nReturnCode = 0 ) THEN
                     PA_UPDATEDOSSIER2.U_CHABIMFINDOS( nDosId, dtEffet, nCreId, nReturnCode );
                     IF ( nReturnCode = 0 ) THEN
                        FOR C1R IN C1 LOOP
                           DELETE ITRRUBFLUX
                           WHERE  ITRID         = C1R.ITRID
                             AND  IRUORDRE      = C1R.IRUORDRE
                             AND  IRFMTASSIETTE = 0
                             AND  NOT EXISTS( SELECT 1
                                              FROM   ITRRUBFLUAMORT A
                                              WHERE  A.ITRID    = ITRRUBFLUX.ITRID
                                                AND  A.IRUORDRE = ITRRUBFLUX.IRUORDRE
                                                AND  A.IRFORDRE = ITRRUBFLUX.IRFORDRE );
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
            IF ( nReturnCode = 0 ) THEN
               --bd191101
               IF ( nPVF != nVente ) THEN
                  UPDATE CREVT
                  SET    CREMT          = F_plDosMtQp( nDosId, nActId,nVente),
                         DEVCODE        = sDevCode,
                         IMAID          = nImaId,
                         CRECODEINTERNE = TO_CHAR( TRUNC( nPVF*100 ) )
                  WHERE  CREID = nCreId;
               ELSE
                  UPDATE CREVT
                  SET    CREMT   = F_plDosMtQp( nDosId, nActId,nVente),
                         DEVCODE = sDevCode,
                         IMAID   = nImaId
                  WHERE  CREID = nCreId;
               END IF;
               IF ( nImaId IS NULL ) THEN
                  PA_EVT.U_EVT_VALIDE( nCreId, nReturnCode );
               END IF;
            END IF;
         ELSE
            IF ( dtCroComptable IS NOT NULL ) THEN
               dtDateExeOuvert := dtCroComptable;
            ELSE
               PA_COMMON.S_EXERCICEPERIODEOUVERTE( nActId, dtEffet-1, dtDateExeOuvert, nOk);
               IF ( dtEffet-1 >= dtDateExeOuvert ) THEN
                  dtDateExeOuvert := dtEffet-1;
               END IF;
            END IF;
            IF ( nVente IS NOT NULL ) THEN
               BEGIN
                  SELECT DEPID
                  INTO   nDepId
                  FROM   DEPENSE
                  WHERE  CREID         = nCreId
                    AND  DEPIDORIGINE IS NULL;
               EXCEPTION
                  WHEN OTHERS THEN
                     nDepId := NULL;
               END;
               PA_GENERECRO.I_CRO( nActId, nCreId, nDepId, NULL, NULL, 'EMPRREM', dtDateExeOuvert, nReturnCode );
            END IF;

            IF ( nReturnCode = 0 ) THEN
               UPDATE CREVT
               SET    DEVCODE = sDevCode,
                      IMAID   = nImaId
               WHERE  CREID = nCreId;
               IF ( nImaId IS NULL ) THEN
                  PA_EVT.U_EVT_VALIDE( nCreId, nReturnCode );
               END IF;
            END IF;
         END IF;
      EXCEPTION
         WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := ERR_PARENT_NOT_FOUND_CONST;
         WHEN ERR_I_NULL_MANDATORY_KEY THEN
            nReturnCode := ERR_NULL_MANDATORY_KEY_CONST;
         WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_VAL_ON_INDEX_CONST ;
         WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
      END;
   END;
END P_EVVENTETOTALE;

PROCEDURE P_EVFINNORMALE (
   nDosId         IN     DOSSIER.DOSID%TYPE,
   nActId         IN     DOSSIER.ACTID%TYPE,
   nCreId         IN OUT NUMBER,
   dtEffet        IN     DATE,
   nVente         IN     NUMBER,
   nPVF           IN     NUMBER,
   nRebut         IN     NUMBER,
   nImaId         IN     NUMBER,
   dtCroComptable IN     CRO.CRODTCOMPTABLE%TYPE,
   sDevCode 	  IN	 CREVT.DEVCODE%TYPE,
   sTcrCode       IN OUT CRO.TCRCODE%TYPE,
   nReturnCode    IN OUT NUMBER ) AS
BEGIN
   BEGIN
      DECLARE
		nFacId   FACTURE.FACID%TYPE;
         sTacCode DOSSIER.TACCODE%TYPE;
         dtCro    CRO.CRODTCOMPTABLE%TYPE;
         sDosRegimeFiscal DOSSIER.DOSREGIMEFISCAL%TYPE;
         nOk		NUMBER;
		 dtEffect DATE;
		 nTotBrut ITRRUBRIQUE.IRUMTORIGINE%TYPE;
		 CURSOR C1 IS SELECT DISTINCT ITRID, IRUORDRE FROM ITRRUBPHASE WHERE CREID = nCreId;
      BEGIN
         SELECT TACCODE, DOSREGIMEFISCAL INTO sTacCode, sDosRegimeFiscal FROM DOSSIER WHERE DOSID = nDosId;
         IF ( dtCroComptable IS NOT NULL ) THEN
               dtCro := dtCroComptable;
            ELSE
               PA_COMMON.S_EXERCICEPERIODEOUVERTE( nActId, dtEffet-1, dtCro, nOk);
                IF dtEffet-1 >= dtCro THEN
                   dtCro := dtEffet-1;
                END IF;
         END IF;
         IF nVente IS NOT NULL THEN
            BEGIN
               SELECT FACID
               INTO   nFacId
               FROM   FACTURE
               WHERE  CREID = nCreId AND FACIDORIGINE IS NULL;
            EXCEPTION
               WHEN OTHERS THEN
                  nFacId := NULL;
            END;
            -- mp200402 ajout nRetrunCode
            PA_UPDATEDOSSIER2.U_CHABIMFINDOS( nDosId, dtEffet, nCreId,nReturnCode );
            --IF ( dtCroComptable IS NOT NULL ) THEN
            --   dtCro := dtCroComptable;
            --ELSE
            --    PA_COMMON.S_EXERCICEPERIODEOUVERTE( nActId, dtEffet-1, dtCro, nOk);
            --    IF dtEffet-1 >= dtCro THEN
            --       dtCro := dtEffet-1;
            --    END IF;
            --END IF;
           -- IF nReturnCode = 0 THEN -- Commented as suggested by Bruno09102009
            --	IF sTcrCode IS NULL THEN
            --		sTcrCode := 'FACVENT';
            --	END IF;
            --   PA_GENERECRO.I_CRO( nActId, nCreId, NULL, nFacId, NULL, sTcrCode, dtCro, nReturnCode );
           -- END IF;
         END IF;
         IF nReturnCode = 0 THEN
            IF nPVF IS NOT NULL AND nPVF != nVente THEN
               UPDATE CREVT
               SET    CREMT = nVente, DEVCODE = sDevCode, IMAID = nImaId, CRECODEINTERNE = TO_CHAR( TRUNC( nPVF*100 ) )
               WHERE  CREID = nCreId;
            ELSE
               UPDATE CREVT
               SET    CREMT = nVente, DEVCODE = sDevCode, IMAID = nImaId
               WHERE  CREID = nCreId;
            END IF;
            PA_UPDATEDOSSIER3.U_COMPTAFINANCIERE(  nDosId,
                                                   nActId,
                                                   dtEffet ,
                                                   sTacCode,
                                                   sDosRegimeFiscal,
                                                   nCreId,
                                                   'EVD_CESSION',
                                                   nReturnCode );
			--CFS 51260 - TRAITEMENT A FAIRE QUELQUE SOIT LE TACCODE
			--IF sTacCode IN ('CBM', 'LOCFIN' ) THEN
				FOR C1R IN C1 LOOP
					SELECT CREDTEFFET INTO dtEffect FROM CREVT WHERE CREID = nCreId;
					SELECT f_PlItrOutstanding( ITRID, IRUORDRE, IRUMTORIGINE, dtEffect)
					  INTO nTotBrut
					  FROM ITRRUBRIQUE
					 WHERE ITRID = C1R.ITRID AND IRUORDRE = C1R.IRUORDRE;
					UPDATE ITRRUBPHASE SET IRPMTREELPROVSPECIAL = nTotBrut WHERE ITRID = C1R.ITRID AND IRUORDRE = C1R.IRUORDRE AND CREID = nCreId;
				END LOOP;
			--END IF;

            IF ( nImaId IS NULL ) THEN
               PA_EVT.U_EVT_VALIDE( nCreId, nReturnCode );
            END IF;
         END IF;
      EXCEPTION
         WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := ERR_PARENT_NOT_FOUND_CONST;
	   WHEN ERR_I_NULL_MANDATORY_KEY THEN
         	nReturnCode := ERR_NULL_MANDATORY_KEY_CONST;
         WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_VAL_ON_INDEX_CONST ;
         WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
      END;
   END;
END P_EVFINNORMALE;

PROCEDURE P_EVRESILIATION (
   nDosId               IN DOSSIER.DOSID%TYPE,
   nActId               IN DOSSIER.ACTID%TYPE,
   nCreId	       	IN OUT NUMBER,
   dtEffet              IN DATE,
   nVente               IN NUMBER,
   nRebut               IN NUMBER,
   nImaId               IN NUMBER,
   sDevCode 			IN CREVT.DEVCODE%TYPE,
   nReturnCode		IN OUT NUMBER) AS
BEGIN
   BEGIN
      DECLARE
		nFacId FACTURE.FACID%TYPE;
         --bd10102000
         sTacCode DOSSIER.TACCODE%TYPE;
         sDosRegimeFiscal DOSSIER.DOSREGIMEFISCAL%TYPE;
		 dtEffect DATE;
		 nTotBrut ITRRUBRIQUE.IRUMTORIGINE%TYPE;
		 CURSOR C1 IS SELECT DISTINCT ITRID, IRUORDRE FROM ITRRUBPHASE WHERE CREID = nCreId;
	 CURSOR C2 IS
		SELECT ADM.ADMID
		FROM ADMINISTRATIF ADM, FORMALITE FRM
		WHERE DOSID = nDosId
		AND FRM.FORID = ADM.FORID
		AND SUBSTR( FRM.FORCODE,1,3 ) = 'PTP'
		AND ADM.ADMETAT != 'TER';
	 nCcaId      COLLECTIONCASE.CCAID%TYPE;
	 nAstOrdre   ADMSTATUS.ASTORDRE%TYPE;

      BEGIN
         nReturnCode := 0;
         --bd10102000
         SELECT TACCODE, DOSREGIMEFISCAL INTO sTacCode, sDosRegimeFiscal FROM DOSSIER WHERE DOSID = nDosId;
         IF nReturnCode = 0 THEN
            IF sTacCode NOT IN ( 'PRET', 'EMPRUNT' ) THEN
               IF nRebut = 1 THEN
                  PA_GENERECRO.I_CRO( nActId, nCreId, NULL, NULL, NULL, 'IMMOSOR', dtEffet-1, nReturnCode );
               END IF;
            END IF;
         END IF;
         IF nReturnCode = 0 THEN
            UPDATE CREVT
            SET    CREMT = nVente, DEVCODE = sDevCode, IMAID = nImaId
            WHERE  CREID = nCreId;

	    -- close the collection case
	    SELECT MAX(CCAID)
	    INTO nCcaId
	    FROM COLLECTIONCASE
	    WHERE DOSID = nDosId AND CCADTEND IS NULL;

	    IF nCcaId IS NOT NULL THEN
	       UPDATE COLLECTIONCASE
	       SET CCADTEND = TRUNC(dtEffet), CCASTATUS = 'TER', CCADTUPD = SYSDATE
	       WHERE CCAID = nCcaId;
	    END IF;

	    --close PTP
	    FOR C2R IN C2 LOOP
	        UPDATE ADMINISTRATIF SET ADMETAT = 'TER' WHERE ADMID = C2R.ADMID;
		SELECT MAX(ASTORDRE)
		INTO nAstOrdre
		FROM ADMSTATUS
		WHERE ADMID = C2R.ADMID;
		IF nAstOrdre IS NULL THEN
		   nAstOrdre := 0;
		ELSE
		   UPDATE ADMSTATUS
		   SET ASTDTEND = TRUNC(dtEffet) - 1
		   WHERE ADMID = C2R.ADMID
		   AND ASTORDRE = nAstOrdre;
		END IF;

		INSERT INTO ADMSTATUS
		(
		ADMID,
		ASTORDRE,
		ASTSTATUS,
		ASTDTBEG,
		ASTDTEND,
		ASTDTUPD,
		CREID
		)
		VALUES
		(
		C2R.ADMID,
		nAstOrdre+1,
		'TER',
		TRUNC(dtEffet),
		NULL,
		SYSDATE,
		nCreId
		);

	    END LOOP;

            PA_UPDATEDOSSIER3.U_COMPTAFINANCIERE(  nDosId,
                                                   nActId,
                                                   dtEffet-1,
                                                   sTacCode,
                                                   sDosRegimeFiscal,
                                                   nCreId,
                                                   'EVD_RES',
                                                   nReturnCode );
			--CFS 51260 - TRAITEMENT A FAIRE QUELQUE SOIT LE TACCODE
			--IF sTacCode IN ('CBM', 'LOCFIN' ) THEN
				FOR C1R IN C1 LOOP
					SELECT CREDTEFFET INTO dtEffect FROM CREVT WHERE CREID = nCreId;
					SELECT f_PlItrOutstanding( ITRID, IRUORDRE, IRUMTORIGINE, dtEffect)
					  INTO nTotBrut
					  FROM ITRRUBRIQUE
					 WHERE ITRID = C1R.ITRID AND IRUORDRE = C1R.IRUORDRE;
					UPDATE ITRRUBPHASE SET IRPMTREELPROVSPECIAL = nTotBrut WHERE ITRID = C1R.ITRID AND IRUORDRE = C1R.IRUORDRE AND CREID = nCreId;
				END LOOP;
			--END IF;

         END IF;
      EXCEPTION
         WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := ERR_PARENT_NOT_FOUND_CONST;
	   WHEN ERR_I_NULL_MANDATORY_KEY THEN
         	nReturnCode := ERR_NULL_MANDATORY_KEY_CONST;
         WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_VAL_ON_INDEX_CONST ;
         WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
      END;
   END;
END P_EVRESILIATION;

PROCEDURE I_DOSRUBECHEANCIER (
  nDosId DOSRUBECHEANCIER.DOSID%TYPE,
  nDruOrdre DOSRUBECHEANCIER.DRUORDRE%TYPE,
  dtDreDtEch DOSRUBECHEANCIER.DREDTECH%TYPE,
  sDreType DOSRUBECHEANCIER.DRETYPE%TYPE,
  nDreTaux DOSRUBECHEANCIER.DRETAUX%TYPE,
  nDreMtAmo DOSRUBECHEANCIER.DREMTAMO%TYPE,
  nDreMtIndexation DOSRUBECHEANCIER.DREMTINDEXATION%TYPE,
  nDreMtEcF DOSRUBECHEANCIER.DREMTECF%TYPE,
  nDreMtTaxe DOSRUBECHEANCIER.DREMTTAXE%TYPE,
  nDreMtBase DOSRUBECHEANCIER.DREMTBASE%TYPE,
  dtDreDtDeb DOSRUBECHEANCIER.DREDTDEB%TYPE,
  dtDreDtFin DOSRUBECHEANCIER.DREDTFIN%TYPE,
  nDreMtAssiette DOSRUBECHEANCIER.DREMTASSIETTE%TYPE,
  nDreMtVrActual DOSRUBECHEANCIER.DREMTVRACTUAL%TYPE,
  nDreMtActual DOSRUBECHEANCIER.DREMTACTUAL%TYPE,
  nDreMtIntCompEns DOSRUBECHEANCIER.DREMTINTCOMPENS%TYPE,
  nDreMtIntDiffere DOSRUBECHEANCIER.DREMTINTDIFFERE%TYPE,
  nDreMtIntPeriode DOSRUBECHEANCIER.DREMTINTPERIODE%TYPE,
  nDreMtIntReporte DOSRUBECHEANCIER.DREMTINTREPORTE%TYPE,
  nDreMtIntSolde DOSRUBECHEANCIER.DREMTINTSOLDE%TYPE,
  nDreMtVers DOSRUBECHEANCIER.DREMTVERS%TYPE,
  nDreNum DOSRUBECHEANCIER.DRENUM%TYPE,
  nDreOrdre DOSRUBECHEANCIER.DREORDRE%TYPE,
  nDreTauxPrefixe DOSRUBECHEANCIER.DRETAUXPREFIXE%TYPE,
  nDreMtCumulCC DOSRUBECHEANCIER.DREMTCUMULCC%TYPE,
  nDreMtIntCC DOSRUBECHEANCIER.DREMTINTCC%TYPE,
  nDreMtSoldeHtCC DOSRUBECHEANCIER.DREMTSOLDEHTCC%TYPE,
  nDreMtSoldeTvaCC DOSRUBECHEANCIER.DREMTSOLDETVACC%TYPE,
  nDrePalNum DOSRUBECHEANCIER.DREPALNUM%TYPE,
  nDreSaiNum DOSRUBECHEANCIER.DRESAINUM%TYPE,
  nDrfOrdre DOSRUBECHEANCIER.DRFORDRE%TYPE,
  nFacId DOSRUBECHEANCIER.FACID%TYPE,
  nDepId DOSRUBECHEANCIER.DEPID%TYPE,
  nFliOrdre DOSRUBECHEANCIER.FLIORDRE%TYPE,
  nDliOrdre DOSRUBECHEANCIER.DLIORDRE%TYPE,
  nDemId DOSRUBECHEANCIER.DEMID%TYPE,
  nDreMtIntGageCapitalise DOSRUBECHEANCIER.DREMTINTGAGECAPITALISE%TYPE,
  nCreId                  DOSRUBECHEANCIER.CREID%TYPE,
  nDreTauxNominal		DOSRUBECHEANCIER.DRETAUXNOMINAL%TYPE,
  nReturnCode IN OUT NUMBER
  )
AS
BEGIN
  BEGIN
    INSERT INTO DOSRUBECHEANCIER
	(
          DOSID,
          DRUORDRE,
          DREDTECH,
          DRETYPE,
          DRETAUX,
          DREMTAMO,
          DREMTINDEXATION,
          DREMTECF,
          DREMTTAXE,
          DREMTBASE,
          DREDTDEB,
          DREDTFIN,
          DREMTASSIETTE,
          DREMTVRACTUAL,
          DREMTACTUAL,
          DREMTINTCOMPENS,
          DREMTINTDIFFERE,
          DREMTINTPERIODE,
          DREMTINTREPORTE,
          DREMTINTSOLDE,
          DREMTVERS,
          DRENUM,
          DREORDRE,
          DRETAUXPREFIXE,
          DREMTCUMULCC,
          DREMTINTCC,
          DREMTSOLDEHTCC,
          DREMTSOLDETVACC,
          DREPALNUM,
          DRESAINUM,
          DRFORDRE,
          FACID,
          DEPID,
          FLIORDRE,
          DLIORDRE,
          DEMID,
          DREMTINTGAGECAPITALISE,
          CREID,
		  DRETAUXNOMINAL)
    VALUES(
          nDosId,
          nDruOrdre,
          dtDreDtEch,
          sDreType,
          nDreTaux,
          nDreMtAmo,
          nDreMtIndexation,
          nDreMtEcF,
          nDreMtTaxe,
          nDreMtBase,
          dtDreDtDeb,
          dtDreDtFin,
          nDreMtAssiette,
          nDreMtVrActual,
          nDreMtActual,
          nDreMtIntCompEns,
          nDreMtIntDiffere,
          nDreMtIntPeriode,
          nDreMtIntReporte,
          nDreMtIntSolde,
          nDreMtVers,
          nDreNum,
          nDreOrdre,
          nDreTauxPrefixe,
          nDreMtCumulCC,
          nDreMtIntCC,
          nDreMtSoldeHtCC,
          nDreMtSoldeTvaCC,
          nDrePalNum,
          nDreSaiNum,
          nDrfOrdre,
          nFacId,
          nDepId,
          nFliOrdre,
          nDliOrdre,
          nDemId,
          nDreMtIntGageCapitalise,
          nCreId,
		  nDreTauxNominal);

	UPDATE DOSRUBRIQUE
	   SET  DRUDTMAJECH = TRUNC(SYSDATE),
			DRUDTMAJRUB = TRUNC(SYSDATE)
	 WHERE DOSID = nDosId
       AND DRUORDRE = nDruOrdre;

    nReturnCode := 0;
    IF SQL%ROWCOUNT = 0 THEN
      nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := EP_ECHEANCIER_NF;
	WHEN ERR_I_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_ECHEANCIER_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_DOSRUBECHEANCIER_V;
      WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
    END;
END I_DOSRUBECHEANCIER;

PROCEDURE U_DOSRUBECHEANCIER (
  nDosId DOSRUBECHEANCIER.DOSID%TYPE,
  nDruOrdre DOSRUBECHEANCIER.DRUORDRE%TYPE,
  dtDreDtEch DOSRUBECHEANCIER.DREDTECH%TYPE,
  sDreType DOSRUBECHEANCIER.DRETYPE%TYPE,
  nDreTaux DOSRUBECHEANCIER.DRETAUX%TYPE,
  nDreMtAmo DOSRUBECHEANCIER.DREMTAMO%TYPE,
  nDreMtIndexation DOSRUBECHEANCIER.DREMTINDEXATION%TYPE,
  nDreMtEcF DOSRUBECHEANCIER.DREMTECF%TYPE,
  nDreMtTaxe DOSRUBECHEANCIER.DREMTTAXE%TYPE,
  nDreMtBase DOSRUBECHEANCIER.DREMTBASE%TYPE,
  dtDreDtDeb DOSRUBECHEANCIER.DREDTDEB%TYPE,
  dtDreDtFin DOSRUBECHEANCIER.DREDTFIN%TYPE,
  nDreMtAssiette DOSRUBECHEANCIER.DREMTASSIETTE%TYPE,
  nDreMtVrActual DOSRUBECHEANCIER.DREMTVRACTUAL%TYPE,
  nDreMtActual DOSRUBECHEANCIER.DREMTACTUAL%TYPE,
  nDreMtIntCompEns DOSRUBECHEANCIER.DREMTINTCOMPENS%TYPE,
  nDreMtIntDiffere DOSRUBECHEANCIER.DREMTINTDIFFERE%TYPE,
  nDreMtIntPeriode DOSRUBECHEANCIER.DREMTINTPERIODE%TYPE,
  nDreMtIntReporte DOSRUBECHEANCIER.DREMTINTREPORTE%TYPE,
  nDreMtIntSolde DOSRUBECHEANCIER.DREMTINTSOLDE%TYPE,
  nDreMtVers DOSRUBECHEANCIER.DREMTVERS%TYPE,
  nDreNum DOSRUBECHEANCIER.DRENUM%TYPE,
  nDreOrdre DOSRUBECHEANCIER.DREORDRE%TYPE,
  nDreTauxPrefixe DOSRUBECHEANCIER.DRETAUXPREFIXE%TYPE,
  nDreMtCumulCC DOSRUBECHEANCIER.DREMTCUMULCC%TYPE,
  nDreMtIntCC DOSRUBECHEANCIER.DREMTINTCC%TYPE,
  nDreMtSoldeHtCC DOSRUBECHEANCIER.DREMTSOLDEHTCC%TYPE,
  nDreMtSoldeTvaCC DOSRUBECHEANCIER.DREMTSOLDETVACC%TYPE,
  nDrePalNum DOSRUBECHEANCIER.DREPALNUM%TYPE,
  nDreSaiNum DOSRUBECHEANCIER.DRESAINUM%TYPE,
  nDrfOrdre DOSRUBECHEANCIER.DRFORDRE%TYPE,
  nFacId DOSRUBECHEANCIER.FACID%TYPE,
  nDepId DOSRUBECHEANCIER.DEPID%TYPE,
  nDreMtEchActual DOSRUBECHEANCIER.DREMTECHACTUAL%TYPE,
  nDreMtSoldeIndCC DOSRUBECHEANCIER.DREMTSOLDEINDCC%TYPE,
  nFliOrdre DOSRUBECHEANCIER.FLIORDRE%TYPE,
  nDliOrdre DOSRUBECHEANCIER.DLIORDRE%TYPE,
  nDemId DOSRUBECHEANCIER.DEMID%TYPE,
  nDreMtIntGageCapitalise DOSRUBECHEANCIER.DREMTINTGAGECAPITALISE%TYPE,
  nCreId                  DOSRUBECHEANCIER.CREID%TYPE,
  nDreTauxNominal		DOSRUBECHEANCIER.DRETAUXNOMINAL%TYPE,
  nReturnCode IN OUT NUMBER
  )
AS
BEGIN
    UPDATE DOSRUBECHEANCIER
    SET DREDTECH = dtDreDtEch,
        DRETYPE = sDreType,
        DRETAUX = nDreTaux,
        DREMTAMO = nDreMtAmo,
        DREMTINDEXATION = nDreMtIndexation,
        DREMTECF = nDreMtEcF,
        DREMTTAXE = nDreMtTaxe,
        DREMTBASE = nDreMtBase,
        DREDTDEB = dtDreDtDeb,
        DREDTFIN = dtDreDtFin,
        DREMTASSIETTE = nDreMtAssiette,
        DREMTVRACTUAL = nDreMtVrActual,
        DREMTACTUAL = nDreMtActual,
        DREMTINTCOMPENS = nDreMtIntCompEns,
        DREMTINTDIFFERE = nDreMtIntDiffere,
        DREMTINTPERIODE = nDreMtIntPeriode,
        DREMTINTREPORTE = nDreMtIntReporte,
        DREMTINTSOLDE = nDreMtIntSolde,
        DREMTVERS = nDreMtVers,
        DRENUM = nDreNum,
        DRETAUXPREFIXE = nDreTauxPrefixe,
        DREMTCUMULCC = nDreMtCumulCC,
        DREMTINTCC = nDreMtIntCC,
        DREMTSOLDEHTCC = nDreMtSoldeHtCC,
        DREMTSOLDETVACC = nDreMtSoldeTvaCC,
        DREPALNUM = nDrePalNum,
        DRFORDRE = nDrfOrdre,
        FACID = nFacId,
        DEPID = nDepId,
        DREMTECHACTUAL = nDreMtEchActual,
        DREMTSOLDEINDCC = nDreMtSoldeIndCC,
        FLIORDRE = nFliOrdre,
        DLIORDRE = nDliOrdre,
        DEMID = nDemId ,
        DRESAINUM = nDreSaiNum,
        DREMTINTGAGECAPITALISE = nDreMtIntGageCapitalise,
        CREID                  = nCreId,
		DRETAUXNOMINAL		= nDreTauxNominal
    WHERE DOSID = nDosId
    AND DRUORDRE = nDruOrdre
    AND DREORDRE = nDreOrdre;

	UPDATE DOSRUBRIQUE
	   SET  DRUDTMAJECH = TRUNC(SYSDATE),
			DRUDTMAJRUB = TRUNC(SYSDATE)
	 WHERE DOSID = nDosId
       AND DRUORDRE = nDruOrdre;

    nReturnCode := 0;
    IF SQL%ROWCOUNT = 0 THEN
      nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := EP_ECHEANCIER_NF;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_ECHEANCIER_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_DOSRUBECHEANCIER_V;
      WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
END U_DOSRUBECHEANCIER;


PROCEDURE I_DOSRUBFLUX ( nDosId   DOSRUBFLUX.DOSID%TYPE,
     nDruOrdre   DOSRUBFLUX.DRUORDRE%TYPE,
     nDrfOrdre   DOSRUBFLUX.DRFORDRE%TYPE,
     sDrfPerception  DOSRUBFLUX.DRFPERCEPTION%TYPE,
     nDrfNbPeriode  DOSRUBFLUX.DRFNBPERIODE%TYPE,
     nDrfMultiple  DOSRUBFLUX.DRFMULTIPLE%TYPE,
     nDrfPeriode   DOSRUBFLUX.DRFPERIODE%TYPE,
     nDrfDtDeb   DOSRUBFLUX.DRFDTDEB%TYPE,
     nDrfMt   DOSRUBFLUX.DRFMT%TYPE,
     nDrfDtFin   DOSRUBFLUX.DRFDTFIN%TYPE,
     nDrfFlagFinMois  DOSRUBFLUX.DRFFLAGFINMOIS%TYPE,
     sDrfProgression  DOSRUBFLUX.DRFPROGRESSION%TYPE,
     nDrfCoefProg  DOSRUBFLUX.DRFCOEFPROG%TYPE,
     nDrfFrequence  DOSRUBFLUX.DRFFREQUENCE%TYPE,
     nDrfNbLoyPer  DOSRUBFLUX.DRFNBLOYPER%TYPE,
     nFlagJourFixe  DOSRUBFLUX.DRFFLAGJOURFIXE%TYPE,
     nDrfNbJDecale  DOSRUBFLUX.DRFNBJDECALE%TYPE,
     nDrfNbSaison  DOSRUBFLUX.DRFNBSAISON%TYPE,
     nDrfTxAssiette  DOSRUBFLUX.DRFTXASSIETTE%TYPE,
     sDrfIntPerception  DOSRUBFLUX.DRFINTPERCEPTION%TYPE,
     nDrfIntNbPeriode  DOSRUBFLUX.DRFINTNBPERIODE%TYPE,
     nDrfIntPeriode  DOSRUBFLUX.DRFINTPERIODE%TYPE,
     nDrfIntMultiple  DOSRUBFLUX.DRFINTMULTIPLE%TYPE,
     nDrfFranchise  DOSRUBFLUX.DRFFRANCHISE%TYPE,
     dtDrfDtIntDiffere  DOSRUBFLUX.DRFDTINTDIFFERE%TYPE,
     nDrfIntNbJDecale  DOSRUBFLUX.DRFINTNBJDECALE%TYPE,
     nDrfFlagInt   DOSRUBFLUX.DRFFLAGINTJOURFIXE%TYPE,
     nDrfFlagIntFinMois DOSRUBFLUX.DRFFLAGINTFINMOIS%TYPE,
     sDrfTypeAmoPer    DOSRUBFLUX.DRFTYPEAMOPER%TYPE,
     nTrbId            DOSRUBFLUX.TRBID%TYPE,
     nDrfFlagLendemain    DOSRUBFLUX.DRFFLAGLENDEMAIN%TYPE,
     nDrfFlagChangeMoisEcheance DOSRUBFLUX.DRFFLAGCHANGEMOISECHEANCE%TYPE,
     sDrfGracePeriodType    DOSRUBFLUX.DRFGRACEPERIODTYPE%TYPE,
     nDrfGracePeriodInDays   DOSRUBFLUX.DRFGRACEPERIODINDAYS%TYPE,
     dtDrfDtIntBeg DOSRUBFLUX.DRFDTINTBEG%TYPE,
     dtDrfDtIntEnd DOSRUBFLUX.DRFDTINTEND%TYPE,
     nReturnCode   IN OUT NUMBER)
AS
BEGIN
  BEGIN
    INSERT INTO DOSRUBFLUX
 (
          DOSID,
          DRUORDRE,
          DRFORDRE,
          DRFPERCEPTION,
          DRFNBPERIODE,
          DRFMULTIPLE,
          DRFPERIODE,
          DRFDTDEB,
          DRFMT,
          DRFDTFIN,
          DRFFLAGFINMOIS,
          DRFPROGRESSION,
          DRFCOEFPROG,
          DRFFREQUENCE,
          DRFNBLOYPER,
          DRFFLAGJOURFIXE,
          DRFNBJDECALE,
          DRFNBSAISON,
          DRFTXASSIETTE,
          DRFINTPERCEPTION,
          DRFINTNBPERIODE,
          DRFINTPERIODE,
          DRFINTMULTIPLE,
          DRFFRANCHISE,
          DRFDTINTDIFFERE,
          DRFINTNBJDECALE,
          DRFFLAGINTJOURFIXE,
          DRFFLAGINTFINMOIS,
          DRFTYPEAMOPER,
          TRBID,
          DRFFLAGLENDEMAIN,
          DRFFLAGCHANGEMOISECHEANCE,
          DRFGRACEPERIODTYPE,
          DRFGRACEPERIODINDAYS,
          DRFDTINTBEG,
          DRFDTINTEND  )
    VALUES
 (
          nDosId ,
          nDruOrdre,
          nDrfOrdre,
          sDrfPerception,
          nDrfNbPeriode,
          nDrfMultiple,
          nDrfPeriode,
          nDrfDtDeb,
          nDrfMt,
          nDrfDtFin,
          nDrfFlagFinMois,
          sDrfProgression,
          nDrfCoefProg,
          nDrfFrequence,
          nDrfNbLoyPer,
          nFlagJourFixe,
          nDrfNbJDecale,
          nDrfNbSaison,
          nDrfTxAssiette,
          sDrfIntPerception,
          nDrfIntNbPeriode,
          nDrfIntPeriode,
          nDrfIntMultiple,
          nDrfFranchise,
          dtDrfDtIntDiffere,
          nDrfIntNbJDecale,
          nDrfFlagInt,
          nDrfFlagIntFinMois,
          sDrfTypeAmoPer,
          nTrbId,
          nDrfFlagLendemain,
          nDrfFlagChangeMoisEcheance,
          sDrfGracePeriodType,
          nDrfGracePeriodInDays,
          dtDrfDtIntBeg,
          dtDrfDtIntEnd
        );

    nReturnCode := 0;
    IF SQL%ROWCOUNT = 0 THEN
      nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := EP_DOSRUBFLUX_NF;
 WHEN ERR_I_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_DOSRUBFLUX_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_DOSRUBFLUX_V;
      WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
    END;
END I_DOSRUBFLUX;

PROCEDURE U_DOSRUBFLUX (
  nDosId DOSRUBFLUX.DOSID%TYPE,
  nDruOrdre DOSRUBFLUX.DRUORDRE%TYPE,
  nDrfOrdre DOSRUBFLUX.DRFORDRE%TYPE,
  sDrfPerception DOSRUBFLUX.DRFPERCEPTION%TYPE,
  nDrfNbPeriode DOSRUBFLUX.DRFNBPERIODE%TYPE,
  nDrfMultiple DOSRUBFLUX.DRFMULTIPLE%TYPE,
  nDrfPeriode DOSRUBFLUX.DRFPERIODE%TYPE,
  nDrfDtDeb DOSRUBFLUX.DRFDTDEB%TYPE,
  nDrfMt DOSRUBFLUX.DRFMT%TYPE,
  nDrfDtFin DOSRUBFLUX.DRFDTFIN%TYPE,
  nDrfFlagFinMois DOSRUBFLUX.DRFFLAGFINMOIS%TYPE,
  sDrfProgression DOSRUBFLUX.DRFPROGRESSION%TYPE,
  nDrfCoefProg DOSRUBFLUX.DRFCOEFPROG%TYPE,
  nDrfFrequence DOSRUBFLUX.DRFFREQUENCE%TYPE,
  nDrfNbLoyPer DOSRUBFLUX.DRFNBLOYPER%TYPE,
  nFlagJourFixe DOSRUBFLUX.DRFFLAGJOURFIXE%TYPE,
  nDrfNbJDecale DOSRUBFLUX.DRFNBJDECALE%TYPE,
  nDrfNbSaison DOSRUBFLUX.DRFNBSAISON%TYPE,
  nDrfTxAssiette DOSRUBFLUX.DRFTXASSIETTE%TYPE,
  sDrfIntPerception DOSRUBFLUX.DRFINTPERCEPTION%TYPE,
  nDrfIntNbPeriode DOSRUBFLUX.DRFINTNBPERIODE%TYPE,
  nDrfIntPeriode DOSRUBFLUX.DRFINTPERIODE%TYPE,
  nDrfIntMultiple DOSRUBFLUX.DRFINTMULTIPLE%TYPE,
  nDrfFranchise DOSRUBFLUX.DRFFRANCHISE%TYPE,
  dtDrfDtIntDiffere DOSRUBFLUX.DRFDTINTDIFFERE%TYPE,
  nDrfIntNbJDecale DOSRUBFLUX.DRFINTNBJDECALE%TYPE,
  nDrfFlagIntJourFixe DOSRUBFLUX.DRFFLAGINTJOURFIXE%TYPE,
  nDrfFlagIntFinMois DOSRUBFLUX.DRFFLAGINTFINMOIS%TYPE,
  sDrfTypeAmoPer DOSRUBFLUX.DRFTYPEAMOPER%TYPE,
  nTrbId            DOSRUBFLUX.TRBID%TYPE,
  nDrfFlagLendemain           DOSRUBFLUX.DRFFLAGLENDEMAIN%TYPE,
  nDrfFlagChangeMoisEcheance  DOSRUBFLUX.DRFFLAGCHANGEMOISECHEANCE%TYPE,
  sDrfGracePeriodType    DOSRUBFLUX.DRFGRACEPERIODTYPE%TYPE,
  nDrfGracePeriodInDays   DOSRUBFLUX.DRFGRACEPERIODINDAYS%TYPE,
  dtDrfDtIntBeg DOSRUBFLUX.DRFDTINTBEG%TYPE,
  dtDrfDtIntEnd DOSRUBFLUX.DRFDTINTEND%TYPE,
  nReturnCode IN OUT NUMBER
  )
AS
nDifference NUMBER := 0;
BEGIN

	--FBO : be careful, the choice of the default values in case of null value is really important.
	SELECT COUNT(1)
	  INTO nDifference
	  FROM DOSRUBFLUX
	 WHERE DOSID = nDosId
	   AND DRUORDRE = nDruOrdre
       AND DRFORDRE = nDrfOrdre
	   AND (
			NVL(DRFPERCEPTION, 'X') 	!= sDrfPerception 	OR
			NVL(DRFNBPERIODE, -10) 		!= nDrfNbPeriode 	OR
            NVL(DRFMULTIPLE, -1) 		!= nDrfMultiple 	OR
			NVL(DRFPERIODE, '030')		!= nDrfPeriode		OR
			DRFDTDEB 					!= nDrfDtDeb		OR
			NVL(DRFMT,0) 				!= nDrfMt			OR
			DRFDTFIN 					!= nDrfDtFin		OR
			NVL(DRFFLAGFINMOIS, 0)  	!= NVL(nDrfFlagFinMois,0)	OR
			NVL(DRFPROGRESSION, 'C') 	!= sDrfProgression 	OR
			NVL(DRFCOEFPROG, 0)		 	!= NVL(nDrfCoefProg, 0) OR
			NVL(DRFFREQUENCE, 0)		!= NVL(nDrfFrequence,0) OR
			NVL(DRFNBJDECALE,0)		 	!= NVL(nDrfNbJDecale,0) OR
			NVL(DRFNBSAISON, 0)			!= NVL(nDrfNbSaison, 0) OR
			NVL(DRFTXASSIETTE,0)	 	!= NVL(nDrfTxAssiette, 0) OR
			NVL(DRFINTPERCEPTION, 'X') 	!= NVL(sDrfIntPerception, 'X') OR
			NVL(DRFINTNBPERIODE, 0) 	!= NVL(nDrfIntNbPeriode,0) OR
			NVL(DRFINTPERIODE, '030') 	!= NVL(nDrfIntPeriode, '030') OR
			NVL(DRFINTMULTIPLE, 1)		!= NVL(nDrfIntMultiple, 1)OR
			NVL(DRFINTNBJDECALE, 0) 	!= NVL(nDrfIntNbJDecale,0) OR
			NVL(DRFFLAGINTFINMOIS, 0) 	!= NVL(nDrfFlagIntFinMois,0)
			);

    UPDATE DOSRUBFLUX
    SET
          DRFPERCEPTION = sDrfPerception,
          DRFNBPERIODE = nDrfNbPeriode,
          DRFMULTIPLE = nDrfMultiple,
          DRFPERIODE = nDrfPeriode,
          DRFDTDEB = nDrfDtDeb,
          DRFMT = nDrfMt,
          DRFDTFIN = nDrfDtFin,
          DRFFLAGFINMOIS = nDrfFlagFinMois,
          DRFPROGRESSION = sDrfProgression,
          DRFCOEFPROG = nDrfCoefProg,
          DRFFREQUENCE = nDrfFrequence,
          DRFNBLOYPER = nDrfNbLoyPer,
          DRFFLAGJOURFIXE = nFlagJourFixe,
          DRFNBJDECALE = nDrfNbJDecale,
          DRFNBSAISON = nDrfNbSaison,
          DRFTXASSIETTE = nDrfTxAssiette,
          DRFINTPERCEPTION = sDrfIntPerception,
          DRFINTNBPERIODE = nDrfIntNbPeriode,
          DRFINTPERIODE = nDrfIntPeriode,
          DRFINTMULTIPLE = nDrfIntMultiple,
          DRFFRANCHISE = nDrfFranchise,
          DRFDTINTDIFFERE = dtDrfDtIntDiffere,
          DRFINTNBJDECALE = nDrfIntNbJDecale,
          DRFFLAGINTJOURFIXE = nDrfFlagIntJourFixe,
          DRFFLAGINTFINMOIS = nDrfFlagIntFinMois,
          DRFTYPEAMOPER = sDrfTypeAmoPer,
          TRBID = nTrbId,
          DRFFLAGLENDEMAIN = nDrfFlagLendemain,
          DRFFLAGCHANGEMOISECHEANCE = nDrfFlagChangeMoisEcheance,
          DRFGRACEPERIODTYPE = sDrfGracePeriodType,
          DRFGRACEPERIODINDAYS = nDrfGracePeriodInDays,
          DRFDTINTBEG   =   dtDrfDtIntBeg,
          DRFDTINTEND   =   dtDrfDtIntEnd
    WHERE DOSID = nDosId
    AND DRUORDRE = nDruOrdre
    AND DRFORDRE = nDrfOrdre;

	IF nDifference > 0 THEN
		UPDATE DOSRUBRIQUE
		   SET DRUDTMAJRUB = SYSDATE
		 WHERE DOSID = nDosId
		   AND DRUORDRE = nDruOrdre;
	END IF;

    nReturnCode := 0;
    IF SQL%ROWCOUNT = 0 THEN
      nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := EP_DOSRUBFLUX_NF;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
            nReturnCode := EN_DOSRUBFLUX_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_DOSRUBFLUX_V;
      WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
END U_DOSRUBFLUX;

PROCEDURE I_DOSRUBTAX(
     nDOSID     IN DOSRUBTAX.DOSID%TYPE
    ,nDRUORDRE  IN DOSRUBTAX.DRUORDRE%TYPE
    ,sTAXCODE   IN DOSRUBTAX.TAXCODE%TYPE
    ,nDRTTXRATE IN DOSRUBTAX.DRTTXRATE%TYPE
	,nReturnCode   IN OUT NUMBER) IS
  BEGIN
    nReturnCode :=0;
    INSERT INTO DOSRUBTAX
      (
       DOSID
      ,DRUORDRE
      ,TAXCODE
      ,DRTTXRATE
      )
    VALUES
      (
       nDOSID
      ,nDRUORDRE
      ,sTAXCODE
      ,nDRTTXRATE
      );
	  IF SQL%ROWCOUNT = 0 THEN
		   nReturnCode := ERR_NO_ROWS_CONST;
	   END IF;
   EXCEPTION
	   WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := EP_DOSRUBTAX_NF;
	   WHEN ERR_I_NULL_MANDATORY_KEY THEN
         nReturnCode := EN_DOSRUBTAX_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DOSRUBTAX_V;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
END I_DOSRUBTAX;

PROCEDURE U_DOSRUBTAX(
     nDOSID     IN DOSRUBTAX.DOSID%TYPE
    ,nDRUORDRE  IN DOSRUBTAX.DRUORDRE%TYPE
    ,sTAXCODE   IN DOSRUBTAX.TAXCODE%TYPE
    ,nDRTTXRATE IN DOSRUBTAX.DRTTXRATE%TYPE
	,nReturnCode   IN OUT NUMBER) IS
  BEGIN
  nReturnCode :=0;
    UPDATE DOSRUBTAX
    SET
        DRTTXRATE = nDRTTXRATE
    WHERE
        DOSID     = nDOSID
    AND DRUORDRE  = nDRUORDRE
    AND TAXCODE   = sTAXCODE;
	IF SQL%ROWCOUNT = 0 THEN
		   nReturnCode := ERR_NO_ROWS_CONST;
	   END IF;
	EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         nReturnCode := EP_DOSRUBTAX_NF;
      WHEN ERR_U_NULL_MANDATORY_KEY THEN
         nReturnCode := EN_DOSRUBTAX_M_KEY_CONST;
      WHEN DUP_VAL_ON_INDEX THEN
         nReturnCode := ERR_DUP_DOSRUBTAX_V;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
END U_DOSRUBTAX;

PROCEDURE D_DOSRUBTAX
    (
     nDOSID     IN DOSRUBTAX.DOSID%TYPE
    ,nDRUORDRE  IN DOSRUBTAX.DRUORDRE%TYPE
    ,sTAXCODE   IN DOSRUBTAX.TAXCODE%TYPE
	,nReturnCode   IN OUT NUMBER
    ) IS
  BEGIN
  nReturnCode :=0;
    DELETE FROM DOSRUBTAX
    WHERE
        DOSID     = nDOSID
    AND DRUORDRE  = nDRUORDRE
    AND TAXCODE   = sTAXCODE;

	IF SQL%ROWCOUNT = 0 THEN
		   nReturnCode := ERR_NO_ROWS_CONST;
	   END IF;
	EXCEPTION
      WHEN ERR_CHILD_FOUND THEN
         nReturnCode := ERR_CHILD_FOUND_CONST;
      WHEN OTHERS THEN
         nReturnCode := -1 * SQLCODE;
END D_DOSRUBTAX;

PROCEDURE I_PTP
    (
     nDOSID     IN DOSSIER.DOSID%TYPE
    ,nACTID	    IN ACTEUR.ACTID%TYPE
    ,sCOMMENT   IN DOSSIER.DOSCOMMENT%TYPE
	,sUTICODE   IN UTILISATEUR.UTICODE%TYPE
	,nCREID 	IN CREVT.CREID%TYPE
	,dtEvent	IN DATE
	,nReturnCode   IN OUT NUMBER
    ) IS
  BEGIN
	DECLARE
		nCount 					NUMBER;
		nACTIDPARENT			ACTEUR.ACTID%TYPE;
		nAcnOrdreParent			ACTCONTACT.ACNORDRE%TYPE;
		nAcnOrdre				ACTCONTACT.ACNORDRE%TYPE;
		nActIdGestion			ACTEUR.ACTID%TYPE;
		nAdmId					ADMINISTRATIF.ADMID%TYPE;
		CURSOR C1 IS
			SELECT DRU.DRUORDRE, DRU.DRUDTDEB, ADM.ADMID, ADM.FORID, DOS.DOSREGIMEFISCAL, DOS.TACCODE, DOS.TPGCODE
			FROM DOSRUBRIQUE DRU, LKDRUCRE LKC, ADMINISTRATIF ADM, DOSSIER DOS, FORMALITE FRM
			WHERE
				LKC.CREID = nCREID
				AND DRU.DOSID = LKC.DOSID
				AND DRU.DRUORDRE = LKC.DRUORDRE
				AND DOS.DOSID = DRU.DOSID
				AND ADM.CREID = nCREID
				AND FRM.FORID = ADM.FORID
				AND SUBSTR( FRM.FORCODE,1,3 ) = 'PTP';

	BEGIN

		nReturnCode := 0;

		SELECT ACTID
		INTO nActIdGestion
		FROM DOSSIER
		WHERE DOSID = nDOSID;

		SELECT NVL(MAX(ACNORDRE) ,0)
		INTO nAcnOrdre
		FROM ACTCONTACT
		WHERE ACTID = nACTID;
		nAcnOrdre := nAcnOrdre + 1;

		nACTIDPARENT  := NULL;
		nAcnOrdreParent := NULL;

		INSERT INTO ACTCONTACT (ACTID, ACNORDRE, ACNTYPE, DOSID, ACNDTDEB, ACNMEMO, ACNDTUPDATE, ACTIDPARENT, ACNORDREPARENT, UTICODE, CREID)
				VALUES (nActId, nAcnOrdre, 'PTP', nDOSID, dtEvent, sCOMMENT, SYSDATE, nACTIDPARENT, nAcnOrdreParent, sUTICODE, nCREID);

		IF SQL%ROWCOUNT=0 THEN
		  nReturnCode := ERR_NO_ROWS_CONST;
		END IF;

		SELECT COUNT(*)
		INTO nCOUNT
		FROM ADMINISTRATIF ADM, FORMALITE FRM
		WHERE CREID = nCREID
		AND FRM.FORID = ADM.FORID
		AND SUBSTR( FRM.FORCODE,1,3 ) = 'PTP';

		IF nCOUNT = 1 THEN
			FOR C1R IN C1 LOOP
				IF nCOUNT != 1 THEN
					PAV4_UPDATEADMINISTRATIF.I_FORMALITEEVT(
                                                   NULL,
                                                   C1R.FORID,
                                                   NULL,
                                                   C1R.DOSREGIMEFISCAL,
                                                   nCREID,
                                                   'DOSSIER',
                                                   C1R.TACCODE,
                                                   'EVD_PROMISEPAY',
                                                   'DOSSIER',
                                                   C1R.TPGCODE,
                                                   sUTICODE,
                                                   nAdmId,
                                                   nReturnCode);

					   UPDATE ADMINISTRATIF SET DOSID = nDosId, ACTIDGESTION = nActIdGestion WHERE ADMID = nAdmId;
				ELSE
					nAdmId := C1R.ADMID;
				END IF;
				UPDATE ADMINISTRATIF
				SET ADMDTEMIS = C1R.DRUDTDEB
				WHERE CREID = nCREID
				AND ADMID = nAdmId;
				nCOUNT := nCOUNT + 1;
			END LOOP;
		END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND THEN
              nReturnCode := ERR_PARENT_ACN_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX THEN
                  nReturnCode := ERR_DUP_VAL_ON_ACN_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY THEN
                  nReturnCode := ERR_VAL_CONTACT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY THEN
                  nReturnCode := ERR_VAL_CONTACT_NULL_CONST;
            WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
		END;
END I_PTP;

PROCEDURE I_DOSRUBECHMONTHEND	(
	nDosId 			IN DOSRUBECHMONTHEND.DOSID%TYPE,
	nDruOrdre 		IN DOSRUBECHMONTHEND.DRUORDRE%TYPE,
	nDrmOrdre 		IN DOSRUBECHMONTHEND.DRMORDRE%TYPE,
	dtDrmDtech 		IN DOSRUBECHMONTHEND.DRMDTECH%TYPE,
	sDrmCode 		IN DOSRUBECHMONTHEND.DRMCODE%TYPE,
	nDrmmTecf 		IN DOSRUBECHMONTHEND.DRMMTECF%TYPE,
	nDrmmTamo 		IN DOSRUBECHMONTHEND.DRMMTAMO%TYPE,
	nDrmmtInteret 	IN DOSRUBECHMONTHEND.DRMMTINTERET%TYPE,
	nDrmmtSumInteret IN DOSRUBECHMONTHEND.DRMMTSUMINTERET%TYPE,
	nDrmmtBase 		IN DOSRUBECHMONTHEND.DRMMTBASE%TYPE,
	nDrmmtBalance 	IN DOSRUBECHMONTHEND.DRMMTBALANCE%TYPE,
	nReturnCode   	IN OUT NUMBER
    ) AS
BEGIN

	    nReturnCode :=0;

	INSERT INTO DOSRUBECHMONTHEND
	(
		DOSID,
		DRUORDRE,
		DRMORDRE,
		DRMDTECH,
		DRMCODE,
		DRMMTECF,
		DRMMTAMO,
		DRMMTINTERET,
		DRMMTSUMINTERET,
		DRMMTBASE,
		DRMMTBALANCE
	)
    VALUES
	(
		nDosId,
		nDruOrdre,
		nDrmOrdre,
		dtDrmDtech,
		sDrmCode,
		nDrmmTecf,
		nDrmmTamo,
		nDrmmtInteret,
		nDrmmtSumInteret,
		nDrmmtBase,
		nDrmmtBalance
    );

	IF SQL%ROWCOUNT = 0 THEN
		   nReturnCode := ERR_NO_ROWS_CONST;
	END IF;

    EXCEPTION
		WHEN OTHERS THEN
			nReturnCode := -1 * SQLCODE;

END I_DOSRUBECHMONTHEND;

PROCEDURE U_DOSRUBECHMONTHEND	(
	nDosId 			IN DOSRUBECHMONTHEND.DOSID%TYPE,
	nDruOrdre 		IN DOSRUBECHMONTHEND.DRUORDRE%TYPE,
	nDrmOrdre 		IN DOSRUBECHMONTHEND.DRMORDRE%TYPE,
	dtDrmDtech 		IN DOSRUBECHMONTHEND.DRMDTECH%TYPE,
	sDrmCode 		IN DOSRUBECHMONTHEND.DRMCODE%TYPE,
	nDrmmTecf 		IN DOSRUBECHMONTHEND.DRMMTECF%TYPE,
	nDrmmTamo 		IN DOSRUBECHMONTHEND.DRMMTAMO%TYPE,
	nDrmmtInteret 	IN DOSRUBECHMONTHEND.DRMMTINTERET%TYPE,
	nDrmmtSumInteret IN DOSRUBECHMONTHEND.DRMMTSUMINTERET%TYPE,
	nDrmmtBase 		IN DOSRUBECHMONTHEND.DRMMTBASE%TYPE,
	nDrmmtBalance 	IN DOSRUBECHMONTHEND.DRMMTBALANCE%TYPE,
	nReturnCode   	IN OUT NUMBER
	) AS
BEGIN

	nReturnCode :=0;

	UPDATE DOSRUBECHMONTHEND
    SET
		DRMDTECH 		=	dtDrmDtech,
		DRMCODE 		=	sDrmCode,
		DRMMTECF 		=	nDrmmTecf,
		DRMMTAMO 		=	nDrmmTamo,
		DRMMTINTERET 	=	nDrmmtInteret,
		DRMMTSUMINTERET =	nDrmmtSumInteret,
		DRMMTBASE 		=	nDrmmtBase,
		DRMMTBALANCE 	=	nDrmmtBalance
    WHERE DOSID 			=	nDosId
	AND DRUORDRE 		=	nDruOrdre
	AND	DRMORDRE 		=	nDrmOrdre;

	IF SQL%ROWCOUNT = 0 THEN
		   nReturnCode := ERR_NO_ROWS_CONST;
	END IF;

	EXCEPTION
		WHEN OTHERS THEN
			nReturnCode := -1 * SQLCODE;

END U_DOSRUBECHMONTHEND;

PROCEDURE D_DOSRUBECHMONTHEND	(
	nDosId 			IN DOSRUBECHMONTHEND.DOSID%TYPE,
	nDruOrdre 		IN DOSRUBECHMONTHEND.DRUORDRE%TYPE,
	nDrmOrdre 		IN DOSRUBECHMONTHEND.DRMORDRE%TYPE,
    nReturnCode IN OUT NUMBER
    ) AS
BEGIN

	DELETE FROM DOSRUBECHMONTHEND
	WHERE DOSID 		=	nDosId
	AND DRUORDRE 		=	nDruOrdre
	AND	DRMORDRE 		=	nDrmOrdre;

	EXCEPTION
		WHEN OTHERS THEN
			nReturnCode := -1 * SQLCODE;

END D_DOSRUBECHMONTHEND;

PROCEDURE P_EVENGA3 (
   nDosId               IN DOSSIER.DOSID%TYPE,
   nActId               IN DOSSIER.ACTID%TYPE,
   nCreId	       		IN OUT NUMBER,
   dtEffet              IN DATE,
   nVarEngQp            IN NUMBER,
   nImaId         		IN NUMBER,
   sUgeCode  			IN TOPPARAM.UGECODE%TYPE,
   nReturnCode			IN OUT NUMBER) AS
BEGIN
   BEGIN
      DECLARE
         sDevCode 				CREVT.DEVCODE%TYPE;
         sDosTypeFinancement 	DOSSIER.DOSTYPEFINANCEMENT%TYPE;
         nDosiDRefinance    	DOSSIER.DOSIDREFINANCE%TYPE;
         nOption					NUMBER:=0;
      BEGIN
         SELECT DEVCODE, DOSTYPEFINANCEMENT, DOSIDREFINANCE INTO sDevCode, sDosTypeFinancement,nDosiDRefinance FROM DOSSIER WHERE DOSID = nDosId;

         IF sDosTypeFinancement IS NOT NULL THEN
      		nOption := F_IsOptionSiteTexte('EVENT','CROENGAGE',sUgeCode,sDosTypeFinancement);
      	END IF;

      	-- IF nVarEngQp IS NOT NULL AND nVarEngQp != 0  AND (nDosiDRefinance IS NULL OR nOption=1) AND
            -- (sDosTypeFinancement NOT IN ( 'TTNL', 'TTLS','CLIP' ) OR sDosTypeFinancement IS NULL ) THEN
         IF nVarEngQp IS NOT NULL AND nVarEngQp != 0  AND nDosiDRefinance IS NULL AND
            (sDosTypeFinancement NOT IN ( 'TTNL', 'TTLS','CLIP' ) OR sDosTypeFinancement IS NULL )
            AND ( nOption = 0 ) THEN
            PA_GENERECRO.I_CRO( nActId, nCreId, NULL, NULL, NULL, 'ENGAGE', dtEffet, nReturnCode );
         ELSE
            nReturnCode := 0;
         END IF;
         IF nReturnCode = 0 THEN
            UPDATE CREVT
            SET    CREMT = nVarEngQp, DEVCODE = sDevCode, IMAID = nImaId
            WHERE  CREID = nCreId;
			/* Below code not required in V4 as it is handled in Framework code.
            IF nReturnCode = 0 AND nImaId IS NULL THEN
               PA_EVT.U_EVT_VALIDE( nCreId, nReturnCode );
            END IF;
			*/
         END IF;
      EXCEPTION
         WHEN ERR_PARENT_NOT_FOUND THEN
            nReturnCode := ERR_PARENT_NOT_FOUND_CONST;
	   WHEN ERR_I_NULL_MANDATORY_KEY THEN
         	nReturnCode := ERR_NULL_MANDATORY_KEY_CONST;
         WHEN DUP_VAL_ON_INDEX THEN
            nReturnCode := ERR_DUP_VAL_ON_INDEX_CONST ;
         WHEN OTHERS THEN
            nReturnCode := -1 * SQLCODE;
      END;
   END;
END P_EVENGA3;

PROCEDURE P_COLLATERALROLLOVER (
   nDosId              DOSSIER.DOSID%TYPE,
   nDacOrdre           DOSACTGARANTIE.DACORDRE%TYPE,
   nDagOrdre           DOSACTGARANTIE.DAGORDRE%TYPE,
   dtRollOverDate		DATE,
   nCreId				CREVT.CREID%TYPE,
   nType				NUMBER, -- 1 for renew or 0 for stop
   nReturnCode			IN OUT NUMBER) AS
 BEGIN
	DECLARE
		nActId		DOSACTEUR.ACTID%TYPE;
		dtAstDtBeg	DATE;
		nAstOrdre	NUMBER;
		sUser		CREVT.UTICODECREAT%TYPE;
		nDgrOrdre   DOSACTGARRENOUVELLEMENT.DGRORDRE%TYPE;
		cDosactgarantie   DOSACTGARANTIE%ROWTYPE;
		dtCreDtEffet	CREVT.CREDTEFFET%TYPE;
		CURSOR cAdm	IS SELECT AST.ASTORDRE,AST.ASTSTATUS,ADM.ADMID, AST.ASTDTBEG
			FROM ADMINISTRATIF ADM,ADMSTATUS AST
			WHERE ADM.DOSID = nDosId AND ADM.DACORDREGARANT = nDacOrdre AND ADM.DAGORDRE = nDagOrdre
			AND	 ADM.ADMID = AST.ADMID AND AST.ASTDTEND IS NULL AND AST.ASTSTATUS != 'TER';
	BEGIN
		SELECT UTICODECREAT, CREDTEFFET INTO sUser,dtCreDtEffet
		FROM CREVT WHERE CREID = nCreId;
		select * INTO cDosactgarantie
		FROM DOSACTGARANTIE WHERE DOSID 	=	nDosId AND	DACORDRE 	=	nDacOrdre AND	DAGORDRE	=	nDagOrdre;
		SELECT ACTID INTO nActId	FROM DOSACTEUR
		WHERE 	DOSID 	=	nDosId AND	DACORDRE 	=	nDacOrdre;
		IF NVL(nType,0) = 1 THEN
			-- renouvellement
			PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'DGR', nActId, dtRollOverDate, cDosactgarantie.TgaCode, nDagOrdre, NULL, NULL, NULL, NULL, NULL, nReturnCode );
			SELECT MAX(DGRORDRE) INTO nDgrOrdre FROM DOSACTGARRENOUVELLEMENT
			WHERE 	DOSID 	=	nDosId AND	DACORDRE 	=	nDacOrdre AND	DAGORDRE	=	nDagOrdre;
			nDgrOrdre := NVL(nDgrOrdre,0)+1;
			PA_UPDATEDOSSIER4.I_DOSACTGARRENOUVELLEMENT ( nDosId,nDacOrdre, nDagOrdre ,
					nDgrOrdre,					NULL,
					dtRollOverDate,TRUNC(SYSDATE), sUser, nCreId, NULL,NULL, nReturnCode);
			IF nReturnCode = 0 THEN
				UPDATE DOSACTGARANTIE SET DAGDTFIN = F_PlGetEndCollateralRollover(cDosactgarantie.TgaCode, nDosId,dtRollOverDate)
				WHERE DOSID =nDosId AND DACORDRE = nDacOrdre AND DAGORDRE = nDagOrdre;
			END IF;
		ELSIF NVL(nType,0) = 0 THEN
			-- arret
			PA_EVT.I_CREDATA( nCreId, NULL, NULL, 'DGRSTOP', nActId, dtCreDtEffet, cDosactgarantie.TgaCode, nDagOrdre, NULL, NULL, NULL, NULL, NULL, nReturnCode );
			UPDATE DOSACTGARANTIE set DAGDTFIN = dtCreDtEffet, DAGETATGARANTIE = 'FINRENOUV'
			WHERE DOSID = nDosId AND DACORDRE 	=	nDacOrdre AND DAGORDRE	=	nDagOrdre;
			-- fin de la formalite
			FOR cAdm_rec IN cAdm LOOP
				UPDATE ADMINISTRATIF SET ADMETAT = 'TER'
				WHERE ADMID = cAdm_rec.ADMID;
				UPDATE ADMSTATUS SET ASTDTEND = GREATEST(cAdm_rec.ASTDTBEG,dtCreDtEffet -1)
				WHERE ADMID = cAdm_rec.ADMID AND ASTORDRE = cAdm_rec.ASTORDRE;
				dtAstDtBeg := GREATEST(cAdm_rec.ASTDTBEG+1,dtCreDtEffet) ;
				nAstOrdre := cAdm_rec.ASTORDRE+ 1;
				PA_UPDATEADMINISTRATIF.I_ADMSTATUS(
							cAdm_rec.ADMID,
							nAstOrdre,
							'TER',
							dtAstDtBeg,
							NULL,
							TRUNC(SYSDATE),
							NULL,
							NULL,
							NULL,
							sUser,
							NULL,
							NULL,
							nReturnCode );
				IF nReturnCode != 0 THEN
					EXIT;
				END IF ;
			END LOOP;
		END IF;
		EXCEPTION
			WHEN OTHERS THEN
				nReturnCode := -1 * SQLCODE;
	END;
 END P_COLLATERALROLLOVER;

PROCEDURE P_VARFIN_IMADOSSIER (
	nDosId 		DOSSIER.DOSID%TYPE,
	nImaId		IMADOSSIER.IMAID%TYPE,
	nCreId		CREVT.CREID%TYPE,
	dtEffet		DATE,
	nReturnCode	IN OUT NUMBER) AS
BEGIN
	DECLARE

		nSumDreMtVrRub 		NUMBER := 0;
		nSumDreMtBase 		NUMBER := 0;
		nSumDreMtIntPeriode NUMBER := 0;
		nSumDreMtVr 		NUMBER := 0;
		nDreMtBase 			NUMBER;
		nDreMtIntPeriode 	NUMBER;
		nMultiple			NUMBER;
		nCdaOrdre			NUMBER :=0;
		nSuite				NUMBER;
		CURSOR C1 IS SELECT DRUORDRE,DRUSENS FROM IMADOSRUBRIQUE
			WHERE DOSID =nDosId AND IMAID = nImaId AND  DRUCLASSE = 'F' AND DRUTYPE ='F' AND
				( F_ISRUBIDONFILTRE(RUBID, 'REDFIN') = 1  OR F_ISRUBIDONFILTRE(RUBID, 'RELOC') = 1  ) AND
				F_ISRUBIDONFILTRE(RUBID, 'AVPR')  =  0 and F_ISRUBIDONFILTRE(RUBID, 'SUBV') =0;
	BEGIN

		FOR C1R IN C1 LOOP
			SELECT SUM(NVL(DREMTBASE,0)),SUM(NVL(DreMtIntPeriode,0))  INTO nDreMtBase ,nDreMtIntPeriode
			FROM IMADOSRUBECHEANCIER WHERE DOSID = nDosId AND IMAID = nImaId AND DRUORDRE = C1R.DRUORDRE
			AND DREDTECH >= dtEffet AND DRETYPE ='LOYER';
			IF C1R.DRUSENS IS NULL OR C1R.DRUSENS ='+' THEN
				nMultiple :=1;
			ELSE
				nMultiple := -1;
			END IF;
			nSumDreMtBase  := nSumDreMtBase  + NVL(nDreMtBase,0)*nMultiple;
			nSumDreMtIntPeriode  := nSumDreMtIntPeriode  + nvl(nDreMtIntPeriode,0)*nMultiple;
			select count(DRUORDRE) INTO nSuite FROM IMADOSRUBRIQUE
			WHERE  DOSID = nDosId AND IMAID = nImaId AND DRUORDREPREC = C1R.DRUORDRE;
			IF nSuite =0 THEN
				SELECT SUM(NVL(DREMTBASE,0)) INTO nDreMtBase
				FROM IMADOSRUBECHEANCIER WHERE DOSID = nDosId AND IMAID = nImaId AND DRUORDRE = C1R.DRUORDRE
				AND DREDTECH >= dtEffet AND DRETYPE ='VR';
			ELSE
				nDreMtBase := 0;
			END IF;
			nSumDreMtVr  := nSumDreMtVr  + nDreMtBase*nMultiple;
		END LOOP;
		SELECT MAX(CDAORDRE) INTO nCdaOrdre FROM CREDATA WHERE CREID = nCreId;
		nCdaOrdre := NVL(nCdaOrdre,0) + 1;
		 INSERT INTO CREDATA (CREID,CDAORDRE,CDATABLE,CDACOLONNE,CDADATANUMBER) VALUES(nCreId,nCdaOrdre,'LOYER','AVANT',nSumDreMtBase);
		nCdaOrdre := NVL(nCdaOrdre,0) + 1;
         INSERT INTO CREDATA (CREID,CDAORDRE,CDATABLE,CDACOLONNE,CDADATANUMBER) VALUES(nCreId,nCdaOrdre,'INTERET','AVANT',nSumDreMtIntPeriode);
		nCdaOrdre := NVL(nCdaOrdre,0) + 1;
         INSERT INTO CREDATA (CREID,CDAORDRE,CDATABLE,CDACOLONNE,CDADATANUMBER) VALUES(nCreId,nCdaOrdre,'VR','AVANT',nSumDreMtVr);
		EXCEPTION
			WHEN OTHERS THEN
				nReturnCode := -1 * SQLCODE;
	END;
END P_VARFIN_IMADOSSIER;

END PAV4_UPDATEDOSSIER;
/