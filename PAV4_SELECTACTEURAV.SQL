CREATE OR REPLACE PACKAGE pav4_selectacteurav
AS
TYPE T_CURSOR
IS
    REF
    CURSOR;
        PROCEDURE S_ACTEUR_FULL(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_ACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_ACTEUR_FULL_ANA(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                PC_ACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_AVACTEUR(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_AVACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_AVACTEUR_ANA(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                PC_AVACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_DESCRIPTIVEVALUE(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_LISTE_DESCRIPTIVEVALUE IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_DESCRIPTIVEVALUE_ANA(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                PC_LISTE_DESCRIPTIVEVALUE IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELATION(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_UTICODE UTILISATEUR.UTICODE%TYPE,
                P_TCOID TCOVALEUR.TCOID%TYPE,
                PC_LISTE_ACTRELATION IN OUT T_CURSOR) ;

		--
        -- Returns a list of DVAHIERARCHY for a DVAID
        --
        PROCEDURE S_LISTE_DVAHIERARCHY(
                P_DVAID DVAHIERARCHY.DVAID%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        --
        -- Returns a list of DVAHIERARCHY for a DVAID
        --
        PROCEDURE S_LISTE_DVAHIERARCHY_ANA(
                P_DVAID DVAHIERARCHY.DVAID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        --
        -- Returns a list of ACTRELPRODETAIL
        --
        PROCEDURE S_LISTE_ACTRELPRODETAIL(
                P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
                P_TRECODE ACTRELPRODETAIL.TRECODE%TYPE,
                P_ACTIDRELATION ACTRELPRODETAIL.ACTIDRELATION%TYPE,
                P_AREDTDEB ACTRELPRODETAIL.AREDTDEB%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELPRODETAIL_ASC(
                P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELPRODETAIL_DESC(
                P_ACTIDRELATION ACTRELPRODETAIL.ACTIDRELATION%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        --
        -- Returns a list of ACTRELPRODETAIL WITH ANAID
        --
        PROCEDURE S_LISTE_ACTRELPRODETAIL_ANA(
                P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                P_TRECODE ACTRELPRODETAIL.TRECODE%TYPE,
                P_ACTIDRELATION ACTRELPRODETAIL.ACTIDRELATION%TYPE,
                P_AREDTDEB ACTRELPRODETAIL.AREDTDEB%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_RELATIONALERT(
                P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
                P_LANCODE LANTRELATION.LANCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_ACTEURALERT(
                P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        FUNCTION F_ACTID_FROM_SIRET(
                P_ACTSIRET ACTEUR.ACTSIRET%TYPE)
            RETURN NUMBER ;
        FUNCTION F_ACTOR_NAFCODE(
                P_NAFCODE ACTEUR.NAFCODE%TYPE)
            RETURN VARCHAR2 ;
        FUNCTION F_FICP(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_ANTITERRORISTE(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_WATCHLIST(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_FCC(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_DOUTEUX(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_DEFAUTS(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_PRIVILEGE(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_EXPERT(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_GRCONSOLIDE(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_GET_TYPECLIENT(
                P_CJUCODE RELATIONVALEURPROFIL.REVFILLECODE%TYPE,
                P_TPGCODE RELATIONVALEURPROFIL.TPGCODE%TYPE)
            RETURN VARCHAR2;
        --
        -- Returns the list of ACTPERIMETRE for an ACTID
        --
        PROCEDURE S_LISTE_ACTPERIMETRE(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_LISTE_ACTPERIMETRE IN OUT T_CURSOR) ;
        --
        -- Returns the list of ACTPERIMETRE for an ACTID and an ANAID
        --
        PROCEDURE S_LISTE_ACTPERIMETRE_ANA(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                PC_LISTE_ACTPERIMETRE IN OUT T_CURSOR) ;
        PROCEDURE S_ACTRELPRODET_COLVALUE(
                P_TATATTRIBUTE IN VARCHAR2,
                P_TRECODE IN VARCHAR2,
                P_LANGUE IN VARCHAR2,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_ACTRELPROASC_COLPROP(
                P_TRECODE TREATTRIBUTE.TRECODE%TYPE,
                P_LANGUE LANTREATTRIBUTE.LANCODE%TYPE,
                P_LIENLIM TREATTRIBUTE.TATATTRIBUTE%TYPE,
                P_PROPRIETES VARCHAR2,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELATION_ANA(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                P_UTICODE UTILISATEUR.UTICODE%TYPE,
                P_TCOID TCOVALEUR.TCOID%TYPE,
                PC_LISTE_ACTRELATION IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELATION_DESC_ANA(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANALYSIS.ANAID%TYPE,
                P_UTICODE UTILISATEUR.UTICODE%TYPE,
                P_TCOID TCOVALEUR.TCOID%TYPE,
                PC_RESULTAT IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELATION_HIERARCHY(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_TRECODE ACTRELATION.TRECODE%TYPE,
                P_UTICODE UTILISATEUR.UTICODE%TYPE,
                PC_LISTE_ACTRELATION IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_AAGRVE(
                NACTID ACTEUR.ACTID%TYPE,
                STTRNOM TTRPARAM.TTRNOM%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_CONTROL_LIMIT(
                P_ACTID IN AAGRVE.ACTID%TYPE,
                P_ROLCODE IN ACTROLE.ROLCODE%TYPE,
                P_LANCODE IN LANROLVARIABLE.LANCODE%TYPE,
                PC_RESULTAT IN OUT T_CURSOR) ;
        PROCEDURE S_INFO_ACTRELATION(
                P_ACTID ACTRELATION.ACTID%TYPE,
                P_ACTIDRELATION ACTRELATION.ACTIDRELATION%TYPE,
                P_TRECODE ACTRELATION.TRECODE%TYPE,
                P_AREDTDEB ACTRELATION.AREDTDEB%TYPE,
                P_AGGID ACTRELATION.AGGID%TYPE,
                P_LANCODE LANGUE.LANCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        FUNCTION F_ALERT(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        FUNCTION F_EVD(
                P_ACTID ACTEUR.ACTID%TYPE)
            RETURN NUMBER;
        PROCEDURE S_ACTEUR_BASIC_INFO(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_ACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_ACTEUR_BY_ACTCODE(
                P_ACTCODE ACTEUR.ACTCODE%TYPE,
                P_UGECODE ACTEUR.UGECODE%TYPE,
                PC_ACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_ACTEUR_BASIC_INFO_EVENT(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_ACTEUR IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTTCOVALEUR(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_LISTE_ACTTCOVALEUR IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ANAACTTCOVALEUR(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ANAID ANAACTTCOVALEUR.ANAID%TYPE,
                PC_LISTE_ANAACTTCOVALEUR IN OUT T_CURSOR) ;
        PROCEDURE S_ACTPHASE(
                NACTID IN ACTEUR.ACTID%TYPE,
                NLANGUE IN LANGUE.LANCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_FAMIILE_ACTEUR_BY_TYPE(
                P_ACTEURTYPE IN VARCHAR2,
                P_TPGCODE RELATIONVALEURPROFIL.TPGCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        FUNCTION F_VERIFY_SIRET(
                P_LANCODE LANGUE.LANCODE%TYPE,
                P_ACTSIRET ACTEUR.ACTSIRET%TYPE,
                P_CJUCODE ACTEUR.CJUCODE%TYPE,
                P_PAYCODE PAYS.PAYCODE%TYPE)
            RETURN VARCHAR2;
        PROCEDURE S_LISTE_ACTROLE(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_LISTE_ACTROLE IN OUT T_CURSOR) ;
        PROCEDURE S_LIST_AROAGE(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ROLCODE ACTROLE.ROLCODE%TYPE,
                PC_LIST_AROAGE IN OUT T_CURSOR) ;
        PROCEDURE S_TCALCULINTERET(
                P_TCICODE TCALCULINTERET.TCICODE%TYPE,
                PC_TCALCULINTERET IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELATION_DESC(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_UTICODE UTILISATEUR.UTICODE%TYPE,
                P_TCOID TCOVALEUR.TCOID%TYPE,
                PC_RESULTAT IN OUT T_CURSOR) ;
        PROCEDURE S_ADRESSE_REMP(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_ORDRE ACTADRESSE.AADORDRE%TYPE,
                PC_LISTE_ADRESSE IN OUT T_CURSOR) ;
        PROCEDURE S_ACTASSENT(
                NACTID ACTASSENT.ACTID%TYPE,
                NDOSID ACTASSENT.DOSIDPROSPECT%TYPE,
                NLANGUE LANGUE.LANCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        FUNCTION F_ACTID_FROM_AROREFEXTERNE(
                P_AROREFEXTERNE ACTROLE.AROREFEXTERNE%TYPE)
            RETURN NUMBER ;
        PROCEDURE S_ACTEUR_ANALYSIS(
                P_ACTID ANALYSIS.ACTID%TYPE,
                P_LANCODE LANGUE.LANCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_CHILD_ANALYSIS(
                P_ANAIDPARENT ANALYSIS.ANAIDPARENT%TYPE,
                P_LANGUE LANGUE.LANCODE%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        -- Assent--
        PROCEDURE S_LIST_ACTASSENT(
                NACTID IN ACTEUR.ACTID%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LIST_ACTASSATTRIBUTE(
                NACTID IN ACTEUR.ACTID%TYPE,
                NAASORDER IN ACTASSENT.AASORDER%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LIST_ACTASSMARKETPARTNER(
                NACTID IN ACTEUR.ACTID%TYPE,
                NAASORDER IN ACTASSENT.AASORDER%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRELATION_DESC_ROLE(
                P_ACTID ACTEUR.ACTID%TYPE,
                P_TRECODE ACTRELATION.TRECODE%TYPE,
                P_ROLCODE ACTROLE.ROLCODE%TYPE,
                PC_RESULTAT IN OUT T_CURSOR) ;
        FUNCTION F_VERIFY_ACTASSENT(
                P_ACTID ACTASSENT.ACTID%TYPE,
                P_DOSID ACTASSENT.DOSID%TYPE)
            RETURN NUMBER;
        PROCEDURE S_LISTE_ACTCARD_BY_DOSID(
                P_DOSID DOSSIERPROSPECT.DOSID%TYPE,
                PC_LISTE_ACTCARD IN OUT T_CURSOR) ;
        PROCEDURE S_GET_ACTORWITHROLEFORCOMBO(
                P_ROLCODE ACTROLE.ROLCODE%TYPE,
                PC_LIST_ACTOR IN OUT T_CURSOR) ;
        PROCEDURE S_RELATEDINFO(
                SUGECODE IN ACTEUR.UGECODE%TYPE,
                SDTRCODE IN DATATRANSCODING.DTRCODE%TYPE,
                NACTID IN ACTEUR.ACTID%TYPE,
                NDOSID IN DOSSIERPROSPECT.DOSID%TYPE,
                NDPRVERSION IN DOSSIERPROSPECT.DPRVERSION%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_RIB(
                P_RIBID RIB.RIBID%TYPE,
                PC_RIB IN OUT T_CURSOR) ;
        PROCEDURE S_MATRIX(
                SUGECODE IN ACTEUR.UGECODE%TYPE,
                SDTRCODE IN DATATRANSCODING.DTRCODE%TYPE,
                NACTID IN ACTEUR.ACTID%TYPE,
                NDOSID IN DOSSIERPROSPECT.DOSID%TYPE,
                NDPRVERSION IN DOSSIERPROSPECT.DPRVERSION%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
        PROCEDURE S_LIST_DEPARTMENT(
                P_LANCODE LANGUE.LANCODE%TYPE,
                PC_RESULT IN OUT T_CURSOR) ;
        PROCEDURE S_LISTE_ACTRIB(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_LISTE_ACTRIB IN OUT T_CURSOR) ;
        PROCEDURE S_REAL_CLIENT_FROM_UW(
                NACTIDCLIENTUW IN ACTEUR.ACTID%TYPE,
                PC_RETURN IN OUT T_CURSOR) ;
         PROCEDURE S_NAF(
                SLangue	 	LANGUE.LANCODE%TYPE,
                sTpgcode 	TPROFILGESTION.TPGCODE%TYPE,
                SPaycode	PAYS.PAYCODE%TYPE,
                PC_RETURN 	IN OUT T_CURSOR );

	PROCEDURE S_ACTEUR_INFO_EXTERNAL_CALL(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_ACTEUR_INFO IN OUT T_CURSOR);

	 PROCEDURE S_LISTE_ACTRELATION(
                P_ACTID ACTEUR.ACTID%TYPE,
                PC_LISTE_ACTRELATION IN OUT T_CURSOR) ;

	PROCEDURE S_LISTE_ACTTCOVALEUR_CLIENT (nActId             ACTEUR.ACTID%TYPE,
                                          PC_Return   IN OUT T_Cursor);

    PROCEDURE S_LISTE_AAGRVE_BY_ACTID (nActId             ACTEUR.ACTID%TYPE,
                                      PC_Return   IN OUT T_Cursor);
                                      
    FUNCTION S_ACTEUR_CCH (P_ACTID            ACTEUR.ACTID%TYPE)
    RETURN VARCHAR2 ;

    END PAV4_SELECTACTEURAV;
/

PROMPT CREATE OR REPLACE PACKAGE BODY pav4_selectacteurav
CREATE OR REPLACE PACKAGE BODY pav4_selectacteurav
AS
    /**
    * SELECTS AN ACTOR
    */
PROCEDURE S_ACTEUR_FULL(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_ACTEUR IN OUT T_CURSOR)
AS
    SRESIDENCE ACTTAB.ATBVALEUR%TYPE                   := NULL;
    STYPEACTEUR ACTTAB.ATBVALEUR%TYPE                  := NULL;
    NACTIDRELATION ACTEUR.ACTID%TYPE                   := NULL;
    SACTSECTGESTION ACTSECTGESTION.ACTSECTGESTION%TYPE := NULL;
    NACTIDSOCIETEGESTION NUMBER;
    SUGECODE ACTEUR.UGECODE%TYPE;
    SPHACODE ACTPHASE.PHACODE%TYPE;
BEGIN
    SUGECODE := PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID) ;
    BEGIN
        SELECT ACTSECTGESTION INTO SACTSECTGESTION FROM ACTSECTGESTION WHERE ACTID = P_ACTID;
EXCEPTION
WHEN OTHERS THEN
    NULL;
END;
BEGIN
    SELECT
        ACTIDGESTION
    INTO
        NACTIDSOCIETEGESTION
    FROM
        AROAGE
    WHERE
        ACTID          = P_ACTID
        AND AAGDTVALID =
        (
            SELECT MAX(AAGDTVALID) FROM AROAGE WHERE ACTID = P_ACTID
        )
        AND ROWNUM = 1;
EXCEPTION
WHEN OTHERS THEN
    NULL;
END;
BEGIN
    SELECT REPLACE(ATBVALEUR, '||', '') INTO SRESIDENCE FROM ACTTAB WHERE ACTID = P_ACTID AND TABCODE = '0R' AND ATBDTFIN IS NULL;
EXCEPTION
WHEN OTHERS THEN
    NULL;
END;
BEGIN
    SELECT REPLACE(ATBVALEUR, '||', '') INTO STYPEACTEUR FROM ACTTAB WHERE ACTID = P_ACTID AND TABCODE = '0E' AND ATBDTFIN IS NULL;
EXCEPTION
WHEN OTHERS THEN
    NULL;
END;
BEGIN
    SELECT ACTIDRELATION INTO NACTIDRELATION FROM ACTRELATION WHERE ACTID = P_ACTID AND TRECODE = PA_AVCOMMUN.F_GETCONSTANTE('GROUPE', SUGECODE) ;
EXCEPTION
WHEN OTHERS THEN
    BEGIN
        SELECT ACTIDRELATION INTO NACTIDRELATION FROM ACTRELATION WHERE ACTID = P_ACTID AND TRECODE = PA_AVCOMMUN.F_GETCONSTANTE('EMPLY', SUGECODE) ;
    EXCEPTION
    WHEN OTHERS THEN
        NULL;
    END;
END;
SELECT MAX(PHACODE) INTO SPHACODE FROM ACTPHASE WHERE ACTID = P_ACTID AND APHDTFIN IS NULL;
OPEN PC_ACTEUR FOR SELECT ACT.ACTID,
ACTRESIDENTCODE,
ACTFLAGTAXPROF,
ACTCAPITAL,
ACTFINMOISFISC,
ACTNUMRCM,
ACTLIBCOURT,
ACTNOM,
apaprenom,
Nvl( ACTNOM2,apaprenom) AS ACTNOM2,
ACTCODE,
ACT.CJUCODE,
ACT.NAFCODE,
ACT.LANCODE,
ACT.ACTTYPE,
ACT.ACTEIN,
UTICODECREAT,
UTICODEMAJ,
ACT.PAYCODE PAYCODE,
ACTSIRET,
ACTTVACE,
ACTCODERCM,
ACTMEMO,
ACTDTCREAT,
ACTDTMAJ,
DEVCODE,
ACTLIBCHEQUE,
ACTREGIMETVA,
SPHACODE,
ACT.DEVCODE,
NACTIDRELATION ACTIDRELATION,
SRESIDENCE BAFIRESIDENCE,
STYPEACTEUR BAFITYPEACTEUR,
ACT.UGECODE,
SACTSECTGESTION ACTSECTGESTION,
NACTIDSOCIETEGESTION ACTIDGESTION,
APADTNAISS,
APADEPTNAISS,
APACOMNAISS,
APANBENFANT,
APASEXE,
APAEMPLOYEUR,
APASITFAM,
APAFLAGPROPRIETE,
APATITRE,
APANOMMARITAL,
APAMIDDLENAME,
APAREGIMEMATRIM,
APAVILLENAISS,
APANOMPATRONYMIQUE,
APAFLAGINTERDITBANCAIRE,
APAPCTCAPITAL,
APAANEXPERACTIVITE,
APAANEXPERIENCEFONCTION,
APACODENIVEAUETUDE,
APAFLAGSUCCESSIONPRET,
APAFLAGHOMMECLE,
APACHGREGIMEMATRIM,
APAFLAGDIRIGEANT,
APADIRFONCTION,
APADTPERMISDECONDUIRE,
APA.PAYCODE APAPAYCODE,
ACTDTEXTHIRING,
ACTREPRESENTATIVE,
ACTTAXSYSTEM
 FROM ACTEUR ACT,
--                  ACTPHASE                APH,
ACTEURPARTICULIER APA WHERE ACT.ACTID = P_ACTID
--  AND     APH.ACTID = ACT.ACTID
--  AND             APH.APHDTFIN is null
AND ACT.ACTID = APA.ACTID (+);
END S_ACTEUR_FULL;
PROCEDURE S_ACTEUR_BASIC_INFO(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_ACTEUR IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_ACTEUR FOR SELECT ACTID,
    UGECODE,
    CJUCODE,
    LANCODE,
    PAYCODE,
    ACTCODE,
    ACTLIBCOURT,
    ACTNOM,
    NAFCODE,
    DEVCODE,
    ACTSIRET,
    ACTTYPE FROM ACTEUR ACT WHERE ACT.ACTID = P_ACTID;
END S_ACTEUR_BASIC_INFO;
PROCEDURE S_ACTEUR_BY_ACTCODE(
        P_ACTCODE ACTEUR.ACTCODE%TYPE,
        P_UGECODE ACTEUR.UGECODE%TYPE,
        PC_ACTEUR IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_ACTEUR FOR SELECT ACTID,
    UGECODE,
    CJUCODE,
    LANCODE,
    PAYCODE,
    ACTCODE,
    ACTLIBCOURT,
    ACTNOM,
    NAFCODE,
    DEVCODE,
    ACTSIRET,
	ACTTYPE
	FROM ACTEUR ACT WHERE ACT.ACTCODE = P_ACTCODE AND ACT.UGECODE = P_UGECODE;
END S_ACTEUR_BY_ACTCODE;
/**
* SELECTS AN ACTOR FROM THE ANA TABLES
*/
PROCEDURE S_ACTEUR_FULL_ANA(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        PC_ACTEUR IN OUT T_CURSOR)
AS
    SRESIDENCE ACTTAB.ATBVALEUR%TYPE                   := NULL;
    STYPEACTEUR ACTTAB.ATBVALEUR%TYPE                  := NULL;
    NACTIDRELATION ACTEUR.ACTID%TYPE                   := NULL;
    SACTSECTGESTION ACTSECTGESTION.ACTSECTGESTION%TYPE := NULL;
    NACTIDSOCIETEGESTION NUMBER;
    SUGECODE ACTEUR.UGECODE%TYPE;
BEGIN
    SUGECODE := PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID) ;
    BEGIN
        SELECT ACTSECTGESTION INTO SACTSECTGESTION FROM ACTSECTGESTION WHERE ACTID = P_ACTID;
    EXCEPTION
    WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
        SELECT
            ACTIDGESTION
        INTO
            NACTIDSOCIETEGESTION
        FROM
            AROAGE
        WHERE
            ACTID          = P_ACTID
            AND AAGDTVALID =
            (
                SELECT MAX(AAGDTVALID) FROM AROAGE WHERE ACTID = P_ACTID
            )
            AND ROWNUM = 1;
    EXCEPTION
    WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
        SELECT REPLACE(ATBVALEUR, '||', '') ATBVALEUR INTO SRESIDENCE FROM ACTTAB WHERE ACTID = P_ACTID AND TABCODE = '0R' AND ATBDTFIN IS NULL;
    EXCEPTION
    WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
        SELECT REPLACE(ATBVALEUR, '||', '') ATBVALEUR INTO STYPEACTEUR FROM ACTTAB WHERE ACTID = P_ACTID AND TABCODE = '0E' AND ATBDTFIN IS NULL;
    EXCEPTION
    WHEN OTHERS THEN
        NULL;
    END;
    BEGIN
        SELECT
            ACTIDRELATION
        INTO
            NACTIDRELATION
        FROM
            ANAACTRELATION
        WHERE
            ACTID       = P_ACTID
            AND ANAID   = P_ANAID
            AND TRECODE = PA_AVCOMMUN.F_GETCONSTANTE('GROUPE', SUGECODE) ;
    EXCEPTION
    WHEN OTHERS THEN
        BEGIN
            SELECT
                ACTIDRELATION
            INTO
                NACTIDRELATION
            FROM
                ANAACTRELATION
            WHERE
                ACTID       = P_ACTID
                AND ANAID   = P_ANAID
                AND TRECODE = PA_AVCOMMUN.F_GETCONSTANTE('EMPLY', SUGECODE) ;
        EXCEPTION
        WHEN OTHERS THEN
            NULL;
        END;
    END;
    OPEN PC_ACTEUR FOR SELECT ACT.ACTID,
    ACTFLAGTAXPROF,
    ACTCAPITAL,
    ACTFINMOISFISC,
    ACTNUMRCM,
    ACTLIBCOURT,
    ACTNOM,
    ACTNOM2,
    ACTCODE,
    ACT.CJUCODE,
    ACT.NAFCODE,
    ACT.LANCODE,
    UTICODECREAT,
    UTICODEMAJ,
    ACT.PAYCODE,
    ACTSIRET,
    ACTTVACE,
    ACTCODERCM,
    ACTMEMO,
    ACTDTCREAT,
    ACTDTMAJ,
    DEVCODE,
    ACTLIBCHEQUE,
    ACTREGIMETVA,
    PHACODE,
    ACT.DEVCODE,
    NACTIDRELATION ACTIDRELATION,
    SRESIDENCE BAFIRESIDENCE,
    STYPEACTEUR BAFITYPEACTEUR,
    UGECODE,
    SACTSECTGESTION ACTSECTGESTION,
    NACTIDSOCIETEGESTION ACTIDGESTION,
    APADTNAISS,
    APADEPTNAISS,
    APACOMNAISS,
    APANBENFANT,
    APASEXE,
    APAEMPLOYEUR,
    APASITFAM,
    APAFLAGPROPRIETE,
    APATITRE,
    APANOMMARITAL,
    APAREGIMEMATRIM,
    APAVILLENAISS,
    APANOMPATRONYMIQUE,
    APAFLAGINTERDITBANCAIRE,
    APAPCTCAPITAL,
    APAANEXPERACTIVITE,
    APAANEXPERIENCEFONCTION,
    APACODENIVEAUETUDE,
    APAFLAGSUCCESSIONPRET,
    APAFLAGHOMMECLE,
    APACHGREGIMEMATRIM,
    APAFLAGDIRIGEANT,
    APADIRFONCTION,
    NULL APADTPERMISDECONDUIRE,
    APA.PAYCODE APAPAYCODE FROM ANAACTEUR ACT,
    ACTPHASE APH,
    ANAACTEURPARTICULIER APA WHERE ACT.ACTID = P_ACTID AND ACT.ANAID = P_ANAID AND APH.ACTID = ACT.ACTID AND APH.APHDTFIN IS NULL AND ACT.ACTID = APA.ACTID (+) AND P_ANAID = APA.ANAID (+);
END S_ACTEUR_FULL_ANA;
/**
* DONNEES ANNEXES
*/
PROCEDURE S_AVACTEUR(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_AVACTEUR IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_AVACTEUR FOR SELECT AAV.ACTID,
    AAVCA,
    AAVMBA,
    AAVOBSERVATIONS,
    AAVDESCACTIVITE,
    AAVPRESENTATION,
    AAVDTENTREE,
    ACTDTIMMATRICULATION AAVDTCREATION,
    AAVPARTMOUVEMENT,
    AAVCOTATIONBDF,
    AAVCOTATIONRSE,
    AAVERCC,
    AAVAUTRESBANQUES,
    AAVCDF,
    AAVDESCRIPTIFGROUPE,
    AAVIMMATRICULATION,
    AAV.TCLCODE,
    SEGCODE,
    TCLFLAGSECTGEO,
    AAVPCTRESULTAT,
    ACTEFFECTIF AAVEFFECTIF,
    AAVFORMEJURIDIQUE,
    AAVFLAGSTEEXPLOIT,
    AAVCOMMUNENAISS,
    AAVCSPCODE,
    AAVPROFESSION,
    AAVNBENFANT,
    AAVCONTRIBMAX,
    AAVSITULOGEMENT,
    AAVANCIENNETE,
    AAVNATIONALITE,
    AAVAGEENFANT,
    AAVCLEBDF FROM AVACTEUR AAV,
    TCLIENTELE TCL,
    ACTEUR ACT WHERE AAV.ACTID = P_ACTID AND TCL.TCLCODE(+) = AAV.TCLCODE AND ACT.ACTID = AAV.ACTID;
END S_AVACTEUR;
/**
* DONNEES ANNEXES
*/
PROCEDURE S_AVACTEUR_ANA(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        PC_AVACTEUR IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_AVACTEUR FOR SELECT AAV.ACTID,
    AAVCA,
    AAVMBA,
    AAVOBSERVATIONS,
    AAVDESCACTIVITE,
    AAVPRESENTATION,
    AAVDTENTREE,
    ACTDTIMMATRICULATION AAVDTCREATION,
    AAVPARTMOUVEMENT,
    AAVCOTATIONBDF,
    AAVCOTATIONRSE,
    AAVERCC,
    AAVAUTRESBANQUES,
    AAVCDF,
    AAVDESCRIPTIFGROUPE,
    AAVIMMATRICULATION,
    AAV.TCLCODE,
    SEGCODE,
    TCLFLAGSECTGEO,
    AAVPCTRESULTAT,
    ACTEFFECTIF AAVEFFECTIF,
    AAVFORMEJURIDIQUE,
    AAVFLAGSTEEXPLOIT,
    AAVCOMMUNENAISS,
    AAVCSPCODE,
    AAVPROFESSION,
    AAVNBENFANT,
    AAVCONTRIBMAX,
    AAVSITULOGEMENT,
    AAVANCIENNETE,
    AAVNATIONALITE,
    AAVAGEENFANT,
    AAVCLEBDF,
    AAVACTORTYPE FROM ANAAVACTEUR AAV,
    TCLIENTELE TCL,
    ANAACTEUR ACT WHERE AAV.ACTID = P_ACTID AND TCL.TCLCODE(+) = AAV.TCLCODE AND ACT.ACTID = AAV.ACTID;
END S_AVACTEUR_ANA;
/**
* Descriptivevalue
*/
PROCEDURE S_LISTE_DESCRIPTIVEVALUE(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_LISTE_DESCRIPTIVEVALUE IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_DESCRIPTIVEVALUE FOR SELECT DVAID,
    TSGCODE,
    DOSID,
    AGGID,
    BIMID,
    ACTID,
    DOSIDPROSPECT,
    DPRVERSION,
    ANAID,
    CREID,
    DVAORDRE,
    DVASTRINGVALUE,
    DVADTVALUE,
    DVANUMERICVALUE,
    DVABOOLEANVALUE,
    DVADTSTART,
    DVADTEND FROM DESCRIPTIVEVALUE WHERE DVADTEND IS NULL AND ACTID = P_ACTID AND CREID IN
    (
        SELECT DISTINCT CREID FROM
            (
                SELECT TSGCODE, MAX(CREID) CREID FROM DESCRIPTIVEVALUE WHERE ACTID = P_ACTID AND DVADTEND IS NULL GROUP BY TSGCODE
            )
    )
    ;
END S_LISTE_DESCRIPTIVEVALUE;
/**
* Descriptivevalue
*/
PROCEDURE S_LISTE_DESCRIPTIVEVALUE_ANA(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        PC_LISTE_DESCRIPTIVEVALUE IN OUT T_CURSOR)
AS
    DDATE DATE := NULL;
BEGIN
    SELECT MAX(DPHDTEFFECT) INTO DDATE FROM DPRPHASE DPH, ANALYSIS ANA WHERE ANA.ANAID = P_ANAID AND ANA.DOSID = DPH.DOSID AND ANA.DPRVERSION = DPH.DPRVERSION;
    OPEN PC_LISTE_DESCRIPTIVEVALUE FOR SELECT DVAID,
    TSGCODE,
    DOSID,
    AGGID,
    BIMID,
    ACTID,
    DOSIDPROSPECT,
    DPRVERSION,
    ANAID,
    CREID,
    DVAORDRE,
    DVASTRINGVALUE,
    DVADTVALUE,
    DVANUMERICVALUE,
    DVABOOLEANVALUE,
    DVADTSTART,
    DVADTEND FROM DESCRIPTIVEVALUE WHERE DVADTEND IS NULL AND ACTID = P_ACTID AND DVADTSTART <= DDATE;
END S_LISTE_DESCRIPTIVEVALUE_ANA;
PROCEDURE S_LISTE_ACTRELATION(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_UTICODE UTILISATEUR.UTICODE%TYPE,
        P_TCOID TCOVALEUR.TCOID%TYPE,
        PC_LISTE_ACTRELATION IN OUT T_CURSOR)
AS
    SUGECODE UTILISATEUR.UGECODE%TYPE;
BEGIN
    SELECT MAX(UGECODE) INTO SUGECODE FROM UTILISATEUR WHERE UTICODE = P_UTICODE;
    OPEN PC_LISTE_ACTRELATION FOR SELECT ARE.ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    AREQP,
    AREDTFIN,
    ACTCODE,
    ACTNOM,
    ACTLIBCOURT,
    ACTSIRET,
    PA_SELECTACTEURAV.F_GETDERNIERECOTATION(ACTIDRELATION, PA_AVCOMMUN.F_GETCONSTANTE('BDF', SUGECODE), P_UTICODE) LIBELLECODECOTATION,
    TCO.ACTID ACTIDTCO,
    TCO.ATVORDRE,
    TCO.TCOID,
    TCO.TVACODE,
    TCO.CREID,
    TCO.ATVDTDEB,
    TCO.ATVDTFIN,
    TCO.ATVDTMAJ,
    TCO.UTICODE FROM ACTRELATION ARE,
    ACTEUR ACT,
    ACTTCOVALEUR TCO WHERE ARE.ACTID = P_ACTID AND ACT.ACTID = ARE.ACTIDRELATION AND AREDTFIN IS NULL AND TCO.ACTID (+) = ARE.ACTIDRELATION AND TCO.TCOID (+) = P_TCOID AND TCO.ATVDTFIN IS NULL;
END S_LISTE_ACTRELATION;
PROCEDURE S_LISTE_ACTRELATION_HIERARCHY(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_TRECODE ACTRELATION.TRECODE%TYPE,
        P_UTICODE UTILISATEUR.UTICODE%TYPE,
        PC_LISTE_ACTRELATION IN OUT T_CURSOR)
AS
    SUGECODE UTILISATEUR.UGECODE%TYPE;
BEGIN
    SELECT
        MAX(UGECODE)
    INTO
        SUGECODE
    FROM
        UTILISATEUR
    WHERE
        UTICODE = P_UTICODE;
    OPEN PC_LISTE_ACTRELATION FOR SELECT NIVEAU
AS
    "LEVEL",
    ACTREL.ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    AREQP,
    AREDTFIN,
    ACT.ACTCODE,
    ACT.ACTNOM,
    ACT.ACTLIBCOURT,
    ACT.ACTSIRET,
    ACTDESC.ACTNOM ACTNOMDESC,
    PA_SELECTACTEURAV.F_GETDERNIERECOTATION(ACTIDRELATION, PA_AVCOMMUN.F_GETCONSTANTE('BDF', SUGECODE), P_UTICODE) VALCOT FROM ACTEUR ACT,
    ACTEUR ACTDESC,(
        SELECT
            LEVEL NIVEAU
          , ACTID
          , TRECODE
          , AREDTDEB
          , AREQP
          , AREDTFIN
          , ACTIDRELATION
        FROM
            ACTRELATION ARE
        WHERE
            TRECODE              = P_TRECODE
            AND ARE.ACTID       != ARE.ACTIDRELATION
            START WITH ARE.ACTID = P_ACTID
            AND TRECODE          = P_TRECODE
            AND AREDTFIN        IS NULL
            CONNECT BY ARE.ACTID = PRIOR ACTIDRELATION
            AND TRECODE          = P_TRECODE
            AND ACTID           != ACTIDRELATION
            AND AREDTFIN        IS NULL
    )
    ACTREL WHERE ACT.ACTID = ACTREL.ACTIDRELATION AND ACTDESC.ACTID = ACTREL.ACTID AND ACTREL.AREDTFIN IS NULL AND ACTREL.ACTID != ACTREL.ACTIDRELATION ORDER BY ACTREL.NIVEAU,
    ACTID;
END S_LISTE_ACTRELATION_HIERARCHY;
--
-- Returns a list of DVAHIERARCHY for a DVAID
--
PROCEDURE S_LISTE_DVAHIERARCHY(
        P_DVAID DVAHIERARCHY.DVAID%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT DVAID,
    DHILEVEL,
    DHIINDEX FROM DVAHIERARCHY WHERE DVAID = P_DVAID;
END S_LISTE_DVAHIERARCHY;
--
-- Returns a list of DVAHIERARCHY for a DVAID
--
PROCEDURE S_LISTE_DVAHIERARCHY_ANA(
        P_DVAID DVAHIERARCHY.DVAID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
    DDATE DATE := NULL;
BEGIN
    SELECT
        MAX(DPHDTEFFECT)
    INTO
        DDATE
    FROM
        DPRPHASE DPH
      , ANALYSIS ANA
    WHERE
        ANA.ANAID          = P_ANAID
        AND ANA.DOSID      = DPH.DOSID
        AND ANA.DPRVERSION = DPH.DPRVERSION;
    OPEN PC_RETURN FOR SELECT DVA.DVAID,
    DHILEVEL,
    DHIINDEX FROM DVAHIERARCHY DHI,
    DESCRIPTIVEVALUE DVA WHERE DVA.DVAID = P_DVAID AND DHI.DVAID = P_DVAID AND DVADTSTART <= DDATE;
END S_LISTE_DVAHIERARCHY_ANA;
--
-- Returns a list of ACTRELPRODETAIL
--
PROCEDURE S_LISTE_ACTRELPRODETAIL(
        P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
        P_TRECODE ACTRELPRODETAIL.TRECODE%TYPE,
        P_ACTIDRELATION ACTRELPRODETAIL.ACTIDRELATION%TYPE,
        P_AREDTDEB ACTRELPRODETAIL.AREDTDEB%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    ADEORDRE,
    TATATTRIBUTE,
    TDEVALUE FROM ACTRELPRODETAIL WHERE ACTID = P_ACTID AND TRECODE = P_TRECODE AND ACTIDRELATION = P_ACTIDRELATION AND AREDTDEB = P_AREDTDEB;
END S_LISTE_ACTRELPRODETAIL;
PROCEDURE S_LISTE_ACTRELPRODETAIL_ASC(
        P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    ADEORDRE,
    TATATTRIBUTE,
    TDEVALUE FROM ACTRELPRODETAIL WHERE ACTID = P_ACTID;
END S_LISTE_ACTRELPRODETAIL_ASC;
PROCEDURE S_LISTE_ACTRELPRODETAIL_DESC(
        P_ACTIDRELATION ACTRELPRODETAIL.ACTIDRELATION%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    ADEORDRE,
    TATATTRIBUTE,
    TDEVALUE FROM ACTRELPRODETAIL WHERE ACTIDRELATION = P_ACTIDRELATION;
END S_LISTE_ACTRELPRODETAIL_DESC;
--
-- Returns a list of ACTRELPRODETAIL with ANAID
--
PROCEDURE S_LISTE_ACTRELPRODETAIL_ANA(
        P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        P_TRECODE ACTRELPRODETAIL.TRECODE%TYPE,
        P_ACTIDRELATION ACTRELPRODETAIL.ACTIDRELATION%TYPE,
        P_AREDTDEB ACTRELPRODETAIL.AREDTDEB%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    ADEORDRE,
    TATATTRIBUTE,
    TDEVALUE FROM ANAACTRELPRODETAIL WHERE ACTID = P_ACTID AND ANAID = P_ANAID AND TRECODE = P_TRECODE AND ACTIDRELATION = P_ACTIDRELATION AND AREDTDEB = P_AREDTDEB;
END S_LISTE_ACTRELPRODETAIL_ANA;
--
-- Retourne la liste des acteurs ? tester pour l'alerte
--
PROCEDURE S_LISTE_RELATIONALERT(
        P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
        P_LANCODE LANTRELATION.LANCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTCODE,
    ACTID,
    TRELIBELLE FROM
    (
        SELECT
            ACTCODE
          , ARE.ACTIDRELATION ACTID
          , LTRE.TRELIBELLEDESC TRELIBELLE
        FROM
            ACTEUR ACT
          , ACTRELATION ARE
          , LANTRELATION LTRE
          , TUSPARAM TUS
        WHERE
            ACT.ACTID        = ARE.ACTID
            AND ARE.TRECODE  = LTRE.TRECODE
            AND LTRE.LANCODE = P_LANCODE
            AND TUS.TUSNOM   = 'ALERTEACT'
            AND TUS.TUPCODE  = ARE.TRECODE
            AND ARE.ACTID    = P_ACTID
        UNION ALL
            (
                SELECT
                    ACTCODE
                  , ARE.ACTID ACTID
                  , LTRE.TRELIBELLEASC TRELIBELLE
                FROM
                    ACTEUR ACT
                  , ACTRELATION ARE
                  , LANTRELATION LTRE
                  , TUSPARAM TUS
                WHERE
                    ACT.ACTID             = ARE.ACTID
                    AND ARE.TRECODE       = LTRE.TRECODE
                    AND LTRE.LANCODE      = P_LANCODE
                    AND TUS.TUSNOM        = 'ALERTEACT'
                    AND TUS.TUPCODE       = ARE.TRECODE
                    AND ARE.ACTIDRELATION = P_ACTID
                UNION ALL
                    (
                        SELECT ACTCODE, ACTID, 'ACTEUR CIBLE' TRELIBELLE FROM ACTEUR WHERE ACTID = P_ACTID
                    )
            )
    )
    ;
END S_LISTE_RELATIONALERT;
--
-- Returns a list of ACTEURALERT
--
PROCEDURE S_ACTEURALERT(
        P_ACTID ACTRELPRODETAIL.ACTID%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTLIBCOURT,
    F_FICP(P_ACTID) FLAGFICP,
    F_PRIVILEGE(P_ACTID) FLAGPRIVILEGE,
    F_ANTITERRORISTE(P_ACTID) FLAGANTITERRORISTE,
    F_WATCHLIST(P_ACTID) FLAGWATCHLIST,
    F_FCC(P_ACTID) FLAGFCC,
    F_DOUTEUX(P_ACTID) FLAGDOUTEUX,
    F_DEFAUTS(P_ACTID) FLAGDEFAUT,
    F_EVD(P_ACTID) FLAGEVD,
    F_EXPERT(P_ACTID) FLAGENGA,
    F_EXPERT(P_ACTID) FLAGENGA,
    F_GRCONSOLIDE(P_ACTID) FLAGGRCONSOLIDE FROM ACTEUR WHERE ACTID = P_ACTID;
END S_ACTEURALERT;
FUNCTION F_FICP(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFLAGFICP NUMBER := 0;
    NCREID    NUMBER;
BEGIN
    SELECT
        MAX(CRE.CREID)
    INTO
        NCREID
    FROM
        CREVT CRE
      , DESCRIPTIVEVALUE DVA
    WHERE
        TMFFONCTION   = 'FICPG'
        AND DVA.ACTID = P_ACTID
        AND TSGCODE   = 'FICPNBP'
        AND CRE.CREID = DVA.CREID
        AND DVADTEND IS NULL;
    SELECT
        COUNT( *)
    INTO
        NFLAGFICP
    FROM
        DESCRIPTIVEVALUE
    WHERE
        TSGCODE             = 'FICPNBP'
        AND CREID           = NCREID
        AND ACTID           = P_ACTID
        AND DVADTEND       IS NULL
        AND DVANUMERICVALUE > 0;
    IF(NFLAGFICP            > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END F_FICP;
FUNCTION F_INFOG(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_CODE CREVT.TMFFONCTION%TYPE)
    RETURN NUMBER
IS
    NFLAGPINFOG NUMBER := 0;
    NCREID      NUMBER;
BEGIN
    SELECT
        MAX(CRE.CREID)
    INTO
        NCREID
    FROM
        CREVT CRE
      , DESCRIPTIVEVALUE DVA
    WHERE
        TMFFONCTION = 'INFOG'
        ||P_CODE
        AND TSGCODE   = 'INFOGNBR'
        AND DVA.ACTID = P_ACTID
        AND CRE.CREID = DVA.CREID
        AND DVADTEND IS NULL;
    SELECT
        COUNT( *)
    INTO
        NFLAGPINFOG
    FROM
        DESCRIPTIVEVALUE
    WHERE
        TSGCODE                     = 'INFOGNBR'
        AND NVL(DVANUMERICVALUE, 0) > 0
        AND CREID                   = NCREID
        AND ACTID                   = P_ACTID
        AND DVADTEND               IS NULL;
    IF(NFLAGPINFOG                  > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END F_INFOG;
FUNCTION F_PRIVILEGE(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
BEGIN
    IF(F_INFOG(P_ACTID, '01') + F_INFOG(P_ACTID, '03') + F_INFOG(P_ACTID, '04') + F_INFOG(P_ACTID, '05') > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END F_PRIVILEGE;
FUNCTION F_ANTITERRORISTE(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFFLAGANTITERRORISTE NUMBER ;
    SUGECODE ACTEUR.UGECODE%TYPE;
BEGIN
    SUGECODE := PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID) ;
    SELECT
        COUNT( *)
    INTO
        NFFLAGANTITERRORISTE
    FROM
        ACTTCOVALEUR ATC
      , TCOTATION TCO
    WHERE
        ATC.ACTID                                                                                   = P_ACTID
        AND ATC.TCOID                                                                               = TCO.TCOID
        AND TCOCODE                                                                                 = 'TERRO'
        AND PA_AVCOMMUN.EXISTEDANS(TVACODE, PA_AVCOMMUN.F_GETCONSTANTE('TERRO_OUI', SUGECODE), ';') = 1
        AND ATVDTFIN                                                                               IS NULL;
    IF(NFFLAGANTITERRORISTE                                                                         > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_ANTITERRORISTE;
FUNCTION F_WATCHLIST(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFFLAGWATCHLIST NUMBER ;
    SUGECODE ACTEUR.UGECODE%TYPE;
BEGIN
    SUGECODE := PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID) ;
    SELECT
        COUNT( *)
    INTO
        NFFLAGWATCHLIST
    FROM
        ACTTCOVALEUR ATC
      , TCOTATION TCO
    WHERE
        ATC.ACTID                                                                            = P_ACTID
        AND ATC.TCOID                                                                        = TCO.TCOID
        AND TCOCODE                                                                          = 'WL'
        AND PA_AVCOMMUN.EXISTEDANS(TVACODE, PA_AVCOMMUN.F_GETCONSTANTE('WL', SUGECODE), ';') = 0
        AND ATVDTFIN                                                                        IS NULL;
    IF(NFFLAGWATCHLIST                                                                       > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_WATCHLIST;
FUNCTION F_FCC(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFFLAGFCC NUMBER ;
    NCREID    NUMBER;
BEGIN
    SELECT
        MAX(CRE.CREID)
    INTO
        NCREID
    FROM
        CREVT CRE
      , DESCRIPTIVEVALUE DVA
    WHERE
        TMFFONCTION   = 'FCCD'
        AND DVA.ACTID = P_ACTID
        AND CRE.CREID = DVA.CREID
        AND TSGCODE   = 'FCCITYPE'
        AND DVADTEND IS NULL;
    SELECT COUNT( *) INTO NFFLAGFCC FROM DESCRIPTIVEVALUE WHERE TSGCODE = 'FCCITYPE' AND CREID = NCREID AND ACTID = P_ACTID AND DVADTEND IS NULL;
    IF(NFFLAGFCC > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_FCC;
FUNCTION F_DOUTEUX(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFFLAGDOUTEUX NUMBER ;
BEGIN
    SELECT COUNT( *) INTO NFFLAGDOUTEUX FROM AAGRVE WHERE AVEDTFIN IS NULL AND RVACODE = 'DOUTEUX' AND RVVCODE != 'DOUTNON' AND ACTID = P_ACTID;
    IF(NFFLAGDOUTEUX > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_DOUTEUX;
FUNCTION F_DEFAUTS(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFFLAGDEFAUTS NUMBER ;
BEGIN
    SELECT COUNT( *) INTO NFFLAGDEFAUTS FROM AAGRVE WHERE AVEDTFIN IS NULL AND RVACODE = 'DEFAUTS' AND ACTID = P_ACTID AND RVVCODE NOT LIKE 'SD%';
    IF(NFFLAGDEFAUTS > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_DEFAUTS;
FUNCTION F_EXPERT(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFFLAGEXPERT NUMBER ;
    SUGECODE UTILISATEUR.UGECODE%TYPE;
BEGIN
    SUGECODE := PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID) ;
    SELECT
        COUNT( *)
    INTO
        NFFLAGEXPERT
    FROM
        ACTTCOVALEUR ATC
      , TCOTATION TCO
    WHERE
        ATC.ACTID                                                                                = P_ACTID
        AND ATC.TCOID                                                                            = TCO.TCOID
        AND TCOCODE                                                                              = 'EXPERT'
        AND PA_AVCOMMUN.EXISTEDANS(TVACODE, PA_AVCOMMUN.F_GETCONSTANTE('EXPERT', SUGECODE), ';') = 0
        AND ATVDTFIN                                                                            IS NULL;
    IF(NFFLAGEXPERT                                                                              > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_EXPERT;
FUNCTION F_GRCONSOLIDE(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NFLAGCONSOLIDE NUMBER ;
BEGIN
    SELECT COUNT( *) INTO NFLAGCONSOLIDE FROM ACTRELATION WHERE TRECODE = 'CONSO' AND
        (ACTIDRELATION = P_ACTID OR ACTID = P_ACTID
        ) ;
    IF(NFLAGCONSOLIDE > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN OTHERS THEN
    RETURN NULL;
END F_GRCONSOLIDE;
--
-- Returns the list of ACTPERIMETRE for an ACTID
--
PROCEDURE S_LISTE_ACTPERIMETRE(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_LISTE_ACTPERIMETRE IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ACTPERIMETRE FOR SELECT ACTID,
    APECODE,
    APECODETYPE,
    APEDTDEB,
    APEDTFIN,
    AGGID,APEORDER  FROM ACTPERIMETRE WHERE ACTID = P_ACTID;
END S_LISTE_ACTPERIMETRE;
--
-- Returns the list of ACTPERIMETRE for an ACTID WITH AN ANAID
--
PROCEDURE S_LISTE_ACTPERIMETRE_ANA(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        PC_LISTE_ACTPERIMETRE IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ACTPERIMETRE FOR SELECT ACTID,
    APECODE,
    APEDTDEB,
    APEDTFIN AGGID,APEORDER  FROM ANAACTPERIMETRE WHERE ACTID = P_ACTID AND ANAID = P_ANAID;
END S_LISTE_ACTPERIMETRE_ANA;
--
-- Returns REVMERECODE for a given CJUCODE
--
FUNCTION F_GET_TYPECLIENT(
        P_CJUCODE RELATIONVALEURPROFIL.REVFILLECODE%TYPE,
        P_TPGCODE RELATIONVALEURPROFIL.TPGCODE%TYPE)
    RETURN VARCHAR2
AS
    STYPECLIENT    VARCHAR2(25) ;
    SFAMILLECLIENT VARCHAR2(25) ;
BEGIN
    BEGIN
        SELECT
            MAX(REVMERECODE)
        INTO
            STYPECLIENT
        FROM
            RELATIONVALEURPROFIL RV
        WHERE
            RV.RECCODE          = 'CLIENTCJUCODE'
            AND RV.REVFILLECODE = P_CJUCODE
            AND TPGCODE         = P_TPGCODE;
        IF STYPECLIENT         IS NOT NULL THEN
            SELECT
                MIN(REVFILLECODE)
            INTO
                SFAMILLECLIENT
            FROM
                RELATIONVALEURPROFIL RV
            WHERE
                RV.RECCODE         = 'PARCLIENTFAMILY'
                AND RV.REVMERECODE = STYPECLIENT
                AND TPGCODE        = P_TPGCODE;
        END IF;
    EXCEPTION
    WHEN OTHERS THEN
        SFAMILLECLIENT := NULL;
    END;
    RETURN SFAMILLECLIENT;
END F_GET_TYPECLIENT;
PROCEDURE S_FAMIILE_ACTEUR_BY_TYPE(
        P_ACTEURTYPE IN VARCHAR2,
        P_TPGCODE RELATIONVALEURPROFIL.TPGCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT REVFILLECODE CODE_PARAMETRE FROM RELATIONVALEURPROFIL RV WHERE RV.RECCODE = 'PARCLIENTFAMILY' AND TPGCODE = P_TPGCODE AND REVMERECODE IN
    (
        SELECT REVMERECODE FROM RELATIONVALEURPROFIL WHERE REVFILLECODE = P_ACTEURTYPE AND TPGCODE = P_TPGCODE
    )
    ;
END S_FAMIILE_ACTEUR_BY_TYPE;
PROCEDURE S_ACTRELPRODET_COLVALUE(
        P_TATATTRIBUTE IN VARCHAR2,
        P_TRECODE IN VARCHAR2,
        P_LANGUE IN VARCHAR2,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT TDE.TDEVALUE
AS
    CODE,
    LDE.TDENAME
AS
    DISPLAYVALUE FROM TREPRODETAIL TDE,
    LANTREPRODETAIL LDE WHERE TDE.TRECODE = LDE.TRECODE AND TDE.TATATTRIBUTE = LDE.TATATTRIBUTE AND TDE.TDEVALUE = LDE.TDEVALUE AND TDE.TATATTRIBUTE = P_TATATTRIBUTE AND TDE.TRECODE = P_TRECODE AND LANCODE = P_LANGUE;
END S_ACTRELPRODET_COLVALUE;
PROCEDURE S_ACTRELPROASC_COLPROP(
        P_TRECODE TREATTRIBUTE.TRECODE%TYPE,
        P_LANGUE LANTREATTRIBUTE.LANCODE%TYPE,
        P_LIENLIM TREATTRIBUTE.TATATTRIBUTE%TYPE,
        P_PROPRIETES VARCHAR2,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    IF P_LIENLIM IS NOT NULL AND P_PROPRIETES IS NOT NULL THEN
        OPEN PC_RETURN FOR SELECT TAT.TATATTRIBUTE
    AS
        CODE,
        LAT.TATNAME
    AS
        DISPLAYVALUE FROM TREATTRIBUTE TAT,
        LANTREATTRIBUTE LAT WHERE TAT.TRECODE = LAT.TRECODE AND TAT.TATATTRIBUTE = LAT.TATATTRIBUTE AND TAT.TRECODE = P_TRECODE AND LANCODE = P_LANGUE AND TAT.TATATTRIBUTE != P_LIENLIM AND TAT.TATATTRIBUTE NOT IN(P_PROPRIETES) ORDER BY LAT.TATNAME;
    ELSE
        IF P_LIENLIM IS NOT NULL THEN
            OPEN PC_RETURN FOR SELECT TAT.TATATTRIBUTE
        AS
            CODE,
            LAT.TATNAME
        AS
            DISPLAYVALUE FROM TREATTRIBUTE TAT,
            LANTREATTRIBUTE LAT WHERE TAT.TRECODE = LAT.TRECODE AND TAT.TATATTRIBUTE = LAT.TATATTRIBUTE AND TAT.TRECODE = P_TRECODE AND LANCODE = P_LANGUE AND TAT.TATATTRIBUTE != P_LIENLIM ORDER BY LAT.TATNAME;
        ELSE
            IF P_PROPRIETES IS NOT NULL THEN
                OPEN PC_RETURN FOR SELECT TAT.TATATTRIBUTE
            AS
                CODE,
                LAT.TATNAME
            AS
                DISPLAYVALUE FROM TREATTRIBUTE TAT,
                LANTREATTRIBUTE LAT WHERE TAT.TRECODE = LAT.TRECODE AND TAT.TATATTRIBUTE = LAT.TATATTRIBUTE AND TAT.TRECODE = P_TRECODE AND LANCODE = P_LANGUE AND TAT.TATATTRIBUTE NOT IN(P_PROPRIETES) ORDER BY LAT.TATNAME;
            ELSE
                IF P_PROPRIETES IS NULL THEN
                    OPEN PC_RETURN FOR SELECT TAT.TATATTRIBUTE
                AS
                    CODE,
                    LAT.TATNAME
                AS
                    DISPLAYVALUE FROM TREATTRIBUTE TAT,
                    LANTREATTRIBUTE LAT WHERE TAT.TRECODE = LAT.TRECODE AND TAT.TATATTRIBUTE = LAT.TATATTRIBUTE AND TAT.TRECODE = P_TRECODE AND LANCODE = P_LANGUE ORDER BY LAT.TATNAME;
                END IF;
            END IF;
        END IF;
    END IF;
END S_ACTRELPROASC_COLPROP;
PROCEDURE S_LISTE_ACTRELATION_ANA(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        P_UTICODE UTILISATEUR.UTICODE%TYPE,
        P_TCOID TCOVALEUR.TCOID%TYPE,
        PC_LISTE_ACTRELATION IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ACTRELATION FOR SELECT ARE.ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    AREQP,
    AREDTFIN,
    ACTCODE,
    ACTNOM,
    ACTLIBCOURT,
    ACTSIRET,
    PA_SELECTACTEURAV.F_GETDERNIERECOTATION(ACTIDRELATION, 'BDF', P_UTICODE) LIBELLECODECOTATION,
    TCO.ACTID ACTIDTCO,
    TCO.ATVORDRE,
    TCO.TCOID,
    TCO.TVACODE,
    TCO.CREID,
    TCO.ATVDTDEB,
    TCO.ATVDTFIN,
    TCO.ATVDTMAJ,
    TCO.UTICODE FROM ANAACTRELATION ARE,
    ANAACTEUR ACT,
    ACTTCOVALEUR TCO WHERE ARE.ACTID = P_ACTID AND ACT.ACTID = ARE.ACTIDRELATION AND ARE.ANAID = P_ANAID AND ACT.ANAID = P_ANAID AND ACT.ANAID = P_ANAID AND TCO.ACTID (+) = ARE.ACTIDRELATION AND TCO.TCOID (+) = P_TCOID AND TCO.ATVDTFIN IS NULL;
END S_LISTE_ACTRELATION_ANA;
PROCEDURE S_LISTE_ACTRELATION_DESC_ANA(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANALYSIS.ANAID%TYPE,
        P_UTICODE UTILISATEUR.UTICODE%TYPE,
        P_TCOID TCOVALEUR.TCOID%TYPE,
        PC_RESULTAT IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RESULTAT FOR SELECT ARE.ACTID ACTIDRELATION,
    ARE.TRECODE,
    ACTIDRELATION ACTID,
    AREDTDEB,
    AREQP,
    AREDTFIN,
    ACTCODE,
    ACTNOM,
    ACTLIBCOURT,
    ACTSIRET,
    PA_SELECTACTEURAV.F_GETDERNIERECOTATION(ARE.ACTID, 'BDF', P_UTICODE) VALCOT,
    TCO.ACTID ACTIDTCO,
    TCO.ATVORDRE,
    TCO.TCOID,
    TCO.TVACODE,
    TCO.CREID,
    TCO.ATVDTDEB,
    TCO.ATVDTFIN,
    TCO.ATVDTMAJ,
    TCO.UTICODE FROM ANAACTRELATION ARE,
    ANAACTEUR ACT,
    ACTTCOVALEUR TCO WHERE ARE.ACTIDRELATION = P_ACTID AND ACT.ACTID = ARE.ACTID AND ARE.ANAID = P_ANAID AND ACT.ANAID = P_ANAID AND TCO.ACTID (+) = ARE.ACTID AND TCO.TCOID (+) = P_TCOID AND TCO.ATVDTFIN IS NULL;
END S_LISTE_ACTRELATION_DESC_ANA;
PROCEDURE S_LISTE_AAGRVE(
        NACTID ACTEUR.ACTID%TYPE,
        STTRNOM TTRPARAM.TTRNOM%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT RVACODE,
    AVEORDRE,
    AVEDTDEB,
    AVEDTFIN,
    AVEMTOBJECTIF,
    AVEMTREALISE,
    AVEMTATTRIBUT,
    AVEFLAGBLOQUANT,
    AAG.DEVCODE,
    RVVCODE
    --       , AAG.CREID
    --       , AVEMEMO
    ,
    AVEMOTIF,
    NACTID ACTID,
    ROLCODE,
    ACTIDGESTION,
    AAGDTVALID,
    CREDTEFFET AVEDTMAJ,
    UTINOM FROM AAGRVE AAG,
    CREVT CRE,
    UTILISATEUR UTI WHERE AAG.ACTID = NACTID AND CRE.CREID =
    (
        SELECT
            MAX(CREID)
        FROM
            LKAVECRE LKA
        WHERE
            ACTID                = NACTID
            AND LKA.ACTIDGESTION = AAG.ACTIDGESTION
            AND LKA.AAGDTVALID   = AAG.AAGDTVALID
            AND LKA.ROLCODE      = AAG.ROLCODE
            AND LKA.RVACODE      = AAG.RVACODE
            AND LKA.AVEORDRE     = AAG.AVEORDRE
    )
    AND UTI.UTICODE = CRE.UTICODECREAT AND RVACODE IN
    (
        SELECT TTPCODE FROM TTRPARAM WHERE TTRNOM = STTRNOM
    )
    ORDER BY RVACODE,
    AVEORDRE;
END S_LISTE_AAGRVE ;
PROCEDURE S_INFO_ACTRELATION(
        P_ACTID ACTRELATION.ACTID%TYPE,
        P_ACTIDRELATION ACTRELATION.ACTIDRELATION%TYPE,
        P_TRECODE ACTRELATION.TRECODE%TYPE,
        P_AREDTDEB ACTRELATION.AREDTDEB%TYPE,
        P_AGGID ACTRELATION.AGGID%TYPE,
        P_LANCODE LANGUE.LANCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
    NCREID CREVT.CREID%TYPE     := NULL;
    SUPDATEORIGIN VARCHAR2(100) := NULL;
BEGIN
    SELECT
        MAX(CRE.CREID)
    INTO
        NCREID
    FROM
        LKARECRE LAC
      , CREVT CRE
    WHERE
        LAC.ACTID             = P_ACTID
        AND LAC.ACTIDRELATION = P_ACTIDRELATION
        AND LAC.TRECODE       = P_TRECODE
        AND LAC.AREDTDEB      = P_AREDTDEB
        AND LAC.CREID         = CRE.CREID
        AND
        (
            P_AGGID     IS NULL
            OR CRE.AGGID = P_AGGID
        ) ;
    IF NCREID IS NOT NULL THEN
        SELECT
            MAX(TEVLIBELLE)
        INTO
            SUPDATEORIGIN
        FROM
            L1CREVT LCC
          , CREVT CRE
          , LANTEVENEMENT TEV
        WHERE
            LCC.CREIDPARENT     = CRE.CREID
            AND LCC.CREIDCHILD  = NCREID
            AND CRE.TMOMODULE   = TEV.TMOMODULE
            AND CRE.TMFFONCTION = TEV.TMFFONCTION
            AND TEV.LANCODE     = P_LANCODE;
        IF SUPDATEORIGIN       IS NULL THEN
            SELECT CRECODEORIGINE INTO SUPDATEORIGIN FROM CREVT WHERE CREID = NCREID;
        END IF;
    END IF;
    IF SUPDATEORIGIN  IS NULL THEN
        SUPDATEORIGIN := 'MANUAL';
    END IF;
    OPEN PC_RETURN FOR SELECT UTICODECREAT UPDATEUTICODE,
    CREDTEFFET UPDATEDATE,
    SUPDATEORIGIN UPDATEORIGIN FROM CREVT WHERE CREID = NCREID;
END S_INFO_ACTRELATION;
PROCEDURE S_LISTE_AAGRVE_BY_ACTID (nActId             ACTEUR.ACTID%TYPE,
                                      PC_Return   IN OUT T_Cursor)
   AS
   BEGIN
      OPEN PC_Return FOR
         SELECT *
           FROM AAGRVE AAG
          WHERE AAG.ACTID = nActId --HBB
                AND AAG.AVEDTFIN IS NULL;
   END S_LISTE_AAGRVE_BY_ACTID;
FUNCTION F_ALERT(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
BEGIN
    RETURN F_FICP(P_ACTID) + F_PRIVILEGE(P_ACTID) + F_ANTITERRORISTE(P_ACTID) + F_WATCHLIST(P_ACTID) + F_FCC(P_ACTID) + F_DOUTEUX(P_ACTID) + F_DEFAUTS(P_ACTID) + F_EVD(P_ACTID) + F_EXPERT(P_ACTID) ;
END F_ALERT;
FUNCTION F_EVD(
        P_ACTID ACTEUR.ACTID%TYPE)
    RETURN NUMBER
IS
    NCREID CREVT.CREID%TYPE := NULL;
    NFLAGEVD NUMBER         := 0;
BEGIN
    SELECT
        MAX(CRE.CREID)
    INTO
        NCREID
    FROM
        CREVT CRE
      , DESCRIPTIVEVALUE DVA
    WHERE
        TMFFONCTION   = 'BDF27'
        AND DVA.ACTID = P_ACTID
        AND CRE.CREID = DVA.CREID
        AND DVADTEND IS NULL;
    BEGIN
        SELECT
            COUNT( *)
        INTO
            NFLAGEVD
        FROM
            DESCRIPTIVEVALUE
        WHERE
            (
                TSGCODE    = 'EVMARQ_EVMARQ'
                OR TSGCODE = 'EVJUD_EVJUD'
            )
            AND CREID     = NCREID
            AND ACTID     = P_ACTID
            AND DVADTEND IS NULL;
    EXCEPTION
    WHEN OTHERS THEN
        NULL;
    END;
    IF(NFLAGEVD > 0) THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
END F_EVD;
PROCEDURE S_ACTEUR_BASIC_INFO_EVENT(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_ACTEUR IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_ACTEUR FOR SELECT ACT.ACTID,
    CJUCODE,
    ACTNOM,
    ACTNOM2,
    ACTSIRET,
    APADTNAISS,
    ACTTYPE FROM ACTEUR ACT,
    ACTEURPARTICULIER APA WHERE ACT.ACTID = P_ACTID AND ACT.ACTID = APA.ACTID (+);
END S_ACTEUR_BASIC_INFO_EVENT;
--COTATION
PROCEDURE S_LISTE_ACTTCOVALEUR(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_LISTE_ACTTCOVALEUR IN OUT T_CURSOR)
AS
    NFLAGAFFHISTO NUMBER;
BEGIN
    NFLAGAFFHISTO   := PAV4_SELECTPARAMETRE.F_TOPPARAM_TPALOGIQUE('FRONTACTOR', 'APGACTFLAGHISTOCOTA', NULL, PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID)) ;
    IF NFLAGAFFHISTO < 1 THEN
        OPEN PC_LISTE_ACTTCOVALEUR FOR SELECT ACTID,
        ATVORDRE,
        ATV.TCOID,
        TCO.TCOCODE,
        ATV.TVACODE,
        ATV.CREID,
        ATVDTDEB,
        ATVDTFIN,
        ATVDTMAJ,
        ATV.UTICODE FROM ACTTCOVALEUR ATV,
        TCOTATION TCO WHERE ACTID = P_ACTID AND TCO.TCOID = ATV.TCOID AND TCO.TCODEST = 'ACTEUR' AND ATVDTFIN IS NULL ORDER BY ATVORDRE;
    ELSE
        OPEN PC_LISTE_ACTTCOVALEUR FOR SELECT ACTID,
        ATVORDRE,
        ATV.TCOID,
        TCO.TCOCODE,
        ATV.TVACODE,
        ATV.CREID,
        ATVDTDEB,
        ATVDTFIN,
        ATVDTMAJ,
        ATV.UTICODE FROM ACTTCOVALEUR ATV,
        TCOTATION TCO WHERE ACTID = P_ACTID AND TCO.TCOID = ATV.TCOID AND TCO.TCODEST = 'ACTEUR' ORDER BY ATVORDRE;
    END IF;
END S_LISTE_ACTTCOVALEUR;
PROCEDURE S_LISTE_ANAACTTCOVALEUR(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ANAID ANAACTTCOVALEUR.ANAID%TYPE,
        PC_LISTE_ANAACTTCOVALEUR IN OUT T_CURSOR)
AS
    NFLAGAFFHISTO TOPPARAM.TPALOGIQUE%TYPE := PAV4_SELECTPARAMETRE.F_TOPPARAM_TPALOGIQUE('FRONTACTOR', 'APGACTFLAGHISTOCOTA', NULL, PAV4_AVCOMMUN.F_UGECODE_ACTID(P_ACTID)) ;
BEGIN
    OPEN PC_LISTE_ANAACTTCOVALEUR FOR SELECT ACTID,
    ATVORDRE,
    ATV.TCOID,
    TCO.TCOCODE,
    ATV.TVACODE,
    ATV.CREID,
    ATVDTDEB,
    ATVDTFIN,
    ATVDTMAJ,
    ATV.UTICODE FROM ANAACTTCOVALEUR ATV,
    TCOTATION TCO WHERE ACTID = P_ACTID AND TCO.TCOID = ATV.TCOID AND TCO.TCODEST = 'ACTEUR' AND ANAID = P_ANAID AND
    (
        (
            NFLAGAFFHISTO < 1 AND ATVDTFIN IS NULL
        )
        OR
        (
            NFLAGAFFHISTO >= 1
        )
    )
    ORDER BY ATVORDRE;
END S_LISTE_ANAACTTCOVALEUR;
PROCEDURE S_ACTPHASE(
        NACTID IN ACTEUR.ACTID%TYPE,
        NLANGUE IN LANGUE.LANCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT APH.APHORDRE,
    APH.APHDTDEB,
    APH.UTICODE,
    UTINOM,
    APHDTFIN,
    APHDTMAJ,
    APH.PHACODE,
    PHALIBELLE,
    APH.JALCODE,
    JALLIBELLE,
    APH.PHADEST,
    APH.CREID,
    NACTID ACTID FROM ACTPHASE APH,
    UTILISATEUR UTI,
    LANPHASE PHA,
    LANJALON JAL WHERE APH.ACTID = NACTID AND UTI.UTICODE(+) = APH.UTICODE -- CV-31032001 A3C
    AND PHA.PHACODE(+)           = APH.PHACODE -- CV-31032001 A3C
    AND PHA.LANCODE(+)           = NLANGUE -- CV-31032001 A3C
    AND JAL.JALCODE(+)           = APH.JALCODE AND JAL.LANCODE(+) = NLANGUE AND PHA.PHADEST = 'ACTEUR' ORDER BY APHORDRE;
END S_ACTPHASE ;
FUNCTION F_ACTID_FROM_SIRET(
        P_ACTSIRET ACTEUR.ACTSIRET%TYPE)
    RETURN NUMBER
IS
    NACTID NUMBER;
BEGIN
    BEGIN
        SELECT MAX(ACTID) INTO NACTID FROM ACTEUR WHERE ACTSIRET = P_ACTSIRET;
    EXCEPTION
    WHEN OTHERS THEN
        RETURN NACTID;
    END;
    RETURN NACTID;
END F_ACTID_FROM_SIRET;
FUNCTION F_ACTOR_NAFCODE(
        P_NAFCODE ACTEUR.NAFCODE%TYPE)
    RETURN VARCHAR2
IS
    NNAFCODE VARCHAR2(50) ;
BEGIN
    BEGIN
        SELECT MAX(NAFCODE) INTO NNAFCODE FROM NAF WHERE NAFCODE LIKE '%'||P_NAFCODE||'%';
    EXCEPTION
    WHEN OTHERS THEN
        RETURN NNAFCODE;
    END;
    RETURN NNAFCODE;
END F_ACTOR_NAFCODE;
FUNCTION F_VERIFY_SIRET(
        P_LANCODE LANGUE.LANCODE%TYPE,
        P_ACTSIRET ACTEUR.ACTSIRET%TYPE,
        P_CJUCODE ACTEUR.CJUCODE%TYPE,
        P_PAYCODE PAYS.PAYCODE%TYPE)
    RETURN VARCHAR2
IS
BEGIN
    DECLARE
        NSOMME   NUMBER;
        NPOSTE   NUMBER;
        NBOUCLE  NUMBER;
        NLENGTH  NUMBER;
        NPRODUIT NUMBER;
        SCHAR    VARCHAR2(100) ;
        SCHAR8   VARCHAR2(100) ;
        NCLE     NUMBER;
        NRESULT  NUMBER;
        NRESULT1 NUMBER;
        NRESULT2 NUMBER;
        NSIRET   NUMBER;
        NOK      NUMBER;
        NLOGIQUE TOPPARAM.TPALOGIQUE%TYPE;
        NINDEX      NUMBER; -- LG FSA 17118 10/11/04
        SCHARTOFIND VARCHAR2(36) ;
        SCHARTOTEST VARCHAR2(36) ;
        SRETVAL     VARCHAR2(36) ;
        NINDEXMOD   NUMBER; -- LG FSA 17118 10/11/04
        NSUM        NUMBER; -- LG FSA 17118 10/11/04
        NCONTROL    NUMBER; -- LG FSA 17118 10/11/04
        NMAXLENGTH  NUMBER;
        SINIPAYFORMASIRET PAYS.PAYFORMATSIRET%TYPE;
        NLONGSIRET         NUMBER;
        NLONGFORMAPAYS     NUMBER;
        SCARAPAYFORMASIRET VARCHAR2(1) ;
        NCOMPTEUR          NUMBER;
        BTROUVE            BOOLEAN;
        NREMAINDER         NUMBER := 0;
        NPRODUCT           NUMBER := 0;
        SSIRET ACTEUR.ACTSIRET%TYPE;
        SPAYS ACTEUR.PAYCODE%TYPE;
        SCJUCODE ACTEUR.CJUCODE%TYPE;
        NMODULO              NUMBER := 0;
        NCOUNT               NUMBER := 0;
        NCALCUL              NUMBER := 0;
        NFAIRE               NUMBER := 0;
        NFAIREPART           NUMBER := 0;
        SCHAINERO            VARCHAR2(12) ;
        SCHAINESTERO         VARCHAR2(9) ;
        SCHAINEPARTICULIERRO VARCHAR2(12) ;
        SMSG LANMSG.MSGLIBELLE%TYPE;
    BEGIN
        IF P_ACTSIRET IS NULL OR LENGTH(P_ACTSIRET) = 9 THEN
            RETURN NULL;
        END IF;
        SSIRET   := P_ACTSIRET;
        SPAYS    := P_PAYCODE;
        SCJUCODE := P_PAYCODE;
        NOK      := 1;
        BTROUVE  := FALSE;
        BEGIN
            SELECT PAYFORMATSIRET INTO SINIPAYFORMASIRET FROM PAYS WHERE PAYCODE = SPAYS ;
        EXCEPTION
        WHEN OTHERS THEN
            SINIPAYFORMASIRET := NULL;
        END;
        IF SINIPAYFORMASIRET                  IS NOT NULL THEN
            NINDEX                            := 1;
            NLONGSIRET                        := LENGTH(SSIRET) ;
            NCOMPTEUR                         := 0;
            IF INSTR(SINIPAYFORMASIRET, '''') != 0 THEN
                NLONGFORMAPAYS                := LENGTH(SINIPAYFORMASIRET) ;
                WHILE NINDEX                  <= NLONGFORMAPAYS
                LOOP
                    SCARAPAYFORMASIRET   := SUBSTR(SINIPAYFORMASIRET, NINDEX, 1) ;
                    IF SCARAPAYFORMASIRET = '''' THEN
                        BTROUVE          := NOT
                        (
                            BTROUVE
                        )
                        ;
                    ELSIF NOT BTROUVE THEN
                        NCOMPTEUR := NCOMPTEUR + 1 ;
                    END IF;
                    NINDEX := NINDEX + 1;
                END LOOP;
                NLONGFORMAPAYS := NCOMPTEUR;
            ELSE
                NLONGFORMAPAYS := LENGTH(SINIPAYFORMASIRET) ;
            END IF;
            IF NLONGFORMAPAYS != NLONGSIRET THEN
                NOK           := 0 ;
            END IF;
        END IF;
        PAV4_TRACE.DEBUG('nLongSiret' ||NLONGSIRET) ;
        PAV4_TRACE.DEBUG('nLongFormaPays' ||NLONGFORMAPAYS) ;
        IF NOK = 1 THEN
            -- On ne controle que si le pays est renseigne et egal a la France
            IF SPAYS IS NOT NULL AND SPAYS = 'FR' THEN
                PA_COMMON.S_TPALOGIQUE('CTRLSIRET', SPAYS, NLOGIQUE) ;
                IF SSIRET                 IS NULL THEN
                    NOK                   := 0;
                ELSIF SUBSTR(SSIRET, 1, 9) = '999999999' THEN
                    NOK                   := 1;
                ELSIF SUBSTR(SSIRET, 1, 2) = '20' THEN
                    NOK                   := 1;
                ELSIF LENGTH(SSIRET)      != 14 AND NLOGIQUE = 0 THEN
                    NOK                   := 0;
                ELSIF LENGTH(SSIRET)      != 14 AND LENGTH(SSIRET) != 9 AND NLOGIQUE = 1 THEN
                    NOK                   := 0;
                ELSIF SUBSTR(SSIRET, 1, 9) = '000000000' THEN
                    NOK                   := 0;
                ELSE
                    NPOSTE      := 9;
                    NSOMME      := 0;
                    WHILE NPOSTE > 0
                    LOOP
                        SCHAR      := SUBSTR(SSIRET, NPOSTE, 1) ;
                        IF SCHAR    < '0' OR SCHAR > '9' THEN
                            NPOSTE := 0;
                            NOK    := 0;
                            EXIT;
                        ELSE
                            IF MOD(NPOSTE, 2) = 0 THEN
                                IF SCHAR      = '5' THEN
                                    NPRODUIT := 1; -- 2*5==> 10 ==> 1+0 ==> 1
                                ELSIF SCHAR   = '6' THEN
                                    NPRODUIT := 3; -- 2*6==> 12 ==> 1+2 ==> 3
                                ELSIF SCHAR   = '7' THEN
                                    NPRODUIT := 5; -- 2*7==> 14 ==> 1+4 ==> 5
                                ELSIF SCHAR   = '8' THEN
                                    NPRODUIT := 7; -- 2*8==> 16 ==> 1+6 ==> 7
                                ELSIF SCHAR   = '9' THEN
                                    NPRODUIT := 9; -- 2*9==> 18 ==> 1+8 ==> 9
                                ELSE
                                    NPRODUIT := TO_NUMBER(SCHAR) * 2;
                                END IF;
                            ELSE
                                NPRODUIT := SCHAR;
                            END IF;
                            NSOMME := NSOMME + NPRODUIT;
                            NPOSTE := NPOSTE - 1;
                        END IF;
                    END LOOP;
                    IF NOK          = 1 AND MOD(NSOMME, 10) != 0 THEN
                        NOK        := 0;
                    ELSIF NOK       = 1 AND MOD(NSOMME, 10) = 0 THEN
                        IF(NLOGIQUE = 1) THEN
                            -- Si option CTRLSIRET sur le PAYS, on ne controle pas les cinq derniers chiffres
                            NOK := 1;
                        ELSE
                            NPOSTE      := 14;
                            NSOMME      := 0;
                            WHILE NPOSTE > 0
                            LOOP
                                SCHAR      := SUBSTR(SSIRET, NPOSTE, 1) ;
                                IF SCHAR    < '0' OR SCHAR > '9' THEN
                                    NPOSTE := 0;
                                    NOK    := 0;
                                    EXIT;
                                ELSE
                                    IF MOD(NPOSTE, 2) != 0 THEN
                                        IF SCHAR       = '5' THEN
                                            NPRODUIT  := 1; -- 2*5==> 10 ==> 1+0 ==> 1
                                        ELSIF SCHAR    = '6' THEN
                                            NPRODUIT  := 3; -- 2*6==> 12 ==> 1+2 ==> 3
                                        ELSIF SCHAR    = '7' THEN
                                            NPRODUIT  := 5; -- 2*7==> 14 ==> 1+4 ==> 5
                                        ELSIF SCHAR    = '8' THEN
                                            NPRODUIT  := 7; -- 2*8==> 16 ==> 1+6 ==> 7
                                        ELSIF SCHAR    = '9' THEN
                                            NPRODUIT  := 9; -- 2*9==> 18 ==> 1+8 ==> 9
                                        ELSE
                                            NPRODUIT := TO_NUMBER(SCHAR) * 2;
                                        END IF;
                                    ELSE
                                        NPRODUIT := SCHAR;
                                    END IF;
                                    NSOMME := NSOMME + NPRODUIT;
                                    NPOSTE := NPOSTE - 1;
                                END IF;
                            END LOOP;
                            IF NOK   = 1 AND MOD(NSOMME, 10) != 0 THEN
                                NOK := 0;
                            END IF;
                        END IF;
                    END IF;
                END IF;
                -- CV-30032005 FSA-18183 KBC siret avec 10 caracteres maintenant
                -- TD le 26/09/02 -- Belgique --
            ELSIF SPAYS   IS NOT NULL AND SPAYS = 'BE' THEN
                IF SSIRET IS NULL THEN
                    NOK   := 0;
                ELSE
                    NPOSTE := 0;
                    SCHAR8 := NULL;
                    -- WHILE nPoste < 7 LOOP
                    WHILE NPOSTE < 11
                    LOOP
                        NPOSTE     := NPOSTE + 1;
                        SCHAR      := SUBSTR(SSIRET, NPOSTE, 1) ;
                        IF NPOSTE   < 9 THEN
                            SCHAR8 := SCHAR8 || SCHAR;
                        END IF;
                        IF SCHAR    < '0' OR SCHAR > '9' THEN
                            NPOSTE := 0;
                            NOK    := 0;
                            EXIT;
                        END IF;
                    END LOOP;
                    IF SCHAR8    IS NOT NULL AND NOK = 1 THEN
                        NSIRET   := TO_NUMBER(SCHAR8) ;
                        NRESULT1 := TRUNC(NSIRET / 97) ;
                        --nResult := ceil( nSiret / 97) ;          --FSA 13722
                        -- LG 03/11/2003 FSA 13538
                        --IF nResult != round(nResult,0) THEN
                        --nResult := TRUNC(nResult) + 1;
                        --END if;
                        NRESULT2 := NRESULT1 * 97;
                        NRESULT  := NSIRET - NRESULT2;
                        NCLE     := 97 - NRESULT;
                        IF NCLE   = 0 THEN
                            NCLE := 97;
                        END IF;
                        NPOSTE  := 9;
                        IF NCLE != TO_NUMBER(SUBSTR(SSIRET, NPOSTE, 2)) THEN
                            NOK := 0;
                        END IF;
                    END IF;
                END IF;
                -- LG 08/11/04 FSA 17118
            ELSIF SPAYS IS NOT NULL AND SPAYS = 'ES' THEN
                -- Siret not null
                IF SSIRET IS NULL THEN
                    NOK   := 0;
                ELSE
                    --Routine pour enlever tous caracteres != lettres ou chiffress + lettres en MAJ
                    SCHARTOFIND  := '';
                    NLENGTH      := TO_NUMBER(LENGTH(SSIRET)) ;
                    NINDEX       := 1;
                    WHILE NINDEX <= NLENGTH
                    LOOP
                        SCHARTOTEST                                                   := SUBSTR(UPPER(SSIRET), NINDEX, 1) ;
                        IF INSTR('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', SCHARTOTEST) != 0 THEN
                            SCHARTOFIND                                               := SCHARTOFIND || SCHARTOTEST;
                        END IF;
                        NINDEX := NINDEX + 1;
                    END LOOP;
                    PA_COMMON.S_TPALOGIQUE('CTRLSIRET', SPAYS, NLOGIQUE) ;
                    IF(NLOGIQUE     = 1) THEN
                        NMAXLENGTH := 14;
                    ELSE
                        NMAXLENGTH := 9;
                    END IF;
                    --Premiere chaine doit etre numerique
                    NLENGTH                                               := TO_NUMBER(LENGTH(SCHARTOFIND)) ;
                    IF(NLENGTH                                             = NMAXLENGTH) THEN
                        IF INSTR('0123456789', SUBSTR(SCHARTOFIND, 1, 1)) != 0 THEN
                            BEGIN
                                SELECT MOD(TO_NUMBER(SUBSTR(SCHARTOFIND, 1, 8)), 23) + 1 INTO NINDEXMOD FROM DUAL;
                            EXCEPTION
                            WHEN OTHERS THEN
                                NINDEXMOD := NULL;
                                NOK       := 0;
                            END;
                            IF(NINDEXMOD IS NOT NULL) AND
                                (
                                    SUBSTR(SCHARTOFIND, 9, 1) != SUBSTR('TRWAGMYFPDXBNJZSQVHLCKET', NINDEXMOD, 1)
                                )
                                THEN
                                NOK := 0;
                            END IF;
                        ELSE
                            IF INSTR('ABCDEFGHIJKLMNOPQRSTUVWXYZ', SUBSTR(SCHARTOFIND, 1, 1)) = 0 THEN
                                NOK                                                          := 0;
                            ELSE
                                IF SUBSTR(SCHARTOFIND, 1, 1) = 'X' THEN
                                    BEGIN
                                        SELECT MOD(TO_NUMBER(SUBSTR(SCHARTOFIND, 2, 7)), 23) + 1 INTO NINDEXMOD FROM DUAL;
                                    EXCEPTION
                                    WHEN OTHERS THEN
                                        NINDEXMOD := NULL;
                                        NOK       := 0;
                                    END;
                                    IF(NINDEXMOD IS NOT NULL) AND
                                        (
                                            SUBSTR(SCHARTOFIND, 9, 1) != SUBSTR('TRWAGMYFPDXBNJZSQVHLCKET', NINDEXMOD, 1)
                                        )
                                        THEN
                                        NOK := 0;
                                    END IF;
                                ELSE
                                    --SUm
                                    NSUM         :=(TO_NUMBER(SUBSTR(SCHARTOFIND, 3, 1)) + TO_NUMBER(SUBSTR(SCHARTOFIND, 5, 1)) + TO_NUMBER(SUBSTR(SCHARTOFIND, 7, 1))) ;
                                    NINDEX       := 1;
                                    WHILE NINDEX <= 4
                                    LOOP
                                        NSUM   := NSUM +(2 *(MOD(TO_NUMBER(SUBSTR(SCHARTOFIND, 2 * NINDEX, 1)), 10)) + TRUNC((2 *(TO_NUMBER(SUBSTR(SCHARTOFIND, 2 * NINDEX, 1)))) / 10)) ;
                                        NINDEX := NINDEX + 1;
                                    END LOOP;
                                    NCONTROL                                          := 10 - MOD(NSUM, 10) ;
                                    IF INSTR('0123456789', SUBSTR(SCHARTOFIND, 9, 1)) != 0 THEN
                                        IF NCONTROL                                    = 10 THEN
                                            NCONTROL                                  := 0;
                                        END IF;
                                        IF TO_NUMBER(SUBSTR(SCHARTOFIND, 9, 1)) != NCONTROL THEN
                                            NOK                                 := 0;
                                        END IF;
                                    ELSE
                                        IF SUBSTR(SCHARTOFIND, 9, 1) != CHR(64 + NCONTROL) THEN
                                            NOK                      := 0;
                                        END IF;
                                    END IF;
                                END IF;
                            END IF;
                        END IF;
                    ELSE
                        NOK := 0;
                    END IF;
                END IF;
            ELSIF(SPAYS = 'NC') THEN
                -- N? RID   : 6 premiers chiffres
                -- N? RIDET : les 9 chiffres
                IF(SSIRET            IS NULL) THEN
                    NOK              := 0;
                ELSIF LENGTH(SSIRET) != 9 THEN
                    NOK              := 0;
                ELSE
                    -- On ne tient pas compte des 3 derniers chiffres (code etablissement)
                    NPOSTE      := 6;
                    NSOMME      := 0;
                    WHILE NPOSTE > 0
                    LOOP
                        SCHAR      := SUBSTR(SSIRET, NPOSTE, 1) ;
                        IF SCHAR    < '0' OR SCHAR > '9' THEN
                            NPOSTE := 0;
                            NOK    := 0;
                            EXIT;
                        ELSE
                            -- Les rangs impairs sont multiplies par deux
                            IF MOD(NPOSTE, 2) != 0 THEN
                                IF SCHAR       = '5' THEN
                                    NPRODUIT  := 1; -- 2*5==> 10 ==> 1+0 ==> 1
                                ELSIF SCHAR    = '6' THEN
                                    NPRODUIT  := 3; -- 2*6==> 12 ==> 1+2 ==> 3
                                ELSIF SCHAR    = '7' THEN
                                    NPRODUIT  := 5; -- 2*7==> 14 ==> 1+4 ==> 5
                                ELSIF SCHAR    = '8' THEN
                                    NPRODUIT  := 7; -- 2*8==> 16 ==> 1+6 ==> 7
                                ELSIF SCHAR    = '9' THEN
                                    NPRODUIT  := 9; -- 2*9==> 18 ==> 1+8 ==> 9
                                ELSE
                                    NPRODUIT := TO_NUMBER(SCHAR) * 2;
                                END IF;
                            ELSE
                                NPRODUIT := SCHAR;
                            END IF;
                            NSOMME := NSOMME + NPRODUIT;
                            NPOSTE := NPOSTE - 1;
                        END IF;
                    END LOOP;
                    IF NOK   = 1 AND MOD(NSOMME, 10) != 0 THEN
                        NOK := 0;
                    END IF;
                END IF;
            ELSIF SPAYS = 'RO' THEN
                -- RMA le 06/05/2009 CFS#37334
                BEGIN
                    SELECT INSTR(TRIM(TRANSLATE(UPPER(SSIRET), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'XXXXXXXXXXXXXXXXXXXXXXXXXX')), 'X') INTO NCOUNT FROM DUAL ;
                EXCEPTION
                WHEN OTHERS THEN
                    NCOUNT := 0;
                END;
                IF(NCOUNT <> 0) THEN
                    NOK   := 0;
                ELSE
                    IF SUBSTR(SSIRET, 1, 3) = '999' THEN
                        NOK                := 1;
                        NFAIRE             := 0;
                        --ELSIF ( sCjuCode < '2000' ) THEN
                    ELSIF F_PLGETCJUTYPE(SCJUCODE, SPAYS) = 'P' THEN
                        IF LENGTH(SSIRET)                != 13 THEN
                            NOK                          := 0;
                        ELSE
                            SCHAINERO  := SCHAINEPARTICULIERRO;
                            NREMAINDER := TO_NUMBER(SUBSTR(SSIRET, LENGTH(SSIRET), LENGTH(SSIRET))) ;
                            SSIRET     := LPAD(SUBSTR(SSIRET, 1, LENGTH(SSIRET) - 1), '12', '0') ;
                            NFAIREPART := 1;
                        END IF;
                    ELSE
                        --SELECT COUNT(1) INTO nCount FROM ACTEURGESTION WHERE ACTID = nActId;
                        --IF nCount > 0 AND ( sCjuCode >= '2000' ) THEN
                        --IF ( sCjuCode >= '2000' ) THEN
                        IF F_PLGETCJUTYPE(SCJUCODE, SPAYS) != 'P' THEN
                            IF LENGTH(SSIRET)               > 9 THEN
                                NOK                        := 0;
                            ELSE
                                SCHAINERO := SCHAINESTERO;
                                NFAIRE    := 1;
                                --PAV4_TRACE.DEBUG( 'nRemainder : ' || TO_CHAR(nRemainder)) ;
                                NREMAINDER := TO_NUMBER(SUBSTR(SSIRET, LENGTH(SSIRET), LENGTH(SSIRET))) ;
                                SSIRET     := LPAD(SUBSTR(SSIRET, 1, LENGTH(SSIRET) - 1), '9', '0') ;
                                --PAV4_TRACE.DEBUG( 'Longueur sSiret : ' || sSiret) ;
                            END IF;
                        ELSE
                            NOK    := 1;
                            NFAIRE := 0;
                        END IF;
                        IF NOK = 1 AND
                            (
                                NFAIRE = 1 OR NFAIREPART = 1
                            )
                            THEN
                            NINDEX       := 1;
                            WHILE(NINDEX <= LENGTH(SCHAINERO))
                            LOOP
                                --PAV4_TRACE.DEBUG( 'SUBSTR(sSiret,nIndex,nIndex) : ' || SUBSTR(sSiret,nIndex,1)) ;
                                --PAV4_TRACE.DEBUG( 'SUBSTR(chaineRoumania,nIndex,1) : ' || SUBSTR(chaineRoumania,nIndex,1)) ;
                                NCALCUL :=(TO_NUMBER(SUBSTR(SSIRET, NINDEX, 1)) * TO_NUMBER(SUBSTR(SCHAINERO, NINDEX, 1))) ;
                                --PAV4_TRACE.DEBUG( 'nCalcul : ' || TO_CHAR(nCalcul)) ;
                                NPRODUCT := NPRODUCT + NCALCUL;
                                --PAV4_TRACE.DEBUG( 'nProduct : ' || TO_CHAR(nProduct)) ;
                                NINDEX := NINDEX + 1;
                            END LOOP;
                            IF NFAIREPART = 1 THEN
                                NPRODUCT := MOD(NPRODUCT, 11) ;
                            ELSE
                                NPRODUCT := MOD(MOD((NPRODUCT * 10), 11), 10) ;
                            END IF;
                            --PAV4_TRACE.DEBUG( 'nProduct : ' || TO_CHAR(nProduct)) ;
                            IF NPRODUCT = NREMAINDER THEN
                                NOK    := 1;
                            ELSE
                                NOK := 0;
                            END IF;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END IF;
        IF(SPAYS IS NOT NULL) AND
            (
                SSIRET IS NOT NULL
            )
            AND
            (
                NOK = 0
            )
            THEN
            SELECT COUNT(1) INTO NOK FROM TUSPARAM WHERE TUSNOM = 'CTRLSIRET' || SPAYS AND TUPCODE = SSIRET;
        END IF;
        IF NOK = 0 THEN
            SELECT REPLACE(MSGLIBELLE, '^1', SSIRET) INTO SMSG FROM LANMSG WHERE MSGID = 140 AND LANCODE = P_LANCODE;
            RETURN SMSG;
        ELSE
            RETURN NULL;
        END IF;
        RETURN NULL;
    END;
END F_VERIFY_SIRET;
PROCEDURE S_LISTE_ACTROLE(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_LISTE_ACTROLE IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ACTROLE FOR SELECT ACT.ACTID,
    ROL.ROLCODE,
    ROL.AROREFEXTERNE,
    ACT.ACTLIBCHEQUE,
    ROL.ARONBEXFAC,
    ROL.AROFACAVANCE,
    ROL.AROGRPFAC,
    ROL.ARORECAPFAC,
    ROL.AROPERIODE,
    ROL.AROREFEXTERNE,
    ROL.AROINVOICEMETHOD,
    ROL.AROMULTIPLE,
    ROL.AROEDITFAC,
    ROL.AROENVOINOTICE,
    ROL.AROFORMATSORTIE,
    ROL.AROGRPDEC,
    ROL.AROGRPPREL FROM ACTEUR ACT,
    ACTROLE ROL WHERE ACT.ACTID = ROL.ACTID AND ACT.ACTID = P_ACTID;
END S_LISTE_ACTROLE;
PROCEDURE S_LIST_AROAGE(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ROLCODE ACTROLE.ROLCODE%TYPE,
        PC_LIST_AROAGE IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LIST_AROAGE FOR SELECT * FROM AROAGE WHERE ACTID = P_ACTID AND ROLCODE = P_ROLCODE;
END S_LIST_AROAGE;
PROCEDURE S_TCALCULINTERET(
        P_TCICODE TCALCULINTERET.TCICODE%TYPE,
        PC_TCALCULINTERET IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_TCALCULINTERET FOR SELECT * FROM TCALCULINTERET TCI WHERE TCI.TCICODE = P_TCICODE;
END S_TCALCULINTERET;
PROCEDURE S_LISTE_ACTRELATION_DESC(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_UTICODE UTILISATEUR.UTICODE%TYPE,
        P_TCOID TCOVALEUR.TCOID%TYPE,
        PC_RESULTAT IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RESULTAT FOR SELECT ARE.ACTID ACTIDRELATION,
    ARE.TRECODE,
    ACTIDRELATION ACTID,
    AREDTDEB,
    AREQP,
    AREDTFIN,
    ACTCODE,
    ACTNOM,
    ACTLIBCOURT,
    ACTSIRET,
    CJUCODE,
    ACTNOM2,
    ACTSIRET,
    ACTDTCREAT,
    ACTDTIMMATRICULATION,
    --AAVCLEBDF,
    TCO.ACTID ACTIDTCO,
    TCO.ATVORDRE,
    TCO.TCOID,
    TCO.TVACODE,
    TCO.CREID,
    TCO.ATVDTDEB,
    TCO.ATVDTFIN,
    TCO.ATVDTMAJ,
    TCO.UTICODE FROM ACTRELATION ARE,
    ACTEUR ACT,
    --AVACTEUR AVA,
    ACTTCOVALEUR TCO WHERE ARE.ACTIDRELATION = P_ACTID AND ACT.ACTID = ARE.ACTID
    --AND  AVA.ACTID = ACT.ACTID
    AND AREDTFIN IS NULL AND TCO.ACTID (+) = ARE.ACTID AND TCO.TCOID (+) = P_TCOID AND TCO.ATVDTFIN IS NULL;
END S_LISTE_ACTRELATION_DESC;
PROCEDURE S_ADRESSE_REMP(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_ORDRE ACTADRESSE.AADORDRE%TYPE,
        PC_LISTE_ADRESSE IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ADRESSE FOR SELECT AAD.ADRID,
    ADRVOIE,
    ADRLIEUDIT,
    AADFLAGSIEGE,
    AADFLAGCOURRIER,
    AADFLAGFACTURATION,
    AADFLAGLIVRAISON,
    ADRCODEPOST,
    ADRVILLE,
    ADR.PAYCODE,
    AADORDRE,
    AADCOMPL,
    PRECODE,
    ADRSUBREGION,
    ADRCEDEX,
    AADORDREREMPLACE,
    AADDTDEB,
    ADRAPPT,
    ADRBATIMENT,
    AADDTREMPLACE,
    ADR.ADRSTREETNUMBER FROM ACTADRESSE AAD,
    ADRESSE ADR WHERE AAD.ACTID = P_ACTID AND AAD.AADORDREREMPLACE = P_ORDRE AND ADR.ADRID = AAD.ADRID ORDER BY AAD.AADORDRE;
END S_ADRESSE_REMP;
PROCEDURE S_ACTASSENT(
        NACTID ACTASSENT.ACTID%TYPE,
        NDOSID ACTASSENT.DOSIDPROSPECT%TYPE,
        NLANGUE LANGUE.LANCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ACTASST.AASORDER,
    ACTASST.DOSID,
    ACTASST.UTICODE,
    ACTASST.AASTYPE,
    ACTASST.AASSTATUS,
    ACTASST.CREID,
    ACTASST.AASCHANNEL,
    ACTASST.AASREASON,
    ACTASST.AASDTUPDATE,
    ACTASST.AASDTSTART,
    ACTASST.AASDTEND,
    ACTASST.ACTID,
    ACTASST.DOSIDPROSPECT FROM ACTASSENT ACTASST,
    UTILISATEUR UTI WHERE ACTASST.ACTID = NACTID AND UTI.UTICODE(+) = ACTASST.UTICODE AND ACTASST.DOSIDPROSPECT = NDOSID;
END S_ACTASSENT ;
FUNCTION F_ACTID_FROM_AROREFEXTERNE(
        P_AROREFEXTERNE ACTROLE.AROREFEXTERNE%TYPE)
    RETURN NUMBER
IS
    NACTID NUMBER;
BEGIN
    BEGIN
        SELECT
            MIN(ACT.ACTID)
        INTO
            NACTID
        FROM
            ACTROLE ACT
          , ACTPHASE APH
        WHERE
            APH.ACTID             = ACT.ACTID
            AND ACT.AROREFEXTERNE = P_AROREFEXTERNE
            AND APH.PHACODE       = 'ACTIVE'
            AND APH.APHDTFIN     IS NULL;
    EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
    END;
    RETURN NACTID;
END F_ACTID_FROM_AROREFEXTERNE;
PROCEDURE S_ACTEUR_ANALYSIS(
        P_ACTID ANALYSIS.ACTID%TYPE,
        P_LANCODE LANGUE.LANCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ANAID,
    ANA.ACTID,
    ACT.ACTID,
    ANA.DOSID,
    ANA.AGGID,
    ANATARGET,
    ANATYPE,
    ANADTCREATED,
    ANA.UTICODE,
    ANAOBJECTTYPE,
    ANAIDPARENT,
    ANA.ANMID,
    ANANBPOINTS,
    ANAAUTOSCORENOTICE,
    ANAAUTOMATICSCORECOMMENT,
    ANAAUTONOTATION,
    ANAANALYSTOPINION,
    ANAANALYSTCOMMENT,
    ANASTATUS,
    ANAREFERENCEYEAR,(
        SELECT UTINOM || ' ' || UTIPRENOM FROM UTILISATEUR WHERE UTICODE = ANA.UTICODE
    )
AS
    UTINOM,(
        SELECT ROLLIBELLE FROM LANROLE WHERE LANCODE = P_LANCODE AND ROLCODE = ANAOBJECTTYPE
    )
AS
    ROLLIBELLE,
    ACTLIBCOURT,(
        SELECT ANMLABEL FROM LANANALYSISMATRIX WHERE LANCODE = P_LANCODE AND ANMID = ANA.ANMID
    )
AS
    ANMLABEL,(
        SELECT TUPLIBELLE FROM LANTUSPARAM WHERE TUSNOM = 'ANATYPE' AND TUPCODE = ANATYPE AND LANCODE = P_LANCODE
    )
AS
    TYPELABEL,(
        SELECT TTPLIBELLE FROM LANTTRPARAM WHERE TTRNOM = 'ANASTATUS' AND TTPCODE = ANASTATUS AND LANCODE = P_LANCODE
    )
AS
    STATUSLABEL,
    PFIID FROM ANALYSIS ANA,
    ACTEUR ACT WHERE ACT.ACTID = P_ACTID AND ACT.ACTID = ANA.ACTID ORDER BY ANAID DESC;
END S_ACTEUR_ANALYSIS;
PROCEDURE S_CHILD_ANALYSIS(
        P_ANAIDPARENT ANALYSIS.ANAIDPARENT%TYPE,
        P_LANGUE LANGUE.LANCODE%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
    BFROZEN NUMBER(1) := NULL;
BEGIN
    SELECT LEAST(1, COUNT( *)) INTO BFROZEN FROM ANAACTEUR WHERE ANAID = P_ANAIDPARENT;
    OPEN PC_RETURN FOR SELECT ANAID,
    ACTID,
    DOSID,
    DPRVERSION,
    AGGID,
    ANATARGET,
    ANATYPE,
    ANADTCREATED,
    UTICODE,
    ANAOBJECTTYPE,
    ANAIDPARENT,
    ANMID,
    ANANBPOINTS,
    ANAAUTOSCORENOTICE,
    ANAAUTOMATICSCORECOMMENT,
    ANAAUTONOTATION,
    ANAANALYSTOPINION,
    ANAANALYSTCOMMENT,
    ANASTATUS,
    ANAREFERENCEYEAR,
    BFROZEN FROZEN,
    PFIID,
    PA_AVCOMMUN.F_LANDIVERSPARAM('LANANALYSISMATRIX', 'ANMID', 'ANMLABEL', ANMID, P_LANGUE) ANMLABEL FROM ANALYSIS WHERE ANAIDPARENT = P_ANAIDPARENT;
END S_CHILD_ANALYSIS;
-- Assent--
PROCEDURE S_LIST_ACTASSENT(
        NACTID IN ACTEUR.ACTID%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    PAV4_SELECTACTEUR.S_ACTASSENT(NACTID, PC_RETURN) ;
END S_LIST_ACTASSENT;
PROCEDURE S_LIST_ACTASSATTRIBUTE(
        NACTID IN ACTEUR.ACTID%TYPE,
        NAASORDER IN ACTASSENT.AASORDER%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RETURN FOR SELECT ATT.AATORDER,
    ATT.AATCODE,
    ATT.AATSTRINGVALUE,
    ATT.AATDTVALUE,
    ATT.AATNUMERICVALUE,
    ATT.AATBOOLEANVALUE,
    ATT.CREID,
    NACTID ACTID,
    NAASORDER AASORDER,
    ATT.AATREASON FROM ACTASSATTRIBUTE ATT WHERE ATT.ACTID = NACTID AND ATT.AASORDER = NAASORDER;
END S_LIST_ACTASSATTRIBUTE;
PROCEDURE S_LIST_ACTASSMARKETPARTNER(
        NACTID IN ACTEUR.ACTID%TYPE,
        NAASORDER IN ACTASSENT.AASORDER%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    PAV4_SELECTACTEUR.S_ACTASSMARKETPARTNER(NACTID, NAASORDER, PC_RETURN) ;
END S_LIST_ACTASSMARKETPARTNER;
PROCEDURE S_LISTE_ACTRELATION_DESC_ROLE(
        P_ACTID ACTEUR.ACTID%TYPE,
        P_TRECODE ACTRELATION.TRECODE%TYPE,
        P_ROLCODE ACTROLE.ROLCODE%TYPE,
        PC_RESULTAT IN OUT T_CURSOR)
AS
BEGIN
    IF (P_ROLCODE IS NULL) THEN
      OPEN PC_RESULTAT FOR
        SELECT
            ARE.ACTIDRELATION ACTID, ACTNOM
          FROM
            ACTRELATION ARE,
            ACTEUR ACT
          WHERE ARE.ACTID = P_ACTID
          AND TRECODE = P_TRECODE
          AND AREDTFIN IS NULL
          AND ACT.ACTID = ARE.ACTIDRELATION;
    ELSE
      OPEN PC_RESULTAT FOR
        SELECT
          ARE.ACTIDRELATION ACTID, ACTNOM
          FROM
            ACTRELATION ARE,
            ACTROLE ARO,
            ACTEUR ACT
          WHERE ARE.ACTID = P_ACTID
          AND TRECODE = P_TRECODE
          AND AREDTFIN IS NULL
          AND ACT.ACTID = ARE.ACTIDRELATION
          AND ARO.ACTID = ARE.ACTIDRELATION
          AND ARO.ROLCODE = P_ROLCODE;
    END IF;
END S_LISTE_ACTRELATION_DESC_ROLE;
FUNCTION F_VERIFY_ACTASSENT(
        P_ACTID ACTASSENT.ACTID%TYPE,
        P_DOSID ACTASSENT.DOSID%TYPE)
    RETURN NUMBER
AS
    NNUM NUMBER ;
    SACTTYPE ACTEUR.ACTTYPE%TYPE;
BEGIN
    SELECT MAX(ACTTYPE) INTO SACTTYPE FROM ACTEUR WHERE ACTID = P_ACTID;
    IF SACTTYPE IS NOT NULL AND
        (
            SACTTYPE != 'PART' AND SACTTYPE != 'BPART'
        )
        THEN
        NNUM := 1;
    ELSE
        SELECT
            COUNT( *)
        INTO
            NNUM
        FROM
            ACTASSENT
        WHERE
            AASTYPE       = 'BASINQ'
            AND AASSTATUS = '1'
            AND SYSDATE BETWEEN AASDTSTART AND AASDTEND
            AND DOSIDPROSPECT = P_DOSID
            AND ACTID         = P_ACTID ;
    END IF;
    RETURN NNUM;
END F_VERIFY_ACTASSENT;
PROCEDURE S_CONTROL_LIMIT(
        P_ACTID IN AAGRVE.ACTID%TYPE,
        P_ROLCODE IN ACTROLE.ROLCODE%TYPE,
        P_LANCODE IN LANROLVARIABLE.LANCODE%TYPE,
        PC_RESULTAT IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RESULTAT FOR SELECT AVEMTOBJECTIF,
    AVEMTREALISE,
    DEVCODE,
    B.RVALIBELLE LIMITLABEL FROM AAGRVE A,
    LANROLVARIABLE B WHERE A.ACTID = P_ACTID AND A.ROLCODE = P_ROLCODE AND A.AVEMTREALISE > A.AVEMTOBJECTIF AND
    (
        A.AVENBOBJECTIF IS NOT NULL OR A.AVEMTOBJECTIF IS NOT NULL
    )
    AND B.ROLCODE = A.ROLCODE AND B.RVACODE = A.RVACODE AND B.LANCODE = P_LANCODE AND ROWNUM = 1;
END S_CONTROL_LIMIT;
PROCEDURE S_LISTE_ACTCARD_BY_DOSID(
        P_DOSID DOSSIERPROSPECT.DOSID%TYPE,
        PC_LISTE_ACTCARD IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ACTCARD FOR SELECT CARID,
    ACTID,
    CARNUM,
    CARCODECVC,
    CARISSUERREF,
    CARHOLDERNAME,
    CARSTATUS,
    CARDTEND,
    NVL(
    (
        SELECT MAX(DPRNUMERO) FROM DOSSIERPROSPECT WHERE DOSID = P_DOSID
    )
    , '') DPRNUMERO FROM CARD WHERE DOSIDPROSPECT = P_DOSID AND EXISTS
        (
            SELECT 1 FROM CARPHASE CPH WHERE CPH.CARID = CARD.CARID AND CPHDTEND IS NULL AND PHACODE != 'TER'
        )
        ;
    END S_LISTE_ACTCARD_BY_DOSID;
PROCEDURE S_GET_ACTORWITHROLEFORCOMBO(
        P_ROLCODE ACTROLE.ROLCODE%TYPE,
        PC_LIST_ACTOR IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LIST_ACTOR FOR SELECT TO_CHAR(ACTID) CODE_VALEUR,(
        SELECT ACTNOM FROM ACTEUR ACT WHERE ACTID = ARO.ACTID
    )
    LIBELLE,
    1 FLAG_VISIBLE FROM ACTROLE ARO WHERE ARO.ROLCODE = P_ROLCODE;
END S_GET_ACTORWITHROLEFORCOMBO;
PROCEDURE S_RELATEDINFO(
        SUGECODE IN ACTEUR.UGECODE%TYPE,
        SDTRCODE IN DATATRANSCODING.DTRCODE%TYPE,
        NACTID IN ACTEUR.ACTID%TYPE,
        NDOSID IN DOSSIERPROSPECT.DOSID%TYPE,
        NDPRVERSION IN DOSSIERPROSPECT.DPRVERSION%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    DECLARE
        NDTRID       NUMBER;
        NACTIDCLIENT NUMBER;
        STACCODE DOSSIER.TACCODE%TYPE;
        P_ACTTYPE ACTEUR.ACTTYPE%TYPE;
    BEGIN
        IF NDOSID        IS NULL THEN
            NACTIDCLIENT := NACTID;
        ELSE
            SELECT MAX(TACCODE) INTO STACCODE FROM DOSSIERPROSPECT WHERE DOSID = NDOSID AND DPRVERSION = NDPRVERSION;
            SELECT
                MAX(ACTID)
            INTO
                NACTIDCLIENT
            FROM
                DPRACTEUR
            WHERE
                ROLCODE       IN('EMPRUNT', 'CLIENT')
                AND DOSID      = NDOSID
                AND DPRVERSION = NDPRVERSION;
        END IF;
        OPEN PC_RETURN FOR SELECT SUBSTR(DDECASSIOPEEVALUE, 1, INSTR(DDECASSIOPEEVALUE, '||') - 1)
    AS
        FVINFORMATION,
        SUBSTR(DDECASSIOPEEVALUE, INSTR(DDECASSIOPEEVALUE, '||') + 2)
    AS
        FVRELATION,
        SUBSTR(DDEHOSTVALUE, 1, INSTR(DDEHOSTVALUE, '||') - 1)
    AS
        FRATYPE FROM DTRDETAIL WHERE DTRID IN
        (
            SELECT
                MAX(DTRID)
            FROM
                DATATRANSCODING
            WHERE
                UGECODE           = SUGECODE
                AND DTRCODE       = SDTRCODE
                AND DTRTABLENAME IN
                (
                    SELECT DECODE(ACTTYPE, 'PART', 'PART', 'NPART') ACTTYPE FROM ACTEUR WHERE ACTID = NACTIDCLIENT
                )
        )
        AND DDEHOSTVALUE IS NOT NULL;
        --AND F_EXECFUNCTION(SUBSTR(ddehostvalue, instr(ddehostvalue,'||' ) +2 )||'('||nDosId||','''||nDprVersion||''')') IS NOT NULL;
    END;
EXCEPTION
WHEN OTHERS THEN
    NULL;
END S_RELATEDINFO;
PROCEDURE S_RIB(
        P_RIBID RIB.RIBID%TYPE,
        PC_RIB IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RIB FOR SELECT RIB.RIBID,
    RIB.BGUBANQUE,
    RIB.BGUGUICHET,
    RIB.BGUGUICHETINVARIANT,
    RIB.RIBCOMPTE,
    RIB.RIBCLE,
    RIB.RIBINTITULE,(
        SELECT BANLIBELLE FROM BANQUE WHERE BANCODE = BGUBANQUE
    )
    BANLIBELLE FROM RIB WHERE RIB.RIBID = P_RIBID;
END S_RIB;
PROCEDURE S_MATRIX(
        SUGECODE IN ACTEUR.UGECODE%TYPE,
        SDTRCODE IN DATATRANSCODING.DTRCODE%TYPE,
        NACTID IN ACTEUR.ACTID%TYPE,
        NDOSID IN DOSSIERPROSPECT.DOSID%TYPE,
        NDPRVERSION IN DOSSIERPROSPECT.DPRVERSION%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    DECLARE
        NRETURNCODE NUMBER;
        V_SQL       VARCHAR2(4000) ;
        SDPRVERSION VARCHAR2(12) ;
        SQUERY      VARCHAR2(4000) := NULL;
        BFIRST      NUMBER         := 1;
        CURSOR C2
        IS
            SELECT
                SUBSTR(DDECASSIOPEEVALUE, 1, INSTR(DDECASSIOPEEVALUE, '||') - 1) FVINFORMATION
              , SUBSTR(DDECASSIOPEEVALUE, INSTR(DDECASSIOPEEVALUE, '||') + 2) FVRELATION
              , SUBSTR(DDEHOSTVALUE, 1, INSTR(DDEHOSTVALUE, '||') - 1) FRATYPE
              , SUBSTR(DDEHOSTVALUE, INSTR(DDEHOSTVALUE, '||') + 2) FVVALUE
            FROM
                DTRDETAIL
            WHERE
                DTRID IN
                (
                    SELECT
                        MAX(DTRID)
                    FROM
                        DATATRANSCODING
                    WHERE
                        UGECODE           = SUGECODE
                        AND DTRCODE       = SDTRCODE
                        AND DTRTABLENAME IN
                        (
                            SELECT
                                DECODE(ACTTYPE, 'PART', 'PART', 'NPART') ACTTYPE
                            FROM
                                ACTEUR
                            WHERE
                                ACTID IN
                                (
                                    SELECT MAX(ACTID) FROM DPRACTEUR WHERE ROLCODE IN('EMPRUNT', 'CLIENT') AND DOSID = NDOSID AND DPRVERSION = NDPRVERSION
                                )
                        )
                )
                AND DDEHOSTVALUE IS NOT NULL;
        BEGIN
            FOR C1R IN C2
            LOOP
                IF BFIRST   = 1 THEN
                    SQUERY := ' select DISTINCT * FROM ( SELECT '''||C1R.FVINFORMATION||''' as Fvinformation, '''||C1R.FVRELATION||''' as Fvrelation, '''||C1R.FRATYPE||''' as Fratype, column_value as Fvvalue from TABLE('||C1R.FVVALUE||'('||NDOSID||
                    ', '''||NDPRVERSION||'''))';
                    BFIRST := 0;
                ELSE
                    SQUERY := SQUERY || ' UNION ALL  select '''||C1R.FVINFORMATION||''' as Fvinformation, '''||C1R.FVRELATION||''' as Fvrelation, '''||C1R.FRATYPE||''' as Fratype, column_value as Fvvalue from TABLE('||C1R.FVVALUE||'('||NDOSID||
                    ', '''||NDPRVERSION||'''))';
                END IF;
            END LOOP;
            IF SQUERY  IS NULL THEN
                SQUERY := 'select null from dual';
            ELSE
                SQUERY := SQUERY || ' ) ';
            END IF;
            OPEN PC_RETURN FOR SQUERY;
        EXCEPTION
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
    END S_MATRIX;
PROCEDURE S_LIST_DEPARTMENT(
        P_LANCODE LANGUE.LANCODE%TYPE,
        PC_RESULT IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_RESULT FOR SELECT DPT.DPTCODE,
    DPTCODEPARENT,
    DPTTYPE,
    DPTSTATUS,
    ACTID,
    DPTGROUP,
    DPTSIZE,
    DPTPOST,
    DPTDTSTART,
    DPTDTEND,
    CREID,
    TBAID,
    DPTLABEL FROM DEPARTMENT DPT,
    LANDEPARTMENT LAN WHERE DPT.DPTCODE = LAN.DPTCODE AND LAN.LANCODE = P_LANCODE;
END S_LIST_DEPARTMENT;
/**
* RIB D'UN ACTEUR
*/
PROCEDURE S_LISTE_ACTRIB(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_LISTE_ACTRIB IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_LISTE_ACTRIB FOR SELECT ARB.ACTID,
    ARB.RIBID,
    RIB.BGUBANQUE,
    RIB.BGUGUICHET,
    RIB.BGUGUICHETINVARIANT,
    RIB.RIBCOMPTE,
    RIB.RIBCLE,
    RIB.RIBINTITULE,
    ARITYPE,(
        SELECT BGU.BGUAGENCE FROM BANQUEGUICHET BGU WHERE BGU.BGUBANQUE = RIB.BGUBANQUE AND BGU.BGUGUICHET = RIB.BGUGUICHET
    )
    BGUAGENCE,
    RIB.ACTIDOWNER FROM ACTRIB ARB,
    RIB RIB WHERE ARB.ACTID = P_ACTID AND ARB.RIBID = RIB.RIBID AND ARB.RIBIDREMPLACE IS NULL;
END S_LISTE_ACTRIB;
PROCEDURE S_REAL_CLIENT_FROM_UW(
        NACTIDCLIENTUW IN ACTEUR.ACTID%TYPE,
        PC_RETURN IN OUT T_CURSOR)
AS
BEGIN
    DECLARE
        SUGECODE UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
    BEGIN
        OPEN PC_RETURN FOR SELECT * FROM ACTEUR WHERE ACTCODE IN
        (
            SELECT SUBSTR(ACTCODE, 1, CASE WHEN INSTR(ACTCODE, '_') = 0 THEN LENGTH(ACTCODE) ELSE INSTR(ACTCODE, '_') - 1 END) FROM ACTEUR WHERE ACTID = NACTIDCLIENTUW
        )
        AND UGECODE = SUGECODE;
    END;
END S_REAL_CLIENT_FROM_UW;

PROCEDURE S_NAF(
	SLangue		LANGUE.LANCODE%TYPE,
	sTpgcode 	TPROFILGESTION.TPGCODE%TYPE,
	SPaycode	PAYS.PAYCODE%TYPE,
	PC_RETURN 	IN OUT T_CURSOR ) AS
BEGIN

	if sTpgcode is null then
      	OPEN PC_RETURN FOR
			SELECT  NAF.NAFCODE		NAFCODE,
					NAFLIBELLE      NAFLIBELLE
			FROM 	NAF,
					LANNAF LAN
			WHERE	NVL(NAF.PAYCODE, sPaycode) = sPaycode
					AND		LAN.NAFCODE = NAF.NAFCODE
					AND		LAN.LANCODE = sLangue
					AND		LAN.PAYCODE = NAF.PAYCODE
			ORDER BY NAFLIBELLE;
	else
		OPEN PC_RETURN FOR
			SELECT	NAF.NAFCODE		NAFCODE,
					NAFLIBELLE      NAFLIBELLE
			FROM 	NAF,
					FILTREPARAMPROFIL F,
					LANNAF LAN
			WHERE   F.FPPNOM(+) = 'NAF'
					AND	 	F.FPPCODE(+) = NAF.NAFCODE
					AND 	FPPTYPE(+) = 0
					AND		TPGCODE(+) = sTpgcode
					AND		NVL(NAF.PAYCODE, sPaycode) = sPaycode
					AND		LAN.NAFCODE = NAF.NAFCODE
					AND		LAN.LANCODE = sLangue
					AND		LAN.PAYCODE = NAF.PAYCODE
			ORDER BY NAFLIBELLE;
	end if;
END S_NAF;

PROCEDURE S_ACTEUR_INFO_EXTERNAL_CALL(
	P_ACTID ACTEUR.ACTID%TYPE,
	PC_ACTEUR_INFO IN OUT T_CURSOR)
AS
BEGIN
    OPEN PC_ACTEUR_INFO FOR
    SELECT
		ACT.ACTID,
		ACTLIBCOURT,
		ACTNOM,
		APADTNAISS,
		APADEPTNAISS,
		ACTSIRET,
		APAPRENOM,
		ACTTYPE
    FROM
    	ACTEUR ACT,
		ACTEURPARTICULIER APA
	WHERE ACT.ACTID = P_ACTID
	AND ACT.ACTID = APA.ACTID(+);
END S_ACTEUR_INFO_EXTERNAL_CALL;

PROCEDURE S_LISTE_ACTRELATION(
        P_ACTID ACTEUR.ACTID%TYPE,
        PC_LISTE_ACTRELATION IN OUT T_CURSOR)
AS

BEGIN
    OPEN PC_LISTE_ACTRELATION FOR SELECT ARE.ACTID,
    TRECODE,
    ACTIDRELATION,
    AREDTDEB,
    AREQP,
    AREDTFIN,
    ACTCODE,
    ACTNOM,
    ACTLIBCOURT,
    ACTSIRET
    FROM ACTRELATION ARE,
    ACTEUR ACT
	WHERE ARE.ACTID = P_ACTID AND ACT.ACTID = ARE.ACTIDRELATION AND AREDTFIN IS NULL ;
END S_LISTE_ACTRELATION;

PROCEDURE S_LISTE_ACTTCOVALEUR_CLIENT (nActId             ACTEUR.ACTID%TYPE,
                                          PC_Return   IN OUT T_Cursor)
   AS
   BEGIN
      OPEN PC_Return FOR
         SELECT *
           FROM acttcovaleur
          WHERE     tcoid = 10
                AND tvacode >= '5'
                AND atvdtfin IS NULL
                AND actid = nActId;
   END S_LISTE_ACTTCOVALEUR_CLIENT;
   
   
FUNCTION S_ACTEUR_CCH(
        P_ACTID            ACTEUR.ACTID%TYPE)
    RETURN VARCHAR2
IS
    P_CVASTRINGVALUE VARCHAR2(100);
BEGIN
    BEGIN

            SELECT  CVASTRINGVALUE 
            INTO P_CVASTRINGVALUE
            FROM CCHVALUE WHERE CCHSID = 'TFDCCHVAL2001' AND ENTCODE='ACTEUR'
                            AND ACTID = P_ACTID;
            
    EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL;
    END;
    RETURN P_CVASTRINGVALUE;
END S_ACTEUR_CCH;
    
END PAV4_SELECTACTEURAV;
/
