create or replace PROCEDURE P_MIGRATE_ACTEUR_V45
AS
BEGIN
	DECLARE

		CURSOR C_ACTEUR IS SELECT * FROM ACTEUR@SGM_LINK WHERE actid not in (SELECT ACTID FROM acteurgestion@SGM_LINK) AND NVL(FLAG_TRT, 'N') <> 'X' ORDER BY ACTID;
		R_ACTEUR ACTEUR@SGM_LINK%ROWTYPE ;


        CURSOR C_ACTPHASE (R_ACTID NUMBER) IS SELECT * FROM ACTPHASE@SGM_LINK WHERE ACTID = R_ACTID;
        R_PHASE ACTPHASE@SGM_LINK%ROWTYPE;

        CURSOR C_ADRESSE (R_ACTID NUMBER) IS SELECT * FROM ACTADRESSE@SGM_LINK WHERE ACTID = R_ACTID ORDER BY AADORDRE DESC;
        R_ADRESSE ACTADRESSE@SGM_LINK%ROWTYPE;

       CURSOR C_ACTROLE (R_ACTID NUMBER) IS SELECT * FROM ACTROLE@SGM_LINK WHERE ACTID = R_ACTID;
        R_ACTROLE ACTROLE@SGM_LINK%ROWTYPE;

        CURSOR C_ACTTELECOM (R_ACTID NUMBER) IS SELECT * FROM ACTTELECOM@SGM_LINK WHERE ACTID = R_ACTID;
        R_ACTTELECOM ACTTELECOM@SGM_LINK%ROWTYPE;

        CURSOR C_ACTCORRESPONDANT (R_ACTID NUMBER) IS SELECT * FROM ACTCORRESPONDANT@SGM_LINK WHERE ACTID = R_ACTID;
        R_ACTCORRESPONDANT ACTCORRESPONDANT@SGM_LINK%ROWTYPE;

      /*  CURSOR C_ACTRELATION (R_ACTID NUMBER) IS SELECT * FROM ACTRELATION@SGM_LINK WHERE ACTID = R_ACTID;
        R_ACTRELATION ACTRELATION@SGM_LINK%ROWTYPE;*/

        CURSOR C_ACTTCOVALEUR (R_ACTID NUMBER) IS SELECT * FROM ACTTCOVALEUR@SGM_LINK WHERE ACTID = R_ACTID;
        R_ACTTCOVALEUR ACTTCOVALEUR@SGM_LINK%ROWTYPE;

        CURSOR C_ACTEXERCICE (R_ACTID NUMBER) IS SELECT * FROM ACTEXERCICE@SGM_LINK WHERE ACTID = R_ACTID;
        R_ACTEXERCICE ACTEXERCICE@SGM_LINK%ROWTYPE;

        CURSOR C_LKACTCORADR (R_ACTID NUMBER) IS SELECT * FROM LKACTCORADR@SGM_LINK WHERE ACTID = R_ACTID;
        R_LKACTCORADR LKACTCORADR@SGM_LINK%ROWTYPE;

        CURSOR C_LKACTTELCOR (R_ACTID NUMBER) IS SELECT * FROM LKACTTELCOR@SGM_LINK WHERE ACTID = R_ACTID;
        R_LKACTTELCOR LKACTTELCOR@SGM_LINK%ROWTYPE;

        CURSOR C_ACTRIB (R_ACTID NUMBER) IS SELECT * FROM ACTRIB@SGM_LINK WHERE ACTID = R_ACTID ORDER BY RIBID DESC;
        R_ACTRIB ACTRIB@SGM_LINK%ROWTYPE;

        CURSOR C_AROAGE (R_ACTID NUMBER) IS SELECT * FROM AROAGE@SGM_LINK WHERE ACTID = R_ACTID;
        R_AROAGE AROAGE@SGM_LINK%ROWTYPE;

        CURSOR C_CCHVALUE (R_ACTID NUMBER) IS SELECT * FROM CCHVALUE@SGM_LINK WHERE ENTCODE = 'ACTEUR' AND (CVASTRINGVALUE IS NOT NULL OR CVADTVALUE is not null OR CVANUMERICVALUE IS NOT NULL
        OR CVABOOLEANVALUE IS NOT NULL) AND ACTID = R_ACTID ;
        R_CCHVALUE CCHVALUE@SGM_LINK%ROWTYPE;
		
		CURSOR C_UTITSM                   IS SELECT DISTINCT UTI.* FROM UTITSM@SGM_LINK UTI , LKACTUTITSM@SGM_LINK   LKU 
		WHERE LKU.TSMMETIER IN ('SGM12','SGM20')
		AND LKU.UTICODE =UTI.UTICODE 
		AND LKU.TSMMETIER=UTI.TSMMETIER ;
		R_UTITSM UTITSM@SGM_LINK%ROWTYPE;

       CURSOR C_LKACTUTITSM    (R_ACTID NUMBER)   IS SELECT * FROM LKACTUTITSM@SGM_LINK  
       where TSMMETIER in ('SGM12','SGM20') AND ACTID =R_ACTID  ;  
	   
	   
	   
		R_LKACTUTITSM LKACTUTITSM@SGM_LINK%ROWTYPE;
		
		
		
        ERR_CODE VARCHAR2(10);
        ERR_MESSAGE VARCHAR2(32000);

	BEGIN
		DBMS_OUTPUT.PUT_LINE('INSIDE');

		OPEN C_ACTEUR;
		LOOP
			FETCH C_ACTEUR INTO R_ACTEUR;
			EXIT WHEN C_ACTEUR%NOTFOUND;

			---- RECUPERATION D'UNE NOUVELLE SEQUENCE ACTID
			--SELECT AVSGMMIG.SEQ_ACTID.NEXTVAL INTO R_ACTEUR.ACTID FROM DUAL;
		----DBMS_OUTPUT.PUT_LINE('R_ACTEUR.ACTID = ' || R_ACTEUR.ACTID);
        ----DBMS_OUTPUT.PUT_LINE('ACTCODE = ' || R_ACTEUR.ACTCODE);
      BEGIN
			DECLARE
				SACTTYPE VARCHAR2(4);
                NACTGESTION NUMBER;
			BEGIN

               -- VERIFIER S'IL S'AGIT D'UN ACTEUR PARTICULIER
				SACTTYPE := F_GET_TYPE_ACTEUR(R_ACTEUR.ACTID);
              --DBMS_OUTPUT.PUT_LINE('sACTTYPE = ' || SACTTYPE);

				---- INSERER DANS LE SYNONYME AVSGMMIG.ACTEUR
				INSERT INTO AVSGMMIG.ACTEUR	(ACTID,	UGECODE,	CJUCODE,	LANCODE,	UTICODECREAT,	PAYCODE,	ACTCODE,	ACTLIBCOURT,	ACTNOM,	UTICODEMAJ,	NAFCODE,	DEVCODE,	ACTNOM2,	ACTSIRET,	ACTFLAGTAXPROF,	ACTDTCREAT,	ACTDTMAJ,	ACTTVACE,	ACTCODERCM,	ACTFINMOISFISC,	ACTNUMRCM,	ACTMEMO,	ACTCAPITAL,	ACTLIBCHEQUE,	ACTREGIMETVA,	ACTFLAGAGREMENT,	ACTRATTACHEMENT,	ACTDTIMMATRICULATION,	ACTEFFECTIF,	NACCODE,	ACTFLAGNONDECLASSABLE,	DOMCODE,	ACTFLAGGROUPE,	ACTDTDEBNAF,	PAYCODENAF,	PAYCODECATJURIDIQUE,	ACTTYPE,	ACTCHANNEL,	ACTCHANNELCODE,	ACTEXTDEPARTMENT,	ACTDTEXTHIRING,	ACTRESIDENTCODE,	ACTREPRESENTATIVE,	ACTREPRESENTNAME,	ACTCORPORATE,	ACTFLAGGUARANTOR,	ACTQUALIFCLASS,	ACTETAT,	ACTEIN,	ACTBRANDTYPE,	ACTCARDTRANSACTION,	ACTCARDMANAGEMENT,	ACTIDENTIFICATIONKEY,	ACTFLAGPROSPECT,	ACTIDSERVICING,	ACTACQUISCODE,	ACTTAXSYSTEM)
				VALUES	 (R_ACTEUR.ACTID,	R_ACTEUR.UGECODE,	R_ACTEUR.CJUCODE,	R_ACTEUR.LANCODE,R_ACTEUR.UTICODECREAT,	R_ACTEUR.PAYCODE, R_ACTEUR.ACTCODE,	R_ACTEUR.ACTLIBCOURT,	R_ACTEUR.ACTNOM,	R_ACTEUR.UTICODEMAJ,	R_ACTEUR.NAFCODE,	R_ACTEUR.DEVCODE,	R_ACTEUR.ACTNOM2,	R_ACTEUR.ACTSIRET,	R_ACTEUR.ACTFLAGTAXPROF,	R_ACTEUR.ACTDTCREAT,	R_ACTEUR.ACTDTMAJ,	R_ACTEUR.ACTTVACE,	R_ACTEUR.ACTCODERCM,	R_ACTEUR.ACTFINMOISFISC,	R_ACTEUR.ACTNUMRCM,	R_ACTEUR.ACTMEMO,	R_ACTEUR.ACTCAPITAL,	R_ACTEUR.ACTLIBCHEQUE,	R_ACTEUR.ACTREGIMETVA,	R_ACTEUR.ACTFLAGAGREMENT,	R_ACTEUR.ACTRATTACHEMENT,	R_ACTEUR.ACTDTIMMATRICULATION,	R_ACTEUR.ACTEFFECTIF,	R_ACTEUR.NACCODE,	R_ACTEUR.ACTFLAGNONDECLASSABLE,	R_ACTEUR.DOMCODE,	R_ACTEUR.ACTFLAGGROUPE,	R_ACTEUR.ACTDTDEBNAF,	R_ACTEUR.PAYCODENAF,	R_ACTEUR.PAYCODECATJURIDIQUE,	SACTTYPE,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL);
               commit;
              --DBMS_OUTPUT.PUT_LINE('OK INSERT');

        ---- SI ACTEUR PARTICULIER : INSERER DANS LE SYSNONYME AVSGMMIG.ACTEURPARTICULIER
        IF SACTTYPE = 'P' THEN

          DECLARE
            REC_ACTPART ACTEURPARTICULIER@SGM_LINK%ROWTYPE;

          BEGIN

            SELECT * INTO REC_ACTPART FROM ACTEURPARTICULIER@SGM_LINK WHERE ACTID = R_ACTEUR.ACTID;

            INSERT INTO AVSGMMIG.ACTEURPARTICULIER (ACTID,PAYCODE,APADTNAISS,APADEPTNAISS,APACOMNAISS,APANBENFANT,APASEXE,APAEMPLOYEUR,APASITFAM,APAFLAGPROPRIETE,APATITRE,APANOMMARITAL,APAREGIMEMATRIM,APAVILLENAISS,APANOMPATRONYMIQUE,APAFLAGINTERDITBANCAIRE,APAPCTCAPITAL,APAANEXPERACTIVITE,APAANEXPERIENCEFONCTION,APACODENIVEAUETUDE,APAFLAGSUCCESSIONPRET,APAFLAGHOMMECLE,APACHGREGIMEMATRIM,APAFLAGDIRIGEANT,APADIRFONCTION,APADTPERMISDECONDUIRE,APAPRENOM,APADTREGIMEMARIAGE,APACALBIRTHDAY,APAANALYST,APAEXECUTOR,APAPROBATECASE,APADTDEATH,APADTCERTIFICATE,APAASSETINVOLVED,PAYCODESTATE,PRECODESTATE,PRETYPESTATE,APADTPROBATEFILE,APADTPROBATEOPEN,PRDDEPTSTATE,APAMIDDLENAME,APAPANCARD,APAPASSPORT,APAVOTERID,APADRIVINGLICENSE,APANATIONALITY)
            VALUES (R_ACTEUR.ACTID,REC_ACTPART.PAYCODE,REC_ACTPART.APADTNAISS,REC_ACTPART.APADEPTNAISS,REC_ACTPART.APACOMNAISS,REC_ACTPART.APANBENFANT,REC_ACTPART.APASEXE,REC_ACTPART.APAEMPLOYEUR,REC_ACTPART.APASITFAM,REC_ACTPART.APAFLAGPROPRIETE,REC_ACTPART.APATITRE,REC_ACTPART.APANOMMARITAL,REC_ACTPART.APAREGIMEMATRIM,REC_ACTPART.APAVILLENAISS,REC_ACTPART.APANOMPATRONYMIQUE,REC_ACTPART.APAFLAGINTERDITBANCAIRE,REC_ACTPART.APAPCTCAPITAL,REC_ACTPART.APAANEXPERACTIVITE,REC_ACTPART.APAANEXPERIENCEFONCTION,REC_ACTPART.APACODENIVEAUETUDE,REC_ACTPART.APAFLAGSUCCESSIONPRET,REC_ACTPART.APAFLAGHOMMECLE,REC_ACTPART.APACHGREGIMEMATRIM,REC_ACTPART.APAFLAGDIRIGEANT,REC_ACTPART.APADIRFONCTION,REC_ACTPART.APADTPERMISDECONDUIRE,REC_ACTPART.APAPRENOM,REC_ACTPART.APADTREGIMEMARIAGE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

            UPDATE ACTEURPARTICULIER@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
          --DBMS_OUTPUT.PUT_LINE('done ACTEURPARTICULIER');
           commit;
          EXCEPTION
            WHEN OTHERS THEN
              ERR_CODE := SQLCODE;
              ERR_MESSAGE := SQLERRM;
              UPDATE ACTEURPARTICULIER@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
                     commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTEURPARTICULIER');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
          END;

        END IF;




		UPDATE ACTEUR@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
        --DBMS_OUTPUT.PUT_LINE('done ACTEUR');
			EXCEPTION
				WHEN OTHERS THEN
              ERR_CODE := SQLCODE;
              ERR_MESSAGE := SQLERRM;
					UPDATE ACTEUR@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
                    commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTEUR');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
			END;

      END;

        ---- INSERER LE CONTENU DES CUSTOM CHARACTERISTICS DE L'ACTEUR
	  OPEN C_CCHVALUE(R_ACTEUR.ACTID);
      LOOP
        FETCH C_CCHVALUE INTO R_CCHVALUE;
        EXIT WHEN C_CCHVALUE%NOTFOUND;
        DECLARE
          --  L_CVAID CCHVALUE.CVAID%TYPE;
          --  NCREID_CIBLE CREVT.CREID%TYPE;
          --  SCVAPKEYVALUE CCHVALUE.CVAPKEYVALUE%TYPE;
        BEGIN

          ---- RECUPERATION D'UNE NOUVELLE SEQUENCE ACTID
      --    SELECT AVSGMMIG.SEQ_CVAID.NEXTVAL INTO L_CVAID FROM DUAL;
          ----DBMS_OUTPUT.PUT_LINE('L_CVAID = ' || L_CVAID);

          --- RECUPERER LE CREID A INSERER : A PARTIR DE LA CORRESPONDANCE V45 OU BIEN APRES L'AVOIR INSTANTANEMENT CREE VIA LA PROCEDURE P_MIGRATE_CREVT_V45
          --- SI PAS DE CREID ORIGINE, nCREID_CIBLE RECEVRA NULL
         -- P_GET_CREVT(R_CCHVALUE.CREID, NCREID_CIBLE);
		  P_MIGRATE_CREVT_V45(R_CCHVALUE.CREID,R_ACTEUR.ACTID);
          ----DBMS_OUTPUT.PUT_LINE('nCREID_CIBLE = ' || NCREID_CIBLE);

         -- SCVAPKEYVALUE := SUBSTR(R_CCHVALUE.CVAPKEYVALUE, 1, 6) || R_ACTEUR.ACTID || SUBSTR(R_CCHVALUE.CVAPKEYVALUE, LENGTH(R_CCHVALUE.CVAPKEYVALUE) - 14, 16);

          INSERT INTO AVSGMMIG.CCHVALUE (CVAID, CCHSID, ENTCODE, CVASTRINGVALUE, CVADTVALUE, CVANUMERICVALUE, CVABOOLEANVALUE, CVADT, FACID, DEPID, REGID, ANAID, AGGID, DOSIDPROSPECT, DPRVERSION, ACTID, ITRID, BIMID, DOSID, CREID, CVAPKEYVALUE, MANID, TPGCODE, VARID, ASSID, COLID, SINID, BUDID, CHAID, CEXID, COMID, ADMID)
          VALUES (R_CCHVALUE.CVAID, R_CCHVALUE.CCHSID, R_CCHVALUE.ENTCODE, R_CCHVALUE.CVASTRINGVALUE, R_CCHVALUE.CVADTVALUE, R_CCHVALUE.CVANUMERICVALUE, R_CCHVALUE.CVABOOLEANVALUE, R_CCHVALUE.CVADT, R_CCHVALUE.FACID, R_CCHVALUE.DEPID, R_CCHVALUE.REGID, R_CCHVALUE.ANAID, R_CCHVALUE.AGGID, R_CCHVALUE.DOSIDPROSPECT, R_CCHVALUE.DPRVERSION,
              R_ACTEUR.ACTID,
              R_CCHVALUE.ITRID, R_CCHVALUE.BIMID, R_CCHVALUE.DOSID,
              R_CCHVALUE.CREID,
              --R_CCHVALUE.CVAPKEYVALUE,
              'Actid-'||R_ACTEUR.ACTID||'||Ugecode-SGM||',
              NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

          ---- INSERER LA CORRESPONDANCE ENTRE L'ID DU CCHVALUE D'ORIGINE ET L'ID DU CCHVALUE CIBLE
        --  P_INSERT_CORRESPONDANCE	('CCHVALUE', R_CCHVALUE.CVAID, L_CVAID);

          UPDATE CCHVALUE@SGM_LINK SET FLAG_TRT = 'X' WHERE ENTCODE = 'ACTEUR' AND CVAID = R_CCHVALUE.CVAID;
          ------DBMS_OUTPUT.PUT_LINE('done CCHVALUE');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE CCHVALUE@SGM_LINK SET FLAG_TRT = 'E' WHERE CVAID = R_CCHVALUE.CVAID;
            ----DBMS_OUTPUT.PUT_LINE('EXCEPTION CCHVALUE');
            ----DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            ----DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;
     END LOOP;
     CLOSE C_CCHVALUE;

      ---- INSERER LES PHASES DE L'ACTEUR
	  OPEN C_ACTPHASE(R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTPHASE INTO R_PHASE;
        EXIT WHEN C_ACTPHASE%NOTFOUND;

        BEGIN
           P_MIGRATE_CREVT_V45(R_PHASE.CREID,R_ACTEUR.ACTID);

          INSERT INTO AVSGMMIG.ACTPHASE (ACTID,APHORDRE,PHACODE,PHADEST,JALCODE,APHDTDEB,UTICODE,CREID,APHDTFIN,APHDTMAJ)
          VALUES (R_ACTEUR.ACTID, R_PHASE.APHORDRE, R_PHASE.PHACODE, R_PHASE.PHADEST, R_PHASE.JALCODE, R_PHASE.APHDTDEB, R_PHASE.UTICODE,R_PHASE.CREID, R_PHASE.APHDTFIN, R_PHASE.APHDTMAJ);

          UPDATE ACTPHASE@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID AND APHORDRE = R_PHASE.APHORDRE;
          --DBMS_OUTPUT.PUT_LINE('done ACTPHASE');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTPHASE@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID AND APHORDRE = R_PHASE.APHORDRE;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTPHASE');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTPHASE;

      ---- INSERER LES ADRESSES DE L'ACTEUR
			OPEN C_ADRESSE(R_ACTEUR.ACTID);
      LOOP
        FETCH C_ADRESSE INTO R_ADRESSE;
        EXIT WHEN C_ADRESSE%NOTFOUND;

        DECLARE
          NCREID_CIBLE CREVT.CREID%TYPE;

        BEGIN

          --- TOUT D'ABORD, IL FAUT INSERER L'ADRESSE
          BEGIN
            DECLARE
              REC_ADRESSE ADRESSE@SGM_LINK%ROWTYPE;

            BEGIN


              ---- RECUPERATION DE LA LIGNE D'ADRESSE A INSERER
              SELECT * INTO REC_ADRESSE FROM ADRESSE@SGM_LINK WHERE ADRID = R_ADRESSE.ADRID;

              ---- INSERER L'ADRESSE
              INSERT INTO AVSGMMIG.ADRESSE (ADRID,PAYCODE,UTICODE,PRECODE,ADRVOIE,ADRLIEUDIT,ADRCODEPOST,ADRVILLE,ADRDTMAJ,ADRCEDEX,ADRSUBREGION,PRETYPE,ADRMSACODE,ADRLATITUDE,ADRLATITUDECARDINAL,ADRLONGITUDE,ADRLONGITUDECARDINAL,ADRBATIMENT,ADRAPPT,ADRTAXAREA,ADRDISTRICT,ADRTOWN,ADRVOIENEW,ADRCODEPOSTNEW,ADRVILLENEW,ADRCEDEXNEW,ADRSUBREGIONNEW,ADRBATIMENTNEW,ADRAPPTNEW,ADRDISTRICTNEW,ADRPCTTAX,TAXCODE,ADRTAXBALANCE,ADRSUBBUNJI,ADRSTREETCODESEQ,ADRBASGRNDAIR,ADRBLDGMAIN,ADRBLDGSUB,ADRSTRTADDUSE,ADRMAINBUNJI,ADRRANGE,ADRBLDGCODESEQ,ADRSTREETNUMBER,ADRROADTYPE)
              VALUES (REC_ADRESSE.ADRID,REC_ADRESSE.PAYCODE,REC_ADRESSE.UTICODE,REC_ADRESSE.PRECODE,REC_ADRESSE.ADRVOIE,REC_ADRESSE.ADRLIEUDIT,	REC_ADRESSE.ADRCODEPOST,	REC_ADRESSE.ADRVILLE,	REC_ADRESSE.ADRDTMAJ,	REC_ADRESSE.ADRCEDEX,	REC_ADRESSE.ADRSUBREGION,	REC_ADRESSE.PRETYPE,	REC_ADRESSE.ADRMSACODE,	REC_ADRESSE.ADRLATITUDE,	REC_ADRESSE.ADRLATITUDECARDINAL,	REC_ADRESSE.ADRLONGITUDE,	REC_ADRESSE.ADRLONGITUDECARDINAL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL);


              UPDATE ADRESSE@SGM_LINK SET FLAG_TRT = 'X' WHERE ADRID = REC_ADRESSE.ADRID;
               commit;
             -- DBMS_OUTPUT.PUT_LINE('done ADRESSE');

            EXCEPTION
              WHEN OTHERS THEN
                ERR_CODE := SQLCODE;
                ERR_MESSAGE := SQLERRM;
                UPDATE ADRESSE@SGM_LINK SET FLAG_TRT = 'E' WHERE ADRID = REC_ADRESSE.ADRID;
                 commit;
                DBMS_OUTPUT.PUT_LINE('EXCEPTION ADRESSE');
                DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
                DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
            END;
          END;

          --- RECUPERER LE CREID DE L'ACTADRESSE A INSERER : A PARTIR DE LA CORRESPONDANCE V45 OU BIEN A APRES L'AVOIR INSTANTANEMENT CREE VIA LA PROCEDURE P_MIGRATE_CREVT_V45
          --- SI PAS DE CREID ORIGINE, nCREID_CIBLE RECEVRA NULL
        --  P_GET_CREVT(R_ADRESSE.CREID, NCREID_CIBLE);
            P_MIGRATE_CREVT_V45(R_ADRESSE.CREID,R_ACTEUR.ACTID);
          ----DBMS_OUTPUT.PUT_LINE('nCREID_CIBLE = ' || NCREID_CIBLE);

          ----DBMS_OUTPUT.PUT_LINE(R_ACTEUR.ACTID|| ', ' ||	R_ADRESSE.AADORDRE|| ', ' ||	L_ADRID|| ', ' ||	R_ADRESSE.UTICODE|| ', ' ||	NCREID_CIBLE|| ', ' ||	R_ADRESSE.AADORDREREMPLACE|| ', ' ||	R_ADRESSE.AADDTDEB|| ', ' ||	R_ADRESSE.AADCOMPL|| ', ' ||	R_ADRESSE.AADDTMAJ|| ', ' ||	R_ADRESSE.AADDTREMPLACE|| ', ' ||	R_ADRESSE.AADFLAGSIEGE|| ', ' ||	R_ADRESSE.AADFLAGCOURRIER|| ', ' ||	R_ADRESSE.AADFLAGFACTURATION|| ', ' ||	R_ADRESSE.AADFLAGLIVRAISON);

          --- ENSUITE, INSERER L'ACTADRESSE
          INSERT INTO AVSGMMIG.ACTADRESSE (ACTID,AADORDRE,ADRID,UTICODE,CREID,AADORDREREMPLACE,AADDTDEB,AADCOMPL,AADDTMAJ,AADDTREMPLACE,AADFLAGSIEGE,AADFLAGCOURRIER,AADFLAGFACTURATION,AADFLAGLIVRAISON,AADTYPE,AADCHANNEL,AADDTUSED,AADERRORCODE,AADCONTACTCODE,AADCONTROLCODE)
          VALUES (R_ACTEUR.ACTID,	R_ADRESSE.AADORDRE,	R_ADRESSE.ADRID,	R_ADRESSE.UTICODE,R_ADRESSE.CREID,	R_ADRESSE.AADORDREREMPLACE,	R_ADRESSE.AADDTDEB,	R_ADRESSE.AADCOMPL,	R_ADRESSE.AADDTMAJ,	R_ADRESSE.AADDTREMPLACE,	R_ADRESSE.AADFLAGSIEGE,	R_ADRESSE.AADFLAGCOURRIER,	R_ADRESSE.AADFLAGFACTURATION,	R_ADRESSE.AADFLAGLIVRAISON,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL);

          UPDATE ACTADRESSE@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID AND AADORDRE = R_ADRESSE.AADORDRE;
           commit;
        --  DBMS_OUTPUT.PUT_LINE('done ACTADRESSE');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTADRESSE@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID AND AADORDRE = R_ADRESSE.AADORDRE;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTADRESSE');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ADRESSE;

      ---- INSERER LES ROLES DE L'ACTEUR
      OPEN C_ACTROLE(R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTROLE INTO R_ACTROLE;
        EXIT WHEN C_ACTROLE%NOTFOUND;

        DECLARE
          SROLCODE ROLE.ROLCODE%TYPE := R_ACTROLE.ROLCODE;

        BEGIN



          ---- INSERER LES ACTROLE
          INSERT INTO AVSGMMIG.ACTROLE (ACTID,ROLCODE,ARONBEXFAC,ARORECAPFAC,AROGRPFAC,AROGRPPREL,AROREFEXTERNE,AROFACAVANCE,AROPERIODE,AROMULTIPLE,AROEDITFAC,AROGRPDEC,AROENVOINOTICE,AROFORMATSORTIE,AROINVOICEMETHOD,AROFLAGSPECCARE,AROSPECAREOPT,AROSPECCAREMEMO,AROSPECCAREDOC,ARODTSPECCAREREG,DPTCODESPECCARE,UTICODESPECCARE,UTICODEHQSPECCARE)
          VALUES (R_ACTEUR.ACTID,SROLCODE,R_ACTROLE.ARONBEXFAC,R_ACTROLE.ARORECAPFAC,R_ACTROLE.AROGRPFAC,R_ACTROLE.AROGRPPREL,R_ACTROLE.AROREFEXTERNE,R_ACTROLE.AROFACAVANCE,R_ACTROLE.AROPERIODE,R_ACTROLE.AROMULTIPLE,R_ACTROLE.AROEDITFAC,R_ACTROLE.AROGRPDEC,R_ACTROLE.AROENVOINOTICE,R_ACTROLE.AROFORMATSORTIE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

          UPDATE ACTROLE@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done ACTROLE');
        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTROLE@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTROLE');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTROLE;

      ---- INSERER LES TELECOM DE L'ACTEUR
      OPEN C_ACTTELECOM (R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTTELECOM INTO R_ACTTELECOM;
        EXIT WHEN C_ACTTELECOM%NOTFOUND;

        BEGIN

          ---- INSERER LES ACTTELECOM
          INSERT INTO AVSGMMIG.ACTTELECOM (ACTID,ATEORDRE,ATENUM,ATETYPE,ATEDTEFFET,ATEDTFIN,ATEFLAGPREFERE,ATEDOMAIN,ATEFLAGASSENT,ATEEXTENSION,ATECHANNEL,ATEDTUSED,ATEERRORCODE,ATECONTACTCODE,ATECONTROLCODE,ATEFLAGOFFTIME)
          VALUES (R_ACTEUR.ACTID, R_ACTTELECOM.ATEORDRE, R_ACTTELECOM.ATENUM, R_ACTTELECOM.ATETYPE, R_ACTTELECOM.ATEDTEFFET, R_ACTTELECOM.ATEDTFIN, R_ACTTELECOM.ATEFLAGPREFERE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

          UPDATE ACTTELECOM@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done ACTTELECOM');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTTELECOM@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTTELECOM');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTTELECOM;

      ---- INSERER LES ACTCORRESPONDANT DE L'ACTEUR
      OPEN C_ACTCORRESPONDANT (R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTCORRESPONDANT INTO R_ACTCORRESPONDANT;
        EXIT WHEN C_ACTCORRESPONDANT%NOTFOUND;

        BEGIN

          ---- INSERER LES ACTCORRESPONDANT
          INSERT INTO AVSGMMIG.ACTCORRESPONDANT (ACTID,ACOORDRE,ACONOM,ACOQUALITE,ACOTITRE,ACOFLAGPREFERE,ACOPRENOM,ACOINITIALAUTREPRENOM,ACODTSTART,ACODTEND,ACOCHARACTER,ACODECISION,ACOQUALIFICATION,ACOSIRET,ACODTBIRTHDAY,ACOCALBIRTHDAY,ACODTWEDDING,ACOSEX,ACOMEMO,ACOWEDDINGCODE,ACOFOREIGNNAME,ACTIDEMPLOYER,ACOQUALIFCLASS,DOSID,DOSIDPROSPECT,ACOERRORCODE,ACOCONTACTCODE,ACOCONTROLCODE,ACODTDECISION)
          VALUES (R_ACTEUR.ACTID,R_ACTCORRESPONDANT.ACOORDRE,R_ACTCORRESPONDANT.ACONOM,R_ACTCORRESPONDANT.ACOQUALITE,R_ACTCORRESPONDANT.ACOTITRE,R_ACTCORRESPONDANT.ACOFLAGPREFERE,R_ACTCORRESPONDANT.ACOPRENOM,R_ACTCORRESPONDANT.ACOINITIALAUTREPRENOM, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);

          UPDATE ACTCORRESPONDANT@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done ACTCORRESPONDANT');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTCORRESPONDANT@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTCORRESPONDANT');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTCORRESPONDANT;
     --INSERER LES RELATIONS DES ACTEURS 
      ---- INSERER LES ACRELATION DE L'ACTEUR
     /* OPEN C_ACTRELATION (R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTRELATION INTO R_ACTRELATION;
        EXIT WHEN C_ACTRELATION%NOTFOUND;

        BEGIN

          ---- INSERER LES ACTRELATION
          INSERT INTO AVSGMMIG.ACTRELATION (ACTID, TRECODE, ACTIDRELATION, AREDTDEB, AREQP, AREDTFIN, AGGID, ARECHANNEL, ROLCODE, RREORDER)
          VALUES (R_ACTEUR.ACTID,R_ACTRELATION.TRECODE,R_ACTRELATION.ACTIDRELATION,R_ACTRELATION.AREDTDEB,R_ACTRELATION.AREQP,R_ACTRELATION.AREDTFIN,R_ACTRELATION.AGGID,null,null,null);

          UPDATE actrelation@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
          --DBMS_OUTPUT.PUT_LINE('done actrelation');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE actrelation@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
            --DBMS_OUTPUT.PUT_LINE('EXCEPTION actrelation');
            --DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            --DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTRELATION;*/

 ---- INSERER LES ACTTCOVALEUR 

      OPEN C_ACTTCOVALEUR (R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTTCOVALEUR INTO R_ACTTCOVALEUR;
        EXIT WHEN C_ACTTCOVALEUR%NOTFOUND;

        BEGIN


          INSERT INTO AVSGMMIG.ACTTCOVALEUR (ACTID, ATVORDRE, TCOID, TVACODE, ATVDTDEB, CREID, UTICODE, ATVDTMAJ, ATVDTFIN, ATVCODEEXTERNE, ATVETABLISSEMENTPILOTE, ATVETABLISSEMENTCOTEUR, ATVFLAGFORCE,ATVCOMMENT,ATVSCORE,ATVDTVALIDITY,ATVPERIOD)
          VALUES (R_ACTEUR.ACTID,R_ACTTCOVALEUR.ATVORDRE,R_ACTTCOVALEUR.TCOID, R_ACTTCOVALEUR.TVACODE, R_ACTTCOVALEUR.ATVDTDEB, null, R_ACTTCOVALEUR.UTICODE, R_ACTTCOVALEUR.ATVDTMAJ,R_ACTTCOVALEUR.ATVDTFIN, R_ACTTCOVALEUR.ATVCODEEXTERNE,R_ACTTCOVALEUR.ATVETABLISSEMENTPILOTE, R_ACTTCOVALEUR.ATVETABLISSEMENTCOTEUR, R_ACTTCOVALEUR.ATVFLAGFORCE,null,null,null,null);

          UPDATE ACTTCOVALEUR@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done ACTTCOVALEUR');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTTCOVALEUR@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTTCOVALEUR');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTTCOVALEUR;
       ---- INSERER LES ACTEXERCICE 

      OPEN C_ACTEXERCICE (R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTEXERCICE INTO R_ACTEXERCICE;
        EXIT WHEN C_ACTEXERCICE%NOTFOUND;

        BEGIN


          INSERT INTO AVSGMMIG.ACTEXERCICE (ACTID, AEXEXERCICE, DEVCODE, AEXANNEEDEB, AEXMOISDEB, AEXANNEEFIN, AEXMOISFIN, AEXDTSAISIE, AEXDTCLOTURE, AEXNBMOISOUVERT, AEXPCTRECUPTVAP, AEXPCTRECUPTVAD, AEXTYPECLOTURE, AEXDTVATFROM, AEXMTMINDVD, AEXMTCOMPANYVALUE)
          VALUES (R_ACTEUR.ACTID,R_ACTEXERCICE.AEXEXERCICE,R_ACTEXERCICE.DEVCODE,R_ACTEXERCICE.AEXANNEEDEB,R_ACTEXERCICE.AEXMOISDEB,R_ACTEXERCICE.AEXANNEEFIN,R_ACTEXERCICE.AEXMOISFIN, R_ACTEXERCICE.AEXDTSAISIE,R_ACTEXERCICE.AEXDTCLOTURE,R_ACTEXERCICE.AEXNBMOISOUVERT,R_ACTEXERCICE.AEXPCTRECUPTVAP,R_ACTEXERCICE.AEXPCTRECUPTVAD,R_ACTEXERCICE.AEXTYPECLOTURE,R_ACTEXERCICE.AEXDTVATFROM,R_ACTEXERCICE.AEXMTMINDVD,R_ACTEXERCICE.AEXMTCOMPANYVALUE);

          UPDATE ACTEXERCICE@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done ACTEXERCICE');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTEXERCICE@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTEXERCICE');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTEXERCICE;
      --- INSERER LE LIEN ENTRE LES ACTCORRESPONDANT ET LES ADRESSES
      OPEN C_LKACTCORADR (R_ACTEUR.ACTID);
      LOOP
        FETCH C_LKACTCORADR INTO R_LKACTCORADR;
        EXIT WHEN C_LKACTCORADR%NOTFOUND;

        BEGIN
          ----DBMS_OUTPUT.PUT_LINE(R_ACTEUR.ACTID|| ', ' ||	R_LKACTCORADR.ACOORDRE || ', ' ||	R_LKACTCORADR.AADORDRE);
          ---- INSERER LES LKACTCORADR
          INSERT INTO AVSGMMIG.LKACTCORADR (ACTID,ACOORDRE,AADORDRE)
          VALUES (R_ACTEUR.ACTID,R_LKACTCORADR.ACOORDRE,R_LKACTCORADR.AADORDRE);

          UPDATE LKACTCORADR@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID AND ACOORDRE = R_LKACTCORADR.ACOORDRE AND AADORDRE = R_LKACTCORADR.AADORDRE;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done LKACTCORADR');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE LKACTCORADR@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID AND ACOORDRE = R_LKACTCORADR.ACOORDRE AND AADORDRE = R_LKACTCORADR.AADORDRE;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION LKACTCORADR');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_LKACTCORADR;

      --- INSERER LE LIEN ENTRE LES ACTTELECOM ET LES ACTCORRESPONDANT
      OPEN C_LKACTTELCOR (R_ACTEUR.ACTID);
      LOOP
        FETCH C_LKACTTELCOR INTO R_LKACTTELCOR;
        EXIT WHEN C_LKACTTELCOR%NOTFOUND;

        BEGIN

          ---- INSERER LES LKACTTELCOR
          INSERT INTO AVSGMMIG.LKACTTELCOR (ACTID,ATEORDRE,ACOORDRE,ATCFLAGPREFERE)
          VALUES (R_ACTEUR.ACTID,R_LKACTTELCOR.ATEORDRE,R_LKACTTELCOR.ACOORDRE,R_LKACTTELCOR.ATCFLAGPREFERE);

          UPDATE LKACTTELCOR@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID AND ATEORDRE = R_LKACTTELCOR.ATEORDRE AND ACOORDRE = R_LKACTTELCOR.ACOORDRE;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done LKACTTELCOR');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE LKACTTELCOR@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID AND ATEORDRE = R_LKACTTELCOR.ATEORDRE AND ACOORDRE = R_LKACTTELCOR.ACOORDRE;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION LKACTTELCOR');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_LKACTTELCOR;

      --- INSERER LES RIB DE L'ACTEUR
      OPEN C_ACTRIB (R_ACTEUR.ACTID);
      LOOP
        FETCH C_ACTRIB INTO R_ACTRIB;
        EXIT WHEN C_ACTRIB%NOTFOUND;

        --DECLARE
         -- NCREID_CIBLE CREVT.CREID%TYPE;
        --  NRIBID_CIBLE RIB.RIBID%TYPE;
        BEGIN

          --- TOUT D'ABORD, IL FAUT RECUPERER LE RIBID DE L'ACTRIB A INSERER : A PARTIR DE LA CORRESPONDANCE V45 OU BIEN A APRES L'AVOIR INSTANTANEMENT CREE VIA LA PROCEDURE P_MIGRATE_RIB_V45
          --- SI PAS DE RIBID ORIGINE, nRIBID_CIBLE RECEVRA NULL
         -- P_GET_RIB(R_ACTRIB.RIBID, NRIBID_CIBLE);
         -- ----DBMS_OUTPUT.PUT_LINE('nRIBID_CIBLE = ' || NRIBID_CIBLE);

          --- RECUPERER LE CREID DE L'ACTRIB A INSERER : A PARTIR DE LA CORRESPONDANCE V45 OU BIEN A APRES L'AVOIR INSTANTANEMENT CREE VIA LA PROCEDURE P_MIGRATE_CREVT_V45
          --- SI PAS DE CREID ORIGINE, nCREID_CIBLE RECEVRA NULL
          --P_GET_CREVT(R_ACTRIB.CREID, NCREID_CIBLE);
          P_MIGRATE_CREVT_V45(R_ACTRIB.CREID,R_ACTEUR.ACTID);
          ------DBMS_OUTPUT.PUT_LINE('nCREID_CIBLE = ' || NCREID_CIBLE);
           P_MIGRATE_RIB_V45 (R_ACTRIB.RIBID);
           P_MIGRATE_RIB_V45 (R_ACTRIB.RIBIDREMPLACE);
         --  DBMS_OUTPUT.PUT_LINE('done RIB');									
          ---- ENSUITE, INSERER L'ACTRIB
          INSERT INTO AVSGMMIG.ACTRIB (ACTID,RIBID,RIBIDREMPLACE,CREID,ARIDTREMPLACE,ARIDTDEB,ARITYPE,RIBIDINTERMEDIATE,ARIFLAGBLOCKED,ARIBLKREASON,ARICODEBANK,ARIDACOM,ARIDACOM2,ARIPWD,ARIDTVALIDATE,ARIFLAGCERREQ,ARICERREQREASON,ARISSN)
          VALUES (R_ACTEUR.ACTID,R_ACTRIB.RIBID, R_ACTRIB.RIBIDREMPLACE, null, R_ACTRIB.ARIDTREMPLACE, R_ACTRIB.ARIDTDEB,R_ACTRIB.ARITYPE,R_ACTRIB.RIBIDINTERMEDIATE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

          UPDATE ACTRIB@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID AND RIBID = R_ACTRIB.RIBID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done ACTRIB');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE ACTRIB@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID AND RIBID = R_ACTRIB.RIBID;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION ACTRIB');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_ACTRIB;

      --- INSERER LES AROAGE DE L'ACTEUR
      OPEN C_AROAGE (R_ACTEUR.ACTID);
      LOOP
        FETCH C_AROAGE INTO R_AROAGE;
        EXIT WHEN C_AROAGE%NOTFOUND;
        --DBMS_OUTPUT.PUT_LINE('insertion AROAGE');

        DECLARE
          --NRUBID_CORRESP NUMBER;
          NACTID_ACTGESTION NUMBER;
          SROLCODE ROLE.ROLCODE%TYPE := R_AROAGE.ROLCODE;
          NTCIID_ACTGESTION NUMBER;
        --  NTAXCODE_CIBLE VARCHAR2(10) := R_AROAGE.TAXCODE;
        BEGIN
          ---- RECUPERER LE RUBID CORRESPONDANT DANS LE SCHEMA CIBLE
       --   NRUBID_CORRESP  := F_GET_CORRESPONDANCE_RUB (R_AROAGE.RUBID);

          ---- RECUPERER L'ACTID DE L'ACTEUR DE GESTION DANS LE SCHEMA CIBLE
          SELECT ACTID INTO NACTID_ACTGESTION FROM AVSGMMIG.ACTEUR WHERE ACTCODE = 'SGM';

          --- RECUPERER LA CORRESPONDANCE DU ROLE 'JUSTICE'
         -- IF SROLCODE = 'JUSTICE' THEN
         ----   SROLCODE := 'GDT';
         -- END IF;

          ---- RECUPERER LE TCIID UTILISE POUR L'ACTEUR DE GESTION SOURCE DANS LE SCHEMA CIBLE
          SELECT TCIID INTO NTCIID_ACTGESTION FROM AVSGMMIG.TCALCULINTERET WHERE TCICODE = '02';

         -- IF NTAXCODE_CIBLE = 'TVA' THEN
         --   NTAXCODE_CIBLE := 'TVASN';
        --  END IF;

          ---- INSERER LES AROAGE
          INSERT INTO AVSGMMIG.AROAGE (ACTID,ROLCODE,ACTIDGESTION,AAGDTVALID,TMPCODE,TAXCODE,RUBID,TCIID,TMPCODEENC,FTVIDPLAFOND,FTVIDPLANCHER,AAGDTFIN,AAGDELAIPMT,AAGBASEDEPART,AAGJOUR,AAGPCTESCOMPTE,AAGFLAGIRFACTURE,AAGFLAGIRFACSEPARE,AAGFLAGIRCHQ,AAGFMTIRMINIMAL,AAGMTIRFORFAIT,AAGTXIRPLANCHER,AAGTXIRPLAFOND,AAGIRMARGE,AAGIRTXFIXE,AAGPCTIRFORFAIT,AAGBLOCAGERELANCE,AAGMOTIFNONRELANCE,AAGENVOINOTICE,AAGIRSEUILRETARD,AAGIRDELAITOLERANCE,AAGIRDELAIPMT,AAGDTENDNOREMIND,AAGTYPENOREMIND,AAGIRFLOORTYPE,AAGIRCAPTYPE,AAGQUANTIEMEFAC,AAGDELAIPMTENC,CARID,PHACODE,JALCODE,PHADEST,CREID,AAGREFEXTERNE,AAGFLEETREGISTERREASON,AAGCWBRANCHDEPT,AAGCWREJECTREASON,AAGREGDOC,AAGCANREGDOC,AAGCANREATYPE,AAGCANREASON,AAGFLAGREREG,AAGFLAGLOCALEVATENC,AAGFLAGLOCALEVATDEC,AAGTERCHANNEL,AAGTERREASON)
          VALUES (R_ACTEUR.ACTID,SROLCODE,NACTID_ACTGESTION,R_AROAGE.AAGDTVALID,R_AROAGE.TMPCODE,R_AROAGE.TAXCODE,R_AROAGE.RUBID,NTCIID_ACTGESTION,R_AROAGE.TMPCODEENC,	R_AROAGE.FTVIDPLAFOND,	R_AROAGE.FTVIDPLANCHER,	R_AROAGE.AAGDTFIN,	R_AROAGE.AAGDELAIPMT,	R_AROAGE.AAGBASEDEPART,	R_AROAGE.AAGJOUR,	R_AROAGE.AAGPCTESCOMPTE,	R_AROAGE.AAGFLAGIRFACTURE,	R_AROAGE.AAGFLAGIRFACSEPARE,	R_AROAGE.AAGFLAGIRCHQ,	R_AROAGE.AAGFMTIRMINIMAL,	R_AROAGE.AAGMTIRFORFAIT,	R_AROAGE.AAGTXIRPLANCHER,	R_AROAGE.AAGTXIRPLAFOND,	R_AROAGE.AAGIRMARGE,	R_AROAGE.AAGIRTXFIXE,	R_AROAGE.AAGPCTIRFORFAIT,	R_AROAGE.AAGBLOCAGERELANCE,	R_AROAGE.AAGMOTIFNONRELANCE,	R_AROAGE.AAGENVOINOTICE,	R_AROAGE.AAGIRSEUILRETARD,	R_AROAGE.AAGIRDELAITOLERANCE,	R_AROAGE.AAGIRDELAIPMT,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL,	NULL, NULL);

          UPDATE AROAGE@SGM_LINK SET FLAG_TRT = 'X' WHERE ACTID = R_ACTEUR.ACTID;
          --DBMS_OUTPUT.PUT_LINE('done AROAGE');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE AROAGE@SGM_LINK SET FLAG_TRT = 'E' WHERE ACTID = R_ACTEUR.ACTID;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION AROAGE');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_AROAGE;
	  ------------------------------INSERER DANS LA TABLE UTITSM LES UTILSATEURS DONT LA METIER EST DIR.COM OU AGENT RECOUVERMENT -----------------------------------
	    OPEN C_UTITSM (R_ACTEUR.ACTID);
      LOOP
        FETCH C_UTITSM INTO R_UTITSM;
        EXIT WHEN C_UTITSM%NOTFOUND;

        BEGIN


          INSERT INTO AVSGMMIG.UTITSM  (UTICODE,TSMSECTGESTION,TSMMETIER,TSMFLAGSUPERVISEUR,TSMFLAGDEFAUT,TSMPARTNAME,TSMCOUNGR,TSMCOUNEGE,TSMDTSTART,TSMDTEND,TSMINCOMINGPATH,TSMFLAGLEADER,TSMSALESNETWORK,TSMTEAMCODE,TSMMAXASSIGN,ACTID,TSMSTATUS,TSMSUPERVISORTYPE) 
          VALUES (R_UTITSM.UTICODE,R_UTITSM.TSMSECTGESTION,R_UTITSM.TSMMETIER, R_UTITSM.TSMFLAGSUPERVISEUR ,R_UTITSM.TSMFLAGDEFAUT,NULL,NULL,NULL,SYSDATE, NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

          UPDATE UTITSM@SGM_LINK SET FLAG_TRT = 'X' WHERE UTICODE = R_UTITSM.UTICODE AND TSMMETIER =R_UTITSM.TSMMETIER;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done UTITSM');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE UTITSM@SGM_LINK SET FLAG_TRT = 'E' WHERE UTICODE = R_UTITSM.UTICODE AND TSMMETIER =R_UTITSM.TSMMETIER;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION UTITSM');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_UTITSM;
------------------------------------------------INSERER DANS LA TABLE LKACTUTITSM ES UTILSATEUR DONT LA METIER EST DIR.COM OU AGENT RECOUVERMENT
  OPEN C_LKACTUTITSM (R_ACTEUR.ACTID);
      LOOP
        FETCH C_LKACTUTITSM INTO R_LKACTUTITSM;
        EXIT WHEN C_LKACTUTITSM%NOTFOUND;

        BEGIN


          INSERT INTO AVSGMMIG.LKACTUTITSM  (ACTID,TSMSECTGESTION,TSMMETIER,UTICODE,ASMMEMO) 
          VALUES (R_LKACTUTITSM.ACTID,R_LKACTUTITSM.TSMSECTGESTION,R_LKACTUTITSM.TSMMETIER, R_LKACTUTITSM.UTICODE ,R_LKACTUTITSM.ASMMEMO);

          UPDATE LKACTUTITSM@SGM_LINK SET FLAG_TRT = 'X' WHERE UTICODE = R_LKACTUTITSM.UTICODE AND TSMMETIER =R_LKACTUTITSM.TSMMETIER AND ACTID =R_ACTEUR.ACTID;
           commit;
          --DBMS_OUTPUT.PUT_LINE('done LKACTUTITSM');

        EXCEPTION
          WHEN OTHERS THEN
            ERR_CODE := SQLCODE;
            ERR_MESSAGE := SQLERRM;
            UPDATE LKACTUTITSM@SGM_LINK SET FLAG_TRT = 'E' WHERE UTICODE = R_LKACTUTITSM.UTICODE AND TSMMETIER =R_LKACTUTITSM.TSMMETIER AND ACTID =R_ACTEUR.ACTID;;
             commit;
            DBMS_OUTPUT.PUT_LINE('EXCEPTION LKACTUTITSM');
            DBMS_OUTPUT.PUT_LINE('err_code : ' ||ERR_CODE);
            DBMS_OUTPUT.PUT_LINE('err_message : ' ||SUBSTR(ERR_MESSAGE, 1, 200));
        END;

      END LOOP;
      CLOSE C_LKACTUTITSM;
		END LOOP;
    CLOSE C_ACTEUR;

    --P_MIGRATE_REMAINING_CREVTS_V45('ACTEUR');

	END;
END;