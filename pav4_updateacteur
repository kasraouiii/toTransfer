create or replace PACKAGE BODY pav4_updateacteur
AS
    -- Declaration des exceptions a trapper
    ERR_CHILD_FOUND                          EXCEPTION;
    ERR_PARENT_NOT_FOUND                     EXCEPTION;
    ERR_I_NULL_MANDATORY_KEY                 EXCEPTION;
    ERR_U_NULL_MANDATORY_KEY                 EXCEPTION;
    -- Association des exceptions avec les erreurs ORACLE
    PRAGMA EXCEPTION_INIT (ERR_PARENT_NOT_FOUND, -2291);
    PRAGMA EXCEPTION_INIT (ERR_CHILD_FOUND, -2292);
    PRAGMA EXCEPTION_INIT (ERR_I_NULL_MANDATORY_KEY, -1400);
    PRAGMA EXCEPTION_INIT (ERR_U_NULL_MANDATORY_KEY, -1407);
    -- Declaration des constantes de codes retours a renvoyer
    ERR_CHILD_FOUND_CONST           CONSTANT INTEGER := 1045;
    ERR_PARENT_NOT_FOUND_CONST      CONSTANT INTEGER := 1044;
    ERR_DUP_VAL_ON_INDEX_CONST      CONSTANT INTEGER := 1046;
    ERR_NULL_MANDATORY_KEY_CONST    CONSTANT INTEGER := 1055;
    ERR_NO_ROWS_CONST               CONSTANT INTEGER := 1;
    ERR_VAL_CORRESP_NULL_CONST      CONSTANT INTEGER := 1056;
    ERR_VAL_ROLE_NULL_CONST         CONSTANT INTEGER := 1057;
    ERR_VAL_STAT_NULL_CONST         CONSTANT INTEGER := 1058;
    ERR_VAL_TELECOM_NULL_CONST      CONSTANT INTEGER := 1059;
    ERR_VAL_BAFI_NULL_CONST         CONSTANT INTEGER := 1060;
    ERR_VAL_RELAT_NULL_CONST        CONSTANT INTEGER := 1061;
    ERR_VAL_ADR_NULL_CONST          CONSTANT INTEGER := 1501;
    ERR_VAL_ACT_NULL_CONST          CONSTANT INTEGER := 1502;
    ERR_VAL_RIB_NULL_CONST          CONSTANT INTEGER := 1503;
    ERR_VAL_AAD_NULL_CONST          CONSTANT INTEGER := 1504;
    ERR_VAL_APH_NULL_CONST          CONSTANT INTEGER := 1505;
    ERR_VAL_ARE_NULL_CONST          CONSTANT INTEGER := 1506;
    ERR_VAL_AGE_NULL_CONST          CONSTANT INTEGER := 1507;
    ERR_VAL_BGU_NULL_CONST          CONSTANT INTEGER := 1508;
    ERR_VAL_AGM_NULL_CONST          CONSTANT INTEGER := 1509;
    ERR_VAL_APE_NULL_CONST          CONSTANT INTEGER := 1510;
    ERR_VAL_AAA_NULL_CONST          CONSTANT INTEGER := 1511;
    ERR_VAL_AEX_NULL_CONST          CONSTANT INTEGER := 1512;
    ERR_VAL_APR_NULL_CONST          CONSTANT INTEGER := 1513;
    ERR_VAL_APJ_NULL_CONST          CONSTANT INTEGER := 1514;
    ERR_VAL_APM_NULL_CONST          CONSTANT INTEGER := 1515;
    ERR_VAL_ARI_NULL_CONST          CONSTANT INTEGER := 1704;
    ERR_VAL_RIN_NULL_CONST          CONSTANT INTEGER := 1705;
    ERR_VAL_LAT_NULL_CONST          CONSTANT INTEGER := 1706;
    ERR_VAL_ADM_NULL_CONST          CONSTANT INTEGER := 1408;
    ERR_VAL_RAT_NULL_CONST          CONSTANT INTEGER := 2250;
    ERR_VAL_ADU_NULL_CONST          CONSTANT INTEGER := 5432;
    -- LG 20/09/2002 FSA
    ERR_VAL_DMA_NULL_CONST          CONSTANT INTEGER := 6457;
    ERR_VAL_CPO_NULL_CONST          CONSTANT INTEGER := 6462;
    ERR_VAL_APG_NULL_CONST          CONSTANT INTEGER := 6463;
    ERR_VAL_APP_NULL_CONST          CONSTANT INTEGER := 6464;
    ERR_VAL_APA_NULL_CONST          CONSTANT INTEGER := 6465;
    ERR_DUP_VAL_ON_TELCOR_CONST     CONSTANT INTEGER := 1062;
    ERR_DUP_VAL_ON_ACTEUR_CONST     CONSTANT INTEGER := 1063;
    ERR_DUP_VAL_ON_ADR_CONST        CONSTANT INTEGER := 1065;
    ERR_DUP_VAL_ON_ACO_CONST        CONSTANT INTEGER := 1517;
    ERR_DUP_VAL_ON_APH_CONST        CONSTANT INTEGER := 1518;
    ERR_DUP_VAL_ON_ARE_CONST        CONSTANT INTEGER := 1519;
    ERR_DUP_VAL_ON_RIB_CONST        CONSTANT INTEGER := 1520;
    ERR_DUP_VAL_ON_RIN_CONST        CONSTANT INTEGER := 1521;
    ERR_DUP_VAL_ON_ARO_CONST        CONSTANT INTEGER := 1522;
    ERR_DUP_VAL_ON_AST_CONST        CONSTANT INTEGER := 1523;
    ERR_DUP_VAL_ON_ATE_CONST        CONSTANT INTEGER := 1524;
    ERR_DUP_VAL_ON_ACT_CONST        CONSTANT INTEGER := 1525;
    ERR_DUP_VAL_ON_AAD_CONST        CONSTANT INTEGER := 1526;
    ERR_DUP_VAL_ON_APA_CONST        CONSTANT INTEGER := 1527;
    ERR_DUP_VAL_ON_AGE_CONST        CONSTANT INTEGER := 1528;
    ERR_DUP_VAL_ON_BGU_CONST        CONSTANT INTEGER := 1529;
    ERR_DUP_VAL_ON_ATA_CONST        CONSTANT INTEGER := 1530;
    ERR_DUP_VAL_ON_ADM_CONST        CONSTANT INTEGER := 1531;
    ERR_DUP_VAL_ON_AGM_CONST        CONSTANT INTEGER := 1532;
    ERR_DUP_VAL_ON_APE_CONST        CONSTANT INTEGER := 1533;
    ERR_DUP_VAL_ON_ARI_CONST        CONSTANT INTEGER := 1534;
    ERR_DUP_VAL_ON_AAA_CONST        CONSTANT INTEGER := 1535;
    ERR_DUP_VAL_ON_AEX_CONST        CONSTANT INTEGER := 1536;
    ERR_DUP_VAL_ON_APR_CONST        CONSTANT INTEGER := 1537;
    ERR_DUP_VAL_ON_APJ_CONST        CONSTANT INTEGER := 1538;
    ERR_DUP_VAL_ON_APM_CONST        CONSTANT INTEGER := 1539;
    ERR_DUP_VAL_ON_RAT_CONST        CONSTANT INTEGER := 2251;
    ERR_DUP_VAL_ON_CPO_CONST        CONSTANT INTEGER := 4121;
    ERR_DUP_VAL_ON_ADU_CONST        CONSTANT INTEGER := 5433;
    --LG FSA 20/09/2002
    ERR_DUP_VAL_ON_DMA_CONST        CONSTANT INTEGER := 6467;
    ERR_DUP_VAL_ON_APG_CONST        CONSTANT INTEGER := 6472;
    ERR_DUP_VAL_ON_APP_CONST        CONSTANT INTEGER := 6473;
    ERR_DUP_VAL_ON_APD_CONST        CONSTANT INTEGER := 6474;
    ERR_CHILD_ADR_FOUND_CONST       CONSTANT INTEGER := 1685;
    ERR_CHILD_ACT_FOUND_CONST       CONSTANT INTEGER := 1686;
    ERR_CHILD_AAD_FOUND_CONST       CONSTANT INTEGER := 1687;
    ERR_CHILD_ACO_FOUND_CONST       CONSTANT INTEGER := 1688;
    ERR_CHILD_ARE_FOUND_CONST       CONSTANT INTEGER := 1689;
    ERR_CHILD_RIN_FOUND_CONST       CONSTANT INTEGER := 1690;
    ERR_CHILD_ARI_FOUND_CONST       CONSTANT INTEGER := 1691;
    ERR_CHILD_ARO_FOUND_CONST       CONSTANT INTEGER := 1692;
    ERR_CHILD_AST_FOUND_CONST       CONSTANT INTEGER := 1693;
    ERR_CHILD_ATE_FOUND_CONST       CONSTANT INTEGER := 1694;
    ERR_CHILD_ADM_FOUND_CONST       CONSTANT INTEGER := 1695;
    ERR_CHILD_AGM_FOUND_CONST       CONSTANT INTEGER := 1696;
    ERR_CHILD_APE_FOUND_CONST       CONSTANT INTEGER := 1697;
    ERR_CHILD_AAA_FOUND_CONST       CONSTANT INTEGER := 1698;
    ERR_CHILD_AEX_FOUND_CONST       CONSTANT INTEGER := 1699;
    ERR_CHILD_APR_FOUND_CONST       CONSTANT INTEGER := 1700;
    ERR_CHILD_APJ_FOUND_CONST       CONSTANT INTEGER := 1701;
    ERR_CHILD_APM_FOUND_CONST       CONSTANT INTEGER := 1702;
    ERR_CHILD_APH_FOUND_CONST       CONSTANT INTEGER := 1703;
    ERR_CHILD_RAT_FOUND_CONST       CONSTANT INTEGER := 2252;
    ERR_CHILD_AAG_FOUND_CONST       CONSTANT INTEGER := 2671;
    ERR_CHILD_ADU_FOUND_CONST       CONSTANT INTEGER := 5434;
    -- LG 19192002 FSA
    ERR_CHILD_ATC_FOUND_CONST       CONSTANT INTEGER := 6402;
    ERR_CHILD_ATB_FOUND_CONST       CONSTANT INTEGER := 6403;
    ERR_CHILD_AAR_FOUND_CONST       CONSTANT INTEGER := 6404;
    ERR_CHILD_CPO_FOUND_CONST       CONSTANT INTEGER := 6405;
    ERR_CHILD_AAF_FOUND_CONST       CONSTANT INTEGER := 6406;
    ERR_CHILD_APG_FOUND_CONST       CONSTANT INTEGER := 6407;
    ERR_CHILD_APP_FOUND_CONST       CONSTANT INTEGER := 6408;
    ERR_CHILD_APA_FOUND_CONST       CONSTANT INTEGER := 6409;
    ERR_PARENT_ADR_FOUND_CONST      CONSTANT INTEGER := 6410;
    ERR_PARENT_ACT_FOUND_CONST      CONSTANT INTEGER := 6411;
    ERR_PARENT_AAD_FOUND_CONST      CONSTANT INTEGER := 6412;
    ERR_PARENT_ACA_FOUND_CONST      CONSTANT INTEGER := 6413;
    ERR_PARENT_DMA_FOUND_CONST      CONSTANT INTEGER := 6414;
    ERR_PARENT_ACO_FOUND_CONST      CONSTANT INTEGER := 6417;
    ERR_PARENT_ARA_FOUND_CONST      CONSTANT INTEGER := 6418;
    ERR_PARENT_APH_FOUND_CONST      CONSTANT INTEGER := 6419;
    ERR_PARENT_ARE_FOUND_CONST      CONSTANT INTEGER := 6420;
    ERR_PARENT_RIB_FOUND_CONST      CONSTANT INTEGER := 6421;
    ERR_PARENT_ARI_FOUND_CONST      CONSTANT INTEGER := 6422;
    ERR_PARENT_ATD_FOUND_CONST      CONSTANT INTEGER := 6423;
    ERR_PARENT_RIN_FOUND_CONST      CONSTANT INTEGER := 6424;
    ERR_PARENT_ARO_FOUND_CONST      CONSTANT INTEGER := 6425;
    ERR_PARENT_AST_FOUND_CONST      CONSTANT INTEGER := 6426;
    ERR_PARENT_ATE_FOUND_CONST      CONSTANT INTEGER := 6427;
    ERR_PARENT_ATC_FOUND_CONST      CONSTANT INTEGER := 6428;
    ERR_PARENT_APA_FOUND_CONST      CONSTANT INTEGER := 6429;
    ERR_PARENT_AGE_FOUND_CONST      CONSTANT INTEGER := 6430;
    ERR_PARENT_AIN_FOUND_CONST      CONSTANT INTEGER := 6431;
    ERR_PARENT_BGU_FOUND_CONST      CONSTANT INTEGER := 6432;
    ERR_PARENT_ATA_FOUND_CONST      CONSTANT INTEGER := 6433;
    ERR_PARENT_ADM_FOUND_CONST      CONSTANT INTEGER := 6434;
    ERR_PARENT_AGM_FOUND_CONST      CONSTANT INTEGER := 6435;
    ERR_PARENT_APE_FOUND_CONST      CONSTANT INTEGER := 6436;
    ERR_PARENT_AAG_FOUND_CONST      CONSTANT INTEGER := 6438;
    ERR_PARENT_AEX_FOUND_CONST      CONSTANT INTEGER := 6439;
    ERR_PARENT_APR_FOUND_CONST      CONSTANT INTEGER := 6440;
    ERR_PARENT_APJ_FOUND_CONST      CONSTANT INTEGER := 6441;
    ERR_PARENT_APM_FOUND_CONST      CONSTANT INTEGER := 6442;
    ERR_PARENT_AAR_FOUND_CONST      CONSTANT INTEGER := 6443;
    ERR_PARENT_AVE_FOUND_CONST      CONSTANT INTEGER := 6445;
    ERR_PARENT_ASP_FOUND_CONST      CONSTANT INTEGER := 6446;
    ERR_PARENT_ASM_FOUND_CONST      CONSTANT INTEGER := 6447;
    ERR_PARENT_ARY_FOUND_CONST      CONSTANT INTEGER := 6448;
    ERR_PARENT_CPO_FOUND_CONST      CONSTANT INTEGER := 6449;
    ERR_PARENT_ASG_FOUND_CONST      CONSTANT INTEGER := 6450;
    ERR_PARENT_AAF_FOUND_CONST      CONSTANT INTEGER := 6451;
    ERR_PARENT_APG_FOUND_CONST      CONSTANT INTEGER := 6452;
    ERR_PARENT_APP_FOUND_CONST      CONSTANT INTEGER := 6453;
    ERR_PARENT_PPA_FOUND_CONST      CONSTANT INTEGER := 6454;
    ERR_PARENT_AUN_FOUND_CONST      CONSTANT INTEGER := 6455;
    ERR_CRO_EXISTANT_CONST          CONSTANT INTEGER := 3133;
    ERR_CRO_GEST_ANO                CONSTANT INTEGER := 3134;
    ERR_CHILD_BGU_CONST             CONSTANT INTEGER := 1199;
    -- AAGRVE
    ERR_VAL_AVE_NULL_CONST          CONSTANT INTEGER := 3946;
    ERR_DUP_VAL_ON_AVE_CONST        CONSTANT INTEGER := 3947;
    ERR_CHILD_AVE_FOUND_CONST       CONSTANT INTEGER := 3948;
    -- ACTSPECIALITE -- CV : Gestion des fournisseurs
    ERR_CHILD_ASP_FOUND_CONST       CONSTANT INTEGER := 3995;
    ERR_DUP_VAL_ON_ASP_CONST        CONSTANT INTEGER := 4158;
    ERR_VAL_ASP_NULL_CONST          CONSTANT INTEGER := 4157;
    -- ACTSPEMETIER -- CV : Gestion des fournisseurs
    ERR_CHILD_ASM_FOUND_CONST       CONSTANT INTEGER := 3996;
    ERR_DUP_VAL_ON_ASM_CONST        CONSTANT INTEGER := 4159;
    ERR_VAL_ASM_NULL_CONST          CONSTANT INTEGER := 3946;
    -- ACTRAYONACTION -- CV : Gestion des fournisseurs
    ERR_CHILD_ARA_FOUND_CONST       CONSTANT INTEGER := 3994;
    ERR_DUP_VAL_ON_ARA_CONST        CONSTANT INTEGER := 4160;
    ERR_VAL_ARA_NULL_CONST          CONSTANT INTEGER := 3946;
    -- ACTSECTGESTION -- CV 16012001
    ERR_CHILD_ASE_FOUND_CONST       CONSTANT INTEGER := 4122;
    ERR_DUP_VAL_ON_ASE_CONST        CONSTANT INTEGER := 4123;
    ERR_VAL_ASE_NULL_CONST          CONSTANT INTEGER := 4124;
    -- ACTUNITE --
    EP_DOSACTADRESSE_NF             CONSTANT INTEGER := 1839;
    EN_DOSACTADRESSE_M_KEY_CONST    CONSTANT INTEGER := 1802;
    ERR_DUP_DOSACTADRESSE_V         CONSTANT INTEGER := 1820;
    --ALA waterfall A2
    ERR_I_PARENT_ARAC_FOUND_CONST   CONSTANT INTEGER := 9539;
    ERR_I_VAL_ARAC_NULL_CONST       CONSTANT INTEGER := 9540;
    ERR_I_DUP_VAL_ON_ARAC_CONST     CONSTANT INTEGER := 9541;
    ERR_U_PARENT_ARAC_FOUND_CONST   CONSTANT INTEGER := 9542;
    ERR_U_VAL_ARAC_NULL_CONST       CONSTANT INTEGER := 9543;
    ERR_U_DUP_VAL_ON_ARAC_CONST     CONSTANT INTEGER := 9544;
    ERR_D_CHILD_ARAC_FOUND_CONST    CONSTANT INTEGER := 9545;
    --ALA 110706 Propriete des relations
    ERR_I_PARENT_ADE_FOUND_CONST    CONSTANT INTEGER := 9616;
    ERR_I_VAL_ADE_NULL_CONST        CONSTANT INTEGER := 9617;
    ERR_I_DUP_VAL_ON_ADE_CONST      CONSTANT INTEGER := 9618;
    ERR_U_PARENT_ADE_FOUND_CONST    CONSTANT INTEGER := 9619;
    ERR_U_VAL_ADE_NULL_CONST        CONSTANT INTEGER := 9620;
    ERR_U_DUP_VAL_ON_ADE_CONST      CONSTANT INTEGER := 9621;
    ERR_D_CHILD_ADE_FOUND_CONST     CONSTANT INTEGER := 9622;
    --ALA 111006 Adresse par correspondant de l'acteur
    ERR_PARENT_I_ACA_FOUND_CONST    CONSTANT INTEGER := 9713;
    ERR_DUP_VAL_I_ACA_CONST         CONSTANT INTEGER := 9714;
    ERR_VAL_I_ACA_NULL_CONST        CONSTANT INTEGER := 9715;
    ERR_PARENT_U_ACA_FOUND_CONST    CONSTANT INTEGER := 9716;
    ERR_DUP_VAL_U_ACA_CONST         CONSTANT INTEGER := 9717;
    ERR_VAL_U_ACA_NULL_CONST        CONSTANT INTEGER := 9718;
    ERR_D_CHILD_ACA_FOUND_CONST     CONSTANT INTEGER := 9719;
    --ALA 051106 Propriete des tarifs
    ERR_I_PARENT_ASR_FOUND_CONST    CONSTANT INTEGER := 9822;
    ERR_I_VAL_ASR_NULL_CONST        CONSTANT INTEGER := 9823;
    ERR_I_DUP_VAL_ON_ASR_CONST      CONSTANT INTEGER := 9824;
    ERR_U_PARENT_ASR_FOUND_CONST    CONSTANT INTEGER := 9825;
    ERR_U_VAL_ASR_NULL_CONST        CONSTANT INTEGER := 9826;
    ERR_U_DUP_VAL_ON_ASR_CONST      CONSTANT INTEGER := 9827;
    ERR_D_CHILD_ASR_FOUND_CONST     CONSTANT INTEGER := 9828;
    --ALA 081106 attributs de la franchise
    ERR_I_PARENT_ASA_FOUND_CONST    CONSTANT INTEGER := 9829;
    ERR_I_VAL_ASA_NULL_CONST        CONSTANT INTEGER := 9830;
    ERR_I_DUP_VAL_ON_ASA_CONST      CONSTANT INTEGER := 9831;
    ERR_U_PARENT_ASA_FOUND_CONST    CONSTANT INTEGER := 9832;
    ERR_U_VAL_ASA_NULL_CONST        CONSTANT INTEGER := 9833;
    ERR_U_DUP_VAL_ON_ASA_CONST      CONSTANT INTEGER := 9834;
    ERR_D_CHILD_ASA_FOUND_CONST     CONSTANT INTEGER := 9835;
    --ALA 081106 agrement de l acteur
    ERR_I_PARENT_AAG_FOUND_CONST    CONSTANT INTEGER := 9836;
    ERR_I_VAL_AAG_NULL_CONST        CONSTANT INTEGER := 9837;
    ERR_I_DUP_VAL_ON_AAG_CONST      CONSTANT INTEGER := 9838;
    ERR_U_PARENT_AAG_FOUND_CONST    CONSTANT INTEGER := 9839;
    ERR_U_VAL_AAG_NULL_CONST        CONSTANT INTEGER := 9840;
    ERR_U_DUP_VAL_ON_AAG_CONST      CONSTANT INTEGER := 9841;
    ERR_D_CHILD_AAG_FOUND_CONST     CONSTANT INTEGER := 9842;
    --ALA 111106 Contact de la franchise
    ERR_I_PARENT_AAC_FOUND_CONST    CONSTANT INTEGER := 9867;
    ERR_I_VAL_AAC_NULL_CONST        CONSTANT INTEGER := 9868;
    ERR_I_DUP_VAL_ON_AAC_CONST      CONSTANT INTEGER := 9869;
    ERR_U_PARENT_AAC_FOUND_CONST    CONSTANT INTEGER := 9870;
    ERR_U_VAL_AAC_NULL_CONST        CONSTANT INTEGER := 9871;
    ERR_U_DUP_VAL_ON_AAC_CONST      CONSTANT INTEGER := 9872;
    ERR_D_CHILD_AAC_FOUND_CONST     CONSTANT INTEGER := 9873;
    ERR_INSERTION_CREVT             CONSTANT INTEGER := 10421;
    ERR_NAFCODE_NOTFOUND            CONSTANT INTEGER := 10478;           --ACH
    --Assent
    ERR_PARENT_ASS_FOUND_CONST      CONSTANT INTEGER := 20776;
    ERR_PARENT_ATT_FOUND_CONST      CONSTANT INTEGER := 20778;
    ERR_DUP_VAL_ON_ASSENT_CONST     CONSTANT INTEGER := 20775;
    ERR_DUP_VAL_ON_ASSATT_CONST     CONSTANT INTEGER := 20779;
    ERR_VAL_ASS_NULL_CONST          CONSTANT INTEGER := 20774;
    ERR_VAL_ASSATT_NULL_CONST       CONSTANT INTEGER := 20777;
    ERR_CHILD_ARM_FOUND_CONST       CONSTANT INTEGER := 20825;

    -- Procedures de supression --
    -- ADRESSE --
    PROCEDURE D_ADRESSE (NADRID               ADRESSE.ADRID%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ADRESSE
                  WHERE ADRID = NADRID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ADR_FOUND_CONST;
        END;
    END D_ADRESSE;

    -- ACTEUR --
    PROCEDURE D_ACTEUR (NACTID ACTEUR.ACTID%TYPE, NRETURNCODE IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            CURSOR C1
            IS
                SELECT RIBID
                  FROM ACTRIB
                 WHERE ACTID = NACTID;

            CURSOR CROLE
            IS
                SELECT ROLCODE
                  FROM ACTROLE
                 WHERE ACTID = NACTID;

            NCOUNT   NUMBER;
        BEGIN
            BEGIN
                NRETURNCODE := 0;

                DELETE FROM ADMSTATUS
                      WHERE ADMID IN (SELECT ADMID
                                        FROM ADMINISTRATIF
                                       WHERE ACTID = NACTID);

                DELETE FROM ADMINISTRATIF
                      WHERE ACTID = NACTID;

                DELETE FROM ADMSTATUS
                      WHERE ADMID IN (SELECT ADMID
                                        FROM ADMINISTRATIF
                                       WHERE ACTIDGESTION = NACTID);

                DELETE FROM ADMINISTRATIF
                      WHERE ACTIDGESTION = NACTID;

                DELETE FROM ACTRIBTMPDEFAUT
                      WHERE ACTID = NACTID;

                DELETE FROM ACTUNITE
                      WHERE ACTID = NACTID;

                DELETE FROM ACTSECTGESTION
                      WHERE ACTID = NACTID;

                FOR C1R IN C1
                LOOP
                    D_ACTRIB (C1R.RIBID, NACTID, NRETURNCODE);

                    IF (NRETURNCODE != 0)
                    THEN
                        EXIT;
                    END IF;
                END LOOP;

                IF (NRETURNCODE = 0)
                THEN
                    DELETE FROM ACTJOBHISTORY
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTALLOCATIONPRIORITY
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTFINANCIER
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTCOMPLEMENT
                          WHERE ACTID = NACTID;

                    DELETE FROM LKASPACO
                          WHERE ACTID = NACTID;

                    DELETE FROM LKACTTELCOR
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTCORRESPONDANT
                          WHERE ACTID = NACTID;

                    DELETE FROM LKACTCORADR
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTCONTACT
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTEURGROUPE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTTCOVALEUR
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTADRESSE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTRIBACCES
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTRIB
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTTELECOM
                          WHERE ACTID = NACTID;

                    --DELETE FROM ACTSTATISTIQUE WHERE ACTID = NACTID; TRUNK-2644
                    DELETE FROM ACTTAB
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTPHASE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTRELPRODETAIL
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTRELPRODETAIL
                          WHERE ACTIDRELATION = NACTID;

                    DELETE FROM ACTRELATION
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTRELATION
                          WHERE ACTIDRELATION = NACTID;

                    DELETE FROM AAGRVE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTSPEMETIER
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTSPEATTRIBUTE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTSPESERVICERATE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTSERVICEAGREEMENT
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTSPEMETIER
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTSPECIALITE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTRAYONACTION
                          WHERE ACTID = NACTID;        -- CV-18042002 FSA-8236

                    DELETE FROM AROAGE
                          WHERE ACTID = NACTID;

                    DELETE FROM AROAGE
                          WHERE ACTIDGESTION = NACTID;

                    DELETE FROM LKAVECRE
                          WHERE ACTID = NACTID;

                    DELETE FROM LKAVECRE
                          WHERE ACTIDGESTION = NACTID;

                    DELETE FROM LKAARFEC
                          WHERE ACTID = NACTID;

                    DELETE FROM LKAARFEC
                          WHERE ACTIDGESTION = NACTID;

                    DELETE FROM AROAGERELANCE
                          WHERE ACTID = NACTID;

                    DELETE FROM AROAGERELANCE
                          WHERE ACTIDGESTION = NACTID;

                    DELETE FROM ACTASSENT
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTASSATTRIBUTE
                          WHERE ACTID = NACTID;

                    DELETE FROM ACTASSMARKETPARTNER
                          WHERE ACTID = NACTID;

                    FOR C2R IN CROLE
                    LOOP
                        D_ACTROLE (NACTID, C2R.ROLCODE, NRETURNCODE);

                        IF (NRETURNCODE != 0)
                        THEN
                            EXIT;
                        END IF;
                    END LOOP;

                    IF (NRETURNCODE = 0)
                    THEN
                        DELETE FROM LKGROTACAGE
                              WHERE ACTID = NACTID;

                        DELETE FROM TACACTGESTION
                              WHERE ACTID = NACTID;

                        DELETE FROM LKTPGAGE
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEXEDPT
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEXERCICE
                              WHERE ACTID = NACTID;

                        DELETE FROM LKUTITMFACGDROIT
                              WHERE ACTID = NACTID;

                        --DELETE FROM ACTPROCREANCE WHERE ACTID= nActId;
                        --DELETE FROM ACTPROCREANCE WHERE ACTIDGESTION = nActId;
                        DELETE FROM ACTPROMANDAT
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTPROMANDAT
                              WHERE ACTIDMANDAT = NACTID;

                        DELETE FROM ACTPROJUGEMENT
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTPROAGE
                              WHERE ACTID = NACTID;             -- TD 06/06/01

                        DELETE FROM ACTPROPHAAUDIENCE
                              WHERE ACTID = NACTID;             -- TD 06/06/01

                        DELETE FROM ACTPROPHASE
                              WHERE ACTID = NACTID;             -- TD 06/06/01

                        DELETE FROM ACTPROCEDURE
                              WHERE ACTID = NACTID;

                        DELETE FROM CREVT
                              WHERE ACTID = NACTID;

                        DELETE FROM NUMEROGESTION
                              WHERE ACTID = NACTID;

                        DELETE FROM AGEGROMESURE
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTPERIMETRE
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEURPARTICULIER
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEURINDIVISION
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEURETRANGER
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEURPMORALE
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTEURGESTION
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTSECTGESTION
                              WHERE ACTID = NACTID;           -- CV : 16012001

                        DELETE FROM ACTCANBESOIN
                              WHERE ACTID = NACTID;

                        DELETE FROM ACTCANDIDATURE
                              WHERE ACTID = NACTID;

                        DELETE FROM LKACTUTITSM
                              WHERE ACTID = NACTID;

                        DELETE FROM AGERACHAT
                              WHERE ACTID = NACTID;

                        DELETE FROM CCHVALUE
                              WHERE ACTID = NACTID;

                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM ACTEURGROUPE
                         WHERE ACTID = NACTID;

                        IF NCOUNT > 0
                        THEN
                            DELETE FROM ACTEURGROUPE
                                  WHERE ACTID = NACTID;
                        END IF;

                        DELETE FROM ACTEUR
                              WHERE ACTID = NACTID;

                        NRETURNCODE := 0;

                        IF SQL%ROWCOUNT = 0
                        THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        END IF;
                    END IF;
                END IF;
            EXCEPTION
                WHEN ERR_CHILD_FOUND
                THEN
                    NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
            END;
        END;
    END D_ACTEUR;

    -- ACTCANDIDATURE --
    PROCEDURE D_ACTCANDIDATURE (
        NACTID               ACTEUR.ACTID%TYPE,
        NACAORDRE            ACTCANDIDATURE.ACAORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTCANBESOIN
                  WHERE ACTID = NACTID AND ACAORDRE = NACAORDRE;

            DELETE FROM ACTCANDIDATURE
                  WHERE ACTID = NACTID AND ACAORDRE = NACAORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AAD_FOUND_CONST;
        END;
    END D_ACTCANDIDATURE;

    -- ACTADRESSE --
    PROCEDURE D_ACTADRESSE (NACTID               ACTEUR.ACTID%TYPE,
                            NADRID               ADRESSE.ADRID%TYPE,
                            NAADORDRE            ACTADRESSE.AADORDRE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTADRESSE
                  WHERE ACTID = NACTID AND AADORDRE = NAADORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AAD_FOUND_CONST;
        END;
    END D_ACTADRESSE;

    -- LKACTTELCOR1 --
    PROCEDURE D_LKACTTELCOR1 (
        NACTID               ACTEUR.ACTID%TYPE,
        NACOORDRE            ACTCORRESPONDANT.ACOORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKACTTELCOR
                  WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_LKACTTELCOR1;

    -- ACTCORRESPONDANT --
    PROCEDURE D_ACTCORRESPONDANT (
        NACTID               ACTEUR.ACTID%TYPE,
        NACOORDRE            ACTCORRESPONDANT.ACOORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            D_LKACTTELCOR1 (NACTID, NACOORDRE, NRETURNCODE);

            IF NRETURNCODE = 0 OR NRETURNCODE = ERR_NO_ROWS_CONST
            THEN
                BEGIN
                    DELETE FROM ACTCORRESPONDANT
                          WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                EXCEPTION
                    WHEN ERR_CHILD_FOUND
                    THEN
                        NRETURNCODE := ERR_CHILD_ACO_FOUND_CONST;
                END;
            END IF;
        END;
    END D_ACTCORRESPONDANT;

    -- ACTPHASE --
    PROCEDURE D_ACTPHASE (NACTID               ACTEUR.ACTID%TYPE,
                          DTAPHDTDEB           ACTPHASE.APHDTDEB%TYPE,
                          SPHACODE             ACTPHASE.PHACODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPHASE
                  WHERE     ACTID = NACTID
                        AND APHDTDEB = DTAPHDTDEB
                        AND PHACODE = SPHACODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APH_FOUND_CONST;
        END;
    END D_ACTPHASE;

    -- ACTRELATION --
    PROCEDURE D_ACTRELATION (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTRELATION.ACTIDRELATION%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB              ACTRELATION.AREDTDEB%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            BEGIN
                --ALA 110706 suppression du detail relation si existe
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTRELPRODETAIL
                 WHERE     ACTID = NACTID
                       AND ACTIDRELATION = NACTIDRELATION
                       AND TRECODE = STRECODE
                       AND AREDTDEB = DTAREDTDEB;

                NRETURNCODE := 0;

                IF NCOUNT != 0
                THEN
                    DELETE FROM ACTRELPRODETAIL
                          WHERE     ACTID = NACTID
                                AND ACTIDRELATION = NACTIDRELATION
                                AND TRECODE = STRECODE
                                AND AREDTDEB = DTAREDTDEB;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END IF;

                IF NRETURNCODE = 0
                THEN
                    DELETE FROM ACTRELATION
                          WHERE     ACTID = NACTID
                                AND ACTIDRELATION = NACTIDRELATION
                                AND TRECODE = STRECODE
                                AND AREDTDEB = DTAREDTDEB;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END IF;

                --ALA 050707
                IF NRETURNCODE = 0
                THEN
                    UPDATE ACTEUR
                       SET ACTDTMAJ = TRUNC (SYSDATE)
                     WHERE ACTID IN (NACTID, NACTIDRELATION);
                END IF;
            EXCEPTION
                WHEN ERR_CHILD_FOUND
                THEN
                    NRETURNCODE := ERR_CHILD_ARE_FOUND_CONST;
            END;
        END;
    END D_ACTRELATION;

    -- RININFO --
    PROCEDURE D_RIBINFO (NRIBID RIB.RIBID%TYPE, NRETURNCODE IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM RIBINFO
                  WHERE RIBID = NRIBID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_RIN_FOUND_CONST;
        END;
    END D_RIBINFO;

    -- ACTRIB --
    PROCEDURE D_ACTRIB (NRIBID               RIB.RIBID%TYPE,
                        NACTID               ACTEUR.ACTID%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;

            CURSOR C_ACTRIBMANDATE
            IS
                SELECT ARMORDER
                  FROM ACTRIBMANDATE
                 WHERE ACTID = NACTID AND RIBID = NRIBID;
        BEGIN
            NRETURNCODE := 0;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM ACTUNITE
             WHERE RIBID = NRIBID;

            IF NCOUNT != 0
            THEN
                RAISE ERR_CHILD_FOUND;
            END IF;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM ACTRIB
             WHERE RIBID = NRIBID;

            DELETE ACTRIBACCES
             WHERE ACTID = NACTID AND RIBID = NRIBID;

            FOR I IN C_ACTRIBMANDATE
            LOOP
                D_ACTRIBMANDATE (NACTID,
                                 NRIBID,
                                 I.ARMORDER,
                                 NRETURNCODE);
            END LOOP;

            DELETE FROM ACTRIB
                  WHERE ACTID = NACTID AND RIBID = NRIBID;

            -- Si le RIB n'est renseigne qu'une seule fois dans ActRib, on efface les donnees de ce RIB --
            IF NCOUNT <= 1
            THEN
                BEGIN
                    DELETE FROM RIBINFO
                          WHERE RIBID = NRIBID;

                    DELETE FROM RIB
                          WHERE RIBID = NRIBID;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END;
            END IF;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ARI_FOUND_CONST;
        END;
    END D_ACTRIB;

    PROCEDURE D_ACTRIBTMPDEFAUT (
        NACTID               ACTEUR.ACTID%TYPE,
        NRIBID               RIB.RIBID%TYPE,
        SATDTYPE             ACTRIBTMPDEFAUT.ATDTYPE%TYPE,
        STMPCODE             ACTRIBTMPDEFAUT.TMPCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM ACTRIBTMPDEFAUT
                  WHERE     ACTID = NACTID
                        AND ATDTYPE = SATDTYPE
                        AND TMPCODE = STMPCODE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ARI_FOUND_CONST;
        END;
    END D_ACTRIBTMPDEFAUT;

    -- ACTROLE --
    PROCEDURE D_ACTROLE (NACTID               ACTEUR.ACTID%TYPE,
                         SROLCODE             ACTROLE.ROLCODE%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOPTIONPROEXT   NUMBER;
            NITRID          NUMBER;
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM AROAGERELANCE
                  WHERE ACTID = NACTID AND ROLCODE = SROLCODE;

            DELETE FROM LKAVECRE
                  WHERE ACTID = NACTID AND ROLCODE = SROLCODE;

            -- CV-18042002 FSA-8236
            DELETE FROM AAGRVE
                  WHERE ACTID = NACTID AND ROLCODE = SROLCODE;

            DELETE FROM AROAGE
                  WHERE ACTID = NACTID AND ROLCODE = SROLCODE;

            DELETE FROM ACTROLE
                  WHERE ACTID = NACTID AND ROLCODE = SROLCODE;

            PACOM_UPDATEACTEUR_SHARED.D_ACTROLE_AFTER (NACTID,
                                                       SROLCODE,
                                                       NRETURNCODE);

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ARO_FOUND_CONST;
        END;
    END D_ACTROLE;

    -- ACTSTATISTIQUE --
    PROCEDURE D_ACTSTATISTIQUE (
        NACTID               ACTEUR.ACTID%TYPE,
        SSACCODE             CCHVALUE.CVASTRINGVALUE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            --TRUNK-2644
            --DELETE FROM ACTSTATISTIQUE WHERE ACTID = NACTID AND SACCODE = SSACCODE;
            DELETE FROM CCHVALUE
                  WHERE     CCHSID =
                            (SELECT MAX (CCHSID)
                               FROM CUSTOMCHARACTERISTIC
                              WHERE     ENTCODE = 'ACTEUR'
                                    AND CCHVALUECODE = SSACCODE)
                        AND ENTCODE = 'ACTEUR'
                        AND ACTID = NACTID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AST_FOUND_CONST;
        END;
    END D_ACTSTATISTIQUE;

    -- LKACTTELCOR2 --
    PROCEDURE D_LKACTTELCOR2 (NACTID               ACTEUR.ACTID%TYPE,
                              NATEORDRE            ACTTELECOM.ATEORDRE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKACTTELCOR
                  WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_LKACTTELCOR2;

    -- ACTTELECOM --
    PROCEDURE D_ACTTELECOM (NACTID               ACTEUR.ACTID%TYPE,
                            NATEORDRE            ACTTELECOM.ATEORDRE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTTELECOM
                  WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATE_FOUND_CONST;
        END;
    END D_ACTTELECOM;

    -- LKACTTELCOR3 --
    PROCEDURE D_LKACTTELCOR3 (
        NACTID               ACTEUR.ACTID%TYPE,
        NATEORDRE            ACTTELECOM.ATEORDRE%TYPE,
        NACOORDRE            ACTCORRESPONDANT.ACOORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKACTTELCOR
                  WHERE     ACTID = NACTID
                        AND ATEORDRE = NATEORDRE
                        AND ACOORDRE = NACOORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_LKACTTELCOR3;

    -- BANQUEGUICHET --
    PROCEDURE D_BANQUEGUICHET (
        SBGUBANQUE    IN     BANQUEGUICHET.BGUBANQUE%TYPE,
        SBGUGUICHET   IN     BANQUEGUICHET.BGUGUICHET%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM BANQUEGUICHET
                  WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_BGU_CONST;
        END;
    END D_BANQUEGUICHET;

    -- Procedure d'insertion --
    -- ADRESSE --
    PROCEDURE I_ADRESSE (
        NADRID             IN OUT ADRESSE.ADRID%TYPE,
        SPAYCODE                  ADRESSE.PAYCODE%TYPE,
        SADRVOIE                  ADRESSE.ADRVOIE%TYPE,
        SADRLIEUDIT               ADRESSE.ADRLIEUDIT%TYPE,
        SADRCODEPOST              ADRESSE.ADRCODEPOST%TYPE,
        SADRVILLE                 ADRESSE.ADRVILLE%TYPE,
        SPRECODE                  ADRESSE.PRECODE%TYPE,
        SPRETYPE                  ADRESSE.PRETYPE%TYPE,
        DTADRDTMAJ                ADRESSE.ADRDTMAJ%TYPE,
        SUTICODE                  ADRESSE.UTICODE%TYPE,
        SADRCEDEX                 ADRESSE.ADRCEDEX%TYPE,
        SADRSUBREGION             ADRESSE.ADRSUBREGION%TYPE,
        SADRMSACODE               ADRESSE.ADRMSACODE%TYPE,
        sAdrTaxArea               ADRESSE.ADRTAXAREA%TYPE,
        nAdrPctTax                ADRESSE.ADRPCTTAX%TYPE,
        sTaxCode                  ADRESSE.TAXCODE%TYPE,
        nAdrTaxBalance            ADRESSE.ADRTAXBALANCE%TYPE,
        NADRSTREETNUMBER          ADRESSE.ADRSTREETNUMBER%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            SELECT SEQ_ADRID.NEXTVAL INTO NADRID FROM DUAL;

            INSERT INTO ADRESSE (ADRID,
                                 PAYCODE,
                                 ADRVOIE,
                                 ADRLIEUDIT,
                                 ADRCODEPOST,
                                 ADRVILLE,
                                 PRECODE,
                                 ADRDTMAJ,
                                 UTICODE,
                                 ADRCEDEX,
                                 ADRSUBREGION,
                                 ADRMSACODE,
                                 PRETYPE,
                                 ADRTAXAREA,
                                 ADRPCTTAX,
                                 TAXCODE,
                                 ADRTAXBALANCE,
                                 ADRSTREETNUMBER)
                 VALUES (NADRID,
                         SPAYCODE,
                         SADRVOIE,
                         SADRLIEUDIT,
                         SADRCODEPOST,
                         SADRVILLE,
                         SPRECODE,
                         DTADRDTMAJ,
                         SUTICODE,
                         SADRCEDEX,
                         SADRSUBREGION,
                         SADRMSACODE,
                         SPRETYPE,
                         sAdrTaxArea,
                         nAdrPctTax,
                         sTaxCode,
                         nAdrTaxBalance,
                         NADRSTREETNUMBER);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- nReturnCode := ERR_PARENT_ADR_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ADR_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ADRESSE;

    -- ACTEUR --
    PROCEDURE I_ACTEUR (
        NNEWACTID                  IN OUT ACTEUR.ACTID%TYPE,
        SUGECODE                          ACTEUR.UGECODE%TYPE,
        SUTICODECREAT                     ACTEUR.UTICODECREAT%TYPE,
        DTACTDTCREAT                      ACTEUR.ACTDTCREAT%TYPE,
        SACTCODE                   IN OUT ACTEUR.ACTCODE%TYPE,
        SCJUCODE                          ACTEUR.CJUCODE%TYPE,
        SPAYCODECATJURIDIQUE              ACTEUR.PAYCODECATJURIDIQUE%TYPE,
        SUTICODEMAJ                       ACTEUR.UTICODEMAJ%TYPE,
        SACTLIBCOURT                      ACTEUR.ACTLIBCOURT%TYPE,
        SACTNOM                           ACTEUR.ACTNOM%TYPE,
        SACTNOM2                          ACTEUR.ACTNOM2%TYPE,
        SACTSIRET                         ACTEUR.ACTSIRET%TYPE,
        DTACTDTMAJ                        ACTEUR.ACTDTMAJ%TYPE,
        SPAYCODE                          ACTEUR.PAYCODE%TYPE,
        SLANCODE                          ACTEUR.LANCODE%TYPE,
        SAGEEMETTEUR                      ACTEURGESTION.AGEEMETTEUR%TYPE,
        NFLAGSOCIETE                      NUMBER,
        NACTFLAGTAXPROF                   ACTEUR.ACTFLAGTAXPROF%TYPE,
        NACTCAPITAL                       ACTEUR.ACTCAPITAL%TYPE,
        NACTFINMOISFISC                   ACTEUR.ACTFINMOISFISC%TYPE,
        SACTNUMRCM                        ACTEUR.ACTNUMRCM%TYPE,
        SNAFCODE                          ACTEUR.NAFCODE%TYPE,
        SPAYCODENAF                       ACTEUR.PAYCODENAF%TYPE,
        SACTTVACE                         ACTEUR.ACTTVACE%TYPE,
        SACTCODERCM                       ACTEUR.ACTCODERCM%TYPE,
        SACTMEMO                          ACTEUR.ACTMEMO%TYPE,
        DTAPADTNAISS                      ACTEURPARTICULIER.APADTNAISS%TYPE,
        SAPADEPTNAISS                     ACTEURPARTICULIER.APADEPTNAISS%TYPE,
        SAPACOMNAISS                      ACTEURPARTICULIER.APACOMNAISS%TYPE,
        NAPANBENFANT                      ACTEURPARTICULIER.APANBENFANT%TYPE,
        NAPASEXE                          ACTEURPARTICULIER.APASEXE%TYPE,
        SAPAPAYCODE                       ACTEURPARTICULIER.PAYCODE%TYPE,
        SAPAEMPLOYEUR                     ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
        SAPASITFAM                        ACTEURPARTICULIER.APASITFAM%TYPE,
        NAPAFLAGPROPRIETE                 ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
        SAPATITRE                         ACTEURPARTICULIER.APATITRE%TYPE,
        SAPANOMMARITAL                    ACTEURPARTICULIER.APANOMMARITAL%TYPE,
        SAPAREGIMEMATRIM                  ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
        SAGECIB                           ACTEURGESTION.AGECIB%TYPE,
        SAGELOGO                          ACTEURGESTION.AGELOGO%TYPE,
        NAGEDELAIEXIGIBLE                 ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
        SDEVCODE                          ACTEUR.DEVCODE%TYPE,
        STDRCODEEFFET                     ACTEURGESTION.TDRCODEEFFET%TYPE,
        STDRCODEPRL                       ACTEURGESTION.TDRCODEPRL%TYPE,
        STDRCODEPRLACCELERE               ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
        STDRCODEVIR                       ACTEURGESTION.TDRCODEVIR%TYPE,
        SAGESEPAIDENTIFIER                ACTEURGESTION.AGESEPAIDENTIFIER%TYPE,
        NAINNBPARTTOTAL                   ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
        SAGEEMETVIR                       ACTEURGESTION.AGEEMETVIR%TYPE,
        SACTLIBCHEQUE                     ACTEUR.ACTLIBCHEQUE%TYPE,
        NTCIID                            ACTEURGESTION.TCIID%TYPE,
        BAGEFLAGIRFACTURE                 ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
        BAGEFLAGIRCHQ                     ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
        NAGEMTFACMINI                     ACTEURGESTION.AGEMTFACMINI%TYPE,
        NRUBID                            ACTEURGESTION.RUBID%TYPE,
        STAXCODE                          ACTEURGESTION.TAXCODE%TYPE,
        SACTREGIMETVA                     ACTEUR.ACTREGIMETVA%TYPE,
        NACTFLAGAGREMENT                  ACTEUR.ACTFLAGAGREMENT%TYPE,
        SACTRATTACHEMENT                  ACTEUR.ACTRATTACHEMENT%TYPE,
        DTACTDTIMMATRICULATION            ACTEUR.ACTDTIMMATRICULATION%TYPE, -- CV-03122001 DMF-64
        NACTEFFECTIF                      ACTEUR.ACTEFFECTIF%TYPE, -- CV-27022003 FSA-11420
        SAPANOMPATONYME                   ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
        SAPAPRENOM                        ACTEURPARTICULIER.APAPRENOM%TYPE,
        SAPAMIDDLENAME                    ACTEURPARTICULIER.APAMIDDLENAME%TYPE,
        SAPACHREGIMEMATRIM                ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
        SAPACODENIVEAUETUDE               ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
        SAPADIRFONCTION                   ACTEURPARTICULIER.APADIRFONCTION%TYPE,
        NAPAFLAGDIRIGEANT                 ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
        NAPAFLAGHOMMECLE                  ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
        NAPAFLAGINTERDITBANCAIRE          ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
        NAPAFLAGSUCCESSIONPRET            ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
        NAPAPCTCAPITAL                    ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
        NAPAANEXPACTIVITE                 ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
        NAPAEXPERIENCEFONCTION            ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
        NACTFLAGNONDECLASSABLE            ACTEUR.ACTFLAGNONDECLASSABLE%TYPE, -- CV-18082004 FSA-16070 NL
        SDOMCODE                          ACTEUR.DOMCODE%TYPE,
        DTAPADTPERMISDECONDUIRE           ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE, -- CV-20062005 FSA-20165 Modif de base
        NACTFLAGGROUPE                    ACTEUR.ACTFLAGGROUPE%TYPE,
        SAGEFICP                          ACTEURGESTION.AGEFICP%TYPE,
        SAGRCOMPOUNDINGMCODE              ACTEURGROUPE.AGRCOMPOUNDINGMCODE%TYPE,
        SAGRCOMPOUNDUSE                   ACTEURGROUPE.AGRCOMPOUNDUSE%TYPE,
        SAGREXTERNALREF                   ACTEURGROUPE.AGREXTERNALREF%TYPE,
        SAGRBADDEBTSTATUS                 ACTEURGROUPE.AGRBADDEBTSTATUS%TYPE,
        SAGRLIBCOURT                      ACTEURGROUPE.AGRLIBCOURT%TYPE,
        SAPAVILLENAISS                    ACTEURPARTICULIER.APAVILLENAISS%TYPE,
        DTACTDTDEBNAF                     ACTEUR.ACTDTDEBNAF%TYPE,
        NCALID                            ACTEURGESTION.CALID%TYPE,
        SACTTAXREGIME                     ACTEURGESTION.ACTTAXREGIME%TYPE,
        NAGEIRMARGIN                      ACTEURGESTION.AGEIRMARGIN%TYPE,
        SACTCHANNEL                       ACTEUR.ACTCHANNEL%TYPE,
        SACTCHANNELCODE                   ACTEUR.ACTCHANNELCODE%TYPE,
        SACTTYPE                          ACTEUR.ACTTYPE%TYPE,
        SACTEXTDEPARTMENT                 ACTEUR.ACTEXTDEPARTMENT%TYPE,
        DACTDTEXTHIRING                   ACTEUR.ACTDTEXTHIRING%TYPE,
        SACTRESIDENTCODE                  ACTEUR.ACTRESIDENTCODE%TYPE,
        SAPACALBIRTHDAY                   ACTEURPARTICULIER.APACALBIRTHDAY%TYPE,
        SACTSECTGESTION                   ACTSECTGESTION.ACTSECTGESTION%TYPE,
        SACTREPRESENTATIVE                ACTEUR.ACTREPRESENTATIVE%TYPE,
        SACTREPRESENTNAME                 ACTEUR.ACTREPRESENTNAME%TYPE,
        SACTCORPORATE                     ACTEUR.ACTCORPORATE%TYPE,
        NACTFLAGGUARANTOR                 ACTEUR.ACTFLAGGUARANTOR%TYPE,
        SACTQUALIFCLASS                   ACTEUR.ACTQUALIFCLASS%TYPE,
        SACTETAT                          ACTEUR.ACTETAT%TYPE,
        NACTFLAGPROSPECT                  ACTEUR.ACTFLAGPROSPECT%TYPE,
        SAPAPANCARD                       ACTEURPARTICULIER.APAPANCARD%TYPE,
        SAPAPASSPORT                      ACTEURPARTICULIER.APAPASSPORT%TYPE,
        SAPAVOTERID                       ACTEURPARTICULIER.APAVOTERID%TYPE,
        SAPADRIVINGLICENSE                ACTEURPARTICULIER.APADRIVINGLICENSE%TYPE,
        SACTTAXSYSTEM                     ACTEUR.ACTTAXSYSTEM%TYPE,
        SAPANATIONALITY                   ACTEURPARTICULIER.APANATIONALITY%TYPE,
        SACTIDSERVICING                   ACTEUR.ACTIDSERVICING%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            STEVDEST             TEVENEMENT.TEVDEST%TYPE := 'ACTEUR';
            STMOMODULE           TEVENEMENT.TMOMODULE%TYPE := 'ACTEUR';
            STMFFONCTION         TEVENEMENT.TMFFONCTION%TYPE := 'EVACT_NEW';
            NCREID               NUMBER;
            DTEFFET              DATE := SYSDATE;
            STACCODE             TACTIVITE.TACCODE%TYPE := 'GLOBAL';
            NSYNCHRO             NUMBER := 1;
            SCJUTYPE             CATJURIDIQUE.CJUTYPE%TYPE;
            NTEMP1               NUMBER;
            NUPDATECOMPTEUR      NUMBER := -1;
            nTpalogique          TOPPARAM.TPALOGIQUE%TYPE;
            SACTTAXSYSTEMCHECK   ACTEUR.ACTTAXSYSTEM%TYPE;
        BEGIN
            --ISF START Verification qu on est bien dans VW et la regle de regime fiscal
            PA_COMMON.S_TPALOGIQUE ('SEPA', 'ENDTOEND_VW_FR', nTpalogique);

            SELECT SEQ_ACTID.NEXTVAL INTO NNEWACTID FROM DUAL;

            IF SACTCODE IS NULL OR SACTCODE = 'KSIOP'
            THEN
                P_GETPLCHRONO2 ('ACTEUR',
                                'GLOBAL',
                                'TOUT',
                                'ALL',
                                NULL,
                                'ACTNUM',
                                NULL,
                                SYSDATE,
                                NTEMP1,
                                NTEMP1,
                                NUPDATECOMPTEUR,
                                SACTCODE,
                                NULL,
                                NULL,
                                NULL,
                                NNEWACTID,
                                SUGECODE);
            END IF;

            IF (nTpalogique = 1 AND SACTTAXSYSTEM IS NULL)
            THEN
                BEGIN
                    SELECT MAX (REVFILLECODE)
                      INTO SACTTAXSYSTEMCHECK
                      FROM RELATIONVALEURPROFIL
                     WHERE     RECCODE = 'CJUCODEREGFISC'
                           AND REVMERECODE = SCJUCODE
                           AND TPGCODE = 'TOUT';

                    IF SACTTAXSYSTEMCHECK IS NULL
                    THEN
                        SELECT DECODE (SACTTYPE,
                                       'PM', 'IS',
                                       'PART', 'TS',
                                       'BNC', 'BNC',
                                       'BIC', 'BIC',
                                       'BA', 'BA',
                                       'ERROR_TYPEACT')
                          INTO SACTTAXSYSTEMCHECK
                          FROM DUAL;
                    END IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        SACTTAXSYSTEMCHECK := 'ERROR_TYPEACT';
                END;
            --ISF END Verification qu on est bien dans VW et la regle de regime fiscal

            END IF;

            INSERT INTO ACTEUR (ACTID,
                                UGECODE,
                                UTICODECREAT,
                                ACTDTCREAT,
                                ACTCODE,
                                CJUCODE,
                                PAYCODECATJURIDIQUE,
                                UTICODEMAJ,
                                ACTLIBCOURT,
                                ACTNOM,
                                ACTNOM2,
                                ACTSIRET,
                                ACTDTMAJ,
                                PAYCODE,
                                LANCODE,
                                ACTFLAGTAXPROF,
                                ACTCAPITAL,
                                ACTFINMOISFISC,
                                ACTNUMRCM,
                                NAFCODE,
                                PAYCODENAF,
                                ACTTVACE,
                                ACTCODERCM,
                                ACTMEMO,
                                DEVCODE,
                                ACTLIBCHEQUE,
                                ACTREGIMETVA,
                                ACTFLAGAGREMENT,
                                ACTRATTACHEMENT,
                                ACTDTIMMATRICULATION,    -- CV-03122001 DMF-64
                                ACTEFFECTIF,          -- CV-27022003 FSA-11420
                                ACTFLAGNONDECLASSABLE, -- CV-18082004 FSA-16070 NL
                                DOMCODE,
                                ACTFLAGGROUPE,
                                ACTCHANNEL,
                                ACTCHANNELCODE,
                                ACTTYPE,
                                ACTDTDEBNAF,
                                ACTEXTDEPARTMENT,
                                ACTDTEXTHIRING,
                                ACTRESIDENTCODE,
                                ACTREPRESENTATIVE,
                                ACTREPRESENTNAME,
                                ACTCORPORATE,
                                ACTFLAGGUARANTOR,
                                ACTQUALIFCLASS,
                                ACTETAT,
                                ACTFLAGPROSPECT,
                                ACTTAXSYSTEM,
                                ACTIDSERVICING)
                     VALUES (
                                NNEWACTID,
                                SUGECODE,
                                SUTICODECREAT,
                                DTACTDTCREAT,
                                SACTCODE,
                                SCJUCODE,
                                DECODE (SPAYCODECATJURIDIQUE,
                                        NULL, SPAYCODE,
                                        SPAYCODECATJURIDIQUE),
                                SUTICODEMAJ,
                                SACTLIBCOURT,
                                SACTNOM,
                                SACTNOM2,
                                SACTSIRET,
                                DTACTDTMAJ,
                                SPAYCODE,
                                SLANCODE,
                                NACTFLAGTAXPROF,
                                NACTCAPITAL,
                                NACTFINMOISFISC,
                                SACTNUMRCM,
                                SNAFCODE,
                                DECODE (SPAYCODENAF,
                                        NULL, SPAYCODE,
                                        SPAYCODENAF),
                                SACTTVACE,
                                SACTCODERCM,
                                SACTMEMO,
                                SDEVCODE,
                                SACTLIBCHEQUE,
                                SACTREGIMETVA,
                                NACTFLAGAGREMENT,
                                SACTRATTACHEMENT,
                                DTACTDTIMMATRICULATION,
                                NACTEFFECTIF,
                                NACTFLAGNONDECLASSABLE,
                                SDOMCODE,
                                NACTFLAGGROUPE,
                                SACTCHANNEL,
                                SACTCHANNELCODE,
                                SACTTYPE,
                                DTACTDTDEBNAF,
                                SACTEXTDEPARTMENT,
                                DACTDTEXTHIRING,
                                SACTRESIDENTCODE,
                                SACTREPRESENTATIVE,
                                SACTREPRESENTNAME,
                                SACTCORPORATE,
                                NACTFLAGGUARANTOR,
                                SACTQUALIFCLASS,
                                SACTETAT,
                                NACTFLAGPROSPECT,
                                DECODE (SACTTAXSYSTEM,
                                        NULL, SACTTAXSYSTEMCHECK,
                                        SACTTAXSYSTEM) ----ISF END Verification qu on est bien dans VW et la regle de regime fiscal
                               ,SACTIDSERVICING);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;

            IF NRETURNCODE != ERR_NO_ROWS_CONST
            THEN
                BEGIN
                    IF NFLAGSOCIETE = 1
                    THEN
                        BEGIN
                            INSERT INTO ACTEURGESTION (ACTID,
                                                       AGEEMETTEUR,
                                                       AGECIB,
                                                       AGELOGO,
                                                       AGEDELAIEXIGIBLE,
                                                       TDRCODEEFFET,
                                                       TDRCODEPRL,
                                                       TDRCODEPRLACCELERE,
                                                       TDRCODEVIR,
                                                       AGEEMETVIR,
                                                       TCIID,
                                                       AGEFLAGIRFACTURE,
                                                       AGEFLAGIRCHQ,
                                                       AGEMTFACMINI,
                                                       RUBID,
                                                       TAXCODE,
                                                       AGEFICP,
                                                       CALID,
                                                       ACTTAXREGIME,
                                                       AGEIRMARGIN,
                                                       AGESEPAIDENTIFIER,
                                                       PAYCODE)
                                 VALUES (NNEWACTID,
                                         SAGEEMETTEUR,
                                         SAGECIB,
                                         SAGELOGO,
                                         NAGEDELAIEXIGIBLE,
                                         STDRCODEEFFET,
                                         STDRCODEPRL,
                                         STDRCODEPRLACCELERE,
                                         STDRCODEVIR,
                                         SAGEEMETVIR,
                                         NTCIID,
                                         BAGEFLAGIRFACTURE,
                                         BAGEFLAGIRCHQ,
                                         NAGEMTFACMINI,
                                         NRUBID,
                                         STAXCODE,
                                         SAGEFICP,
                                         NCALID,
                                         SACTTAXREGIME,
                                         NAGEIRMARGIN,
                                         SAGESEPAIDENTIFIER,
                                         SPAYCODE);

                            NRETURNCODE := 0;

                            IF SQL%ROWCOUNT = 0
                            THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        END;
                    END IF;

                    IF NACTFLAGGROUPE = 1
                    THEN
                        BEGIN
                            INSERT INTO ACTEURGROUPE (ACTID,
                                                      AGRCOMPOUNDINGMCODE,
                                                      AGRCOMPOUNDUSE,
                                                      AGREXTERNALREF,
                                                      AGRBADDEBTSTATUS,
                                                      AGRLIBCOURT)
                                 VALUES (NNEWACTID,
                                         SAGRCOMPOUNDINGMCODE,
                                         SAGRCOMPOUNDUSE,
                                         SAGREXTERNALREF,
                                         SAGRBADDEBTSTATUS,
                                         SAGRLIBCOURT);

                            NRETURNCODE := 0;

                            IF SQL%ROWCOUNT = 0
                            THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        END;
                    END IF;

                    SELECT MAX (CJUTYPE)
                      INTO SCJUTYPE
                      FROM CATJURIDIQUE
                     WHERE     CJUCODE = SCJUCODE
                           AND PAYCODE = NVL (SPAYCODECATJURIDIQUE, SPAYCODE);

                    IF    SCJUTYPE IN ('P', 'EI')
                       OR SACTTYPE IN ('PART',
                                       'EI',
                                       'BPART',
                                       'HEADGRP')
                    THEN
                        BEGIN
                            INSERT INTO ACTEURPARTICULIER (
                                            ACTID,
                                            APADTNAISS,
                                            APADEPTNAISS,
                                            APACOMNAISS,
                                            APANBENFANT,
                                            APASEXE,
                                            PAYCODE,
                                            APAEMPLOYEUR,
                                            APASITFAM,
                                            APAFLAGPROPRIETE,
                                            APATITRE,
                                            APANOMMARITAL,
                                            APAREGIMEMATRIM,
                                            APANOMPATRONYMIQUE,
                                            APAPRENOM,
                                            APAMIDDLENAME,
                                            APACHGREGIMEMATRIM,
                                            APACODENIVEAUETUDE,
                                            APADIRFONCTION,
                                            APAFLAGDIRIGEANT,
                                            APAFLAGHOMMECLE,
                                            APAFLAGINTERDITBANCAIRE,
                                            APAFLAGSUCCESSIONPRET,
                                            APAPCTCAPITAL,
                                            APAANEXPERACTIVITE,
                                            APAANEXPERIENCEFONCTION,
                                            APADTPERMISDECONDUIRE,
                                            APAVILLENAISS,
                                            APACALBIRTHDAY,
                                            APAPANCARD,
                                            APAPASSPORT,
                                            APAVOTERID,
                                            APADRIVINGLICENSE,
                                            APANATIONALITY)
                                     VALUES (
                                                NNEWACTID,
                                                DTAPADTNAISS,
                                                SAPADEPTNAISS,
                                                SAPACOMNAISS,
                                                NAPANBENFANT,
                                                NAPASEXE,
                                                SAPAPAYCODE,
                                                SAPAEMPLOYEUR,
                                                SAPASITFAM,
                                                NAPAFLAGPROPRIETE,
                                                SAPATITRE,
                                                NVL (SAPANOMMARITAL,
                                                     SAPANOMPATONYME),
                                                SAPAREGIMEMATRIM,
                                                SAPANOMPATONYME,
                                                SAPAPRENOM,
                                                SAPAMIDDLENAME,
                                                SAPACHREGIMEMATRIM,
                                                SAPACODENIVEAUETUDE,
                                                SAPADIRFONCTION,
                                                NAPAFLAGDIRIGEANT,
                                                NAPAFLAGHOMMECLE,
                                                NAPAFLAGINTERDITBANCAIRE,
                                                NAPAFLAGSUCCESSIONPRET,
                                                NAPAPCTCAPITAL,
                                                NAPAANEXPACTIVITE,
                                                NAPAEXPERIENCEFONCTION,
                                                DTAPADTPERMISDECONDUIRE,
                                                SAPAVILLENAISS,
                                                SAPACALBIRTHDAY,
                                                SAPAPANCARD,
                                                SAPAPASSPORT,
                                                SAPAVOTERID,
                                                SAPADRIVINGLICENSE,
                                                SAPANATIONALITY);

                            NRETURNCODE := 0;

                            IF SQL%ROWCOUNT = 0
                            THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        END;
                    END IF;

                    IF SCJUTYPE IN ('I', 'J')
                    THEN
                        BEGIN
                            INSERT INTO ACTEURINDIVISION (ACTID,
                                                          AINNBPARTTOTAL)
                                 VALUES (NNEWACTID, NAINNBPARTTOTAL);

                            NRETURNCODE := 0;

                            IF SQL%ROWCOUNT = 0
                            THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        END;
                    END IF;

                    IF NRETURNCODE = 0
                    THEN
                        PACOM_EVT.I_EVT (STEVDEST,
                                         STMOMODULE,
                                         STMFFONCTION,
                                         NCREID,
                                         NNEWACTID,
                                         DTEFFET,
                                         STACCODE,
                                         NSYNCHRO,
                                         SUTICODECREAT,
                                         NULL,
                                         NRETURNCODE);
                    END IF;

                    IF NRETURNCODE = 0
                    THEN
                        PA_EVT.U_EVT_VALIDE (NCREID,
                                             SUTICODECREAT,
                                             NRETURNCODE);
                    END IF;
                END;
            -- CASNT-107
            END IF;

            IF SACTSECTGESTION IS NOT NULL
            THEN
                INSERT INTO ACTSECTGESTION (ACTID, ACTSECTGESTION)
                     VALUES (NNEWACTID, SACTSECTGESTION);
            END IF;
       /* EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ACT_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ACT_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ACTEUR_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;*/
        END;
    END I_ACTEUR;

    --PROCEDURE I_ACTEUR (
    --   nNewActId       IN OUT ACTEUR.ACTID%TYPE,
    --   sUgeCode               ACTEUR.UGECODE%TYPE,
    --   sUtiCodeCreat          ACTEUR.UTICODECREAT%TYPE,
    --   dtActDtCreat           ACTEUR.ACTDTCREAT%TYPE,
    --   sActCode               ACTEUR.ACTCODE%TYPE,
    --   sCjuCode               ACTEUR.CJUCODE%TYPE,
    --   sUtiCodeMaj            ACTEUR.UTICODEMAJ%TYPE,
    --   sActLibCourt           ACTEUR.ACTLIBCOURT%TYPE,
    --   sActNom                ACTEUR.ACTNOM%TYPE,
    --   sActNom2               ACTEUR.ACTNOM2%TYPE,
    --   sActSiret              ACTEUR.ACTSIRET%TYPE,
    --   dtActDtMaj             ACTEUR.ACTDTMAJ%TYPE,
    --   sPayCode               ACTEUR.PAYCODE%TYPE,
    --   sLanCode               ACTEUR.LANCODE%TYPE,
    --   sAgeEmetteur           ACTEURGESTION.AGEEMETTEUR%TYPE,
    --   nFlagSociete           NUMBER,
    --   nActFlagTaxProf        ACTEUR.ACTFLAGTAXPROF%TYPE,
    --   nActCapital            ACTEUR.ACTCAPITAL%TYPE,
    --   nActFinMoisFisc        ACTEUR.ACTFINMOISFISC%TYPE,
    --   sActNumRCM             ACTEUR.ACTNUMRCM%TYPE,
    --   sNafCode               ACTEUR.NAFCODE%TYPE,
    --   sActTvaCe              ACTEUR.ACTTVACE%TYPE,
    --   sActCodeRCM            ACTEUR.ACTCODERCM%TYPE,
    --   lsActMemo              ACTEUR.ACTMEMO%TYPE,
    --   dtApaDtNaiss           ACTEURPARTICULIER.APADTNAISS%TYPE,
    --   sApaDeptNaiss          ACTEURPARTICULIER.APADEPTNAISS%TYPE,
    --   sApaComNaiss           ACTEURPARTICULIER.APACOMNAISS%TYPE,
    --   nApaNbEnfant           ACTEURPARTICULIER.APANBENFANT%TYPE,
    --   nApaSexe               ACTEURPARTICULIER.APASEXE%TYPE,
    --   sApaPayCode            ACTEURPARTICULIER.PAYCODE%TYPE,
    --   sApaEmployeur          ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
    --   sApaSitFam             ACTEURPARTICULIER.APASITFAM%TYPE,
    --   nApaFlagPropriete      ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
    --   sApaTitre              ACTEURPARTICULIER.APATITRE%TYPE,
    --   sApaNomMarital         ACTEURPARTICULIER.APANOMMARITAL%TYPE,
    --   sApaRegimeMatrim       ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
    --   sAgeCib                ACTEURGESTION.AGECIB%TYPE,
    --   sAgeLogo               ACTEURGESTION.AGELOGO%TYPE,
    --   nAgeDelaiExigible      ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
    --   sDevCode               ACTEUR.DEVCODE%TYPE,
    --   sTdrCodeEffet          ACTEURGESTION.TDRCODEEFFET%TYPE,
    --   sTdrCodePrl            ACTEURGESTION.TDRCODEPRL%TYPE,
    --   sTdrCodePrlAccelere    ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
    --   sTdrCodeVir            ACTEURGESTION.TDRCODEVIR%TYPE,
    --   nAinNbPartTotal        ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
    --   sAgeEmetVir            ACTEURGESTION.AGEEMETVIR%TYPE,
    --   sActLibCheque          ACTEUR.ACTLIBCHEQUE%TYPE,
    --   nTciId                 ACTEURGESTION.TCIID%TYPE,
    --   bAgeFlagIrFacture      ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
    --   bAgeFlagIrChq          ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
    --   nAgeMtFacMini          ACTEURGESTION.AGEMTFACMINI%TYPE,
    --   nRubId                 ACTEURGESTION.RUBID%TYPE,
    --   sTaxCode               ACTEURGESTION.TAXCODE%TYPE,
    --   sActRegimeTva          ACTEUR.ACTREGIMETVA%TYPE,
    --   nActFlagAgrement       ACTEUR.ACTFLAGAGREMENT%TYPE,
    --   sActRattachement           ACTEUR.ACTRATTACHEMENT%TYPE,
    --   dtActDtImmatriculation     ACTEUR.ACTDTIMMATRICULATION%TYPE,             -- CV-03122001 DMF-64
    --   nActEffectif               ACTEUR.ACTEFFECTIF%TYPE,                      -- CV-27022003 FSA-11420
    --   sApaNomPatonyme            ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
    --   sApaPrenom                 ACTEURPARTICULIER.APAPRENOM%TYPE,
    --   sApaChRegimeMatrim         ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
    --   sApaCodeNiveauEtude        ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
    --   sApaDirFonction            ACTEURPARTICULIER.APADIRFONCTION%TYPE,
    --   nApaFlagDirigeant                                     ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
    --   nApaFlagHommeCle                                ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
    --   nApaFlagInterditBancaire      ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
    --   nApaFlagSuccessionPret        ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
    --   nApaPctCapital                           ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
    --   nApaAnExpActivite                                     ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
    --   nApaExperienceFonction         ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
    --   nActFlagNonDeclassable                          ACTEUR.ACTFLAGNONDECLASSABLE%TYPE,                                     -- CV-18082004 FSA-16070 NL
    --   sDomCode                   ACTEUR.DOMCODE%TYPE,
    --   dtApaDtPermisDeConduire    ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE,   -- CV-20062005 FSA-20165 Modif de base
    --   nActFlagGroupe             ACTEUR.ACTFLAGGROUPE%TYPE,
    --   sAgeFiCp                   ACTEURGESTION.AGEFICP%TYPE,
    --   sAgrCompoundingMCode       ACTEURGROUPE.AGRCOMPOUNDINGMCODE%TYPE,
    --   sAgrCompoundUse            ACTEURGROUPE.AGRCOMPOUNDUSE%TYPE,
    --   sAgrExternalRef            ACTEURGROUPE.AGREXTERNALREF%TYPE,
    --   sAgrBadDebtStatus          ACTEURGROUPE.AGRBADDEBTSTATUS%TYPE,
    --   sAgrLibCourt               ACTEURGROUPE.AGRLIBCOURT%TYPE,
    --   sApaVilleNaiss             ACTEURPARTICULIER.APAVILLENAISS%TYPE,
    --   dtActDtDebNAF              ACTEUR.ACTDTDEBNAF%TYPE,
    --   nCalId                     ACTEURGESTION.CALID%TYPE,
    --   nReturnCode         IN OUT NUMBER ) AS
    --BEGIN
    --   BEGIN
    --      SELECT SEQ_ACTID.NEXTVAL INTO nNewActId FROM DUAL;
    --      INSERT INTO ACTEUR (
    --             ACTID,
    --         UGECODE,
    --         UTICODECREAT,
    --         ACTDTCREAT,
    --         ACTCODE,
    --         CJUCODE,
    --         UTICODEMAJ,
    --         ACTLIBCOURT,
    --         ACTNOM,
    --         ACTNOM2,
    --         ACTSIRET,
    --         ACTDTMAJ,
    --         PAYCODE,
    --         LANCODE,
    --         ACTFLAGTAXPROF,
    --         ACTCAPITAL,
    --         ACTFINMOISFISC,
    --         ACTNUMRCM,
    --         NAFCODE,
    --         ACTTVACE,
    --         ACTCODERCM,
    --         ACTMEMO,
    --         DEVCODE,
    --         ACTLIBCHEQUE,
    --         ACTREGIMETVA,
    --         ACTFLAGAGREMENT,
    --         ACTRATTACHEMENT,
    --         ACTDTIMMATRICULATION,                  -- CV-03122001 DMF-64
    --         ACTEFFECTIF,                           -- CV-27022003 FSA-11420
    --         ACTFLAGNONDECLASSABLE,                                                                                          -- CV-18082004 FSA-16070 NL
    --         DOMCODE,
    --         ACTFLAGGROUPE,
    --         ACTDTDEBNAF )
    --      VALUES (
    --              nNewActId,
    --         sUgeCode,
    --         sUtiCodeCreat,
    --         dtActDtCreat,
    --         sActCode,
    --         sCjuCode,
    --         sUtiCodeMaj,
    --         sActLibCourt,
    --         sActNom,
    --         sActNom2,
    --         sActSiret,
    --         dtActDtMaj,
    --         sPayCode,
    --         sLanCode,
    --         nActFlagTaxProf,
    --         nActCapital,
    --         nActFinMoisFisc,
    --         sActNumRCM,
    --         sNafCode,
    --         sActTvaCe,
    --         sActCodeRCM,
    --         lsActMemo,
    --         sDevCode,
    --         sActLibCheque,
    --         sActRegimeTva,
    --         nActFlagAgrement,
    --         sActRattachement,
    --         dtActDtImmatriculation,
    --         nActEffectif,
    --         nActFlagNonDeclassable,
    --         sDomCode,
    --         nActFlagGroupe,
    --         dtActDtDebNAF ) ;
    --         nReturnCode := 0;
    --      IF SQL%ROWCOUNT=0 THEN
    --         nReturnCode := ERR_NO_ROWS_CONST;
    --      END IF;
    --      IF nReturnCode != ERR_NO_ROWS_CONST THEN
    --         BEGIN
    --            IF nFlagSociete = 1 THEN
    --               BEGIN
    --                  INSERT INTO ACTEURGESTION (
    --                     ACTID,
    --                     AGEEMETTEUR,
    --                     AGECIB,
    --                     AGELOGO,
    --                     AGEDELAIEXIGIBLE,
    --                     TDRCODEEFFET,
    --                     TDRCODEPRL,
    --                     TDRCODEPRLACCELERE,
    --                     TDRCODEVIR,
    --                     AGEEMETVIR,
    --                     TCIID,
    --                     AGEFLAGIRFACTURE,
    --                     AGEFLAGIRCHQ,
    --                     AGEMTFACMINI,
    --                     RUBID,
    --                     TAXCODE,
    --                     AGEFICP,
    --                     CALID )
    --                  VALUES (
    --                     nNewActId,
    --                     sAgeEmetteur,
    --                     sAgeCib,
    --                     sAgeLogo,
    --                     nAgeDelaiExigible,
    --                     sTdrCodeEffet,
    --                     sTdrCodePrl,
    --                     sTdrCodePrlAccelere,
    --                     sTdrCodeVir,
    --                     sAgeEmetVir,
    --                     nTciId,
    --                     bAgeFlagIrFacture,
    --                     bAgeFlagIrChq,
    --                     nAgeMtFacMini,
    --                     nRubId,
    --                     sTaxCode,
    --                     sAgeFiCp,
    --                     nCalId );
    --                  nReturnCode := 0;
    --                  IF SQL%ROWCOUNT=0 THEN
    --                     nReturnCode := ERR_NO_ROWS_CONST;
    --                  END IF;
    --               END;
    --            END IF;
    --            IF nActFlagGroupe = 1 THEN
    --               BEGIN
    --                  INSERT INTO ACTEURGROUPE (
    --                     ACTID,
    --                     AGRCOMPOUNDINGMCODE,
    --                     AGRCOMPOUNDUSE,
    --                     AGREXTERNALREF,
    --                     AGRBADDEBTSTATUS,
    --                     AGRLIBCOURT)
    --                  VALUES (
    --                     nNewActId,
    --                     sAgrCompoundingMCode,
    --                     sAgrCompoundUse,
    --                     sAgrExternalRef,
    --                     sAgrBadDebtStatus,
    --                     sAgrLibCourt );
    --                  nReturnCode := 0;
    --                  IF SQL%ROWCOUNT=0 THEN
    --                     nReturnCode := ERR_NO_ROWS_CONST;
    --                  END IF;
    --               END;
    --            END IF;
    --            IF ( sCjuCode < '2000' ) THEN
    --               BEGIN
    --                  INSERT INTO  ACTEURPARTICULIER (
    --                     ACTID,
    --                     APADTNAISS,
    --                     APADEPTNAISS,
    --                     APACOMNAISS,
    --                     APANBENFANT,
    --                     APASEXE,
    --                     PAYCODE,
    --                     APAEMPLOYEUR,
    --                     APASITFAM,
    --                     APAFLAGPROPRIETE,
    --                     APATITRE,
    --                     APANOMMARITAL,
    --                     APAREGIMEMATRIM,
    --                     APANOMPATRONYMIQUE,
    --                     APAPRENOM,
    --                     APACHGREGIMEMATRIM,
    --                     APACODENIVEAUETUDE,
    --                     APADIRFONCTION,
    --                     APAFLAGDIRIGEANT,
    --                     APAFLAGHOMMECLE,
    --                     APAFLAGINTERDITBANCAIRE,
    --                     APAFLAGSUCCESSIONPRET,
    --                     APAPCTCAPITAL,
    --                     APAANEXPERACTIVITE,
    --                     APAANEXPERIENCEFONCTION,
    --                     APADTPERMISDECONDUIRE,
    --                     APAVILLENAISS )
    --                  VALUES (
    --                     nNewActId,
    --                     dtApaDtNaiss,
    --                     sApaDeptNaiss,
    --                     sApaComNaiss,
    --                     nApaNbEnfant,
    --                     nApaSexe,
    --                     sApaPayCode,
    --                     sApaEmployeur,
    --                     sApaSitFam,
    --                     nApaFlagPropriete,
    --                     sApaTitre,
    --                     sApaNomMarital,
    --                     sApaRegimeMatrim,
    --                     sApaNomPatonyme,
    --                     sApaPrenom,
    --                     sApaChRegimeMatrim,
    --                     sApaCodeNiveauEtude,
    --                     sApaDirFonction ,
    --                     nApaFlagDirigeant,
    --                     nApaFlagHommeCle,
    --                     nApaFlagInterditBancaire,
    --                     nApaFlagSuccessionPret ,
    --                     nApaPctCapital ,
    --                     nApaAnExpActivite ,
    --                     nApaExperienceFonction,
    --                     dtApaDtPermisDeConduire,
    --                     sApaVilleNaiss ) ;
    --                  nReturnCode := 0;
    --                  IF SQL%ROWCOUNT=0 THEN
    --                     nReturnCode := ERR_NO_ROWS_CONST;
    --                  END IF;
    --               END;
    --            ELSIF ( sCjuCode >= '2100' ) AND ( sCjuCode < '2200' ) THEN
    --               BEGIN
    --                  INSERT INTO ACTEURINDIVISION (ACTID,
    --                                                                                                                                             AINNBPARTTOTAL)
    --                  VALUES                       (nNewActId,
    --                                                nAinNbPartTotal);
    --                  nReturnCode := 0;
    --                  IF SQL%ROWCOUNT=0 THEN
    --                     nReturnCode := ERR_NO_ROWS_CONST;
    --                  END IF;
    --               END;
    --            END IF;
    --         END;
    --      END IF;
    --  EXCEPTION
    --    WHEN ERR_PARENT_NOT_FOUND THEN
    --          nReturnCode := ERR_PARENT_ACT_FOUND_CONST;
    --    WHEN DUP_VAL_ON_INDEX THEN
    --          nReturnCode := ERR_DUP_VAL_ON_ACTEUR_CONST ;
    --    WHEN ERR_I_NULL_MANDATORY_KEY THEN
    --          nReturnCode := ERR_VAL_ACT_NULL_CONST;
    --    WHEN ERR_U_NULL_MANDATORY_KEY THEN
    --          nReturnCode := ERR_VAL_ACT_NULL_CONST;
    --    WHEN OTHERS THEN
    --          nReturnCode := -1 * SQLCODE;
    --  END;
    --END I_ACTEUR;
    -- ACTADRESSE --
    PROCEDURE I_ACTADRESSE (
        NADRID                       ACTADRESSE.ADRID%TYPE,
        NACTID                       ACTEUR.ACTID%TYPE,
        NAADFLAGSIEGE                ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER             ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION          ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON            ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL                    ACTADRESSE.AADCOMPL%TYPE,
        SUTICODE                     ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB                   ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE                    ACTADRESSE.AADORDRE%TYPE,
        SAADERRORCODE                ACTADRESSE.AADERRORCODE%TYPE,
        SAADCONTACTCODE              ACTADRESSE.AADCONTACTCODE%TYPE,
        SAADCONTROLCODE              ACTADRESSE.AADCONTROLCODE%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTADRESSE (ADRID,
                                    ACTID,
                                    AADFLAGSIEGE,
                                    AADFLAGCOURRIER,
                                    AADFLAGFACTURATION,
                                    AADFLAGLIVRAISON,
                                    AADCOMPL,
                                    UTICODE,
                                    AADDTMAJ,
                                    AADDTDEB,
                                    AADORDRE,
                                    AADERRORCODE,
                                    AADCONTACTCODE,
                                    AADCONTROLCODE)
                 VALUES (NADRID,
                         NACTID,
                         NAADFLAGSIEGE,
                         NAADFLAGCOURRIER,
                         NAADFLAGFACTURATION,
                         NAADFLAGLIVRAISON,
                         SAADCOMPL,
                         SUTICODE,
                         TRUNC (SYSDATE),
                         DTAADDTDEB,
                         NAADORDRE,
                         SAADERRORCODE,
                         SAADCONTACTCODE,
                         SAADCONTROLCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTADRESSE;

    -- ACTADRESSE --
    PROCEDURE I_ACTADRESSE2 (
        NADRID                       ACTADRESSE.ADRID%TYPE,
        NACTID                       ACTEUR.ACTID%TYPE,
        NAADFLAGSIEGE                ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER             ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION          ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON            ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL                    ACTADRESSE.AADCOMPL%TYPE,
        SUTICODE                     ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB                   ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE                    ACTADRESSE.AADORDRE%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTADRESSE (ADRID,
                                    ACTID,
                                    AADFLAGSIEGE,
                                    AADFLAGCOURRIER,
                                    AADFLAGFACTURATION,
                                    AADFLAGLIVRAISON,
                                    AADCOMPL,
                                    UTICODE,
                                    AADDTMAJ,
                                    AADDTDEB,
                                    AADORDRE)
                 VALUES (NADRID,
                         NACTID,
                         NAADFLAGSIEGE,
                         NAADFLAGCOURRIER,
                         NAADFLAGFACTURATION,
                         NAADFLAGLIVRAISON,
                         SAADCOMPL,
                         SUTICODE,
                         TRUNC (SYSDATE),
                         DTAADDTDEB,
                         NAADORDRE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTADRESSE2;

    PROCEDURE I_ACTCANDIDATURE (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACAORDRE               ACTCANDIDATURE.ACAORDRE%TYPE,
        SACATYPE                ACTCANDIDATURE.ACATYPE%TYPE,
        SACANATURE              ACTCANDIDATURE.ACANATURE%TYPE,
        SACAORIGINE             ACTCANDIDATURE.ACAORIGINE%TYPE,
        NMANID                  ACTCANDIDATURE.MANID%TYPE,
        DTACADTEFFET            ACTCANDIDATURE.ACADTEFFET%TYPE,
        DTACADTTOT              ACTCANDIDATURE.ACADTTOT%TYPE,
        DTACADTTARD             ACTCANDIDATURE.ACADTTARD%TYPE,
        DTACADTLIMITE           ACTCANDIDATURE.ACADTLIMITE%TYPE,
        NACAFLAGOCCUPE          ACTCANDIDATURE.ACAFLAGOCCUPE%TYPE,
        SACAMEMO                ACTCANDIDATURE.ACAMEMO%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTCANDIDATURE (ACTID,
                                        ACAORDRE,
                                        ACATYPE,
                                        ACANATURE,
                                        ACAORIGINE,
                                        MANID,
                                        ACADTEFFET,
                                        ACADTTOT,
                                        ACADTTARD,
                                        ACADTLIMITE,
                                        ACAFLAGOCCUPE,
                                        ACAMEMO)
                 VALUES (NACTID,
                         NACAORDRE,
                         SACATYPE,
                         SACANATURE,
                         SACAORIGINE,
                         NMANID,
                         DTACADTEFFET,
                         DTACADTTOT,
                         DTACADTTARD,
                         DTACADTLIMITE,
                         NACAFLAGOCCUPE,
                         SACAMEMO);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ACA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTCANDIDATURE;

    -- ACTCORRESPONDANT --
    PROCEDURE I_ACTCORRESPONDANT (
        NACTID                          ACTEUR.ACTID%TYPE,
        NACOORDRE                       ACTCORRESPONDANT.ACOORDRE%TYPE,
        SACONOM                         ACTCORRESPONDANT.ACONOM%TYPE,
        SACOQUALITE                     ACTCORRESPONDANT.ACOQUALITE%TYPE,
        SACOTITRE                       ACTCORRESPONDANT.ACOTITRE%TYPE,
        NACOFLAGPREFERE                 ACTCORRESPONDANT.ACOFLAGPREFERE%TYPE,
        SACOINITIALAUTREPRENOM          ACTCORRESPONDANT.ACOINITIALAUTREPRENOM%TYPE,
        SACOPRENOM                      ACTCORRESPONDANT.ACOPRENOM%TYPE,
        SACOCHARACTER                   ACTCORRESPONDANT.ACOCHARACTER%TYPE,
        SACODECISION                    ACTCORRESPONDANT.ACODECISION%TYPE,
        SACOQUALIFICATION               ACTCORRESPONDANT.ACOQUALIFICATION%TYPE,
        DTACODTSTART                    ACTCORRESPONDANT.ACODTSTART%TYPE,
        DTACODTEND                      ACTCORRESPONDANT.ACODTEND%TYPE,
        DTACODTBIRTHDAY                 ACTCORRESPONDANT.ACODTBIRTHDAY%TYPE,
        SACOCALBIRTHDAY                 ACTCORRESPONDANT.ACOCALBIRTHDAY%TYPE,
        SACOSIRET                       ACTCORRESPONDANT.ACOSIRET%TYPE,
        NACOSEX                         ACTCORRESPONDANT.ACOSEX%TYPE,
        NACOWEDDINGCODE                 ACTCORRESPONDANT.ACOWEDDINGCODE%TYPE,
        DTACODTWEDDING                  ACTCORRESPONDANT.ACODTWEDDING%TYPE,
        SACOMEMO                        ACTCORRESPONDANT.ACOMEMO%TYPE,
        SACOFOREIGNNAME                 ACTCORRESPONDANT.ACOFOREIGNNAME%TYPE,
        SACOQUALIFCLASS                 ACTCORRESPONDANT.ACOQUALIFCLASS%TYPE,
        NACTIDEMPLOYER                  ACTCORRESPONDANT.ACTIDEMPLOYER%TYPE,
        SACOERRORCODE                   ACTCORRESPONDANT.ACOERRORCODE%TYPE,
        SACOCONTACTCODE                 ACTCORRESPONDANT.ACOCONTACTCODE%TYPE,
        SACOCONTROLCODE                 ACTCORRESPONDANT.ACOCONTROLCODE%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT      NUMBER;
            LACOORDRE   NUMBER;
        BEGIN
            IF NACOORDRE IS NULL
            THEN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTCORRESPONDANT
                 WHERE ACTID = NACTID;

                LACOORDRE := NCOUNT + 1;
            ELSE
                LACOORDRE := NACOORDRE;
            END IF;

            IF NACOFLAGPREFERE = 1
            THEN
                BEGIN
                    UPDATE ACTCORRESPONDANT
                       SET ACOFLAGPREFERE = 0
                     WHERE ACTID = NACTID;
                END;
            END IF;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM ACTCORRESPONDANT
             WHERE ACTID = NACTID AND ACOORDRE = LACOORDRE;

            IF (NCOUNT = 0)
            THEN
                INSERT INTO ACTCORRESPONDANT (ACTID,
                                              ACOORDRE,
                                              ACONOM,
                                              ACOQUALITE,
                                              ACOTITRE,
                                              ACOFLAGPREFERE,
                                              ACOINITIALAUTREPRENOM,
                                              ACOPRENOM,
                                              ACOCHARACTER,
                                              ACODECISION,
                                              ACOQUALIFICATION,
                                              ACODTSTART,
                                              ACODTEND,
                                              ACODTBIRTHDAY,
                                              ACOCALBIRTHDAY,
                                              ACOSIRET,
                                              ACOSEX,
                                              ACOWEDDINGCODE,
                                              ACODTWEDDING,
                                              ACOMEMO,
                                              ACOFOREIGNNAME,
                                              ACOQUALIFCLASS,
                                              ACTIDEMPLOYER,
                                              ACOERRORCODE,
                                              ACOCONTACTCODE,
                                              ACOCONTROLCODE)
                     VALUES (NACTID,
                             LACOORDRE,
                             SACONOM,
                             SACOQUALITE,
                             SACOTITRE,
                             NACOFLAGPREFERE,
                             SACOINITIALAUTREPRENOM,
                             SACOPRENOM,
                             SACOCHARACTER,
                             SACODECISION,
                             SACOQUALIFICATION,
                             DTACODTSTART,
                             DTACODTEND,
                             DTACODTBIRTHDAY,
                             SACOCALBIRTHDAY,
                             SACOSIRET,
                             NACOSEX,
                             NACOWEDDINGCODE,
                             DTACODTWEDDING,
                             SACOMEMO,
                             SACOFOREIGNNAME,
                             SACOQUALIFCLASS,
                             NACTIDEMPLOYER,
                             SACOERRORCODE,
                             SACOCONTACTCODE,
                             SACOCONTROLCODE);

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ACO_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ACO_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ACO_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTCORRESPONDANT;

    -- ACTTCOVALEUR --
    PROCEDURE I_ACTTCOVALEUR (
        NACTID                           ACTTCOVALEUR.ACTID%TYPE,
        NATVORDRE                        ACTTCOVALEUR.ATVORDRE%TYPE,
        NTCOID                           ACTTCOVALEUR.TCOID%TYPE,
        STVACODE                         ACTTCOVALEUR.TVACODE%TYPE,
        DTATVDTDEB                       ACTTCOVALEUR.ATVDTDEB%TYPE,
        DTATVDTFIN                       ACTTCOVALEUR.ATVDTFIN%TYPE,
        DTATVDTMAJ                       ACTTCOVALEUR.ATVDTMAJ%TYPE,
        SUTICODE                         ACTTCOVALEUR.UTICODE%TYPE,
        NCREID                           ACTTCOVALEUR.CREID%TYPE,
        SATVCODEEXTERNE                  ACTTCOVALEUR.ATVCODEEXTERNE%TYPE,
        SATVETABLISSEMENTCOTEUR          ACTTCOVALEUR.ATVETABLISSEMENTCOTEUR%TYPE,
        SATVETABLISSEMENTPILOTE          ACTTCOVALEUR.ATVETABLISSEMENTPILOTE%TYPE,
        NATVFLAGFORCE                    ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
        NRETURNCODE               IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTTCOVALEUR (ACTID,
                                      ATVORDRE,
                                      TCOID,
                                      TVACODE,
                                      ATVDTDEB,
                                      ATVDTFIN,
                                      ATVDTMAJ,
                                      UTICODE,
                                      CREID,
                                      ATVCODEEXTERNE,
                                      ATVETABLISSEMENTPILOTE,
                                      ATVETABLISSEMENTCOTEUR,
                                      ATVFLAGFORCE)
                 VALUES (NACTID,
                         NATVORDRE,
                         NTCOID,
                         STVACODE,
                         DTATVDTDEB,
                         DTATVDTFIN,
                         DTATVDTMAJ,
                         SUTICODE,
                         NCREID,
                         SATVCODEEXTERNE,
                         SATVETABLISSEMENTPILOTE,
                         SATVETABLISSEMENTCOTEUR,
                         NATVFLAGFORCE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ARA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RAT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTTCOVALEUR;

    PROCEDURE U_ACTTCOVALEUR (
        NACTID                           ACTTCOVALEUR.ACTID%TYPE,
        NATVORDRE                        ACTTCOVALEUR.ATVORDRE%TYPE,
        NTCOID                           ACTTCOVALEUR.TCOID%TYPE,
        STVACODE                         ACTTCOVALEUR.TVACODE%TYPE,
        DTATVDTDEB                       ACTTCOVALEUR.ATVDTDEB%TYPE,
        DTATVDTFIN                       ACTTCOVALEUR.ATVDTFIN%TYPE,
        DTATVDTMAJ                       ACTTCOVALEUR.ATVDTMAJ%TYPE,
        SUTICODE                         ACTTCOVALEUR.UTICODE%TYPE,
        NCREID                           ACTTCOVALEUR.CREID%TYPE,
        SATVCODEEXTERNE                  ACTTCOVALEUR.ATVCODEEXTERNE%TYPE,
        SATVETABLISSEMENTCOTEUR          ACTTCOVALEUR.ATVETABLISSEMENTCOTEUR%TYPE,
        SATVETABLISSEMENTPILOTE          ACTTCOVALEUR.ATVETABLISSEMENTPILOTE%TYPE,
        NATVFLAGFORCE                    ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
        NRETURNCODE               IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTTCOVALEUR
               SET ATVDTDEB = DTATVDTDEB,
                   ATVDTFIN = DTATVDTFIN,
                   ATVDTMAJ = DTATVDTMAJ,
                   UTICODE = SUTICODE,
                   CREID = NCREID,
                   ATVCODEEXTERNE = SATVCODEEXTERNE,
                   ATVETABLISSEMENTCOTEUR = SATVETABLISSEMENTCOTEUR,
                   ATVFLAGFORCE = NATVFLAGFORCE
             WHERE     ACTID = NACTID
                   AND ATVORDRE = NATVORDRE
                   AND TCOID = NTCOID
                   AND TVACODE = STVACODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ARA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RAT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTTCOVALEUR;

    PROCEDURE D_ACTTCOVALEUR (NACTID               ACTTCOVALEUR.ACTID%TYPE,
                              NATVORDRE            ACTTCOVALEUR.ATVORDRE%TYPE,
                              NTCOID               ACTTCOVALEUR.TCOID%TYPE,
                              STVACODE             ACTTCOVALEUR.TVACODE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE ACTTCOVALEUR
             WHERE     ACTID = NACTID
                   AND ATVORDRE = NATVORDRE
                   AND TCOID = NTCOID
                   AND TVACODE = STVACODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_RAT_FOUND_CONST;
        END;
    END D_ACTTCOVALEUR;

    -- ACTPHASE --
    PROCEDURE I_ACTPHASE (NACTID               ACTPHASE.ACTID%TYPE,
                          SPHACODE             ACTPHASE.PHACODE%TYPE,
                          NAPHORDRE            ACTPHASE.APHORDRE%TYPE,
                          SPHADEST             ACTPHASE.PHADEST%TYPE,
                          SJALCODE             ACTPHASE.JALCODE%TYPE,
                          DTAPHDTDEB           ACTPHASE.APHDTDEB%TYPE,
                          SUTICODE             ACTPHASE.UTICODE%TYPE,
                          DTAPHDTFIN           ACTPHASE.APHDTFIN%TYPE,
                          DTAPHDTMAJ           ACTPHASE.APHDTMAJ%TYPE,
                          NCREID               ACTPHASE.CREID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            VARPHACODE     VARCHAR (20);
            VARAPHORDRE    NUMBER;
            VARAPHDTDEB    ACTPHASE.APHDTDEB%TYPE;
            DTDTAPHDTDEB   DATE;
        BEGIN
            IF DTAPHDTDEB IS NULL
            THEN
                DTDTAPHDTDEB := SYSDATE;
            ELSE
                DTDTAPHDTDEB := DTAPHDTDEB;
            END IF;

            BEGIN
                BEGIN
                    SELECT PHACODE, APHORDRE, APHDTDEB
                      INTO VARPHACODE, VARAPHORDRE, VARAPHDTDEB
                      FROM ACTEUR ACT, ACTPHASE APH
                     WHERE     APH.ACTID = NACTID
                           AND APH.ACTID = ACT.ACTID
                           AND (APHORDRE, ACT.ACTID) IN
                                   (  SELECT MAX (APHORDRE), ACT.ACTID
                                        FROM ACTEUR ACT, ACTPHASE APH
                                       WHERE ACT.ACTID = APH.ACTID
                                    GROUP BY ACT.ACTID);
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                END;

                IF NVL (NRETURNCODE, 0) != ERR_NO_ROWS_CONST
                THEN
                    IF SPHACODE = 'INI' AND NAPHORDRE = 1
                    THEN
                        BEGIN
                            UPDATE ACTPHASE
                               SET JALCODE = SJALCODE,
                                   APHDTDEB = DTDTAPHDTDEB,
                                   CREID = NCREID,
                                   APHDTFIN = DTAPHDTFIN,
                                   APHDTMAJ = DTAPHDTMAJ
                             WHERE     ACTID = NACTID
                                   AND APHORDRE = 1
                                   AND PHACODE = 'INI'
                                   AND PHADEST = 'ACTEUR';
                        END;
                    ELSE
                        IF VARAPHDTDEB > DTDTAPHDTDEB
                        THEN
                            BEGIN
                                UPDATE ACTPHASE
                                   SET APHDTDEB = DTDTAPHDTDEB
                                 WHERE     ACTID = NACTID
                                       AND APHORDRE = VARAPHORDRE
                                       AND PHACODE = VARPHACODE
                                       AND PHADEST = 'ACTEUR';
                            END;
                        END IF;

                        IF TRUNC (SYSDATE) > DTDTAPHDTDEB
                        THEN
                            BEGIN
                                UPDATE ACTPHASE
                                   SET APHDTFIN = DTDTAPHDTDEB
                                 WHERE     ACTID = NACTID
                                       AND APHORDRE = VARAPHORDRE
                                       AND PHACODE = VARPHACODE
                                       AND PHADEST = 'ACTEUR';
                            END;
                        ELSE
                            BEGIN
                                UPDATE ACTPHASE
                                   SET APHDTFIN = TRUNC (SYSDATE)
                                 WHERE     ACTID = NACTID
                                       AND APHORDRE = VARAPHORDRE
                                       AND PHACODE = VARPHACODE
                                       AND PHADEST = 'ACTEUR';
                            END;
                        END IF;
                    END IF;
                ELSIF SPHACODE = 'ACTIVE'
                THEN
                    INSERT INTO ACTPHASE (ACTID,
                                          PHACODE,
                                          APHORDRE,
                                          PHADEST,
                                          JALCODE,
                                          APHDTDEB,
                                          UTICODE,
                                          APHDTFIN,
                                          APHDTMAJ,
                                          CREID)
                         VALUES (NACTID,
                                 'INI',
                                 1,
                                 SPHADEST,
                                 NULL,
                                 DTDTAPHDTDEB,
                                 SUTICODE,
                                 DTDTAPHDTDEB, -- The begin and end date of INITIAL phase would be same.
                                 DTAPHDTMAJ,
                                 NCREID);
                END IF;

                INSERT INTO ACTPHASE (ACTID,
                                      PHACODE,
                                      APHORDRE,
                                      PHADEST,
                                      JALCODE,
                                      APHDTDEB,
                                      UTICODE,
                                      APHDTFIN,
                                      APHDTMAJ,
                                      CREID)
                     VALUES (NACTID,
                             SPHACODE,
                             NAPHORDRE,
                             SPHADEST,
                             SJALCODE,
                             DTDTAPHDTDEB,
                             SUTICODE,
                             DTAPHDTFIN,
                             DTAPHDTMAJ,
                             NCREID);

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            EXCEPTION
                WHEN ERR_PARENT_NOT_FOUND
                THEN
                    -- CV-26012012 CFS55477
                    -- nReturnCode := ERR_PARENT_APH_FOUND_CONST;
                    NRETURNCODE :=
                        F_GETFKMOREINFO (SQLERRM, ERR_PARENT_APH_FOUND_CONST);
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_APH_CONST;
                WHEN ERR_U_NULL_MANDATORY_KEY
                THEN
                    NRETURNCODE := ERR_VAL_APH_NULL_CONST;
                WHEN ERR_I_NULL_MANDATORY_KEY
                THEN
                    NRETURNCODE := ERR_VAL_APH_NULL_CONST;
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END I_ACTPHASE;

    -- ACTRELATION --
    PROCEDURE I_ACTRELATION (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTEUR.ACTID%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB              ACTRELATION.AREDTDEB%TYPE,
        NAREQP                  ACTRELATION.AREQP%TYPE,
        DTAREDTFIN              ACTRELATION.AREDTFIN%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTRELATION (ACTID,
                                     ACTIDRELATION,
                                     TRECODE,
                                     AREDTDEB,
                                     AREQP,
                                     AREDTFIN)
                 VALUES (NACTID,
                         NACTIDRELATION,
                         STRECODE,
                         DTAREDTDEB,
                         NAREQP,
                         DTAREDTFIN);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;

            --ALA 050707
            IF NRETURNCODE = 0
            THEN
                UPDATE ACTEUR
                   SET ACTDTMAJ = TRUNC (SYSDATE)
                 WHERE ACTID IN (NACTID, NACTIDRELATION);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARE_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARE_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RELAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RELAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRELATION;

    -- RIB --
    PROCEDURE I_RIB (
        SBGUBANQUE                    RIB.BGUBANQUE%TYPE,
        SBGUGUICHET                   RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE                    RIB.RIBCOMPTE%TYPE,
        SRIBCLE                       RIB.RIBCLE%TYPE,
        SRIBINTITULE                  RIB.RIBINTITULE%TYPE,
        NNEWRIB                   OUT RIB.RIBID%TYPE,
        NRIBIBANCLE                   RIB.RIBIBANCLE%TYPE, -- CV-26112002 FSA-10616
        SRIBIBANCOMPTE                RIB.RIBIBANCOMPTE%TYPE, -- CV-26112002 FSA-10616
        SBGUGUICHETINVARIANT          RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG Report FSA-20300
        SDEVCODE                      RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPE               RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE            IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            SELECT SEQ_RIBID.NEXTVAL INTO NNEWRIB FROM DUAL;

            INSERT INTO RIB (RIBID,
                             BGUBANQUE,
                             BGUGUICHET,
                             RIBCOMPTE,
                             RIBCLE,
                             RIBINTITULE,
                             RIBIBANCLE,
                             RIBIBANCOMPTE,
                             BGUGUICHETINVARIANT,
                             DEVCODE,
                             RIBACCOUNTTYPE)
                 VALUES (NNEWRIB,
                         SBGUBANQUE,
                         SBGUGUICHET,
                         SRIBCOMPTE,
                         SRIBCLE,
                         SRIBINTITULE,
                         NRIBIBANCLE,
                         SRIBIBANCOMPTE,
                         SBGUGUICHETINVARIANT,
                         SDEVCODE,
                         SRIBACCOUNTTYPE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RIB_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RIB_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIB_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIB_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_RIB;

    /*
    PROCEDURE I_RIB (
    sBguBanque           RIB.BGUBANQUE%TYPE,
    sBguGuichet          RIB.BGUGUICHET%TYPE,
    sRibCompte           RIB.RIBCOMPTE%TYPE,
    sRibCle              RIB.RIBCLE%TYPE,
    sRibIntitule         RIB.RIBINTITULE%TYPE,
    nNewRib              OUT RIB.RIBID%TYPE,
    nRibIBANCle          RIB.RIBIBANCLE%TYPE,                -- CV-26112002 FSA-10616
    sRibIBANCompte       RIB.RIBIBANCOMPTE%TYPE,             -- CV-26112002 FSA-10616
    sBguGuichetInvariant RIB.BGUGUICHETINVARIANT%TYPE,                   -- CV-29062005 FSA-12995 SG Report FSA-20300
    nReturnCode          IN OUT NUMBER) AS
    BEGIN
    BEGIN
    SELECT SEQ_RIBID.NEXTVAL INTO nNewRib FROM DUAL;
    INSERT INTO RIB (
    RIBID,
    BGUBANQUE,
    BGUGUICHET,
    RIBCOMPTE,
    RIBCLE,
    RIBINTITULE,
    RIBIBANCLE,
    RIBIBANCOMPTE,
    BGUGUICHETINVARIANT,
    DEVCODE
    )
    VALUES     ( nNewRib,
    sBguBanque,
    sBguGuichet,
    sRibCompte,
    sRibCle,
    sRibIntitule,
    nRibIBANCLe,
    sRibIBANCompte,
    sBguGuichetInvariant,
    'EUR'
    );
    nReturnCode := 0;
    IF SQL%ROWCOUNT=0 THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
    nReturnCode := ERR_PARENT_RIB_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
    nReturnCode := ERR_DUP_VAL_ON_RIB_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_RIB_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_RIB_NULL_CONST;
    WHEN OTHERS THEN
    nReturnCode := -1 * SQLCODE;
    END;
    END I_RIB;
    */
    -- ACTRIB --
    PROCEDURE I_ACTRIB (
        NACTID                      ACTEUR.ACTID%TYPE,
        NRIBID                      RIB.RIBID%TYPE,
        NRIBIDREMPLACE              ACTRIB.RIBIDREMPLACE%TYPE,
        DTARIDTREMPLACE             ACTRIB.ARIDTREMPLACE%TYPE,
        NCREID                      ACTRIB.CREID%TYPE,
        SARITYPE                    ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB                  ACTRIB.ARIDTDEB%TYPE,
        NRIBIDINTERMEDIATE          ACTRIB.RIBIDINTERMEDIATE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTRIB (ACTID,
                                RIBID,
                                RIBIDREMPLACE,
                                ARIDTREMPLACE,
                                CREID,
                                ARITYPE,
                                ARIDTDEB,
                                RIBIDINTERMEDIATE)
                 VALUES (NACTID,
                         NRIBID,
                         NRIBIDREMPLACE,
                         DTARIDTREMPLACE,
                         NCREID,
                         SARITYPE,
                         DTARIDTDEB,
                         NRIBIDINTERMEDIATE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARI_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRIB;

    /*
    PROCEDURE I_ACTRIB (
    nActId ACTEUR.ACTID%TYPE,
    nRibId RIB.RIBID%TYPE,
    nRibIdRemplace ACTRIB.RIBIDREMPLACE%TYPE,
    dtAriDtRemplace ACTRIB.ARIDTREMPLACE%TYPE,
    nCreId ACTRIB.CREID%TYPE,
    sAriType ACTRIB.ARITYPE%TYPE,
    dtAriDtDeb ACTRIB.ARIDTDEB%TYPE,
    nReturnCode IN OUT NUMBER) AS
    BEGIN
    BEGIN
    INSERT INTO ACTRIB (
    ACTID,
    RIBID,
    RIBIDREMPLACE,
    ARIDTREMPLACE,
    CREID,
    ARITYPE,
    ARIDTDEB)
    VALUES        ( nActId,
    nRibId,
    nRibIdRemplace,
    dtAriDtRemplace,
    nCreId,
    sAriType,
    dtAriDtDeb );
    nReturnCode := 0;
    IF SQL%ROWCOUNT=0 THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
    nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
    nReturnCode := ERR_DUP_VAL_ON_ARI_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY  THEN
    nReturnCode := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
    nReturnCode := -1 * SQLCODE;
    END;
    END I_ACTRIB;*/
    -- ACTRIBTMPDEFAUT --
    PROCEDURE I_ACTRIBTMPDEFAUT (
        NACTID               ACTEUR.ACTID%TYPE,
        NRIBID               RIB.RIBID%TYPE,
        SATDTYPE             ACTRIBTMPDEFAUT.ATDTYPE%TYPE,
        STMPCODE             ACTRIBTMPDEFAUT.TMPCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTRIBTMPDEFAUT (ACTID,
                                         RIBID,
                                         ATDTYPE,
                                         TMPCODE)
                 VALUES (NACTID,
                         NRIBID,
                         SATDTYPE,
                         STMPCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ATD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRIBTMPDEFAUT;

    -- RIBINFO --
    PROCEDURE I_RIBINFO (NRIBID                RIBINFO.RIBID%TYPE,
                         NRINDELAIP            RIBINFO.RINDELAIP%TYPE,
                         NRINDELAIV            RIBINFO.RINDELAIV%TYPE,
                         NRINVALREMHP          RIBINFO.RINVALREMHP%TYPE,
                         NRINVALREMSP          RIBINFO.RINVALREMSP%TYPE,
                         NRINVALVIR            RIBINFO.RINVALVIR%TYPE,
                         NRINVALPRL            RIBINFO.RINVALPRL%TYPE,
                         NRINVALCHQ            RIBINFO.RINVALCHQ%TYPE,
                         NRINFORCEPRL          RIBINFO.RINFORCEPRL%TYPE,
                         NRINFORCEVIR          RIBINFO.RINFORCEVIR%TYPE,
                         NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO RIBINFO (RIBID,
                                 RINBRDCHQSP,
                                 RINBRDVIR,
                                 RINBRDPRL,
                                 RINBRDCHQHP,
                                 RINDELAIP,
                                 RINDELAIV,
                                 RINVALREMHP,
                                 RINVALREMSP,
                                 RINVALVIR,
                                 RINVALPRL,
                                 RINVALCHQ,
                                 RINFORCEPRL,
                                 RINFORCEVIR)
                 VALUES (NRIBID,
                         0,
                         0,
                         0,
                         0,
                         NRINDELAIP,
                         NRINDELAIV,
                         NRINVALREMHP,
                         NRINVALREMSP,
                         NRINVALVIR,
                         NRINVALPRL,
                         NRINVALCHQ,
                         NRINFORCEPRL,
                         NRINFORCEVIR);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RIN_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RIN_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_RIBINFO;

    -- ACTROLE --
    PROCEDURE I_ACTROLE (
        NACTID                     ACTEUR.ACTID%TYPE,
        SROLCODE                   ACTROLE.ROLCODE%TYPE,
        NARONBEXFAC                ACTROLE.ARONBEXFAC%TYPE,
        SARORECAPFAC               ACTROLE.ARORECAPFAC%TYPE,
        NAROGRPFAC                 ACTROLE.AROGRPFAC%TYPE,
        NAROGRPPREL                ACTROLE.AROGRPPREL%TYPE,
        SAROREFEXTERNE             ACTROLE.AROREFEXTERNE%TYPE,
        NAROFACAVANCE              ACTROLE.AROFACAVANCE%TYPE,
        SAROPERIODE                ACTROLE.AROPERIODE%TYPE,     -- CV-19062001
        NAROMULTIPLE               ACTROLE.AROMULTIPLE%TYPE,    -- CV-19062001
        SAROEDITFAC                ACTROLE.AROEDITFAC%TYPE,     -- DA-29092001
        NAROGRPDEC                 ACTROLE.AROGRPDEC%TYPE,
        SAROENVOINOTICE            ACTROLE.AROENVOINOTICE%TYPE,
        SAROFORMATSORTIE           ACTROLE.AROFORMATSORTIE%TYPE,
        SAROINVOICEMETHOD          ACTROLE.AROINVOICEMETHOD%TYPE, -- CFS-47412
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT          NUMBER;
            NANNEEEXIST     NUMBER;
            NMOISEXIST      NUMBER;
            NNUMERO         NUMBER;
            DTSAMPLE        DATE;
            SACTIDGESTION   NUMBER;
            SAROREF         ACTROLE.AROREFEXTERNE%TYPE;
        BEGIN
            PACOM_UPDATEACTEUR_SHARED.I_ACTROLE_BEFORE (NACTID,
                                                        SROLCODE,
                                                        NRETURNCODE);
            NANNEEEXIST := 0;
            NMOISEXIST := 0;
            NNUMERO := -1;
            DTSAMPLE := NULL;
            SACTIDGESTION := NULL;
            SAROREF := NULL;
            PA_COMMON.S_NUMEROFORMATE ('AROPREFEXTERNE',
                                       SACTIDGESTION,
                                       'AROPREFEXTERNE',
                                       DTSAMPLE,
                                       NANNEEEXIST,
                                       NMOISEXIST,
                                       NNUMERO,
                                       SAROREF);

            INSERT INTO ACTROLE (ACTID,
                                 ROLCODE,
                                 ARONBEXFAC,
                                 ARORECAPFAC,
                                 AROGRPFAC,
                                 AROGRPPREL,
                                 AROREFEXTERNE,
                                 AROFACAVANCE,
                                 AROPERIODE,                    -- CV-19062001
                                 AROMULTIPLE,                   -- CV-19062001
                                 AROEDITFAC,                    -- DA-29092001
                                 AROGRPDEC,
                                 AROENVOINOTICE,
                                 AROFORMATSORTIE,
                                 AROINVOICEMETHOD)
                 VALUES (NACTID,
                         SROLCODE,
                         NARONBEXFAC,
                         SARORECAPFAC,
                         NAROGRPFAC,
                         NAROGRPPREL,
                         SAROREF,
                         NAROFACAVANCE,
                         SAROPERIODE,                           -- CV-19062001
                         NAROMULTIPLE,                          -- CV-19062001
                         SAROEDITFAC,
                         NAROGRPDEC,
                         SAROENVOINOTICE,
                         SAROFORMATSORTIE,                      -- DA-29092001
                         SAROINVOICEMETHOD);                      -- CFS-47412

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARO_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARO_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARO_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTROLE;

    -- ACTSTATISTIQUE --
    PROCEDURE I_ACTSTATISTIQUE (
        P_ACTID               ACTSTATISTIQUE.ACTID%TYPE,
        P_SACCODE             ACTSTATISTIQUE.SACCODE%TYPE,
        P_SAVCODEVAL          ACTSTATISTIQUE.SAVCODEVAL%TYPE,
        P_ASTLIBRE            ACTSTATISTIQUE.ASTLIBRE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NRETURNCODE   NUMBER;
        BEGIN
            INSERT INTO ACTSTATISTIQUE (ACTID,
                                        SACCODE,
                                        SAVCODEVAL,
                                        ASTLIBRE)
                 VALUES (P_ACTID,
                         P_SACCODE,
                         P_SAVCODEVAL,
                         P_ASTLIBRE);

            ------------MTR 09/08/2018
            I_ACTAROAGE (P_ACTID,
                         'CLIENT',
                         '2',
                         SYSDATE,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NRETURNCODE);
        END;
    END I_ACTSTATISTIQUE;

    PROCEDURE I_ACTSTATISTIQUE (
        P_ACTID         ACTSTATISTIQUE.ACTID%TYPE,
        P_SACCODE       ACTSTATISTIQUE.SACCODE%TYPE,
        P_SAVCODEVAL    ACTSTATISTIQUE.SAVCODEVAL%TYPE,
        P_ASTLIBRE      ACTSTATISTIQUE.ASTLIBRE%TYPE)
    AS
    BEGIN
        DECLARE
            NRETURNCODE   NUMBER;
            NCOUNT        NUMBER := 0;
        BEGIN
            SELECT COUNT (1)
              INTO NCOUNT
              FROM ACTSTATISTIQUE
             WHERE ACTID = P_ACTID AND SACCODE = P_SACCODE;

            IF NCOUNT > 0
            THEN
                UPDATE ACTSTATISTIQUE
                   SET SAVCODEVAL = P_SAVCODEVAL, ASTLIBRE = P_ASTLIBRE
                 WHERE ACTID = P_ACTID AND SACCODE = P_SACCODE;
            ELSE
                INSERT INTO ACTSTATISTIQUE (ACTID,
                                            SACCODE,
                                            SAVCODEVAL,
                                            ASTLIBRE)
                     VALUES (P_ACTID,
                             P_SACCODE,
                             P_SAVCODEVAL,
                             P_ASTLIBRE);
            END IF;                                                   --kilani

            ------------MTR 09/08/2018
            I_ACTAROAGE (P_ACTID,
                         'CLIENT',
                         '2',
                         SYSDATE,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NULL,
                         NRETURNCODE);
        END;
    END I_ACTSTATISTIQUE;

    -- ACTTELECOM --
    PROCEDURE I_ACTTELECOM (
        NACTID                   ACTEUR.ACTID%TYPE,
        NATEORDRE                ACTTELECOM.ATEORDRE%TYPE,
        SATENUM                  ACTTELECOM.ATENUM%TYPE,
        SATETYPE                 ACTTELECOM.ATETYPE%TYPE,
        DTATEDTEFFET             ACTTELECOM.ATEDTEFFET%TYPE,
        DTATEDTFIN               ACTTELECOM.ATEDTFIN%TYPE,
        NATEFLAGTELECOM          ACTTELECOM.ATEFLAGPREFERE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTTELECOM (ACTID,
                                    ATEORDRE,
                                    ATENUM,
                                    ATETYPE,
                                    ATEDTEFFET,
                                    ATEDTFIN,
                                    ATEFLAGPREFERE)
                 VALUES (NACTID,
                         NATEORDRE,
                         SATENUM,
                         SATETYPE,
                         DTATEDTEFFET,
                         DTATEDTFIN,
                         NATEFLAGTELECOM);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- nReturnCode := ERR_PARENT_ATE_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ATE_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ATE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTTELECOM;

    -- LKACTTELCOR --
    PROCEDURE I_LKACTTELCOR (
        NACTID                   ACTEUR.ACTID%TYPE,
        NACOORDRE                LKACTTELCOR.ACOORDRE%TYPE,
        NATEORDRE                LKACTTELCOR.ATEORDRE%TYPE,
        NATCFLAGPREFERE          LKACTTELCOR.ATCFLAGPREFERE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKACTTELCOR (ACTID,
                                     ACOORDRE,
                                     ATEORDRE,
                                     ATCFLAGPREFERE)
                 VALUES (NACTID,
                         NACOORDRE,
                         NATEORDRE,
                         NATCFLAGPREFERE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ATC_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_TELCOR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKACTTELCOR;

    PROCEDURE U_LKACTTELCOR (
        NACTID                   ACTEUR.ACTID%TYPE,
        NACOORDRE                LKACTTELCOR.ACOORDRE%TYPE,
        NATEORDRE                LKACTTELCOR.ATEORDRE%TYPE,
        NATCFLAGPREFERE          LKACTTELCOR.ATCFLAGPREFERE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKACTTELCOR
               SET ATCFLAGPREFERE = NATCFLAGPREFERE
             WHERE     ACTID = NACTID
                   AND ACOORDRE = NACOORDRE
                   AND ATEORDRE = NATEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ATC_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_TELCOR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKACTTELCOR;

    PROCEDURE D_ACTEURGESTION (NACTID               ACTEUR.ACTID%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOPTIONPROEXT   NUMBER;
            NANY            NUMBER;
        BEGIN
            NRETURNCODE := 0;
            PA_COMMON.S_TPALOGIQUE ('MANDANT', 'PROPRIOEXT', NOPTIONPROEXT);

            IF (NOPTIONPROEXT = 1)
            THEN
                SELECT COUNT (1)
                  INTO NANY
                  FROM ACTROLE
                 WHERE ACTID = NACTID AND ROLCODE = 'PROEXT';
            ELSE
                NANY := 0;
            END IF;

            IF (NANY = 0)
            THEN
                SELECT COUNT (*)
                  INTO NANY
                  FROM ACTEURGESTION
                 WHERE ACTID = NACTID;

                IF (NANY > 0)
                THEN
                    DELETE FROM ACTEURGESTION
                          WHERE ACTID = NACTID;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTEURGESTION;

    PROCEDURE D_ACTEURINDIVISION (NACTID               ACTEUR.ACTID%TYPE,
                                  NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOPTIONPROEXT   NUMBER;
            NANY            NUMBER;
        BEGIN
            NRETURNCODE := 0;

            SELECT COUNT (*)
              INTO NANY
              FROM ACTEURINDIVISION
             WHERE ACTID = NACTID;

            IF (NANY > 0)
            THEN
                DELETE FROM ACTEURINDIVISION
                      WHERE ACTID = NACTID;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTEURINDIVISION;

    PROCEDURE D_ACTEURPARTICULIER (NACTID               ACTEUR.ACTID%TYPE,
                                   NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOPTIONPROEXT   NUMBER;
            NANY            NUMBER;
        BEGIN
            NRETURNCODE := 0;

            SELECT COUNT (*)
              INTO NANY
              FROM ACTEURPARTICULIER
             WHERE ACTID = NACTID;

            IF (NANY > 0)
            THEN
                DELETE FROM ACTEURPARTICULIER
                      WHERE ACTID = NACTID;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTEURPARTICULIER;

    -- Procedures de mise a jour --
    -- ACTEUR --
    PROCEDURE U_ACTEUR (
        NACTID                            ACTEUR.ACTID%TYPE,
        SUGECODE                          ACTEUR.UGECODE%TYPE,
        SUTICODECREAT                     ACTEUR.UTICODECREAT%TYPE,
        DTACTDTCREAT                      ACTEUR.ACTDTCREAT%TYPE,
        SACTCODE                          ACTEUR.ACTCODE%TYPE,
        SCJUCODE                          ACTEUR.CJUCODE%TYPE,
        SPAYCODECATJURIDIQUE              ACTEUR.PAYCODECATJURIDIQUE%TYPE,
        SUTICODEMAJ                       ACTEUR.UTICODEMAJ%TYPE,
        SACTLIBCOURT                      ACTEUR.ACTLIBCOURT%TYPE,
        SACTNOM                           ACTEUR.ACTNOM%TYPE,
        SACTNOM2                          ACTEUR.ACTNOM2%TYPE,
        SACTSIRET                         ACTEUR.ACTSIRET%TYPE,
        DTACTDTMAJ                        ACTEUR.ACTDTMAJ%TYPE,
        SPAYCODE                          ACTEUR.PAYCODE%TYPE,
        SLANCODE                          ACTEUR.LANCODE%TYPE,
        SAGEEMETTEUR                      ACTEURGESTION.AGEEMETTEUR%TYPE,
        NFLAGSOCIETE                      NUMBER,
        NACTFLAGTAXPROF                   ACTEUR.ACTFLAGTAXPROF%TYPE,
        NACTCAPITAL                       ACTEUR.ACTCAPITAL%TYPE,
        NACTFINMOISFISC                   ACTEUR.ACTFINMOISFISC%TYPE,
        SACTNUMRCM                        ACTEUR.ACTNUMRCM%TYPE,
        SNAFCODE                          ACTEUR.NAFCODE%TYPE,
        SPAYCODENAF                       ACTEUR.PAYCODENAF%TYPE,
        SACTTVACE                         ACTEUR.ACTTVACE%TYPE,
        SACTCODERCM                       ACTEUR.ACTCODERCM%TYPE,
        SACTMEMO                          ACTEUR.ACTMEMO%TYPE,
        DTAPADTNAISS                      ACTEURPARTICULIER.APADTNAISS%TYPE,
        SAPADEPTNAISS                     ACTEURPARTICULIER.APADEPTNAISS%TYPE,
        SAPACOMNAISS                      ACTEURPARTICULIER.APACOMNAISS%TYPE,
        NAPANBENFANT                      ACTEURPARTICULIER.APANBENFANT%TYPE,
        NAPASEXE                          ACTEURPARTICULIER.APASEXE%TYPE,
        SAPAPAYCODE                       ACTEURPARTICULIER.PAYCODE%TYPE,
        SAPAEMPLOYEUR                     ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
        SAPASITFAM                        ACTEURPARTICULIER.APASITFAM%TYPE,
        NAPAFLAGPROPRIETE                 ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
        SAPATITRE                         ACTEURPARTICULIER.APATITRE%TYPE,
        SAPANOMMARITAL                    ACTEURPARTICULIER.APANOMMARITAL%TYPE,
        SAPAREGIMEMATRIM                  ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
        SAGECIB                           ACTEURGESTION.AGECIB%TYPE,
        SAGELOGO                          ACTEURGESTION.AGELOGO%TYPE,
        NAGEDELAIEXIGIBLE                 ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
        SDEVCODE                          ACTEUR.DEVCODE%TYPE,
        STDRCODEEFFET                     ACTEURGESTION.TDRCODEEFFET%TYPE,
        STDRCODEPRL                       ACTEURGESTION.TDRCODEPRL%TYPE,
        STDRCODEPRLACCELERE               ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
        STDRCODEVIR                       ACTEURGESTION.TDRCODEVIR%TYPE,
        SAGESEPAIDENTIFIER                ACTEURGESTION.AGESEPAIDENTIFIER%TYPE,
        NAINNBPARTTOTAL                   ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
        SAGEEMETVIR                       ACTEURGESTION.AGEEMETVIR%TYPE,
        SACTLIBCHEQUE                     ACTEUR.ACTLIBCHEQUE%TYPE,
        NTCIID                            ACTEURGESTION.TCIID%TYPE,
        BAGEFLAGIRFACTURE                 ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
        BAGEFLAGIRCHQ                     ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
        STAXCODE                          ACTEURGESTION.TAXCODE%TYPE,
        NRUBID                            ACTEURGESTION.RUBID%TYPE,
        NAGEMTFACMINI                     ACTEURGESTION.AGEMTFACMINI%TYPE,
        SACTREGIMETVA                     ACTEUR.ACTREGIMETVA%TYPE,
        NACTFLAGAGREMENT                  ACTEUR.ACTFLAGAGREMENT%TYPE,
        SACTRATTACHEMENT                  ACTEUR.ACTRATTACHEMENT%TYPE,
        DTACTDTIMMATRICULATION            ACTEUR.ACTDTIMMATRICULATION%TYPE, -- CV-03122001 DMF-64
        NACTEFFECTIF                      ACTEUR.ACTEFFECTIF%TYPE, -- CV-27022003 FSA-11420
        SAPANOMPATONYME                   ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
        SAPAPRENOM                        ACTEURPARTICULIER.APAPRENOM%TYPE,
        SAPAMIDDLENAME                    ACTEURPARTICULIER.APAMIDDLENAME%TYPE,
        SAPACHREGIMEMATRIM                ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
        SAPACODENIVEAUETUDE               ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
        SAPADIRFONCTION                   ACTEURPARTICULIER.APADIRFONCTION%TYPE,
        NAPAFLAGDIRIGEANT                 ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
        NAPAFLAGHOMMECLE                  ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
        NAPAFLAGINTERDITBANCAIRE          ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
        NAPAFLAGSUCCESSIONPRET            ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
        NAPAPCTCAPITAL                    ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
        NAPAANEXPACTIVITE          IN OUT ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
        NAPAEXPERIENCEFONCTION     IN OUT ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
        NACTFLAGNONDECLASSABLE            ACTEUR.ACTFLAGNONDECLASSABLE%TYPE, -- CV-18082004 FSA-16070 NL
        SDOMCODE                          ACTEUR.DOMCODE%TYPE,
        DTAPADTPERMISDECONDUIRE           ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE, -- CV-20062005 FSA-20165 Modif de base
        NACTFLAGGROUPE                    ACTEUR.ACTFLAGGROUPE%TYPE,
        SAGEFICP                          ACTEURGESTION.AGEFICP%TYPE,
        SAGRCOMPOUNDINGMCODE              ACTEURGROUPE.AGRCOMPOUNDINGMCODE%TYPE,
        SAGRCOMPOUNDUSE                   ACTEURGROUPE.AGRCOMPOUNDUSE%TYPE,
        SAGREXTERNALREF                   ACTEURGROUPE.AGREXTERNALREF%TYPE,
        SAGRBADDEBTSTATUS                 ACTEURGROUPE.AGRBADDEBTSTATUS%TYPE,
        SAGRLIBCOURT                      ACTEURGROUPE.AGRLIBCOURT%TYPE,
        SAPAVILLENAISS                    ACTEURPARTICULIER.APAVILLENAISS%TYPE,
        DTACTDTDEBNAF                     ACTEUR.ACTDTDEBNAF%TYPE,
        NCALID                            ACTEURGESTION.CALID%TYPE,
        SACTTAXREGIME                     ACTEURGESTION.ACTTAXREGIME%TYPE,
        NAGEIRMARGIN                      ACTEURGESTION.AGEIRMARGIN%TYPE,
        SACTCHANNEL                       ACTEUR.ACTCHANNEL%TYPE,
        SACTCHANNELCODE                   ACTEUR.ACTCHANNELCODE%TYPE,
        SACTTYPE                          ACTEUR.ACTTYPE%TYPE,
        SACTEXTDEPARTMENT                 ACTEUR.ACTEXTDEPARTMENT%TYPE,
        DACTDTEXTHIRING                   ACTEUR.ACTDTEXTHIRING%TYPE,
        SACTRESIDENTCODE                  ACTEUR.ACTRESIDENTCODE%TYPE,
        SAPACALBIRTHDAY                   ACTEURPARTICULIER.APACALBIRTHDAY%TYPE,
        SACTSECTGESTION                   ACTSECTGESTION.ACTSECTGESTION%TYPE,
        SACTREPRESENTATIVE                ACTEUR.ACTREPRESENTATIVE%TYPE,
        SACTREPRESENTNAME                 ACTEUR.ACTREPRESENTNAME%TYPE,
        SACTCORPORATE                     ACTEUR.ACTCORPORATE%TYPE,
        NACTFLAGGUARANTOR                 ACTEUR.ACTFLAGGUARANTOR%TYPE,
        SACTQUALIFCLASS                   ACTEUR.ACTQUALIFCLASS%TYPE,
        SACTETAT                          ACTEUR.ACTETAT%TYPE,
        NACTFLAGPROSPECT                  ACTEUR.ACTFLAGPROSPECT%TYPE,
        SAPAPANCARD                       ACTEURPARTICULIER.APAPANCARD%TYPE,
        SAPAPASSPORT                      ACTEURPARTICULIER.APAPASSPORT%TYPE,
        SAPAVOTERID                       ACTEURPARTICULIER.APAVOTERID%TYPE,
        SAPADRIVINGLICENSE                ACTEURPARTICULIER.APADRIVINGLICENSE%TYPE,
        SACTTAXSYSTEM                     ACTEUR.ACTTAXSYSTEM%TYPE,
        SAPANATIONALITY                   ACTEURPARTICULIER.APANATIONALITY%TYPE,
        SACTIDSERVICING                   ACTEUR.ACTIDSERVICING%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT     NUMBER;
            SCJUTYPE   CATJURIDIQUE.CJUTYPE%TYPE;
        BEGIN
            BEGIN
                UPDATE ACTEUR
                   SET ACTREPRESENTATIVE = SACTSIRET,
                       ACTREPRESENTNAME = SACTLIBCOURT
                 WHERE ACTREPRESENTATIVE = (SELECT ACTSIRET
                                              FROM ACTEUR
                                             WHERE ACTID = NACTID);

                UPDATE ACTEUR
                   SET ACTCORPORATE = SACTSIRET
                 WHERE ACTCORPORATE = (SELECT ACTSIRET
                                         FROM ACTEUR
                                        WHERE ACTID = NACTID);

                UPDATE ACTEUR
                   SET UGECODE = SUGECODE,
                       CJUCODE = SCJUCODE,
                       PAYCODECATJURIDIQUE = SPAYCODECATJURIDIQUE,
                       LANCODE = SLANCODE,
                       UTICODECREAT = SUTICODECREAT,
                       UTICODEMAJ = SUTICODEMAJ,
                       NAFCODE = SNAFCODE,
                       PAYCODENAF = SPAYCODENAF,
                       PAYCODE = SPAYCODE,
                       ACTCODE = SACTCODE,
                       ACTLIBCOURT = SACTLIBCOURT,
                       ACTNOM = SACTNOM,
                       ACTNOM2 = SACTNOM2,
                       ACTSIRET = SACTSIRET,
                       ACTFLAGTAXPROF = NACTFLAGTAXPROF,
                       ACTDTCREAT = DTACTDTCREAT,
                       ACTDTMAJ = DTACTDTMAJ,
                       ACTTVACE = SACTTVACE,
                       ACTCODERCM = SACTCODERCM,
                       ACTFINMOISFISC = NACTFINMOISFISC,
                       ACTNUMRCM = SACTNUMRCM,
                       ACTMEMO = SACTMEMO,
                       ACTCAPITAL = NACTCAPITAL,
                       DEVCODE = SDEVCODE,
                       ACTLIBCHEQUE = SACTLIBCHEQUE,
                       ACTREGIMETVA = SACTREGIMETVA,
                       ACTFLAGAGREMENT = NACTFLAGAGREMENT,
                       ACTRATTACHEMENT = SACTRATTACHEMENT,
                       ACTDTIMMATRICULATION = DTACTDTIMMATRICULATION, -- CV-03122001 DMF-64
                       ACTEFFECTIF = NACTEFFECTIF,    -- CV-27022003 FSA-11420
                       ACTFLAGNONDECLASSABLE = NACTFLAGNONDECLASSABLE, -- CV-18082004 FSA-16070 NL
                       DOMCODE = SDOMCODE,
                       ACTFLAGGROUPE = NACTFLAGGROUPE,
                       ACTCHANNEL = SACTCHANNEL,
                       ACTCHANNELCODE = SACTCHANNELCODE,
                       ACTTYPE = SACTTYPE,
                       ACTDTDEBNAF = DTACTDTDEBNAF,
                       ACTEXTDEPARTMENT = SACTEXTDEPARTMENT,
                       ACTDTEXTHIRING = DACTDTEXTHIRING,
                       ACTRESIDENTCODE = SACTRESIDENTCODE,
                       ACTREPRESENTATIVE = SACTREPRESENTATIVE,
                       ACTREPRESENTNAME = SACTREPRESENTNAME,
                       ACTCORPORATE = SACTCORPORATE,
                       ACTFLAGGUARANTOR = NACTFLAGGUARANTOR,
                       ACTQUALIFCLASS = SACTQUALIFCLASS,
                       ACTETAT = SACTETAT,
                       ACTFLAGPROSPECT = NACTFLAGPROSPECT,
                       ACTTAXSYSTEM = SACTTAXSYSTEM,
                       ACTIDSERVICING = SACTIDSERVICING
                 WHERE ACTID = NACTID;

                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTSECTGESTION
                 WHERE ACTID = NACTID;

                IF SACTSECTGESTION IS NOT NULL
                THEN
                    IF (NCOUNT = 0)
                    THEN
                        INSERT INTO ACTSECTGESTION (ACTID, ACTSECTGESTION)
                             VALUES (NACTID, SACTSECTGESTION);
                    ELSE
                        DELETE FROM ACTSECTGESTION
                              WHERE ACTID = NACTID;

                        INSERT INTO ACTSECTGESTION (ACTID, ACTSECTGESTION)
                             VALUES (NACTID, SACTSECTGESTION);
                    END IF;
                ELSE
                    IF (NCOUNT > 0)
                    THEN
                        DELETE FROM ACTSECTGESTION
                              WHERE ACTID = NACTID;
                    END IF;
                END IF;

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;

                IF (NRETURNCODE = 0)
                THEN
                    BEGIN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM ACTEURGROUPE
                         WHERE ACTID = NACTID;

                        IF (NACTFLAGGROUPE = 1)
                        THEN
                            BEGIN
                                IF (NCOUNT > 0)
                                THEN
                                    UPDATE ACTEURGROUPE
                                       SET AGRCOMPOUNDINGMCODE =
                                               SAGRCOMPOUNDINGMCODE,
                                           AGRCOMPOUNDUSE = SAGRCOMPOUNDUSE,
                                           AGREXTERNALREF = SAGREXTERNALREF,
                                           AGRBADDEBTSTATUS =
                                               SAGRBADDEBTSTATUS,
                                           AGRLIBCOURT = SAGRLIBCOURT
                                     WHERE ACTID = NACTID;
                                ELSE
                                    INSERT INTO ACTEURGROUPE (
                                                    ACTID,
                                                    AGRCOMPOUNDINGMCODE,
                                                    AGRCOMPOUNDUSE,
                                                    AGREXTERNALREF,
                                                    AGRBADDEBTSTATUS,
                                                    AGRLIBCOURT)
                                         VALUES (NACTID,
                                                 SAGRCOMPOUNDINGMCODE,
                                                 SAGRCOMPOUNDUSE,
                                                 SAGREXTERNALREF,
                                                 SAGRBADDEBTSTATUS,
                                                 SAGRLIBCOURT);
                                END IF;

                                NRETURNCODE := 0;

                                IF SQL%ROWCOUNT = 0
                                THEN
                                    NRETURNCODE := ERR_NO_ROWS_CONST;
                                END IF;
                            END;
                        END IF;

                        IF (NRETURNCODE = 0)
                        THEN
                            SELECT COUNT (*)
                              INTO NCOUNT
                              FROM CATJURIDIQUE
                             WHERE     CJUCODE = SCJUCODE
                                   AND PAYCODE =
                                       NVL (SPAYCODECATJURIDIQUE, SPAYCODE);

                            IF SQL%ROWCOUNT != 0
                            THEN
                                BEGIN
                                    IF NCOUNT != 0
                                    THEN
                                        BEGIN
                                            SELECT CJUTYPE
                                              INTO SCJUTYPE
                                              FROM CATJURIDIQUE
                                             WHERE     CJUCODE = SCJUCODE
                                                   AND PAYCODE =
                                                       NVL (
                                                           SPAYCODECATJURIDIQUE,
                                                           SPAYCODE);
                                        END;
                                    END IF;
                                END;
                            END IF;

                            IF     (   SCJUTYPE IN ('P', 'EI', 'I')
                                    OR SACTTYPE IN ('PART',
                                                    'EI',
                                                    'BPART',
                                                    'HEADGRP'))
                               AND NRETURNCODE = 0
                            THEN
                                BEGIN
                                    SELECT COUNT (*)
                                      INTO NCOUNT
                                      FROM ACTEURPARTICULIER
                                     WHERE ACTID = NACTID;

                                    IF (NCOUNT = 0)
                                    THEN
                                        BEGIN
                                            INSERT INTO ACTEURPARTICULIER (
                                                            ACTID,
                                                            APADTNAISS,
                                                            APADEPTNAISS,
                                                            APACOMNAISS,
                                                            APANBENFANT,
                                                            APASEXE,
                                                            PAYCODE,
                                                            APAEMPLOYEUR,
                                                            APASITFAM,
                                                            APAFLAGPROPRIETE,
                                                            APATITRE,
                                                            APANOMMARITAL,
                                                            APAREGIMEMATRIM,
                                                            APANOMPATRONYMIQUE,
                                                            APAPRENOM,
                                                            APAMIDDLENAME,
                                                            APACHGREGIMEMATRIM,
                                                            APACODENIVEAUETUDE,
                                                            APADIRFONCTION,
                                                            APAFLAGDIRIGEANT,
                                                            APAFLAGHOMMECLE,
                                                            APAFLAGINTERDITBANCAIRE,
                                                            APAFLAGSUCCESSIONPRET,
                                                            APAPCTCAPITAL,
                                                            APAANEXPERACTIVITE,
                                                            APAANEXPERIENCEFONCTION,
                                                            APADTPERMISDECONDUIRE,
                                                            APAVILLENAISS,
                                                            APACALBIRTHDAY,
                                                            APAPANCARD,
                                                            APAPASSPORT,
                                                            APAVOTERID,
                                                            APADRIVINGLICENSE,
                                                            APANATIONALITY)
                                                     VALUES (
                                                                NACTID,
                                                                DTAPADTNAISS,
                                                                SAPADEPTNAISS,
                                                                SAPACOMNAISS,
                                                                NAPANBENFANT,
                                                                NAPASEXE,
                                                                SAPAPAYCODE,
                                                                SAPAEMPLOYEUR,
                                                                SAPASITFAM,
                                                                NAPAFLAGPROPRIETE,
                                                                SAPATITRE,
                                                                NVL (
                                                                    SAPANOMMARITAL,
                                                                    SAPANOMPATONYME),
                                                                SAPAREGIMEMATRIM,
                                                                SAPANOMPATONYME,
                                                                SAPAPRENOM,
                                                                SAPAMIDDLENAME,
                                                                SAPACHREGIMEMATRIM,
                                                                SAPACODENIVEAUETUDE,
                                                                SAPADIRFONCTION,
                                                                NAPAFLAGDIRIGEANT,
                                                                NAPAFLAGHOMMECLE,
                                                                NAPAFLAGINTERDITBANCAIRE,
                                                                NAPAFLAGSUCCESSIONPRET,
                                                                NAPAPCTCAPITAL,
                                                                NAPAANEXPACTIVITE,
                                                                NAPAEXPERIENCEFONCTION,
                                                                DTAPADTPERMISDECONDUIRE,
                                                                SAPAVILLENAISS,
                                                                SAPACALBIRTHDAY,
                                                                SAPAPANCARD,
                                                                SAPAPASSPORT,
                                                                SAPAVOTERID,
                                                                SAPADRIVINGLICENSE,
                                                                SAPANATIONALITY);

                                            NRETURNCODE := 0;

                                            IF SQL%ROWCOUNT = 0
                                            THEN
                                                NRETURNCODE :=
                                                    ERR_NO_ROWS_CONST;
                                            END IF;
                                        /* IF(NRETURNCODE = 0) THEN
                                            D_ACTEURGESTION(NACTID, NRETURNCODE) ;
                                            IF(NRETURNCODE = 0) THEN
                                                D_ACTEURINDIVISION(NACTID, NRETURNCODE) ;
                                            END IF;
                                        END IF; */
                                        END;
                                    ELSE
                                        U_ACTEURPARTICULIER (
                                            NACTID,
                                            NAPAFLAGPROPRIETE,
                                            NAPASEXE,
                                            NAPANBENFANT,
                                            SAPACOMNAISS,
                                            SAPADEPTNAISS,
                                            SAPAEMPLOYEUR,
                                            SAPANOMMARITAL,
                                            SAPAREGIMEMATRIM,
                                            SAPATITRE,
                                            SAPASITFAM,
                                            DTAPADTNAISS,
                                            SAPAPAYCODE,                -- CV-
                                            -- 29012002 FSA-7683 sPaycode,
                                            SAPANOMPATONYME,
                                            SAPAPRENOM,
                                            SAPAMIDDLENAME,
                                            SAPACHREGIMEMATRIM,
                                            SAPACODENIVEAUETUDE,
                                            SAPADIRFONCTION,
                                            NAPAFLAGDIRIGEANT,
                                            NAPAFLAGHOMMECLE,
                                            NAPAFLAGINTERDITBANCAIRE,
                                            NAPAFLAGSUCCESSIONPRET,
                                            NAPAPCTCAPITAL,
                                            NAPAANEXPACTIVITE,
                                            NAPAEXPERIENCEFONCTION,
                                            DTAPADTPERMISDECONDUIRE,
                                            SAPAVILLENAISS,
                                            SAPACALBIRTHDAY,
                                            SAPAPANCARD,
                                            SAPAPASSPORT,
                                            SAPAVOTERID,
                                            SAPADRIVINGLICENSE,
                                            SAPANATIONALITY,
                                            NRETURNCODE);
                                    END IF;
                                END;
                            END IF;

                            IF SCJUTYPE IN ('I', 'J') AND NRETURNCODE = 0
                            THEN
                                BEGIN
                                    SELECT COUNT (*)
                                      INTO NCOUNT
                                      FROM ACTEURINDIVISION
                                     WHERE ACTID = NACTID;

                                    IF (NCOUNT = 0)
                                    THEN
                                        BEGIN
                                            INSERT INTO ACTEURINDIVISION (
                                                            ACTID,
                                                            AINNBPARTTOTAL)
                                                     VALUES (NACTID,
                                                             NAINNBPARTTOTAL);

                                            NRETURNCODE := 0;

                                            IF SQL%ROWCOUNT = 0
                                            THEN
                                                NRETURNCODE :=
                                                    ERR_NO_ROWS_CONST;
                                            END IF;
                                        END;
                                    /*IF ( nReturnCode = 0 ) THEN
                                    D_ACTEURGESTION( nActId, nReturnCode );
                                    IF ( nReturnCode = 0 ) THEN
                                    D_ACTEURPARTICULIER( nActId, nReturnCode );
                                    END IF;
                                    END IF;*/
                                    ELSE
                                        U_ACTEURINDIVISION (NACTID,
                                                            NAINNBPARTTOTAL,
                                                            NRETURNCODE);
                                    END IF;
                                END;
                            /*ELSE
                            D_ACTEURPARTICULIER( nActId, nReturnCode );
                            IF ( nReturnCode = 0 ) THEN
                            D_ACTEURINDIVISION( nActId, nReturnCode );
                            END IF;*/
                            END IF;

                            IF (NRETURNCODE = 0) AND (NFLAGSOCIETE = 1)
                            THEN
                                U_ACTEURGESTION (NACTID,
                                                 SAGECIB,
                                                 SAGEEMETTEUR,
                                                 SAGELOGO,
                                                 STDRCODEEFFET,
                                                 STDRCODEPRL,
                                                 STDRCODEPRLACCELERE,
                                                 STDRCODEVIR,
                                                 SAGEEMETVIR,
                                                 NTCIID,
                                                 BAGEFLAGIRFACTURE,
                                                 BAGEFLAGIRCHQ,
                                                 STAXCODE,
                                                 NRUBID,
                                                 NAGEMTFACMINI,
                                                 NAGEDELAIEXIGIBLE,
                                                 SAGEFICP,
                                                 NCALID,
                                                 SACTTAXREGIME,
                                                 NAGEIRMARGIN,
                                                 SAGESEPAIDENTIFIER,
                                                 NRETURNCODE);
                            END IF;
                        END IF;
                    END;
                END IF;
            EXCEPTION
                WHEN ERR_PARENT_NOT_FOUND
                THEN
                    -- CV-26012012 CFS55477
                    -- nReturnCode := ERR_PARENT_ACT_FOUND_CONST;
                    NRETURNCODE :=
                        F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ACT_FOUND_CONST);
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_ACT_CONST;
                WHEN ERR_U_NULL_MANDATORY_KEY
                THEN
                    NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
                WHEN ERR_I_NULL_MANDATORY_KEY
                THEN
                    NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END U_ACTEUR;

    -- ACTADRESSE --
    PROCEDURE U_ACTADRESSE (
        NACTID                       ACTEUR.ACTID%TYPE,
        NADRID                       ADRESSE.ADRID%TYPE,
        NAADORDREREMPLACE            ACTADRESSE.AADORDREREMPLACE%TYPE,
        NAADFLAGSIEGE                ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER             ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION          ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON            ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL                    ACTADRESSE.AADCOMPL%TYPE,
        DTAADDTREMPLACE              ACTADRESSE.AADDTMAJ%TYPE,
        NCREID                       CREVT.CREID%TYPE,
        SUTICODE                     ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB                   ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE                    ACTADRESSE.AADORDRE%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTADRESSE
               SET AADORDREREMPLACE = NAADORDREREMPLACE,
                   AADFLAGSIEGE = NAADFLAGSIEGE,
                   AADFLAGCOURRIER = NAADFLAGCOURRIER,
                   AADFLAGFACTURATION = NAADFLAGFACTURATION,
                   AADFLAGLIVRAISON = NAADFLAGLIVRAISON,
                   AADCOMPL = SAADCOMPL,
                   AADDTMAJ = TRUNC (SYSDATE),
                   AADDTREMPLACE = DTAADDTREMPLACE,
                   AADDTDEB = DTAADDTDEB,
                   --CREID     = nCreId,
                   UTICODE = SUTICODE
             WHERE ACTID = NACTID AND AADORDRE = NAADORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AAD_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTADRESSE;

    -----------ACTCANDIDATURE------------
    PROCEDURE U_ACTCANDIDATURE (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACAORDRE               ACTCANDIDATURE.ACAORDRE%TYPE,
        SACATYPE                ACTCANDIDATURE.ACATYPE%TYPE,
        SACANATURE              ACTCANDIDATURE.ACANATURE%TYPE,
        SACAORIGINE             ACTCANDIDATURE.ACAORIGINE%TYPE,
        NMANID                  ACTCANDIDATURE.MANID%TYPE,
        DTACADTEFFET            ACTCANDIDATURE.ACADTEFFET%TYPE,
        DTACADTTOT              ACTCANDIDATURE.ACADTTOT%TYPE,
        DTACADTTARD             ACTCANDIDATURE.ACADTTARD%TYPE,
        DTACADTLIMITE           ACTCANDIDATURE.ACADTLIMITE%TYPE,
        NACAFLAGOCCUPE          ACTCANDIDATURE.ACAFLAGOCCUPE%TYPE,
        SACAMEMO                ACTCANDIDATURE.ACAMEMO%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTCANDIDATURE
               SET ACATYPE = SACATYPE,
                   ACANATURE = SACANATURE,
                   ACAORIGINE = SACAORIGINE,
                   MANID = NMANID,
                   ACADTEFFET = DTACADTEFFET,
                   ACADTTOT = DTACADTTOT,
                   ACADTTARD = DTACADTTARD,
                   ACADTLIMITE = DTACADTLIMITE,
                   ACAFLAGOCCUPE = NACAFLAGOCCUPE,
                   ACAMEMO = SACAMEMO
             WHERE ACTID = NACTID AND ACAORDRE = NACAORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ACA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AAD_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTCANDIDATURE;

    --Assent--
    PROCEDURE D_ACTASSENT (NACTID               ACTEUR.ACTID%TYPE,
                           NAASORDER            ACTASSENT.AASORDER%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            D_ACTASSATTRIBUTE1 (NACTID, NAASORDER, NRETURNCODE);
            D_ACTASSMARKETPARTNER1 (NACTID, NAASORDER, NRETURNCODE);

            IF NRETURNCODE = 0 OR NRETURNCODE = ERR_NO_ROWS_CONST
            THEN
                BEGIN
                    DELETE FROM ACTASSENT
                          WHERE ACTID = NACTID AND AASORDER = NAASORDER;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                EXCEPTION
                    WHEN ERR_CHILD_FOUND
                    THEN
                        NRETURNCODE := ERR_CHILD_ACO_FOUND_CONST;
                END;
            END IF;
        END;
    END D_ACTASSENT;

    PROCEDURE D_JOBHISTORY (NACTID               ACTJOBHISTORY.ACTID%TYPE,
                            NAJHORDER            ACTJOBHISTORY.AJHORDER%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTJOBHISTORY
                  WHERE ACTID = NACTID AND AJHORDER = NAJHORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_JOBHISTORY;

    PROCEDURE D_ACTASSATTRIBUTE1 (NACTID               ACTEUR.ACTID%TYPE,
                                  NAASORDER            ACTASSENT.AASORDER%TYPE,
                                  NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTASSATTRIBUTE
                  WHERE ACTID = NACTID AND AASORDER = NAASORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_ACTASSATTRIBUTE1;

    PROCEDURE I_ACTASSENT (
        NACTID                  ACTEUR.ACTID%TYPE,
        NAASORDER               ACTASSENT.AASORDER%TYPE,
        SAASTYPE                ACTASSENT.AASTYPE%TYPE,
        SAASSTATUS              ACTASSENT.AASSTATUS%TYPE,
        SAASCHANNEL             ACTASSENT.AASCHANNEL%TYPE,
        SAASREASON              ACTASSENT.AASREASON%TYPE,
        SUTICODE                ACTASSENT.UTICODE%TYPE,
        DTAASDTSTART            ACTASSENT.AASDTSTART%TYPE,
        DTAASDTEND              ACTASSENT.AASDTEND%TYPE,
        NDOSID                  ACTASSENT.DOSID%TYPE,
        NCREID                  ACTASSENT.CREID%TYPE,
        SAASMETHOD              ACTASSENT.AASMETHOD%TYPE,
        NDOSIDPROSPECT          ACTASSENT.DOSIDPROSPECT%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTASSENT (ACTID,
                                   AASORDER,
                                   AASTYPE,
                                   AASSTATUS,
                                   AASCHANNEL,
                                   AASREASON,
                                   UTICODE,
                                   AASDTSTART,
                                   AASDTEND,
                                   DOSID,
                                   CREID,
                                   AASDTUPDATE,
                                   AASMETHOD,
                                   DOSIDPROSPECT)
                 VALUES (NACTID,
                         NAASORDER,
                         SAASTYPE,
                         SAASSTATUS,
                         SAASCHANNEL,
                         SAASREASON,
                         SUTICODE,
                         DTAASDTSTART,
                         DTAASDTEND,
                         NDOSID,
                         NCREID,
                         TRUNC (SYSDATE),
                         SAASMETHOD,
                         NDOSIDPROSPECT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ASS_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSENT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTASSENT;

    PROCEDURE I_JOBHISTORY (
        NACTID                IN     ACTJOBHISTORY.ACTID%TYPE,
        SAJHCOMPANY           IN     ACTJOBHISTORY.AJHCOMPANY%TYPE,
        SAJHDEPARTMENT        IN     ACTJOBHISTORY.AJHDEPARTMENT%TYPE,
        SAJHBRANCH            IN     ACTJOBHISTORY.AJHBRANCH%TYPE,
        DAJHDTBEG             IN     ACTJOBHISTORY.AJHDTBEG%TYPE,
        DAJHDTEND             IN     ACTJOBHISTORY.AJHDTEND%TYPE,
        SAJHENDREASON         IN     ACTJOBHISTORY.AJHENDREASON%TYPE,
        SAJHBUSCAREERCODE     IN     ACTJOBHISTORY.AJHBUSCAREERCODE%TYPE,
        SAJHTYPEINCOME        IN     ACTJOBHISTORY.AJHTYPEINCOME%TYPE,
        SAJHINCOMEDETAIL      IN     ACTJOBHISTORY.AJHINCOMEDETAIL%TYPE,
        SAJHENTITYTYPE        IN     ACTJOBHISTORY.AJHENTITYTYPE%TYPE,
        SAJHNAMEEMPLOYER      IN     ACTJOBHISTORY.AJHNAMEEMPLOYER%TYPE,
        SAJHCOUNTRYEMPLOYER   IN     ACTJOBHISTORY.AJHCOUNTRYEMPLOYER%TYPE,
        SAJHSECTOREMPLOYER    IN     ACTJOBHISTORY.AJHSECTOREMPLOYER%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO ACTJOBHISTORY (ACTID,
                                   AJHORDER,
                                   AJHCOMPANY,
                                   AJHDEPARTMENT,
                                   AJHBRANCH,
                                   AJHDTBEG,
                                   AJHDTEND,
                                   AJHENDREASON,
                                   AJHBUSCAREERCODE,
                                   AJHTYPEINCOME,
                                   AJHINCOMEDETAIL,
                                   AJHENTITYTYPE,
                                   AJHNAMEEMPLOYER,
                                   AJHCOUNTRYEMPLOYER,
                                   AJHSECTOREMPLOYER)
             VALUES (NACTID,
                     (SELECT NVL (MAX (AJHORDER), 0) + 1
                        FROM ACTJOBHISTORY
                       WHERE ACTID = NACTID),
                     SAJHCOMPANY,
                     SAJHDEPARTMENT,
                     SAJHBRANCH,
                     DAJHDTBEG,
                     DAJHDTEND,
                     SAJHENDREASON,
                     SAJHBUSCAREERCODE,
                     SAJHTYPEINCOME,
                     SAJHINCOMEDETAIL,
                     SAJHENTITYTYPE,
                     SAJHNAMEEMPLOYER,
                     SAJHCOUNTRYEMPLOYER,
                     SAJHSECTOREMPLOYER);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE :=
                F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ASS_FOUND_CONST);
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_ASSENT_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_JOBHISTORY;

    PROCEDURE U_JOBHISTORY (
        NACTID                IN     ACTJOBHISTORY.ACTID%TYPE,
        NAJHORDER             IN     ACTJOBHISTORY.AJHORDER%TYPE,
        SAJHCOMPANY           IN     ACTJOBHISTORY.AJHCOMPANY%TYPE,
        SAJHDEPARTMENT        IN     ACTJOBHISTORY.AJHDEPARTMENT%TYPE,
        SAJHBRANCH            IN     ACTJOBHISTORY.AJHBRANCH%TYPE,
        DTAJHDTBEG            IN     ACTJOBHISTORY.AJHDTBEG%TYPE,
        DTAJHDTEND            IN     ACTJOBHISTORY.AJHDTEND%TYPE,
        SAJHENDREASON         IN     ACTJOBHISTORY.AJHENDREASON%TYPE,
        SAJHBUSCAREERCODE     IN     ACTJOBHISTORY.AJHBUSCAREERCODE%TYPE,
        SAJHTYPEINCOME        IN     ACTJOBHISTORY.AJHTYPEINCOME%TYPE,
        SAJHINCOMEDETAIL      IN     ACTJOBHISTORY.AJHINCOMEDETAIL%TYPE,
        SAJHENTITYTYPE        IN     ACTJOBHISTORY.AJHENTITYTYPE%TYPE,
        SAJHNAMEEMPLOYER      IN     ACTJOBHISTORY.AJHNAMEEMPLOYER%TYPE,
        SAJHCOUNTRYEMPLOYER   IN     ACTJOBHISTORY.AJHCOUNTRYEMPLOYER%TYPE,
        SAJHSECTOREMPLOYER    IN     ACTJOBHISTORY.AJHSECTOREMPLOYER%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTJOBHISTORY
               SET AJHCOMPANY = SAJHCOMPANY,
                   AJHDEPARTMENT = SAJHDEPARTMENT,
                   AJHBRANCH = SAJHBRANCH,
                   AJHDTBEG = DTAJHDTBEG,
                   AJHDTEND = DTAJHDTEND,
                   AJHENDREASON = SAJHENDREASON,
                   AJHBUSCAREERCODE = SAJHBUSCAREERCODE,
                   AJHTYPEINCOME = SAJHTYPEINCOME,
                   AJHINCOMEDETAIL = SAJHINCOMEDETAIL,
                   AJHENTITYTYPE = SAJHENTITYTYPE,
                   AJHNAMEEMPLOYER = SAJHNAMEEMPLOYER,
                   AJHCOUNTRYEMPLOYER = SAJHCOUNTRYEMPLOYER,
                   AJHSECTOREMPLOYER = SAJHSECTOREMPLOYER
             WHERE ACTID = NACTID AND AJHORDER = NAJHORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ASS_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSENT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_JOBHISTORY;

    PROCEDURE U_ACTASSENT (
        NACTID                  ACTEUR.ACTID%TYPE,
        NAASORDER               ACTASSENT.AASORDER%TYPE,
        SAASTYPE                ACTASSENT.AASTYPE%TYPE,
        SAASSTATUS              ACTASSENT.AASSTATUS%TYPE,
        SAASCHANNEL             ACTASSENT.AASCHANNEL%TYPE,
        SAASREASON              ACTASSENT.AASREASON%TYPE,
        SUTICODE                ACTASSENT.UTICODE%TYPE,
        DTAASDTSTART            ACTASSENT.AASDTSTART%TYPE,
        DTAASDTEND              ACTASSENT.AASDTEND%TYPE,
        NDOSID                  ACTASSENT.DOSID%TYPE,
        NCREID                  ACTASSENT.CREID%TYPE,
        SAASMETHOD              ACTASSENT.AASMETHOD%TYPE,
        NDOSIDPROSPECT          ACTASSENT.DOSIDPROSPECT%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTASSENT
               SET AASTYPE = SAASTYPE,
                   AASSTATUS = SAASSTATUS,
                   AASCHANNEL = SAASCHANNEL,
                   AASREASON = SAASREASON,
                   UTICODE = SUTICODE,
                   AASDTSTART = DTAASDTSTART,
                   AASDTEND = DTAASDTEND,
                   DOSID = NDOSID,
                   CREID = NCREID,
                   AASDTUPDATE = TRUNC (SYSDATE),
                   AASMETHOD = SAASMETHOD,
                   DOSIDPROSPECT = NDOSIDPROSPECT
             WHERE ACTID = NACTID AND AASORDER = NAASORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ASS_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSENT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTASSENT;

    PROCEDURE D_ACTASSATTRIBUTE (
        NACTID               ACTEUR.ACTID%TYPE,
        NAASORDER            ACTASSENT.AASORDER%TYPE,
        NAATORDER            ACTASSATTRIBUTE.AATORDER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTASSATTRIBUTE
                  WHERE     ACTID = NACTID
                        AND AASORDER = NAASORDER
                        AND AATORDER = NAATORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_ACTASSATTRIBUTE;

    PROCEDURE I_ACTASSATTRIBUTE (
        NACTID                    ACTEUR.ACTID%TYPE,
        NAASORDER                 ACTASSATTRIBUTE.AASORDER%TYPE,
        NAATORDER                 ACTASSATTRIBUTE.AATORDER%TYPE,
        NAATCODE                  ACTASSATTRIBUTE.AATCODE%TYPE,
        SAATSTRINGVALUE           ACTASSATTRIBUTE.AATSTRINGVALUE%TYPE,
        NAATNUMERICVALUE          ACTASSATTRIBUTE.AATNUMERICVALUE%TYPE,
        NAATBOOLEANVALUE          ACTASSATTRIBUTE.AATBOOLEANVALUE%TYPE,
        DTAATDTVALUE              ACTASSATTRIBUTE.AATDTVALUE%TYPE,
        NCREID                    ACTASSATTRIBUTE.CREID%TYPE,
        NAATREASON                ACTASSATTRIBUTE.AATREASON%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTASSATTRIBUTE (ACTID,
                                         AASORDER,
                                         AATORDER,
                                         AATCODE,
                                         AATSTRINGVALUE,
                                         AATNUMERICVALUE,
                                         AATBOOLEANVALUE,
                                         AATDTVALUE,
                                         CREID,
                                         AATREASON)
                 VALUES (NACTID,
                         NAASORDER,
                         NAATORDER,
                         NAATCODE,
                         SAATSTRINGVALUE,
                         NAATNUMERICVALUE,
                         NAATBOOLEANVALUE,
                         DTAATDTVALUE,
                         NCREID,
                         NAATREASON);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ATT_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSATT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASSATT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASSATT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTASSATTRIBUTE;

    PROCEDURE U_ACTASSATTRIBUTE (
        NACTID                    ACTEUR.ACTID%TYPE,
        NAASORDER                 ACTASSATTRIBUTE.AASORDER%TYPE,
        NAATORDER                 ACTASSATTRIBUTE.AATORDER%TYPE,
        NAATCODE                  ACTASSATTRIBUTE.AATCODE%TYPE,
        SAATSTRINGVALUE           ACTASSATTRIBUTE.AATSTRINGVALUE%TYPE,
        NAATNUMERICVALUE          ACTASSATTRIBUTE.AATNUMERICVALUE%TYPE,
        NAATBOOLEANVALUE          ACTASSATTRIBUTE.AATBOOLEANVALUE%TYPE,
        DTAATDTVALUE              ACTASSATTRIBUTE.AATDTVALUE%TYPE,
        NCREID                    ACTASSATTRIBUTE.CREID%TYPE,
        NAATREASON                ACTASSATTRIBUTE.AATREASON%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTASSATTRIBUTE
               SET AATCODE = NAATCODE,
                   AATSTRINGVALUE = SAATSTRINGVALUE,
                   AATNUMERICVALUE = NAATNUMERICVALUE,
                   AATBOOLEANVALUE = NAATBOOLEANVALUE,
                   AATDTVALUE = DTAATDTVALUE,
                   CREID = NCREID,
                   AATREASON = NAATREASON
             WHERE     ACTID = NACTID
                   AND AASORDER = NAASORDER
                   AND AATORDER = NAATORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ATT_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSATT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASSATT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASSATT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTASSATTRIBUTE;

    -- ACTCORRESPONDANT --
    PROCEDURE U_ACTCORRESPONDANT (
        NACTID                          ACTEUR.ACTID%TYPE,
        NACOORDRE                       ACTCORRESPONDANT.ACOORDRE%TYPE,
        SACONOM                         ACTCORRESPONDANT.ACONOM%TYPE,
        SACOQUALITE                     ACTCORRESPONDANT.ACOQUALITE%TYPE,
        SACOTITRE                       ACTCORRESPONDANT.ACOTITRE%TYPE,
        NACOFLAGPREFERE                 ACTCORRESPONDANT.ACOFLAGPREFERE%TYPE,
        SACOINITIALAUTREPRENOM          ACTCORRESPONDANT.ACOINITIALAUTREPRENOM%TYPE,
        SACOPRENOM                      ACTCORRESPONDANT.ACOPRENOM%TYPE,
        SACOCHARACTER                   ACTCORRESPONDANT.ACOCHARACTER%TYPE,
        SACODECISION                    ACTCORRESPONDANT.ACODECISION%TYPE,
        SACOQUALIFICATION               ACTCORRESPONDANT.ACOQUALIFICATION%TYPE,
        DTACODTSTART                    ACTCORRESPONDANT.ACODTSTART%TYPE,
        DTACODTEND                      ACTCORRESPONDANT.ACODTEND%TYPE,
        DTACODTBIRTHDAY                 ACTCORRESPONDANT.ACODTBIRTHDAY%TYPE,
        SACOCALBIRTHDAY                 ACTCORRESPONDANT.ACOCALBIRTHDAY%TYPE,
        SACOSIRET                       ACTCORRESPONDANT.ACOSIRET%TYPE,
        NACOSEX                         ACTCORRESPONDANT.ACOSEX%TYPE,
        NACOWEDDINGCODE                 ACTCORRESPONDANT.ACOWEDDINGCODE%TYPE,
        DTACODTWEDDING                  ACTCORRESPONDANT.ACODTWEDDING%TYPE,
        SACOMEMO                        ACTCORRESPONDANT.ACOMEMO%TYPE,
        SACOFOREIGNNAME                 ACTCORRESPONDANT.ACOFOREIGNNAME%TYPE,
        SACOQUALIFCLASS                 ACTCORRESPONDANT.ACOQUALIFCLASS%TYPE,
        NACTIDEMPLOYER                  ACTCORRESPONDANT.ACTIDEMPLOYER%TYPE,
        SACOERRORCODE                   ACTCORRESPONDANT.ACOERRORCODE%TYPE,
        SACOCONTACTCODE                 ACTCORRESPONDANT.ACOCONTACTCODE%TYPE,
        SACOCONTROLCODE                 ACTCORRESPONDANT.ACOCONTROLCODE%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTCORRESPONDANT
               SET ACOQUALITE = SACOQUALITE,
                   ACONOM = SACONOM,
                   ACOTITRE = SACOTITRE,
                   ACOFLAGPREFERE = NACOFLAGPREFERE,
                   ACOINITIALAUTREPRENOM = SACOINITIALAUTREPRENOM,
                   ACOPRENOM = SACOPRENOM,
                   ACOCHARACTER = SACOCHARACTER,
                   ACODECISION = SACODECISION,
                   ACOQUALIFICATION = SACOQUALIFICATION,
                   ACODTSTART = DTACODTSTART,
                   ACODTEND = DTACODTEND,
                   ACODTBIRTHDAY = DTACODTBIRTHDAY,
                   ACOCALBIRTHDAY = SACOCALBIRTHDAY,
                   ACOSIRET = SACOSIRET,
                   ACOSEX = NACOSEX,
                   ACOWEDDINGCODE = NACOWEDDINGCODE,
                   ACODTWEDDING = DTACODTWEDDING,
                   ACOMEMO = SACOMEMO,
                   ACOFOREIGNNAME = SACOFOREIGNNAME,
                   ACOQUALIFCLASS = SACOQUALIFCLASS,
                   ACTIDEMPLOYER = NACTIDEMPLOYER,
                   ACOERRORCODE = SACOERRORCODE,
                   ACOCONTACTCODE = SACOCONTACTCODE,
                   ACOCONTROLCODE = SACOCONTROLCODE
             WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ACO_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ACO_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ACO_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTCORRESPONDANT;

    -- ACTPHASE --
    PROCEDURE U_ACTPHASE (NACTID               ACTEUR.ACTID%TYPE,
                          SPHACODE             ACTPHASE.PHACODE%TYPE,
                          NAPHORDRE            ACTPHASE.APHORDRE%TYPE,
                          DTAPHDTDEB           ACTPHASE.APHDTDEB%TYPE,
                          DTAPHDTMAJ           ACTPHASE.APHDTMAJ%TYPE,
                          SJALCODE             ACTPHASE.JALCODE%TYPE,
                          NCREID               ACTPHASE.CREID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPHASE
               SET APHDTDEB = DTAPHDTDEB,
                   APHDTMAJ = DTAPHDTMAJ,
                   JALCODE = SJALCODE,
                   CREID = NCREID
             WHERE     ACTID = NACTID
                   AND PHACODE = SPHACODE
                   AND APHORDRE = NAPHORDRE
                   AND PHADEST = 'ACTEUR'
                   AND ACTID = NACTID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_APH_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_APH_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APH_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APH_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APH_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPHASE;

    -- ACTRELATION --
    PROCEDURE U_ACTRELATION (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTEUR.ACTID%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB              ACTRELATION.AREDTDEB%TYPE,
        NAREQP                  ACTRELATION.AREQP%TYPE,
        DTAREDTFIN              ACTRELATION.AREDTFIN%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTRELATION
               SET AREQP = NAREQP, AREDTFIN = DTAREDTFIN
             WHERE     ACTID = NACTID
                   AND ACTIDRELATION = NACTIDRELATION
                   AND TRECODE = STRECODE
                   AND AREDTDEB = DTAREDTDEB;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;

            --ALA 050707
            IF NRETURNCODE = 0
            THEN
                UPDATE ACTEUR
                   SET ACTDTMAJ = TRUNC (SYSDATE)
                 WHERE ACTID IN (NACTID, NACTIDRELATION);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARE_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARE_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRELATION;

    -- RIB --
    PROCEDURE U_RIB (
        NRIBID                        RIB.RIBID%TYPE,
        SRIBINTITULE                  RIB.RIBINTITULE%TYPE,
        SBGUGUICHETINVARIANT          RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODE                      RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPE               RIB.RIBACCOUNTTYPE%TYPE,
        NACTIDOWNER                   RIB.ACTIDOWNER%TYPE,
        NRIBIBANCLE                   RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTE                RIB.RIBIBANCOMPTE%TYPE,
        NRETURNCODE            IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE RIB
               SET RIBINTITULE = SRIBINTITULE,
                   BGUGUICHETINVARIANT = SBGUGUICHETINVARIANT,
                   DEVCODE = SDEVCODE,
                   RIBACCOUNTTYPE = SRIBACCOUNTTYPE,
                   ACTIDOWNER = NACTIDOWNER,
                   RIBIBANCLE = NRIBIBANCLE,
                   RIBIBANCOMPTE = SRIBIBANCOMPTE
             WHERE RIBID = NRIBID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RIB_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RIB_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIB_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIB_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_RIB;

    /*
    PROCEDURE U_RIB (
    nRibId               RIB.RIBID%TYPE,
    sRibIntitule         RIB.RIBINTITULE%TYPE,
    sBguGuichetInvariant RIB.BGUGUICHETINVARIANT%TYPE,    -- CV-29062005 FSA-12995 SG
    nReturnCode          IN OUT NUMBER) AS
    BEGIN
    BEGIN
    UPDATE RIB
    SET    RIBINTITULE         = sRibIntitule,
    BGUGUICHETINVARIANT = sBguGuichetInvariant
    WHERE  RIBID               = nRibId;
    nReturnCode := 0;
    IF SQL%ROWCOUNT=0 THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
    nReturnCode := ERR_PARENT_RIB_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
    nReturnCode := ERR_DUP_VAL_ON_RIB_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_RIB_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_RIB_NULL_CONST;
    WHEN OTHERS THEN
    nReturnCode := -1 * SQLCODE;
    END;
    END U_RIB;
    */
    -- RIBINFO --
    PROCEDURE U_RIBINFO (NRIBID                RIB.RIBID%TYPE,
                         NRINDELAIP            RIBINFO.RINDELAIP%TYPE,
                         NRINDELAIV            RIBINFO.RINDELAIV%TYPE,
                         NRINVALREMHP          RIBINFO.RINVALREMHP%TYPE,
                         NRINVALREMSP          RIBINFO.RINVALREMSP%TYPE,
                         NRINVALVIR            RIBINFO.RINVALVIR%TYPE,
                         NRINVALPRL            RIBINFO.RINVALPRL%TYPE,
                         NRINVALCHQ            RIBINFO.RINVALCHQ%TYPE,
                         NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE RIBINFO
               SET RINDELAIP = NRINDELAIP,
                   RINDELAIV = NRINDELAIV,
                   RINVALREMHP = NRINVALREMHP,
                   RINVALREMSP = NRINVALREMSP,
                   RINVALVIR = NRINVALVIR,
                   RINVALPRL = NRINVALPRL,
                   RINVALCHQ = NRINVALCHQ
             WHERE RIBID = NRIBID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RIN_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RIN_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_RIBINFO;

    -- ACTROLE --
    PROCEDURE U_ACTROLE (
        NACTID                     ACTEUR.ACTID%TYPE,
        SROLCODE                   ACTROLE.ROLCODE%TYPE,
        NARONBEXFAC                ACTROLE.ARONBEXFAC%TYPE,
        SARORECAPFAC               ACTROLE.ARORECAPFAC%TYPE,
        NAROGRPFAC                 ACTROLE.AROGRPFAC%TYPE,
        NAROGRPPREL                ACTROLE.AROGRPPREL%TYPE,
        SAROREFEXTERNE             ACTROLE.AROREFEXTERNE%TYPE,
        NAROFACAVANCE              ACTROLE.AROFACAVANCE%TYPE,
        SAROPERIODE                ACTROLE.AROPERIODE%TYPE,     -- CV-19062001
        NAROMULTIPLE               ACTROLE.AROMULTIPLE%TYPE,    -- CV-19062001
        SAROEDITFAC                ACTROLE.AROEDITFAC%TYPE,     -- DA-29092001
        NAROGRPDEC                 ACTROLE.AROGRPDEC%TYPE,
        SAROENVOINOTICE            ACTROLE.AROENVOINOTICE%TYPE,
        SAROFORMATSORTIE           ACTROLE.AROFORMATSORTIE%TYPE,
        SAROINVOICEMETHOD          ACTROLE.AROINVOICEMETHOD%TYPE, -- CFS-47412
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTROLE
               SET ARONBEXFAC = NARONBEXFAC,
                   ARORECAPFAC = SARORECAPFAC,
                   AROGRPFAC = NAROGRPFAC,
                   AROGRPPREL = NAROGRPPREL,
                   AROREFEXTERNE = SAROREFEXTERNE,
                   AROFACAVANCE = NAROFACAVANCE,
                   AROPERIODE = SAROPERIODE,                    -- CV-19062201
                   AROMULTIPLE = NAROMULTIPLE,                  -- CV-19062001
                   AROEDITFAC = SAROEDITFAC,                    -- CV-19062001
                   AROGRPDEC = NAROGRPDEC,
                   AROENVOINOTICE = SAROENVOINOTICE,
                   AROFORMATSORTIE = SAROFORMATSORTIE,
                   AROINVOICEMETHOD = SAROINVOICEMETHOD           -- CFS-47412
             WHERE ACTID = NACTID AND ROLCODE = SROLCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- nReturnCode := ERR_PARENT_ARO_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARO_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARO_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTROLE;

    -- ACTSTATISTIQUE --
    PROCEDURE U_ACTSTATISTIQUE (
        NACTID               ACTEUR.ACTID%TYPE,
        SSACCODE             CCHVALUE.CVASTRINGVALUE%TYPE,
        SSAVCODEVAL          CCHVALUE.CVASTRINGVALUE%TYPE,
        SASTLIBRE            CCHVALUE.CVASTRINGVALUE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTSTATISTIQUE
               SET SAVCODEVAL = SSAVCODEVAL, ASTLIBRE = SASTLIBRE
             WHERE ACTID = NACTID AND SACCODE = SSACCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AST_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AST_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_STAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_STAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTSTATISTIQUE;

    -- ACTTELECOM --
    PROCEDURE U_ACTTELECOM (
        NACTID                   ACTEUR.ACTID%TYPE,
        NATEORDRE                ACTTELECOM.ATEORDRE%TYPE,
        NATENUM                  ACTTELECOM.ATENUM%TYPE,
        DTATEDTFIN               ACTTELECOM.ATEDTFIN%TYPE,
        NATEFLAGTELECOM          ACTTELECOM.ATEFLAGPREFERE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTTELECOM
               SET ATENUM = NATENUM,
                   ATEDTFIN = DTATEDTFIN,
                   ATEFLAGPREFERE = NATEFLAGTELECOM
             WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- nReturnCode := ERR_PARENT_ATE_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ATE_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ATE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTTELECOM;

    -- ACTEURPARTICULIER --
    PROCEDURE U_ACTEURPARTICULIER (
        NACTID                            ACTEUR.ACTID%TYPE,
        NAPAFLAGPROPRIETE                 ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
        NAPASEXE                          ACTEURPARTICULIER.APASEXE%TYPE,
        NAPANBENFANT                      ACTEURPARTICULIER.APANBENFANT%TYPE,
        SAPACOMNAISS                      ACTEURPARTICULIER.APACOMNAISS%TYPE,
        SAPADEPTNAISS                     ACTEURPARTICULIER.APADEPTNAISS%TYPE,
        SAPAEMPLOYEUR                     ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
        SAPANOMMARITAL                    ACTEURPARTICULIER.APANOMMARITAL%TYPE,
        SAPAREGIMEMATRIM                  ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
        SAPATITRE                         ACTEURPARTICULIER.APATITRE%TYPE,
        SAPASITFAM                        ACTEURPARTICULIER.APASITFAM%TYPE,
        DTAPADTNAISS                      ACTEURPARTICULIER.APADTNAISS%TYPE,
        SPAYCODE                          ACTEURPARTICULIER.PAYCODE%TYPE,
        SAPANOMPATONYME                   ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
        SAPAPRENOM                        ACTEURPARTICULIER.APAPRENOM%TYPE,
        SAPAMIDDLENAME                    ACTEURPARTICULIER.APAMIDDLENAME%TYPE,
        SAPACHREGIMEMATRIM                ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
        SAPACODENIVEAUETUDE               ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
        SAPADIRFONCTION                   ACTEURPARTICULIER.APADIRFONCTION%TYPE,
        NAPAFLAGDIRIGEANT                 ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
        NAPAFLAGHOMMECLE                  ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
        NAPAFLAGINTERDITBANCAIRE          ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
        NAPAFLAGSUCCESSIONPRET            ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
        NAPAPCTCAPITAL                    ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
        NAPAANEXPACTIVITE          IN OUT ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
        NAPAEXPERIENCEFONCTION     IN OUT ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
        DTAPADTPERMISDECONDUIRE           ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE, -- CV-20062005 FSA-20165 Modif de base
        SAPAVILLENAISS                    ACTEURPARTICULIER.APAVILLENAISS%TYPE,
        SAPACALBIRTHDAY                   ACTEURPARTICULIER.APACALBIRTHDAY%TYPE,
        SAPAPANCARD                       ACTEURPARTICULIER.APAPANCARD%TYPE,
        SAPAPASSPORT                      ACTEURPARTICULIER.APAPASSPORT%TYPE,
        SAPAVOTERID                       ACTEURPARTICULIER.APAVOTERID%TYPE,
        SAPADRIVINGLICENSE                ACTEURPARTICULIER.APADRIVINGLICENSE%TYPE,
        SAPANATIONALITY                   ACTEURPARTICULIER.APANATIONALITY%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DECLARE
                NBOCC   NUMBER;
            BEGIN
                SELECT COUNT (*)
                  INTO NBOCC
                  FROM ACTEURPARTICULIER
                 WHERE ACTID = NACTID;

                IF NBOCC >= 1
                THEN
                    UPDATE ACTEURPARTICULIER
                       SET APADTNAISS = DTAPADTNAISS,
                           APADEPTNAISS = SAPADEPTNAISS,
                           APACOMNAISS = SAPACOMNAISS,
                           APANBENFANT = NAPANBENFANT,
                           APASEXE = NAPASEXE,
                           APAEMPLOYEUR = SAPAEMPLOYEUR,
                           APASITFAM = SAPASITFAM,
                           APAFLAGPROPRIETE = NAPAFLAGPROPRIETE,
                           APATITRE = SAPATITRE,
                           APANOMMARITAL = SAPANOMMARITAL,
                           APAREGIMEMATRIM = SAPAREGIMEMATRIM,
                           PAYCODE = SPAYCODE,
                           APANOMPATRONYMIQUE = SAPANOMPATONYME,
                           APAPRENOM = SAPAPRENOM,
                           APAMIDDLENAME = SAPAMIDDLENAME,
                           APACHGREGIMEMATRIM = SAPACHREGIMEMATRIM,
                           APACODENIVEAUETUDE = SAPACODENIVEAUETUDE,
                           APADIRFONCTION = SAPADIRFONCTION,
                           APAFLAGDIRIGEANT = NAPAFLAGDIRIGEANT,
                           APAFLAGHOMMECLE = NAPAFLAGHOMMECLE,
                           APAFLAGINTERDITBANCAIRE = NAPAFLAGINTERDITBANCAIRE,
                           APAFLAGSUCCESSIONPRET = NAPAFLAGSUCCESSIONPRET,
                           APAPCTCAPITAL = NAPAPCTCAPITAL,
                           APAANEXPERACTIVITE = NAPAANEXPACTIVITE,
                           APAANEXPERIENCEFONCTION = NAPAEXPERIENCEFONCTION,
                           APADTPERMISDECONDUIRE = DTAPADTPERMISDECONDUIRE, -- CV-20062005 FSA-20165
                           APAVILLENAISS = SAPAVILLENAISS,
                           APACALBIRTHDAY = SAPACALBIRTHDAY,
                           APAPANCARD = SAPAPANCARD,
                           APAPASSPORT = SAPAPASSPORT,
                           APAVOTERID = SAPAVOTERID,
                           APADRIVINGLICENSE = SAPADRIVINGLICENSE,
                           APANATIONALITY = SAPANATIONALITY
                     WHERE ACTID = NACTID;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                ELSE
                    INSERT INTO ACTEURPARTICULIER (APADTNAISS,
                                                   APADEPTNAISS,
                                                   APACOMNAISS,
                                                   APANBENFANT,
                                                   APASEXE,
                                                   APAEMPLOYEUR,
                                                   APASITFAM,
                                                   APAFLAGPROPRIETE,
                                                   APATITRE,
                                                   APANOMMARITAL,
                                                   APAREGIMEMATRIM,
                                                   PAYCODE,
                                                   ACTID,
                                                   APANOMPATRONYMIQUE,
                                                   APAPRENOM,
                                                   APAMIDDLENAME,
                                                   APACHGREGIMEMATRIM,
                                                   APACODENIVEAUETUDE,
                                                   APADIRFONCTION,
                                                   APAFLAGDIRIGEANT,
                                                   APAFLAGHOMMECLE,
                                                   APAFLAGINTERDITBANCAIRE,
                                                   APAFLAGSUCCESSIONPRET,
                                                   APAPCTCAPITAL,
                                                   APAANEXPERACTIVITE,
                                                   APAANEXPERIENCEFONCTION,
                                                   APADTPERMISDECONDUIRE,
                                                   APAVILLENAISS,
                                                   APACALBIRTHDAY,
                                                   APAPANCARD,
                                                   APAPASSPORT,
                                                   APAVOTERID,
                                                   APADRIVINGLICENSE,
                                                   APANATIONALITY)
                         VALUES (DTAPADTNAISS,
                                 SAPADEPTNAISS,
                                 SAPACOMNAISS,
                                 NAPANBENFANT,
                                 NAPASEXE,
                                 SAPAEMPLOYEUR,
                                 SAPASITFAM,
                                 NAPAFLAGPROPRIETE,
                                 SAPATITRE,
                                 SAPANOMMARITAL,
                                 SAPAREGIMEMATRIM,
                                 SPAYCODE,
                                 NACTID,
                                 SAPANOMPATONYME,
                                 SAPAPRENOM,
                                 SAPAMIDDLENAME,
                                 SAPACHREGIMEMATRIM,
                                 SAPACODENIVEAUETUDE,
                                 SAPADIRFONCTION,
                                 NAPAFLAGDIRIGEANT,
                                 NAPAFLAGHOMMECLE,
                                 NAPAFLAGINTERDITBANCAIRE,
                                 NAPAFLAGSUCCESSIONPRET,
                                 NAPAPCTCAPITAL,
                                 NAPAANEXPACTIVITE,
                                 NAPAEXPERIENCEFONCTION,
                                 DTAPADTPERMISDECONDUIRE,
                                 SAPAVILLENAISS,
                                 SAPACALBIRTHDAY,
                                 SAPAPANCARD,
                                 SAPAPASSPORT,
                                 SAPAVOTERID,
                                 SAPADRIVINGLICENSE,
                                 SAPANATIONALITY);

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END IF;
            END;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_APA_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_APA_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTEURPARTICULIER;

    -- ACTEURGESTION --
    PROCEDURE U_ACTEURGESTION (
        NACTID                       ACTEUR.ACTID%TYPE,
        SAGECIB                      ACTEURGESTION.AGECIB%TYPE,
        SAGEEMETTEUR                 ACTEURGESTION.AGEEMETTEUR%TYPE,
        SAGELOGO                     ACTEURGESTION.AGELOGO%TYPE,
        STDRCODEEFFET                ACTEURGESTION.TDRCODEEFFET%TYPE,
        STDRCODEPRL                  ACTEURGESTION.TDRCODEPRL%TYPE,
        STDRCODEPRLACCELERE          ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
        STDRCODEVIR                  ACTEURGESTION.TDRCODEVIR%TYPE,
        SAGEEMETVIR                  ACTEURGESTION.AGEEMETVIR%TYPE,
        NTCIID                       ACTEURGESTION.TCIID%TYPE,
        BAGEFLAGIRFACTURE            ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
        BAGEFLAGIRCHQ                ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
        STAXCODE                     ACTEURGESTION.TAXCODE%TYPE,
        NRUBID                       ACTEURGESTION.RUBID%TYPE,
        NAGEMTFACMINI                ACTEURGESTION.AGEMTFACMINI%TYPE,
        NAGEDELAIEXIGIBLE            ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
        SAGEFICP                     ACTEURGESTION.AGEFICP%TYPE,
        NCALID                       ACTEURGESTION.CALID%TYPE,
        SACTTAXREGIME                ACTEURGESTION.ACTTAXREGIME%TYPE,
        NAGEIRMARGIN                 ACTEURGESTION.AGEIRMARGIN%TYPE,
        SAGESEPAIDENTIFIER           ACTEURGESTION.AGESEPAIDENTIFIER%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTEURGESTION
               SET AGEEMETTEUR = SAGEEMETTEUR,
                   AGELOGO = SAGELOGO,
                   AGECIB = SAGECIB,
                   TDRCODEEFFET = STDRCODEEFFET,
                   TDRCODEPRL = TDRCODEPRL,
                   TDRCODEPRLACCELERE = TDRCODEPRLACCELERE,
                   TDRCODEVIR = TDRCODEVIR,
                   AGEEMETVIR = SAGEEMETVIR,
                   TCIID = NTCIID,
                   AGEFLAGIRFACTURE = BAGEFLAGIRFACTURE,
                   AGEFLAGIRCHQ = BAGEFLAGIRCHQ,
                   TAXCODE = STAXCODE,
                   RUBID = NRUBID,
                   AGEDELAIEXIGIBLE = NAGEDELAIEXIGIBLE,
                   AGEFICP = SAGEFICP,
                   CALID = NCALID,
                   ACTTAXREGIME = SACTTAXREGIME,
                   AGEIRMARGIN = NAGEIRMARGIN,
                   AGESEPAIDENTIFIER = SAGESEPAIDENTIFIER
             WHERE ACTID = NACTID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AGE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTEURGESTION;

    -- ACTEURINDIVISOIN --
    PROCEDURE U_ACTEURINDIVISION (
        NACTID                   ACTEUR.ACTID%TYPE,
        NAINNBPARTTOTAL          ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTEURINDIVISION
               SET AINNBPARTTOTAL = NAINNBPARTTOTAL
             WHERE ACTID = NACTID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AIN_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTEURINDIVISION;

    -- ADRESSE --
    PROCEDURE U_ADRESSE (
        NADRID                    ADRESSE.ADRID%TYPE,
        SPAYCODE                  ADRESSE.PAYCODE%TYPE,
        SUTICODE                  ADRESSE.UTICODE%TYPE,
        SADRVOIE                  ADRESSE.ADRVOIE%TYPE,
        SADRLIEUDIT               ADRESSE.ADRLIEUDIT%TYPE,
        SADRCODEPOST              ADRESSE.ADRCODEPOST%TYPE,
        SADRVILLE                 ADRESSE.ADRVILLE%TYPE,
        SPRECODE                  ADRESSE.PRECODE%TYPE,
        SPRETYPE                  ADRESSE.PRETYPE%TYPE,
        DTADRDTMAJ                ADRESSE.ADRDTMAJ%TYPE,
        SADRCEDEX                 ADRESSE.ADRCEDEX%TYPE,
        SADRSUBREGION             ADRESSE.ADRSUBREGION%TYPE,
        SADRMSACODE               ADRESSE.ADRMSACODE%TYPE,
        NADRSTREETNUMBER          ADRESSE.ADRSTREETNUMBER%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ADRESSE
               SET PAYCODE = SPAYCODE,
                   UTICODE = SUTICODE,
                   ADRVOIE = SADRVOIE,
                   ADRLIEUDIT = SADRLIEUDIT,
                   ADRCODEPOST = SADRCODEPOST,
                   ADRVILLE = SADRVILLE,
                   PRECODE = SPRECODE,
                   ADRDTMAJ = DTADRDTMAJ,
                   ADRCEDEX = SADRCEDEX,
                   ADRSUBREGION = SADRSUBREGION,
                   ADRMSACODE = SADRMSACODE,
                   PRETYPE = SPRETYPE,
                   ADRSTREETNUMBER = NADRSTREETNUMBER
             WHERE ADRID = NADRID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- nReturnCode := ERR_PARENT_ADR_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ADR_FOUND_CONST);
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ADRESSE;

    -- BANQUEGUICHET --
    PROCEDURE I_BANQUEGUICHET (
        SBGUBANQUE              IN     BANQUEGUICHET.BGUBANQUE%TYPE,
        SBGUGUICHET             IN     BANQUEGUICHET.BGUGUICHET%TYPE,
        NADRID                  IN     BANQUEGUICHET.ADRID%TYPE,
        SBGUAGENCE              IN     BANQUEGUICHET.BGUAGENCE%TYPE,
        SBGUCODEINTERBANCAIRE   IN     BANQUEGUICHET.BGUCODEINTERBANCAIRE%TYPE,
        SPAYCODE                IN     BANQUEGUICHET.PAYCODE%TYPE,
        SBGUSWIFT               IN     BANQUEGUICHET.BGUSWIFT%TYPE,
        SBGUTYPE                IN     BANQUEGUICHET.BGUTYPE%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO BANQUEGUICHET (BGUBANQUE,
                                       BGUGUICHET,
                                       ADRID,
                                       BGUAGENCE,
                                       BGUCODEINTERBANCAIRE,
                                       PAYCODE,
                                       BGUSWIFT,
                                       BGUTYPE)
                 VALUES (SBGUBANQUE,
                         SBGUGUICHET,
                         NADRID,
                         SBGUAGENCE,
                         SBGUCODEINTERBANCAIRE,
                         SPAYCODE,
                         SBGUSWIFT,
                         SBGUTYPE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_BANQUEGUICHET;

    PROCEDURE U_BANQUEGUICHET (
        SBGUBANQUE              IN     BANQUEGUICHET.BGUBANQUE%TYPE,
        SBGUGUICHET             IN     BANQUEGUICHET.BGUGUICHET%TYPE,
        NADRID                  IN     BANQUEGUICHET.ADRID%TYPE,
        SBGUAGENCE              IN     BANQUEGUICHET.BGUAGENCE%TYPE,
        SBGUCODEINTERBANCAIRE   IN     BANQUEGUICHET.BGUCODEINTERBANCAIRE%TYPE,
        SPAYCODE                IN     BANQUEGUICHET.PAYCODE%TYPE,
        SBGUSWIFT               IN     BANQUEGUICHET.BGUSWIFT%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE BANQUEGUICHET
               SET ADRID = NADRID,
                   BGUAGENCE = SBGUAGENCE,
                   BGUCODEINTERBANCAIRE = SBGUCODEINTERBANCAIRE,
                   PAYCODE = SPAYCODE,
                   BGUSWIFT = SBGUSWIFT
             WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_BANQUEGUICHET;

    --ACTTAB --
    PROCEDURE I_ACTTAB (NACTID                 ACTEUR.ACTID%TYPE,
                        DTATBDTVALID           ACTTAB.ATBDTVALID%TYPE,
                        DTATBDTSAISIE          ACTTAB.ATBDTSAISIE%TYPE,
                        DTATBDTFIN             ACTTAB.ATBDTFIN%TYPE,
                        STABCODE               ACTTAB.TABCODE%TYPE,
                        SATBVALEUR             ACTTAB.ATBVALEUR%TYPE,
                        SPAYCODE               ACTTAB.PAYCODE%TYPE,
                        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTTAB (ACTID,
                                TABCODE,
                                ATBDTVALID,
                                ATBDTSAISIE,
                                ATBVALEUR,
                                ATBDTFIN,
                                PAYCODE)
                 VALUES (NACTID,
                         STABCODE,
                         DTATBDTVALID,
                         DTATBDTSAISIE,
                         SATBVALEUR,
                         DTATBDTFIN,
                         SPAYCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ATA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ATA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_BAFI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_BAFI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTTAB;

    PROCEDURE U_ACTTAB (NACTID                 ACTEUR.ACTID%TYPE,
                        DTATBDTVALID           ACTTAB.ATBDTVALID%TYPE,
                        DTATBDTSAISIE          ACTTAB.ATBDTSAISIE%TYPE,
                        DTATBDTFIN             ACTTAB.ATBDTFIN%TYPE,
                        STABCODE               ACTTAB.TABCODE%TYPE,
                        SATBVALEUR             ACTTAB.ATBVALEUR%TYPE,
                        SPAYCODE               ACTTAB.PAYCODE%TYPE, --ALA 180607
                        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTTAB
               SET ATBVALEUR = SATBVALEUR, ATBDTFIN = DTATBDTFIN
             WHERE     TABCODE = STABCODE
                   AND ACTID = NACTID
                   AND ATBDTVALID = DTATBDTVALID
                   AND PAYCODE = SPAYCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ATA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADM_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTTAB;

    PROCEDURE D_ACTTAB (NACTID                ACTEUR.ACTID%TYPE,
                        DTATBDTVALID          ACTTAB.ATBDTVALID%TYPE,
                        STABCODE              ACTTAB.TABCODE%TYPE,
                        SPAYCODE              ACTTAB.PAYCODE%TYPE, --ALA 180607
                        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTTAB
                  WHERE     ACTID = NACTID
                        AND ATBDTVALID = DTATBDTVALID
                        AND TABCODE = STABCODE
                        AND PAYCODE = SPAYCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATB_FOUND_CONST;
        END;
    END D_ACTTAB;

    -- AGEGROMESURE --
    PROCEDURE I_AGEGROMESURE (
        NACTID               AGEGROMESURE.ACTID%TYPE,
        SAGMCODE             AGEGROMESURE.AGMCODE%TYPE,
        SAGMNATURE           AGEGROMESURE.AGMNATURE%TYPE,
        DTAGMDTDEB           AGEGROMESURE.AGMDTDEB%TYPE,
        DTAGMDTFIN           AGEGROMESURE.AGMDTFIN%TYPE,
        SDEVCODE             AGEGROMESURE.DEVCODE%TYPE,
        NAGMMT               AGEGROMESURE.AGMMT%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO AGEGROMESURE (ACTID,
                                      AGMCODE,
                                      AGMNATURE,
                                      AGMDTDEB,
                                      AGMDTFIN,
                                      DEVCODE,
                                      AGMMT)
                 VALUES (NACTID,
                         SAGMCODE,
                         SAGMNATURE,
                         DTAGMDTDEB,
                         DTAGMDTFIN,
                         SDEVCODE,
                         NAGMMT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AGM_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AGM_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AGEGROMESURE;

    PROCEDURE D_AGEGROMESURE (
        NACTID               AGEGROMESURE.ACTID%TYPE,
        SAGMCODE             AGEGROMESURE.AGMCODE%TYPE,
        SAGMNATURE           AGEGROMESURE.AGMNATURE%TYPE,
        DTAGMDTDEB           AGEGROMESURE.AGMDTDEB%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM AGEGROMESURE
                  WHERE     ACTID = NACTID
                        AND AGMCODE = SAGMCODE
                        AND AGMNATURE = SAGMNATURE
                        AND AGMDTDEB = DTAGMDTDEB;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AGM_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_AGEGROMESURE;

    PROCEDURE U_AGEGROMESURE (
        NACTID               AGEGROMESURE.ACTID%TYPE,
        SAGMCODE             AGEGROMESURE.AGMCODE%TYPE,
        SAGMNATURE           AGEGROMESURE.AGMNATURE%TYPE,
        DTAGMDTDEB           AGEGROMESURE.AGMDTDEB%TYPE,
        DTAGMDTFIN           AGEGROMESURE.AGMDTFIN%TYPE,
        SDEVCODE             AGEGROMESURE.DEVCODE%TYPE,
        NAGMMT               AGEGROMESURE.AGMMT%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE AGEGROMESURE
               SET DEVCODE = SDEVCODE, AGMMT = NAGMMT, AGMDTFIN = DTAGMDTFIN
             WHERE     AGMNATURE = SAGMNATURE
                   AND AGMCODE = SAGMCODE
                   AND AGMDTDEB = DTAGMDTDEB
                   AND ACTID = NACTID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AGM_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AGM_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_AGEGROMESURE;

    -- ACTPERIMETRE --
    PROCEDURE I_ACTPERIMETRE (
        NACTID                ACTPERIMETRE.ACTID%TYPE,
        SAPECODE              ACTPERIMETRE.APECODE%TYPE,
        SAPECODETYPE          ACTPERIMETRE.APECODETYPE%TYPE,
        DTAPEDTDEB            ACTPERIMETRE.APEDTDEB%TYPE,
        DTAPEDTFIN            ACTPERIMETRE.APEDTFIN%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
        nApeorder   ACTPERIMETRE.APEORDER%TYPE;
    BEGIN
        BEGIN
            SELECT NVL (MAX (APEORDER), 0) + 1
              INTO nApeorder
              FROM ACTPERIMETRE
             WHERE ACTID = NACTID;

            INSERT INTO ACTPERIMETRE (ACTID,
                                      APEORDER,
                                      APECODE,
                                      APECODETYPE,
                                      APEDTDEB,
                                      APEDTFIN)
                 VALUES (NACTID,
                         nApeorder,
                         SAPECODE,
                         SAPECODETYPE,
                         NVL (DTAPEDTDEB, SYSDATE),
                         DTAPEDTFIN);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPERIMETRE;

    PROCEDURE U_ACTPERIMETRE (
        NACTID                ACTPERIMETRE.ACTID%TYPE,
        SAPECODE              ACTPERIMETRE.APECODE%TYPE,
        SAPECODETYPE          ACTPERIMETRE.APECODETYPE%TYPE,
        NAPEORDER             ACTPERIMETRE.APEORDER%TYPE,
        DTAPEDTFIN            ACTPERIMETRE.APEDTFIN%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPERIMETRE
               SET APEDTFIN = DTAPEDTFIN, APECODETYPE = SAPECODETYPE
             WHERE     ACTID = NACTID
                   AND APECODE = SAPECODE
                   AND APEORDER = NAPEORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPERIMETRE;

    PROCEDURE D_ACTPERIMETRE (NACTID               ACTPERIMETRE.ACTID%TYPE,
                              SAPECODE             ACTPERIMETRE.APECODE%TYPE,
                              NAPEORDER            ACTPERIMETRE.APEORDER%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPERIMETRE
                  WHERE     ACTID = NACTID
                        AND APECODE = SAPECODE
                        AND APEORDER = NAPEORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APE_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTPERIMETRE;

    PROCEDURE U_ACTRIB (
        NACTID                      ACTEUR.ACTID%TYPE,
        NRIBID                      RIB.RIBID%TYPE,
        NRIBIDREMPLACE              ACTRIB.RIBIDREMPLACE%TYPE,
        DTARIDTREMPLACE             ACTRIB.ARIDTREMPLACE%TYPE,
        NCREID                      ACTRIB.CREID%TYPE,
        NRIBIDINTERMEDIATE          ACTRIB.RIBIDINTERMEDIATE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTRIB
               SET RIBIDREMPLACE = NRIBIDREMPLACE,
                   ARIDTREMPLACE = DTARIDTREMPLACE,
                   RIBIDINTERMEDIATE = NRIBIDINTERMEDIATE,
                   CREID = NCREID
             WHERE ACTID = NACTID AND RIBID = NRIBID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARI_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRIB;

    PROCEDURE U_ACTRIBTMPDEFAUT (
        NACTID               ACTEUR.ACTID%TYPE,
        NRIBID               RIB.RIBID%TYPE,
        SATDTYPE             ACTRIBTMPDEFAUT.ATDTYPE%TYPE,
        STMPCODE             ACTRIBTMPDEFAUT.TMPCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTRIBTMPDEFAUT
               SET RIBID = NRIBID
             WHERE     ACTID = NACTID
                   AND ATDTYPE = SATDTYPE
                   AND TMPCODE = STMPCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ATD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRIBTMPDEFAUT;

    -- AROAGETMPFE ----------------------------------------------------------------------------------------------------------------
    PROCEDURE U_ACTAROAGETMPFEE (
        NACTID                   AROAGETMPFEE.ACTID%TYPE,
        NACTIDGESTION            AROAGETMPFEE.ACTIDGESTION%TYPE,
        SROLCODE                 AROAGETMPFEE.ROLCODE%TYPE,
        DTATFDTEND               AROAGETMPFEE.ATFDTEND%TYPE,
        DTATFDTSTART             AROAGETMPFEE.ATFDTSTART%TYPE,
        SATFFIXEDAMOUNT          AROAGETMPFEE.ATFFIXEDAMOUNT%TYPE,
        SATFORDER                AROAGETMPFEE.ATFORDER%TYPE,
        SATFTYPE                 AROAGETMPFEE.ATFTYPE%TYPE,
        NCREID                   AROAGETMPFEE.CREID%TYPE,
        SDEVCODE                 AROAGETMPFEE.DEVCODE%TYPE,
        NRUBID                   AROAGETMPFEE.RUBID%TYPE,
        STBAID                   AROAGETMPFEE.TBAID%TYPE,
        STAXCODE                 AROAGETMPFEE.TAXCODE%TYPE,
        NTMPCODE                 AROAGETMPFEE.TMPCODE%TYPE,
        NTMPCODEDEC              AROAGETMPFEE.TMPCODEDEC%TYPE,
        SATFMTFIRSTTRN           AROAGETMPFEE.ATFMTFIRSTTRN%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE AROAGETMPFEE
               SET ACTIDGESTION = NACTIDGESTION,
                   ATFDTEND = DTATFDTEND,
                   ATFDTSTART = DTATFDTSTART,
                   ATFFIXEDAMOUNT = SATFFIXEDAMOUNT,
                   ATFTYPE = SATFTYPE,
                   CREID = NCREID,
                   DEVCODE = SDEVCODE,
                   RUBID = NRUBID,
                   TBAID = STBAID,
                   TAXCODE = STAXCODE,
                   TMPCODE = NTMPCODE,
                   TMPCODEDEC = NTMPCODEDEC,
                   ATFMTFIRSTTRN = SATFMTFIRSTTRN
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ATFORDER = SATFORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTAROAGETMPFEE;

    -- AROAGETMPFEE --
    PROCEDURE I_ACTAROAGETMPFEE (
        NACTID                   AROAGETMPFEE.ACTID%TYPE,
        NACTIDGESTION            AROAGETMPFEE.ACTIDGESTION%TYPE,
        SROLCODE                 AROAGETMPFEE.ROLCODE%TYPE,
        DTATFDTEND               AROAGETMPFEE.ATFDTEND%TYPE,
        DTATFDTSTART             AROAGETMPFEE.ATFDTSTART%TYPE,
        SATFFIXEDAMOUNT          AROAGETMPFEE.ATFFIXEDAMOUNT%TYPE,
        SATFTYPE                 AROAGETMPFEE.ATFTYPE%TYPE,
        NCREID                   AROAGETMPFEE.CREID%TYPE,
        SDEVCODE                 AROAGETMPFEE.DEVCODE%TYPE,
        NRUBID                   AROAGETMPFEE.RUBID%TYPE,
        STBAID                   AROAGETMPFEE.TBAID%TYPE,
        STAXCODE                 AROAGETMPFEE.TAXCODE%TYPE,
        NTMPCODE                 AROAGETMPFEE.TMPCODE%TYPE,
        NTMPCODEDEC              AROAGETMPFEE.TMPCODEDEC%TYPE,
        SATFMTFIRSTTRN           AROAGETMPFEE.ATFMTFIRSTTRN%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NATFORDRE   NUMBER;
        BEGIN
            SELECT NVL (MAX (ATFORDER), 0)
              INTO NATFORDRE
              FROM AROAGETMPFEE
             WHERE     ACTID = NACTID
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE;

            INSERT INTO AROAGETMPFEE (ACTID,
                                      ACTIDGESTION,
                                      ROLCODE,
                                      ATFDTEND,
                                      ATFDTSTART,
                                      ATFFIXEDAMOUNT,
                                      ATFORDER,
                                      ATFTYPE,
                                      DEVCODE,
                                      RUBID,
                                      TAXCODE,
                                      TMPCODE,
                                      ATFMTFIRSTTRN)
                 VALUES (NACTID,
                         NACTIDGESTION,
                         SROLCODE,
                         DTATFDTEND,
                         DTATFDTSTART,
                         SATFFIXEDAMOUNT,
                         NATFORDRE + 1,
                         SATFTYPE,
                         SDEVCODE,
                         NRUBID,
                         STAXCODE,
                         NTMPCODE,
                         SATFMTFIRSTTRN);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END I_ACTAROAGETMPFEE;

    PROCEDURE D_AROAGETMPFEE (
        NACTID          IN     ACTEUR.ACTID%TYPE,
        NACTIDGESTION   IN     AROAGETMPFEE.ACTIDGESTION%TYPE,
        NACTROLCODE     IN     AROAGETMPFEE.ROLCODE%TYPE,
        NATFORDER       IN     AROAGETMPFEE.ATFORDER%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM AROAGETMPFEE
                  WHERE     ACTID = NACTID
                        AND ACTIDGESTION = NACTIDGESTION
                        AND ROLCODE = NACTROLCODE
                        AND ATFORDER = NATFORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AAG_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_AROAGETMPFEE;

    -- End of AROAGETMPFEE -------------------------------------------------------------------------------------
    -- AROAGE --
    PROCEDURE I_ACTAROAGE (
        NACTID                       AROAGE.ACTID%TYPE,
        SROLCODE                     AROAGE.ROLCODE%TYPE,
        NACTIDGESTION                AROAGE.ACTIDGESTION%TYPE,
        DTAAGDTVALID                 AROAGE.AAGDTVALID%TYPE,
        STMPCODE                     AROAGE.TMPCODE%TYPE,
        SAAGDELAIPMT                 AROAGE.AAGDELAIPMT%TYPE,
        SAAGBASEDEPART               AROAGE.AAGBASEDEPART%TYPE,
        NAAGJOUR                     AROAGE.AAGJOUR%TYPE,
        NTCIID                       AROAGE.TCIID%TYPE,
        STAXCODE                     AROAGE.TAXCODE%TYPE,
        NRUBID                       AROAGE.RUBID%TYPE,
        NAAGFLAGIRFACTURE            AROAGE.AAGFLAGIRFACTURE%TYPE,
        NAAGFLAGIRFACSEPARE          AROAGE.AAGFLAGIRFACSEPARE%TYPE,
        NAAGFLAGIRCHQ                AROAGE.AAGFLAGIRCHQ%TYPE,
        NAAGFMTIRMINIMAL             AROAGE.AAGFMTIRMINIMAL%TYPE,
        NAAGMTIRFORFAIT              AROAGE.AAGMTIRFORFAIT%TYPE,
        NAAGTXIRPLANCHER             AROAGE.AAGTXIRPLANCHER%TYPE,
        NAAGTXIRPLAFOND              AROAGE.AAGTXIRPLAFOND%TYPE,
        DTAAGDTFIN                   AROAGE.AAGDTFIN%TYPE,
        NAAGPCTESCOMPTE              AROAGE.AAGPCTESCOMPTE%TYPE,
        NAAGIRMARGE                  AROAGE.AAGIRMARGE%TYPE,
        NAAGIRTXFIXE                 AROAGE.AAGIRTXFIXE%TYPE,
        SAAGBLOCAGERELANCE           AROAGE.AAGBLOCAGERELANCE%TYPE,
        STMPCODEENC                  AROAGE.TMPCODEENC%TYPE,     --CV-19062001
        NAAGTVIDPLAFOND              AROAGE.FTVIDPLAFOND%TYPE, --LG 08/11/2002
        NAAGTVIDPLANCHER             AROAGE.FTVIDPLANCHER%TYPE, --LG 08/11/2002
        SAAGMOTIFNONRELANCE          AROAGE.AAGMOTIFNONRELANCE%TYPE,
        SAAGENVOINOTICE              AROAGE.AAGENVOINOTICE%TYPE,
        SAAGTYPENOREMIND             AROAGE.AAGTYPENOREMIND%TYPE,
        DTAAGDTENDNOREMIND           AROAGE.AAGDTENDNOREMIND%TYPE,
        SAAGIRCAPTYPE                AROAGE.AAGIRCAPTYPE%TYPE,
        SAAGIRFLOORTYPE              AROAGE.AAGIRFLOORTYPE%TYPE,
        SPHACODE                     AROAGE.PHACODE%TYPE,
        SJALCODE                     AROAGE.JALCODE%TYPE,
        SAAGREFEXTERNE               AROAGE.AAGREFEXTERNE%TYPE,
        SAAGDELAIPMTENC              AROAGE.AAGDELAIPMTENC%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            L_CNT           NUMBER (5);
            NANNEEEXIST     NUMBER;
            NMOISEXIST      NUMBER;
            NNUMERO         NUMBER;
            DTSAMPLE        DATE;
            SACTIDGESTION   NUMBER;
            SAAGREF         ACTROLE.AROREFEXTERNE%TYPE;
        BEGIN
            SELECT COUNT (*)
              INTO L_CNT
              FROM AROAGE
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND PHACODE = 'TER'
                   AND AAGDTFIN IS NULL;

            IF L_CNT = 1
            THEN
                UPDATE AROAGE
                   SET AAGDTFIN = SYSDATE - 1
                 WHERE     ACTID = NACTID
                       AND ROLCODE = SROLCODE
                       AND ACTIDGESTION = NACTIDGESTION
                       AND PHACODE = 'TER'
                       AND AAGDTFIN IS NULL;
            END IF;

            NANNEEEXIST := 0;
            NMOISEXIST := 0;
            NNUMERO := -1;
            DTSAMPLE := NULL;
            SACTIDGESTION := NULL;
            SAAGREF := NULL;
            PA_COMMON.S_NUMEROFORMATE ('AROPREFEXTERNE',
                                       SACTIDGESTION,
                                       'AROPREFEXTERNE',
                                       DTSAMPLE,
                                       NANNEEEXIST,
                                       NMOISEXIST,
                                       NNUMERO,
                                       SAAGREF);

            INSERT INTO AROAGE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID,
                                TMPCODE,
                                AAGDELAIPMT,
                                AAGBASEDEPART,
                                AAGJOUR,
                                TCIID,
                                TAXCODE,
                                RUBID,
                                AAGFLAGIRFACTURE,
                                AAGFLAGIRFACSEPARE,
                                AAGFLAGIRCHQ,
                                AAGFMTIRMINIMAL,
                                AAGMTIRFORFAIT,
                                AAGTXIRPLANCHER,
                                AAGTXIRPLAFOND,
                                AAGDTFIN,
                                AAGPCTESCOMPTE,
                                AAGIRMARGE,
                                AAGIRTXFIXE,
                                AAGBLOCAGERELANCE,
                                TMPCODEENC,                     -- CV-19062001
                                FTVIDPLAFOND,
                                FTVIDPLANCHER,
                                AAGMOTIFNONRELANCE,
                                AAGENVOINOTICE,
                                AAGTYPENOREMIND,
                                AAGDTENDNOREMIND,
                                AAGIRCAPTYPE,
                                AAGIRFLOORTYPE,
                                PHACODE,
                                JALCODE,
                                PHADEST,
                                AAGREFEXTERNE)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         NVL (DTAAGDTVALID, SYSDATE),
                         STMPCODE,
                         SAAGDELAIPMT,
                         SAAGBASEDEPART,
                         NAAGJOUR,
                         NTCIID,
                         STAXCODE,
                         NRUBID,
                         NAAGFLAGIRFACTURE,
                         NAAGFLAGIRFACSEPARE,
                         NAAGFLAGIRCHQ,
                         NAAGFMTIRMINIMAL,
                         NAAGMTIRFORFAIT,
                         NAAGTXIRPLANCHER,
                         NAAGTXIRPLAFOND,
                         DTAAGDTFIN,
                         NAAGPCTESCOMPTE,
                         NAAGIRMARGE,
                         NAAGIRTXFIXE,
                         SAAGBLOCAGERELANCE,
                         STMPCODEENC,                           -- CV-19062001
                         NAAGTVIDPLAFOND,
                         NAAGTVIDPLANCHER,
                         SAAGMOTIFNONRELANCE,
                         SAAGENVOINOTICE,
                         SAAGTYPENOREMIND,
                         DTAAGDTENDNOREMIND,
                         SAAGIRCAPTYPE,
                         SAAGIRFLOORTYPE,
                         'INI',
                         'OUVERT',
                         'ROLE',
                         SAAGREFEXTERNE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                UPDATE ACTROLE
                   SET AROREFEXTERNE = SAAGREF
                 WHERE ACTID = NACTID AND ROLCODE = SROLCODE;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTAROAGE;

    PROCEDURE D_AROAGE (NACTID                 AROAGE.ACTID%TYPE,
                        SROLCODE               AROAGE.ROLCODE%TYPE,
                        NACTIDGESTION          AROAGE.ACTIDGESTION%TYPE,
                        DTAAGDTVALID           AROAGE.AAGDTVALID%TYPE,
                        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM AROAGERELANCE
                  WHERE     ACTID = NACTID
                        AND ROLCODE = SROLCODE
                        AND ACTIDGESTION = NACTIDGESTION;

            DELETE FROM AAGRVE
                  WHERE     ACTID = NACTID
                        AND ROLCODE = SROLCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND AAGDTVALID = DTAAGDTVALID;

            DELETE FROM AROAGE
                  WHERE     ACTID = NACTID
                        AND ROLCODE = SROLCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND AAGDTVALID = DTAAGDTVALID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AAG_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_AROAGE;

    PROCEDURE U_ACTAROAGE (
        NACTID                       AROAGE.ACTID%TYPE,
        SROLCODE                     AROAGE.ROLCODE%TYPE,
        NACTIDGESTION                AROAGE.ACTIDGESTION%TYPE,
        DTAAGDTVALID                 AROAGE.AAGDTVALID%TYPE,
        STMPCODE                     AROAGE.TMPCODE%TYPE,
        SAAGDELAIPMT                 AROAGE.AAGDELAIPMT%TYPE,
        SAAGBASEDEPART               AROAGE.AAGBASEDEPART%TYPE,
        NAAGJOUR                     AROAGE.AAGJOUR%TYPE,
        NTCIID                       AROAGE.TCIID%TYPE,
        STAXCODE                     AROAGE.TAXCODE%TYPE,
        NRUBID                       AROAGE.RUBID%TYPE,
        NAAGFLAGIRFACTURE            AROAGE.AAGFLAGIRFACTURE%TYPE,
        NAAGFLAGIRFACSEPARE          AROAGE.AAGFLAGIRFACSEPARE%TYPE,
        NAAGFLAGIRCHQ                AROAGE.AAGFLAGIRCHQ%TYPE,
        NAAGFMTIRMINIMAL             AROAGE.AAGFMTIRMINIMAL%TYPE,
        NAAGMTIRFORFAIT              AROAGE.AAGMTIRFORFAIT%TYPE,
        NAAGTXIRPLANCHER             AROAGE.AAGTXIRPLANCHER%TYPE,
        NAAGTXIRPLAFOND              AROAGE.AAGTXIRPLAFOND%TYPE,
        DTAAGDTFIN                   AROAGE.AAGDTFIN%TYPE,      -- TD 30/03/01
        NAAGPCTESCOMPTE              AROAGE.AAGPCTESCOMPTE%TYPE,
        NAAGIRMARGE                  AROAGE.AAGIRMARGE%TYPE,
        NAAGIRTXFIXE                 AROAGE.AAGIRTXFIXE%TYPE,
        SAAGBLOCAGERELANCE           AROAGE.AAGBLOCAGERELANCE%TYPE,
        STMPCODEENC                  AROAGE.TMPCODEENC%TYPE,    -- CV-19062001
        NAAGTVIDPLAFOND              AROAGE.FTVIDPLAFOND%TYPE, --LG 08/11/2002
        NAAGTVIDPLANCHER             AROAGE.FTVIDPLANCHER%TYPE, --LG 08/11/2002
        SAAGMOTIFNONRELANCE          AROAGE.AAGMOTIFNONRELANCE%TYPE,
        SAAGENVOINOTICE              AROAGE.AAGENVOINOTICE%TYPE,
        SAAGTYPENOREMIND             AROAGE.AAGTYPENOREMIND%TYPE,
        DTAAGDTENDNOREMIND           AROAGE.AAGDTENDNOREMIND%TYPE,
        SAAGIRCAPTYPE                AROAGE.AAGIRCAPTYPE%TYPE,
        SAAGIRFLOORTYPE              AROAGE.AAGIRFLOORTYPE%TYPE,
        SPHACODE                     AROAGE.PHACODE%TYPE,
        SJALCODE                     AROAGE.JALCODE%TYPE,
        SAAGREFEXTERNE               AROAGE.AAGREFEXTERNE%TYPE,
        SAAGDELAIPMTENC              AROAGE.AAGDELAIPMTENC%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE AROAGE
               SET TMPCODE = STMPCODE,
                   AAGDELAIPMT = SAAGDELAIPMT,
                   AAGBASEDEPART = SAAGBASEDEPART,
                   AAGJOUR = NAAGJOUR,
                   TCIID = NTCIID,
                   TAXCODE = STAXCODE,
                   RUBID = NRUBID,
                   AAGFLAGIRFACTURE = NAAGFLAGIRFACTURE,
                   AAGFLAGIRFACSEPARE = NAAGFLAGIRFACSEPARE,
                   AAGFLAGIRCHQ = NAAGFLAGIRCHQ,
                   AAGFMTIRMINIMAL = NAAGFMTIRMINIMAL,
                   AAGMTIRFORFAIT = NAAGMTIRFORFAIT,
                   AAGTXIRPLANCHER = NAAGTXIRPLANCHER,
                   AAGTXIRPLAFOND = NAAGTXIRPLAFOND,
                   AAGDTFIN = DTAAGDTFIN,
                   AAGPCTESCOMPTE = NAAGPCTESCOMPTE,
                   AAGIRMARGE = NAAGIRMARGE,
                   AAGIRTXFIXE = NAAGIRTXFIXE,
                   AAGBLOCAGERELANCE = SAAGBLOCAGERELANCE,
                   TMPCODEENC = STMPCODEENC,
                   FTVIDPLAFOND = NAAGTVIDPLAFOND,
                   FTVIDPLANCHER = NAAGTVIDPLANCHER,
                   AAGMOTIFNONRELANCE = SAAGMOTIFNONRELANCE,
                   AAGENVOINOTICE = SAAGENVOINOTICE,
                   AAGTYPENOREMIND = SAAGTYPENOREMIND,
                   AAGDTENDNOREMIND = DTAAGDTENDNOREMIND,
                   AAGIRCAPTYPE = SAAGIRCAPTYPE,
                   AAGIRFLOORTYPE = SAAGIRFLOORTYPE,
                   PHACODE = SPHACODE,
                   JALCODE = SJALCODE,
                   AAGREFEXTERNE = SAAGREFEXTERNE,
                   PHADEST = DECODE (SPHACODE, NULL, NULL, 'ROLE')
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND AAGDTVALID = NVL (DTAAGDTVALID, SYSDATE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTAROAGE;

    PROCEDURE I_AEXTAXE (NACTID                AEXTAXE.ACTID%TYPE,
                         NAEXEXERCICE          AEXTAXE.AEXEXERCICE%TYPE,
                         NATAORDRE             AEXTAXE.ATAORDRE%TYPE,
                         STAXCODE              AEXTAXE.TAXCODE%TYPE,
                         NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO AEXTAXE (ACTID,
                             AEXEXERCICE,
                             ATAORDRE,
                             TAXCODE)
             VALUES (NACTID,
                     NAEXEXERCICE,
                     NATAORDRE,
                     STAXCODE);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_AEXTAXE;

    PROCEDURE I_ACTEXERCICE (
        NACTID                      ACTEXERCICE.ACTID%TYPE,
        NAEXEXERCICE                ACTEXERCICE.AEXEXERCICE%TYPE,
        SDEVCODE                    ACTEXERCICE.DEVCODE%TYPE,
        NAEXANNEEDEB                ACTEXERCICE.AEXANNEEDEB%TYPE,
        NAEXMOISDEB                 ACTEXERCICE.AEXMOISDEB%TYPE,
        NAEXANNEEFIN                ACTEXERCICE.AEXANNEEFIN%TYPE,
        NAEXMOISFIN                 ACTEXERCICE.AEXMOISFIN%TYPE,
        DTAEXDTSAISIE               ACTEXERCICE.AEXDTSAISIE%TYPE,
        DTAEXDTCLOTURE              ACTEXERCICE.AEXDTCLOTURE%TYPE,
        NAEXNBMOISOUVERT            ACTEXERCICE.AEXNBMOISOUVERT%TYPE,
        NAEXPCTRECUPTVAP            ACTEXERCICE.AEXPCTRECUPTVAP%TYPE,
        NAEXPCTRECUPTVAD            ACTEXERCICE.AEXPCTRECUPTVAD%TYPE,
        SAEXTYPECLOTURE             ACTEXERCICE.AEXTYPECLOTURE%TYPE, --hn 09/05/03
        DTAEXDTVATFROM              ACTEXERCICE.AEXDTVATFROM%TYPE,
        NAEXMTMINDVD                ACTEXERCICE.AEXMTMINDVD%TYPE,
        NAEXMTCOMPANYVALUE          ACTEXERCICE.AEXMTCOMPANYVALUE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTEXERCICE (ACTID,
                                     AEXEXERCICE,
                                     DEVCODE,
                                     AEXANNEEDEB,
                                     AEXMOISDEB,
                                     AEXANNEEFIN,
                                     AEXMOISFIN,
                                     AEXDTSAISIE,
                                     AEXDTCLOTURE,
                                     AEXNBMOISOUVERT,
                                     AEXPCTRECUPTVAP,
                                     AEXTYPECLOTURE,             --hn 09/05/03
                                     AEXPCTRECUPTVAD,        --amita29/10/2009
                                     AEXDTVATFROM,
                                     AEXMTMINDVD,
                                     AEXMTCOMPANYVALUE)
                 VALUES (NACTID,
                         NAEXEXERCICE,
                         SDEVCODE,
                         NAEXANNEEDEB,
                         NAEXMOISDEB,
                         NAEXANNEEFIN,
                         NAEXMOISFIN,
                         DTAEXDTSAISIE,
                         DTAEXDTCLOTURE,
                         NAEXNBMOISOUVERT,
                         NAEXPCTRECUPTVAP,
                         SAEXTYPECLOTURE,                        --hn 09/05/03
                         NAEXPCTRECUPTVAD,
                         DTAEXDTVATFROM,
                         NAEXMTMINDVD,
                         NAEXMTCOMPANYVALUE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTEXERCICE;

    PROCEDURE I_ACTEXEDPT (
        NACTID                 ACTEXEDPT.ACTID%TYPE,
        NACTEXEC               ACTEXEDPT.AEXEXERCICE%TYPE,
        SDPTCODE               ACTEXEDPT.DPTCODE%TYPE,
        SDEVCODE               ACTEXEDPT.DEVCODE%TYPE,
        DAEDDTCLOTURE          ACTEXEDPT.AEDDTCLOTURE%TYPE,
        DAEDDTSAISIE           ACTEXEDPT.AEDDTSAISIE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTEXEDPT (ACTID,
                                   AEXEXERCICE,
                                   DPTCODE,
                                   DEVCODE,
                                   AEDDTCLOTURE,
                                   AEDDTSAISIE)
                 VALUES (NACTID,
                         NACTEXEC,
                         SDPTCODE,
                         SDEVCODE,
                         DAEDDTCLOTURE,
                         DAEDDTSAISIE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTEXEDPT;

    PROCEDURE U_ACTEXEDPT (
        NACTID                 ACTEXEDPT.ACTID%TYPE,
        NACTEXEC               ACTEXEDPT.AEXEXERCICE%TYPE,
        SDPTCODE               ACTEXEDPT.DPTCODE%TYPE,
        SDEVCODE               ACTEXEDPT.DEVCODE%TYPE,
        DAEDDTCLOTURE          ACTEXEDPT.AEDDTCLOTURE%TYPE,
        DAEDDTSAISIE           ACTEXEDPT.AEDDTSAISIE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        UPDATE ACTEXEDPT
           SET DEVCODE = SDEVCODE,
               AEDDTCLOTURE = DAEDDTCLOTURE,
               AEDDTSAISIE = DAEDDTSAISIE
         WHERE     ACTID = NACTID
               AND AEXEXERCICE = NACTEXEC
               AND DPTCODE = SDPTCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_ACTEXEDPT;

    PROCEDURE D_ACTEXEDPT (NACTID               ACTEXEDPT.ACTID%TYPE,
                           NACTEXEC             ACTEXEDPT.AEXEXERCICE%TYPE,
                           SDPTCODE             DEPARTMENT.DPTCODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTEXEDPT
                  WHERE     ACTID = NACTID
                        AND AEXEXERCICE = NACTEXEC
                        AND DPTCODE = SDPTCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APJ_FOUND_CONST;
        END;
    END D_ACTEXEDPT;

    PROCEDURE U_AEXTAXE (NACTID                AEXTAXE.ACTID%TYPE,
                         NAEXEXERCICE          AEXTAXE.AEXEXERCICE%TYPE,
                         NATAORDRE             AEXTAXE.ATAORDRE%TYPE,
                         STAXCODE              AEXTAXE.TAXCODE%TYPE,
                         NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        UPDATE AEXTAXE
           SET TAXCODE = STAXCODE
         WHERE     ACTID = NACTID
               AND AEXEXERCICE = NAEXEXERCICE
               AND ATAORDRE = NATAORDRE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_AEXTAXE;

    PROCEDURE U_ACTEXERCICE (
        NACTID                      ACTEXERCICE.ACTID%TYPE,
        NAEXEXERCICE                ACTEXERCICE.AEXEXERCICE%TYPE,
        SDEVCODE                    ACTEXERCICE.DEVCODE%TYPE,
        NAEXANNEEDEB                ACTEXERCICE.AEXANNEEDEB%TYPE,
        NAEXMOISDEB                 ACTEXERCICE.AEXMOISDEB%TYPE,
        NAEXANNEEFIN                ACTEXERCICE.AEXANNEEFIN%TYPE,
        NAEXMOISFIN                 ACTEXERCICE.AEXMOISFIN%TYPE,
        DTAEXDTSAISIE               ACTEXERCICE.AEXDTSAISIE%TYPE,
        DTAEXDTCLOTURE              ACTEXERCICE.AEXDTCLOTURE%TYPE,
        NAEXNBMOISOUVERT            ACTEXERCICE.AEXNBMOISOUVERT%TYPE,
        NAEXPCTRECUPTVAP            ACTEXERCICE.AEXPCTRECUPTVAP%TYPE,
        NAEXPCTRECUPTVAD            ACTEXERCICE.AEXPCTRECUPTVAD%TYPE,
        SAEXTYPECLOTURE             ACTEXERCICE.AEXTYPECLOTURE%TYPE, --hn 09/05/03
        DTAEXDTVATFROM              ACTEXERCICE.AEXDTVATFROM%TYPE, --amita 10/24/2009
        NAEXMTMINDVD                ACTEXERCICE.AEXMTMINDVD%TYPE, --jiban 19/05/10
        NAEXMTCOMPANYVALUE          ACTEXERCICE.AEXMTCOMPANYVALUE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTEXERCICE
               SET AEXANNEEDEB = NAEXANNEEDEB,
                   AEXMOISDEB = NAEXMOISDEB,
                   AEXANNEEFIN = NAEXANNEEFIN,
                   AEXMOISFIN = NAEXMOISFIN,
                   AEXDTSAISIE = DTAEXDTSAISIE,
                   AEXDTCLOTURE = DTAEXDTCLOTURE,
                   AEXTYPECLOTURE = SAEXTYPECLOTURE,            -- hn 09/05/03
                   DEVCODE = SDEVCODE,
                   AEXNBMOISOUVERT = NAEXNBMOISOUVERT,
                   AEXPCTRECUPTVAP = NAEXPCTRECUPTVAP,
                   AEXPCTRECUPTVAD = NAEXPCTRECUPTVAD,
                   AEXDTVATFROM = DTAEXDTVATFROM,
                   AEXMTMINDVD = NAEXMTMINDVD,
                   AEXMTCOMPANYVALUE = NAEXMTCOMPANYVALUE
             WHERE ACTID = NACTID AND AEXEXERCICE = NAEXEXERCICE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTEXERCICE;

    PROCEDURE D_ACTEXERCICE (
        NACTID                ACTEXERCICE.ACTID%TYPE,
        NAEXEXERCICE          ACTEXERCICE.AEXEXERCICE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            DTAEXDTDEB         DATE;
            DTAEXDTFIN         DATE;
            NCROGENERE         NUMBER;
            ERR_CROTROUVE      EXCEPTION;
            ERR_GESTCRO        EXCEPTION;
            NCOUNT             NUMBER;
            NAEXMOISDEBTEMP    ACTEXERCICE.AEXMOISDEB%TYPE;
            NAEXANNEEDEBTEMP   ACTEXERCICE.AEXANNEEDEB%TYPE;
            NAEXMOISFINTEMP    ACTEXERCICE.AEXMOISFIN%TYPE;
            NAEXANNEEFINTEMP   ACTEXERCICE.AEXANNEEFIN%TYPE;
            NRETCDE            NUMBER;

            CURSOR CDEPTCODE
            IS
                SELECT DISTINCT (DPTCODE)
                  FROM DEPARTMENT;
        BEGIN
            BEGIN
                SELECT AEXMOISDEB,
                       AEXANNEEDEB,
                       AEXMOISFIN,
                       AEXANNEEFIN
                  INTO NAEXMOISDEBTEMP,
                       NAEXANNEEDEBTEMP,
                       NAEXMOISFINTEMP,
                       NAEXANNEEFINTEMP
                  FROM ACTEXERCICE
                 WHERE ACTID = NACTID AND AEXEXERCICE = NAEXEXERCICE;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NAEXMOISDEBTEMP := NULL;
                    NAEXANNEEDEBTEMP := NULL;
                    NAEXMOISFINTEMP := NULL;
                    NAEXANNEEFINTEMP := NULL;
            END;

            BEGIN
                FOR SDPT IN CDEPTCODE
                LOOP
                    PAV4_UPDATEACTEUR.D_ACTEXEDPT (NACTID,
                                                   NAEXEXERCICE,
                                                   SDPT.DPTCODE,
                                                   NRETCDE);
                END LOOP;
            END;

            -- Les tests ne sont possibles que si on est capable de construire une date de debut, ainsi q'une date de fin
            IF     (NAEXMOISDEBTEMP IS NOT NULL)
               AND (NAEXANNEEDEBTEMP IS NOT NULL)
               AND (NAEXMOISFINTEMP IS NOT NULL)
               AND (NAEXANNEEFINTEMP IS NOT NULL)
            THEN
                -- On construit les dates de debut et de fin de l'exercice a supprimer --
                SELECT TO_DATE (
                              TO_CHAR (1)
                           || '/'
                           || TO_CHAR (NAEXMOISDEBTEMP)
                           || '/'
                           || TO_CHAR (NAEXANNEEDEBTEMP),
                           'dd/mm/yyyy')
                  INTO DTAEXDTDEB
                  FROM DUAL;

                SELECT LAST_DAY (
                           TO_DATE (
                                  TO_CHAR (1)
                               || '/'
                               || TO_CHAR (NAEXMOISFINTEMP)
                               || '/'
                               || TO_CHAR (NAEXANNEEFINTEMP),
                               'dd/mm/yyyy'))
                  INTO DTAEXDTFIN
                  FROM DUAL;

                -- On verifie que aucun cro n'a ete genere sur l'exercice a supprimer --
                PA_COMMON.S_ISCROGENERE (NACTID,
                                         DTAEXDTDEB,
                                         DTAEXDTFIN,
                                         NCROGENERE);

                IF NCROGENERE = 1
                THEN
                    RAISE ERR_CROTROUVE;
                END IF;

                PACOM_UPDATEACTEUR_SHARED.D_ACTEXERCICE_OTHER_CHECKS (
                    NACTID,
                    DTAEXDTDEB,
                    DTAEXDTFIN);

                DELETE FROM ACTEXERCICE
                      WHERE ACTID = NACTID AND AEXEXERCICE = NAEXEXERCICE;

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            -- Si un des champs servant a construire la date est NULL, on supprime sauvagement la ligne d'exercice comptable sans se poser
            -- de questions ( normalement, ce cas ne devrait plus se produire des l'instauration de nouveaux controles PL/SQL sur les champs
            -- concernant l'exercice comptable )
            ELSE
                DELETE FROM ACTEXERCICE
                      WHERE ACTID = NACTID AND AEXEXERCICE = NAEXEXERCICE;

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AEX_FOUND_CONST;
            WHEN ERR_CROTROUVE
            THEN
                NRETURNCODE := ERR_CRO_EXISTANT_CONST;
            WHEN ERR_GESTCRO
            THEN
                NRETURNCODE := ERR_CRO_GEST_ANO;
        END;
    END D_ACTEXERCICE;

    -- ACTRIB2 --
    /*PROCEDURE I_ACTRIB2 (
    nActId               ACTEUR.ACTID%TYPE,
    nRib                 IN OUT RIB.RIBID%TYPE,
    sBguBanque           RIB.BGUBANQUE%TYPE,
    sBguGuichet          RIB.BGUGUICHET%TYPE,
    sRibCompte           RIB.RIBCOMPTE%TYPE,
    sRibCle              RIB.RIBCLE%TYPE,
    sRibIntitule         RIB.RIBINTITULE%TYPE,
    nRinDelaiP           RIBINFO.RINDELAIP%TYPE,
    nRinDelaiV           RIBINFO.RINDELAIV%TYPE,
    nRinValRemHp         RIBINFO.RINVALREMHP%TYPE,
    nRinValRemSp         RIBINFO.RINVALREMSP%TYPE,
    nRinValVir           RIBINFO.RINVALVIR%TYPE,
    nRinValPrl           RIBINFO.RINVALPRL%TYPE,
    nRinValChq           RIBINFO.RINVALCHQ%TYPE,
    nRinForcePrl         RIBINFO.RINFORCEPRL%TYPE,
    nRinForceVir         RIBINFO.RINFORCEVIR%TYPE,
    sAriType             ACTRIB.ARITYPE%TYPE,
    dtAriDtDeb           ACTRIB.ARIDTDEB%TYPE,
    nRibIBANCle          RIB.RIBIBANCLE%TYPE,                   -- CV-26112002 FSA-10616
    sRibIBANCompte       RIB.RIBIBANCOMPTE%TYPE,                -- CV-26112002 FSA-10616
    sBguGuichetInvariant RIB.BGUGUICHETINVARIANT%TYPE,          -- CV-29062005 FSA-12995 SG
    nReturnCode          IN OUT NUMBER ) AS
    BEGIN
    nReturnCode := 0;
    BEGIN
    --bd10102000         modif BIL 11112000
    SELECT MIN(RIBID)
    INTO   nRib
    FROM   RIB
    WHERE  BGUBANQUE  = sBguBanque
    AND  BGUGUICHET = sBguGuichet
    AND  RIBCOMPTE  = sRibCompte
    AND  RIBCLE     = sRibCle;                      -- Report CV-17092004 FSA-16061 -> FSA-16449
    --bd10102000
    IF nRib IS NULL THEN
    RAISE NO_DATA_FOUND;
    END IF;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    END;
    IF nReturnCode != ERR_NO_ROWS_CONST THEN
    BEGIN
    I_ACTRIB (
    nActId,
    nRib,
    NULL,
    NULL,
    NULL,
    sAriType,
    dtAriDtDeb,
    nReturnCode );
    END;
    ELSE
    BEGIN
    I_RIB (
    sBguBanque,
    sBguGuichet,
    sRibCompte,
    sRibCle,
    sRibIntitule,
    nRib,
    nRibIBANCle,                                    -- CV-26112002 FSA-10616
    sRibIBANCompte,                                 -- CV-26112002 FSA-10616
    sBguGuichetInvariant,                                      -- CV-29062005 FSA-12995 SG
    nReturnCode );
    IF nReturnCode = 0 THEN
    BEGIN
    I_RIBINFO (
    nRib,
    nRinDelaiP,
    nRinDelaiV,
    nRinValRemHp,
    nRinValRemSp,
    nRinValVir,
    nRinValPrl,
    nRinValChq,
    nRinForcePrl,
    nRinForceVir,
    nReturnCode );
    IF nReturnCode = 0 THEN
    BEGIN
    I_ACTRIB (
    nActId,
    nRib,
    NULL,
    NULL,
    NULL,
    sAriType,
    dtAriDtDeb,
    nReturnCode );
    END;
    END IF;
    END;
    END IF;
    END;
    END IF;
    END I_ACTRIB2;*/
    PROCEDURE I_ACTRIB2 (
        NACTID                               ACTEUR.ACTID%TYPE,
        NRIB                          IN OUT RIB.RIBID%TYPE,
        SBGUBANQUE                           RIB.BGUBANQUE%TYPE,
        SBGUGUICHET                          RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE                           RIB.RIBCOMPTE%TYPE,
        SRIBCLE                              RIB.RIBCLE%TYPE,
        SRIBINTITULE                         RIB.RIBINTITULE%TYPE,
        NRINDELAIP                           RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV                           RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP                         RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP                         RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR                           RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL                           RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ                           RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL                         RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR                         RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE                             ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB                           ACTRIB.ARIDTDEB%TYPE,
        NRIBIBANCLE                          RIB.RIBIBANCLE%TYPE, -- CV-26112002 FSA-10616
        SRIBIBANCOMPTE                       RIB.RIBIBANCOMPTE%TYPE, -- CV-26112002 FSA-10616
        SBGUGUICHETINVARIANT                 RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG
        SDEVCODE                             RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE            IN OUT ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE                      RIB.RIBACCOUNTTYPE%TYPE,
        --
        SBGUBANQUEINTERMEDIATE               RIB.BGUBANQUE%TYPE,
        SBGUGUICHETINTERMEDIATE              RIB.BGUGUICHET%TYPE,
        SRIBCOMPTEINTERMEDIATE               RIB.RIBCOMPTE%TYPE,
        SRIBCLEINTERMEDIATE                  RIB.RIBCLE%TYPE,
        SRIBINTITULEINTERMEDIATE             RIB.RIBINTITULE%TYPE,
        NRINDELAIPINTERMEDIATE               RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE               RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE             RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE             RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE               RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE               RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE               RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE             RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE             RIBINFO.RINFORCEVIR%TYPE,
        NRIBIBANCLEINTERMEDIATE              RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTEINTERMEDIATE           RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVINTERMEDIATE           RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE                 RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE          RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOK   NUMBER;
        BEGIN
            NRETURNCODE := 0;
            PA_COMMON.S_TPALOGIQUE ('ACTEUR', 'RIBINTERMEDIATE', NOK);

            IF NOK = 1
            THEN
                -- RibIdLie
                IF     SRIBCOMPTEINTERMEDIATE IS NOT NULL
                   AND SRIBCLEINTERMEDIATE IS NOT NULL
                THEN
                    BEGIN
                        SELECT MIN (RIBID)
                          INTO NRIBIDINTERMEDIATE
                          FROM RIB
                         WHERE     BGUBANQUE = SBGUBANQUEINTERMEDIATE
                               AND BGUGUICHET = SBGUGUICHETINTERMEDIATE
                               AND RIBCOMPTE = SRIBCOMPTEINTERMEDIATE
                               AND RIBCLE = SRIBCLEINTERMEDIATE;

                        IF NRIBIDINTERMEDIATE IS NULL
                        THEN
                            RAISE NO_DATA_FOUND;
                        END IF;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                    END;

                    IF NRETURNCODE = ERR_NO_ROWS_CONST
                    THEN
                        BEGIN
                            I_RIB (SBGUBANQUEINTERMEDIATE,
                                   SBGUGUICHETINTERMEDIATE,
                                   SRIBCOMPTEINTERMEDIATE,
                                   SRIBCLEINTERMEDIATE,
                                   SRIBINTITULEINTERMEDIATE,
                                   NRIBIDINTERMEDIATE,
                                   NRIBIBANCLEINTERMEDIATE,
                                   SRIBIBANCOMPTEINTERMEDIATE,
                                   SBGUGUICHETINVINTERMEDIATE,
                                   SDEVCODEINTERMEDIATE,
                                   SRIBACCOUNTTYPEINTERMEDIATE,
                                   NRETURNCODE);

                            IF NRETURNCODE = 0
                            THEN
                                BEGIN
                                    I_RIBINFO (NRIBIDINTERMEDIATE,
                                               NRINDELAIPINTERMEDIATE,
                                               NRINDELAIVINTERMEDIATE,
                                               NRINVALREMHPINTERMEDIATE,
                                               NRINVALREMSPINTERMEDIATE,
                                               NRINVALVIRINTERMEDIATE,
                                               NRINVALPRLINTERMEDIATE,
                                               NRINVALCHQINTERMEDIATE,
                                               NRINFORCEPRLINTERMEDIATE,
                                               NRINFORCEVIRINTERMEDIATE,
                                               NRETURNCODE);
                                END;
                            END IF;
                        END;
                    END IF;
                END IF;
            END IF;

            BEGIN
                --bd10102000         modif BIL 11112000
                SELECT MIN (RIBID)
                  INTO NRIB
                  FROM RIB
                 WHERE     BGUBANQUE = SBGUBANQUE
                       AND BGUGUICHET = SBGUGUICHET
                       AND RIBCOMPTE = SRIBCOMPTE
                       AND RIBCLE = SRIBCLE; -- Report CV-17092004 FSA-16061 -> FSA-16449

                --bd10102000
                IF NRIB IS NULL
                THEN
                    RAISE NO_DATA_FOUND;
                END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
            END;

            IF NRETURNCODE != ERR_NO_ROWS_CONST
            THEN
                BEGIN
                    IF (SARITYPE = 'MAIN')
                    THEN
                        UPDATE ACTRIB
                           SET ARITYPE = NULL
                         WHERE ACTID = NACTID;
                    END IF;

                    I_ACTRIB (NACTID,
                              NRIB,
                              NULL,
                              NULL,
                              NULL,
                              SARITYPE,
                              DTARIDTDEB,
                              NRIBIDINTERMEDIATE,
                              NRETURNCODE);

                    IF NRETURNCODE = 0
                    THEN
                        IF SRIBACCOUNTTYPE = 'VIRTUAL'
                        THEN
                            UPDATE BGUVIRTUAL
                               SET BVIFLAGUSED = 1, BVIDTSTART = SYSDATE
                             WHERE     BGUBANQUE = SBGUBANQUE
                                   AND BGUGUICHET = SBGUGUICHET
                                   AND BVIACCOUNT = SRIBCOMPTE;

                            UPDATE RIB
                               SET RIBFLAGVIRTUAL = 1
                             WHERE RIBID = NRIB;
                        END IF;
                    END IF;
                END;
            ELSE
                BEGIN
                    I_RIB (SBGUBANQUE,
                           SBGUGUICHET,
                           SRIBCOMPTE,
                           SRIBCLE,
                           SRIBINTITULE,
                           NRIB,
                           NRIBIBANCLE,               -- CV-26112002 FSA-10616
                           SRIBIBANCOMPTE,            -- CV-26112002 FSA-10616
                           SBGUGUICHETINVARIANT,   -- CV-29062005 FSA-12995 SG
                           SDEVCODE,
                           SRIBACCOUNTTYPE,
                           NRETURNCODE);

                    IF NRETURNCODE = 0
                    THEN
                        BEGIN
                            I_RIBINFO (NRIB,
                                       NRINDELAIP,
                                       NRINDELAIV,
                                       NRINVALREMHP,
                                       NRINVALREMSP,
                                       NRINVALVIR,
                                       NRINVALPRL,
                                       NRINVALCHQ,
                                       NRINFORCEPRL,
                                       NRINFORCEVIR,
                                       NRETURNCODE);

                            IF NRETURNCODE = 0
                            THEN
                                BEGIN
                                    IF (SARITYPE = 'MAIN')
                                    THEN
                                        UPDATE ACTRIB
                                           SET ARITYPE = NULL
                                         WHERE ACTID = NACTID;
                                    END IF;

                                    I_ACTRIB (NACTID,
                                              NRIB,
                                              NULL,
                                              NULL,
                                              NULL,
                                              SARITYPE,
                                              DTARIDTDEB,
                                              NRIBIDINTERMEDIATE,
                                              NRETURNCODE);

                                    IF NRETURNCODE = 0
                                    THEN
                                        IF SRIBACCOUNTTYPE = 'VIRTUAL'
                                        THEN
                                            UPDATE BGUVIRTUAL
                                               SET BVIFLAGUSED = 1,
                                                   BVIDTSTART = SYSDATE
                                             WHERE     BGUBANQUE = SBGUBANQUE
                                                   AND BGUGUICHET =
                                                       SBGUGUICHET
                                                   AND BVIACCOUNT =
                                                       SRIBCOMPTE;

                                            UPDATE RIB
                                               SET RIBFLAGVIRTUAL = 1
                                             WHERE RIBID = NRIB;
                                        END IF;
                                    END IF;
                                END;
                            END IF;
                        END;
                    END IF;
                END;
            END IF;
        END;
    -- Riblie
    END I_ACTRIB2;

    -- ACTPROCEDURE --
    PROCEDURE I_ACTPROCEDURE (
        NACTID                         ACTPROCEDURE.ACTID%TYPE,
        NAPRORDRE               IN OUT ACTPROCEDURE.APRORDRE%TYPE,
        SAPRNUM                 IN OUT ACTPROCEDURE.APRNUM%TYPE,
        SAPRTYPE                       ACTPROCEDURE.APRTYPE%TYPE,
        DTAPRDTDEB                     ACTPROCEDURE.APRDTDEB%TYPE,
        NCREID                         ACTPROCEDURE.CREID%TYPE,
        DTAPRDTFIN                     ACTPROCEDURE.APRDTFIN%TYPE,
        NAPRFLAGDEMANDEUR              ACTPROCEDURE.APRFLAGDEMANDEUR%TYPE,
        SAPRTYPETRIBUNAL               ACTPROCEDURE.APRTYPETRIBUNAL%TYPE,
        SAPRNIVEAURISQUE               ACTPROCEDURE.APRNIVEAURISQUE%TYPE,
        SAPRMEMOFAIT                   ACTPROCEDURE.APRMEMOFAIT%TYPE,
        SAPRTRANSACTION                ACTPROCEDURE.APRTRANSACTION%TYPE,
        SAPRTYPEMISSION                ACTPROCEDURE.APRTYPEMISSION%TYPE,
        SAPRMEMOACCEDIT                ACTPROCEDURE.APRMEMOACCEDIT%TYPE,
        SAPREXTERNALREFERENCE          ACTPROCEDURE.APREXTERNALREFERENCE%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NMAX        NUMBER;
            NCOUNT      NUMBER;
            NAPRORDRE   NUMBER;
            DTFACTURE   DATE;
            NBANNEE     NUMBER;
            NBMOIS      NUMBER;
            NNUMERO     NUMERO.NUMNUMERO%TYPE;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM TUSPARAM TUS
             WHERE TUS.TUPCODE = SAPRTYPE AND TUS.TUSNOM = 'TYPROCIND';

            IF NCOUNT < 1
            THEN
                SELECT MAX (APRORDRE)
                  INTO NMAX
                  FROM ACTPROCEDURE
                 WHERE ACTID = NACTID AND APRORDRE < NAPRORDRE;

                IF NMAX != 0
                THEN
                    UPDATE ACTPROCEDURE
                       SET APRDTFIN = GREATEST (DTAPRDTDEB - 1, APRDTDEB)
                     WHERE ACTID = NACTID AND APRORDRE = NMAX;
                END IF;
            END IF;

            IF NAPRORDRE IS NULL
            THEN
                SELECT NVL (MAX (APRORDRE), 0) + 1
                  INTO NAPRORDRE
                  FROM ACTPROCEDURE
                 WHERE ACTID = NACTID;

                NAPRORDRE := NAPRORDRE;
            END IF;

            IF SAPRNUM IS NULL
            THEN
                DTFACTURE := SYSDATE;
                NBANNEE := 0;
                NBMOIS := 0;
                NNUMERO := 0;

                PA_COMMON.S_NUMEROFORMATE ('ACTPROCEDURE',
                                           NACTID,
                                           'APRNUM',
                                           DTFACTURE,
                                           NBANNEE,
                                           NBMOIS,
                                           NNUMERO,
                                           SAPRNUM,
                                           NULL);
            END IF;

            INSERT INTO ACTPROCEDURE (ACTID,
                                      APRORDRE,
                                      APRNUM,
                                      APRTYPE,
                                      APRDTDEB,
                                      CREID,
                                      APRDTFIN,
                                      APRFLAGDEMANDEUR,
                                      APRTYPETRIBUNAL,
                                      APRNIVEAURISQUE,
                                      APRMEMOFAIT,
                                      APRTRANSACTION,
                                      APRTYPEMISSION,
                                      APRMEMOACCEDIT,
                                      APREXTERNALREFERENCE)
                 VALUES (NACTID,
                         NAPRORDRE,
                         SAPRNUM,
                         SAPRTYPE,
                         NVL (DTAPRDTDEB, SYSDATE),
                         NCREID,
                         DTAPRDTFIN,
                         NAPRFLAGDEMANDEUR,
                         SAPRTYPETRIBUNAL,
                         SAPRNIVEAURISQUE,
                         SAPRMEMOFAIT,
                         SAPRTRANSACTION,
                         SAPRTYPEMISSION,
                         SAPRMEMOACCEDIT,
                         SAPREXTERNALREFERENCE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APR_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APR_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROCEDURE;

    -- ACTPROCEDURE --
    PROCEDURE U_ACTPROCEDURE (
        NACTID                         ACTPROCEDURE.ACTID%TYPE,
        NAPRORDRE                      ACTPROCEDURE.APRORDRE%TYPE,
        SAPRNUM                        ACTPROCEDURE.APRNUM%TYPE,
        SAPRTYPE                       ACTPROCEDURE.APRTYPE%TYPE,
        DTAPRDTDEB                     ACTPROCEDURE.APRDTDEB%TYPE,
        NCREID                         ACTPROCEDURE.CREID%TYPE,
        DTAPRDTFIN                     ACTPROCEDURE.APRDTFIN%TYPE,
        NAPRFLAGDEMANDEUR              ACTPROCEDURE.APRFLAGDEMANDEUR%TYPE,
        SAPRTYPETRIBUNAL               ACTPROCEDURE.APRTYPETRIBUNAL%TYPE,
        SAPRNIVEAURISQUE               ACTPROCEDURE.APRNIVEAURISQUE%TYPE,
        SAPRMEMOFAIT                   ACTPROCEDURE.APRMEMOFAIT%TYPE,
        SAPRTRANSACTION                ACTPROCEDURE.APRTRANSACTION%TYPE,
        SAPRTYPEMISSION                ACTPROCEDURE.APRTYPEMISSION%TYPE,
        SAPRMEMOACCEDIT                ACTPROCEDURE.APRMEMOACCEDIT%TYPE,
        SAPREXTERNALREFERENCE          ACTPROCEDURE.APREXTERNALREFERENCE%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPROCEDURE
               SET APRNUM = SAPRNUM,
                   APRTYPE = SAPRTYPE,
                   APRDTDEB = DTAPRDTDEB,
                   CREID = NCREID,
                   APRDTFIN = DTAPRDTFIN,
                   APRFLAGDEMANDEUR = NAPRFLAGDEMANDEUR,
                   APRTYPETRIBUNAL = SAPRTYPETRIBUNAL,
                   APRNIVEAURISQUE = SAPRNIVEAURISQUE,
                   APRMEMOFAIT = SAPRMEMOFAIT,
                   APRTRANSACTION = SAPRTRANSACTION,
                   APRTYPEMISSION = SAPRTYPEMISSION,
                   APRMEMOACCEDIT = SAPRMEMOACCEDIT,
                   APREXTERNALREFERENCE = SAPREXTERNALREFERENCE
             WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APR_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APR_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPROCEDURE;

    PROCEDURE D_ACTPROCEDURE (NACTID               ACTEUR.ACTID%TYPE,
                              NAPRORDRE            ACTPROCEDURE.APRORDRE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPROPHAAUDIENCE
                  WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            DELETE FROM ACTPROPHASE
                  WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            DELETE FROM ACTPROAGE
                  WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            DELETE FROM ACTPROMANDAT
                  WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            DELETE FROM ACTPROJUGEMENT
                  WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            DELETE FROM ACTPROCEDURE
                  WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ADR_FOUND_CONST;
        END;
    END D_ACTPROCEDURE;

    -- ACTPROJUGEMENT --
    PROCEDURE I_ACTPROJUGEMENT (
        NACTID                 ACTPROJUGEMENT.ACTID%TYPE,
        NAPRORDRE              ACTPROJUGEMENT.APRORDRE%TYPE,
        SAPJTYPE               ACTPROJUGEMENT.APJTYPE%TYPE,
        DTAPJDTDEB             ACTPROJUGEMENT.APJDTDEB%TYPE,
        NAPJDUREEAN            ACTPROJUGEMENT.APJDUREEAN%TYPE,
        NAPJDUREEMOIS          ACTPROJUGEMENT.APJDUREEMOIS%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTPROJUGEMENT (ACTID,
                                        APRORDRE,
                                        APJTYPE,
                                        APJDTDEB,
                                        APJDUREEAN,
                                        APJDUREEMOIS)
                 VALUES (NACTID,
                         NAPRORDRE,
                         SAPJTYPE,
                         DTAPJDTDEB,
                         NAPJDUREEAN,
                         NAPJDUREEMOIS);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APJ_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROJUGEMENT;

    PROCEDURE U_ACTPROJUGEMENT (
        NACTID                 ACTPROJUGEMENT.ACTID%TYPE,
        NAPRORDRE              ACTPROJUGEMENT.APRORDRE%TYPE,
        SAPJTYPE               ACTPROJUGEMENT.APJTYPE%TYPE,
        DTAPJDTDEB             ACTPROJUGEMENT.APJDTDEB%TYPE,
        NAPJDUREEAN            ACTPROJUGEMENT.APJDUREEAN%TYPE,
        NAPJDUREEMOIS          ACTPROJUGEMENT.APJDUREEMOIS%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPROJUGEMENT
               SET APJDTDEB = DTAPJDTDEB,
                   APJDUREEAN = NAPJDUREEAN,
                   APJDUREEMOIS = NAPJDUREEMOIS
             WHERE     ACTID = NACTID
                   AND APRORDRE = NAPRORDRE
                   AND APJTYPE = SAPJTYPE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APJ_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPROJUGEMENT;

    PROCEDURE D_ACTPROJUGEMENT (
        NACTID               ACTPROJUGEMENT.ACTID%TYPE,
        NAPRORDRE            ACTPROJUGEMENT.APRORDRE%TYPE,
        SAPJTYPE             ACTPROJUGEMENT.APJTYPE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPROJUGEMENT
                  WHERE     ACTID = NACTID
                        AND APRORDRE = NAPRORDRE
                        AND APJTYPE = SAPJTYPE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APJ_FOUND_CONST;
        END;
    END D_ACTPROJUGEMENT;

    PROCEDURE U_ACTCARD (NCARID                  CARD.CARID%TYPE,
                         SACTID                  CARD.ACTID%TYPE,
                         SCARNUM                 CARD.CARNUM%TYPE,
                         SCARHOLDERNAME          CARD.CARHOLDERNAME%TYPE,
                         SCARCODECVC             CARD.CARCODECVC%TYPE,
                         SCARDTEND               CARD.CARDTEND%TYPE,
                         SCARSTATUS              CARD.CARSTATUS%TYPE,
                         --  sCarDtReceipt           DATE,                         -- CARD.CARDTRECEIPT%TYPE,
                         -- sCarDtCancelRec         DATE,                         -- CARD.CARDTCANCELREC%TYPE,
                         NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE CARD
               SET CARNUM = SCARNUM,
                   CARHOLDERNAME = SCARHOLDERNAME,
                   CARCODECVC = SCARCODECVC,
                   CARDTEND = SCARDTEND,
                   CARSTATUS = SCARSTATUS
             --,
             --CARDTRECEIPT =                                sCarDtReceipt,
             --CARDTCANCELREC=                          sCarDtCancelRec
             WHERE CARID = NCARID AND ACTID = SACTID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END U_ACTCARD;

    PROCEDURE I_ACTCARD (NCARID           IN OUT CARD.CARID%TYPE,
                         SACTID                  CARD.ACTID%TYPE,
                         SCARNUM                 CARD.CARNUM%TYPE,
                         SCARHOLDERNAME          CARD.CARHOLDERNAME%TYPE,
                         SCARCODECVC             CARD.CARCODECVC%TYPE,
                         SCARDTEND               CARD.CARDTEND%TYPE,
                         SCARSTATUS              CARD.CARSTATUS%TYPE,
                         -- sCarDtReceipt           DATE,                         -- CARD.CARDTRECEIPT%TYPE,
                         -- sCarDtCancelRec         DATE,                         -- CARD.CARDTCANCELREC%TYPE,
                         NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            SELECT SEQ_CARID.NEXTVAL INTO NCARID FROM DUAL;

            INSERT INTO CARD (CARID,
                              ACTID,
                              CARNUM,
                              CARHOLDERNAME,
                              CARCODECVC,
                              CARDTEND,
                              CARSTATUS)
                 --CARDTRECEIPT,
                 --CARDTCANCELREC)
                 VALUES (NCARID,
                         SACTID,
                         SCARNUM,
                         SCARHOLDERNAME,
                         SCARCODECVC,
                         SCARDTEND,
                         SCARSTATUS                                        --,
                                   --sCarDtReceipt,
                                   --sCarDtCancelRec
                                   );

            INSERT INTO CARPHASE (CARID,
                                  CPHORDER,
                                  PHADEST,
                                  JALCODE,
                                  CPHDTSTART,
                                  CPHDTEND,
                                  CREID,
                                  CPHDTCREATE,
                                  CPHDTLASTUPD,
                                  UTICODE,
                                  CPHMEMO,
                                  PHACODE)
                 VALUES (NCARID,
                         1,
                         'CARD',
                         'ACTIVE',
                         SYSDATE,
                         SCARDTEND,
                         NULL,
                         SYSDATE,
                         SYSDATE,
                         NULL,
                         NULL,
                         'ACTIVE');

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END I_ACTCARD;

    PROCEDURE D_ACTCARD (NCARID CARD.CARID%TYPE, NRETURNCODE IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM CARD
                  WHERE CARID = NCARID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END D_ACTCARD;

    -- ACPROMANDAT --
    PROCEDURE I_ACTPROMANDAT (
        NACTID                ACTPROMANDAT.ACTID%TYPE,
        NAPRORDRE             ACTPROMANDAT.APRORDRE%TYPE,
        SAPMTYPE              ACTPROMANDAT.APMTYPE%TYPE,
        NACTIDMANDAT          ACTPROMANDAT.ACTIDMANDAT%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTPROMANDAT (ACTID,
                                      APRORDRE,
                                      ACTIDMANDAT,
                                      APMTYPE)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NACTIDMANDAT,
                         SAPMTYPE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APM_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APM_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROMANDAT;

    PROCEDURE D_ACTPROMANDAT (
        NACTID                ACTPROMANDAT.ACTID%TYPE,
        NAPRORDRE             ACTPROMANDAT.APRORDRE%TYPE,
        SAPMTYPE              ACTPROMANDAT.APMTYPE%TYPE,
        NACTIDMANDAT          ACTPROMANDAT.ACTIDMANDAT%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPROMANDAT
                  WHERE     ACTID = NACTID
                        AND APRORDRE = NAPRORDRE
                        AND ACTIDMANDAT = NACTIDMANDAT
                        AND APMTYPE = SAPMTYPE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APM_FOUND_CONST;
        END;
    END D_ACTPROMANDAT;

    -- ACTRIB2 --
    PROCEDURE U_ACTRIB2 (
        NACTID                               ACTEUR.ACTID%TYPE,
        NRIBID                               RIB.RIBID%TYPE,
        SRIBINTITULE                         RIB.RIBINTITULE%TYPE,
        NRINBRDCHQSP                         RIBINFO.RINBRDCHQSP%TYPE,
        NRINBRDVIR                           RIBINFO.RINBRDVIR%TYPE,
        NRINBRDPRL                           RIBINFO.RINBRDPRL%TYPE,
        NRINBRDCHQHP                         RIBINFO.RINBRDCHQHP%TYPE,
        NRINDELAIP                           RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV                           RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP                         RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP                         RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR                           RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL                           RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ                           RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL                         RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR                         RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE                             ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB                           ACTRIB.ARIDTDEB%TYPE,
        SBGUGUICHETINVARIANT                 RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG Report FSA-20300
        SDEVCODE                             RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE                   ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE                      RIB.RIBACCOUNTTYPE%TYPE,
        NACTIDOWNER                          RIB.ACTIDOWNER%TYPE,
        SRIBINTITULEINTERMEDIATE             RIB.RIBINTITULE%TYPE,
        NRINBRDCHQSPINTERMEDIATE             RIBINFO.RINBRDCHQSP%TYPE,
        NRINBRDVIRINTERMEDIATE               RIBINFO.RINBRDVIR%TYPE,
        NRINBRDPRLINTERMEDIATE               RIBINFO.RINBRDPRL%TYPE,
        NRINBRDCHQHPINTERMEDIATE             RIBINFO.RINBRDCHQHP%TYPE,
        NRINDELAIPINTERMEDIATE               RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE               RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE             RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE             RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE               RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE               RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE               RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE             RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE             RIBINFO.RINFORCEVIR%TYPE,
        SBGUGUICHETINVINTERMEDIATE           RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE                 RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE          RIB.RIBACCOUNTTYPE%TYPE,
        NACTIDOWNERINTERMEDIATE              RIB.ACTIDOWNER%TYPE,
        NRIBIBANCLE                          RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTE                       RIB.RIBIBANCOMPTE%TYPE,
        SARICODEBANK                         ACTRIB.ARICODEBANK%TYPE,
        SARIDACOM                            ACTRIB.ARIDACOM%TYPE,
        SARIDACOM2                           ACTRIB.ARIDACOM2%TYPE,
        SARIPWD                              ACTRIB.ARIPWD%TYPE,
        DTARIDTVALIDATE                      ACTRIB.ARIDTVALIDATE%TYPE,
        DTARIDTREMPLACE                      ACTRIB.ARIDTREMPLACE%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT    NUMBER;
            NNEWRIB   NUMBER;
            NOK       NUMBER;
        BEGIN
            NRETURNCODE := 0;
            PA_COMMON.S_TPALOGIQUE ('ACTEUR', 'RIBINTERMEDIATE', NOK);

            IF NOK = 1
            THEN
                U_RIB (NRIBIDINTERMEDIATE,
                       SRIBINTITULEINTERMEDIATE,
                       SBGUGUICHETINVINTERMEDIATE,
                       SDEVCODEINTERMEDIATE,
                       SRIBACCOUNTTYPEINTERMEDIATE,
                       NACTIDOWNERINTERMEDIATE,
                       NRIBIBANCLE,
                       SRIBIBANCOMPTE,
                       NRETURNCODE);

                IF NRETURNCODE = 0
                THEN
                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;

                    IF NRETURNCODE != ERR_NO_ROWS_CONST
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM RIBINFO
                         WHERE RIBID = NRIBIDINTERMEDIATE;

                        IF NCOUNT != 0
                        THEN
                            UPDATE RIBINFO
                               SET RINBRDCHQSP = NRINBRDCHQSPINTERMEDIATE,
                                   RINBRDVIR = NRINBRDVIRINTERMEDIATE,
                                   RINBRDPRL = NRINBRDPRLINTERMEDIATE,
                                   RINBRDCHQHP = NRINBRDCHQHPINTERMEDIATE,
                                   RINDELAIP = NRINDELAIPINTERMEDIATE,
                                   RINDELAIV = NRINDELAIVINTERMEDIATE,
                                   RINVALREMHP = NRINVALREMHPINTERMEDIATE,
                                   RINVALREMSP = NRINVALREMSPINTERMEDIATE,
                                   RINVALPRL = NRINVALPRLINTERMEDIATE,
                                   RINVALVIR = NRINVALVIRINTERMEDIATE,
                                   RINVALCHQ = NRINVALCHQINTERMEDIATE,
                                   RINFORCEPRL = NRINFORCEPRLINTERMEDIATE,
                                   RINFORCEVIR = NRINFORCEVIRINTERMEDIATE
                             WHERE RIBID = NRIBIDINTERMEDIATE;

                            IF SQL%ROWCOUNT = 0
                            THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        ELSE
                            INSERT INTO RIBINFO (RIBID,
                                                 RINBRDCHQSP,
                                                 RINBRDVIR,
                                                 RINBRDPRL,
                                                 RINBRDCHQHP,
                                                 RINDELAIP,
                                                 RINDELAIV,
                                                 RINVALREMHP,
                                                 RINVALREMSP,
                                                 RINVALVIR,
                                                 RINVALPRL,
                                                 RINVALCHQ,
                                                 RINFORCEPRL,
                                                 RINFORCEVIR)
                                 VALUES (NRIBIDINTERMEDIATE,
                                         NRINBRDCHQSPINTERMEDIATE,
                                         NRINBRDVIRINTERMEDIATE,
                                         NRINBRDPRLINTERMEDIATE,
                                         NRINBRDCHQHPINTERMEDIATE,
                                         NRINDELAIPINTERMEDIATE,
                                         NRINDELAIVINTERMEDIATE,
                                         NRINVALREMHPINTERMEDIATE,
                                         NRINVALREMSPINTERMEDIATE,
                                         NRINVALVIRINTERMEDIATE,
                                         NRINVALPRLINTERMEDIATE,
                                         NRINVALCHQINTERMEDIATE,
                                         NRINFORCEPRLINTERMEDIATE,
                                         NRINFORCEVIRINTERMEDIATE);
                        END IF;
                    END IF;
                END IF;
            END IF;

            U_RIB (NRIBID,
                   SRIBINTITULE,
                   SBGUGUICHETINVARIANT,
                   SDEVCODE,
                   SRIBACCOUNTTYPE,
                   NACTIDOWNER,
                   NRIBIBANCLE,
                   SRIBIBANCOMPTE,
                   NRETURNCODE);

            -- UPDATE RIB
            -- SET    RIBINTITULE   = sRibIntitule
            -- WHERE  RIBID = nRibId;
            -- IF SQL%ROWCOUNT=0 THEN
            --    nReturnCode := ERR_NO_ROWS_CONST;
            -- END IF;
            -- IF nReturnCode != ERR_NO_ROWS_CONST THEN
            IF NRETURNCODE = 0
            THEN
                UPDATE ACTRIB
                   SET ARITYPE = SARITYPE,
                       ARIDTDEB = DTARIDTDEB,
                       RIBIDINTERMEDIATE = NRIBIDINTERMEDIATE,
                       ARICODEBANK = SARICODEBANK,
                       ARIDACOM = SARIDACOM,
                       ARIDACOM2 = SARIDACOM2,
                       ARIPWD = SARIPWD,
                       ARIDTVALIDATE = DTARIDTVALIDATE,
                       ARIDTREMPLACE = DTARIDTREMPLACE
                 WHERE ACTID = NACTID AND RIBID = NRIBID;

                --PAV4_TRACE.DEBUG ( 'Update ACTRIB reussi' );
                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour ACTRIB' );
                END IF;

                IF NRETURNCODE != ERR_NO_ROWS_CONST
                THEN
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM RIBINFO
                     WHERE RIBID = NRIBID;

                    IF NCOUNT != 0
                    THEN
                        UPDATE RIBINFO
                           SET RINBRDCHQSP = NRINBRDCHQSP,
                               RINBRDVIR = NRINBRDVIR,
                               RINBRDPRL = NRINBRDPRL,
                               RINBRDCHQHP = NRINBRDCHQHP,
                               RINDELAIP = NRINDELAIP,
                               RINDELAIV = NRINDELAIV,
                               RINVALREMHP = NRINVALREMHP,
                               RINVALREMSP = NRINVALREMSP,
                               RINVALPRL = NRINVALPRL,
                               RINVALVIR = NRINVALVIR,
                               RINVALCHQ = NRINVALCHQ,
                               RINFORCEPRL = NRINFORCEPRL,
                               RINFORCEVIR = NRINFORCEVIR
                         WHERE RIBID = NRIBID;

                        --PAV4_TRACE.DEBUG ( 'Update RIBINFO reussi' );
                        IF SQL%ROWCOUNT = 0
                        THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour RIBINFO' );
                        END IF;
                    -- MP 240801
                    ELSE
                        INSERT INTO RIBINFO (RIBID,
                                             RINBRDCHQSP,
                                             RINBRDVIR,
                                             RINBRDPRL,
                                             RINBRDCHQHP,
                                             RINDELAIP,
                                             RINDELAIV,
                                             RINVALREMHP,
                                             RINVALREMSP,
                                             RINVALVIR,
                                             RINVALPRL,
                                             RINVALCHQ,
                                             RINFORCEPRL,
                                             RINFORCEVIR)
                             VALUES (NRIBID,
                                     NRINBRDCHQSP,
                                     NRINBRDVIR,
                                     NRINBRDPRL,
                                     NRINBRDCHQHP,
                                     NRINDELAIP,
                                     NRINDELAIV,
                                     NRINVALREMHP,
                                     NRINVALREMSP,
                                     NRINVALVIR,
                                     NRINVALPRL,
                                     NRINVALCHQ,
                                     NRINFORCEPRL,
                                     NRINFORCEVIR);
                    END IF;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARI_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRIB2;

    --Merged U_ACTRIB2 AND U_ACTRIBCOMPTE as suggested by Deepthy
    PROCEDURE U_ACTRIBCOMPTE (
        NACTID                               ACTEUR.ACTID%TYPE,
        NRIBID                        IN OUT RIB.RIBID%TYPE,
        SBGUBANQUE                           RIB.BGUBANQUE%TYPE,
        SBGUGUICHET                          RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE                           RIB.RIBCOMPTE%TYPE,
        SRIBCLE                              RIB.RIBCLE%TYPE,
        SRIBINTITULE                         RIB.RIBINTITULE%TYPE,
        NRINDELAIP                           RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV                           RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP                         RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP                         RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR                           RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL                           RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ                           RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL                         RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR                         RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE                             ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB                           ACTRIB.ARIDTDEB%TYPE,
        NRIBIBANCLE                          RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTE                       RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVARIANT                 RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODE                             RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE            IN OUT ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE                      RIB.RIBACCOUNTTYPE%TYPE,
        --
        SRIBINTITULEINTERMEDIATE             RIB.RIBINTITULE%TYPE,
        NRINDELAIPINTERMEDIATE               RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE               RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE             RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE             RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE               RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE               RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE               RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE             RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE             RIBINFO.RINFORCEVIR%TYPE,
        SBGUGUICHETINVINTERMEDIATE           RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE                 RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE          RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOKMODIF    NUMBER;
            NNEWRIBID   RIB.RIBID%TYPE;
            NCOUNT      NUMBER;
            BAPPCRE     BOOLEAN;

            CURSOR C1
            IS
                SELECT ACTID,
                       RIBID,
                       ACTIDSIGNATURE,
                       ARAACCESSTYPE,
                       ARADTBEG,
                       ARADTEND,
                       CREID
                  FROM ACTRIBACCES
                 WHERE ACTID = NACTID AND RIBID = NRIBID;

            CURSOR CLTMP
            IS
                SELECT ACTID,
                       TMPCODE,
                       ATDTYPE,
                       RIBID
                  FROM ACTRIBTMPDEFAUT
                 WHERE ACTID = NACTID AND RIBID = NRIBID;
        BEGIN
            --modification ou pas du RIB
            SELECT COUNT (*)
              INTO NOKMODIF
              FROM RIB
             WHERE     RIBID = NRIBID
                   AND (   BGUBANQUE != SBGUBANQUE
                        OR BGUGUICHET != SBGUGUICHET
                        OR RIBCOMPTE != SRIBCOMPTE
                        OR RIBCLE != SRIBCLE
                        OR RIBIBANCLE != NRIBIBANCLE
                        OR RIBIBANCOMPTE != SRIBIBANCOMPTE);

            BAPPCRE := FALSE;

            IF NOKMODIF > 0
            THEN
                --modification du RIB
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM RIB
                 WHERE     BGUBANQUE = SBGUBANQUE
                       AND BGUGUICHET = SBGUGUICHET
                       AND RIBCOMPTE = SRIBCOMPTE
                       AND RIBCLE = SRIBCLE;

                --recherche si RIB deja present en base
                IF NCOUNT > 0
                THEN
                    --RIB deja present en base sous un autre id
                    SELECT MAX (RIBID)
                      INTO NNEWRIBID
                      FROM RIB
                     WHERE     BGUBANQUE = SBGUBANQUE
                           AND BGUGUICHET = SBGUGUICHET
                           AND RIBCOMPTE = SRIBCOMPTE
                           AND RIBCLE = SRIBCLE;

                    UPDATE RIB
                       SET BGUBANQUE = SBGUBANQUE,
                           BGUGUICHET = SBGUGUICHET,
                           RIBCOMPTE = SRIBCOMPTE,
                           RIBCLE = SRIBCLE,
                           RIBIBANCLE = NRIBIBANCLE,
                           RIBIBANCOMPTE = SRIBIBANCOMPTE
                     WHERE RIBID = NNEWRIBID;

                    BAPPCRE := TRUE;
                ELSE
                    --RIB non present en base
                    --si RIB non utilise sous un autre acteur INSERTION sinon DELETE/INSERT avec nouveau ID
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM ACTRIB
                     WHERE RIBID = NRIBID AND ACTID != NACTID;

                    IF NCOUNT = 0
                    THEN
                        -- RIB non utilise sous un autre acteur INSERTION
                        UPDATE RIB
                           SET BGUBANQUE = SBGUBANQUE,
                               BGUGUICHET = SBGUGUICHET,
                               RIBCOMPTE = SRIBCOMPTE,
                               RIBCLE = SRIBCLE,
                               RIBIBANCLE = NRIBIBANCLE,
                               RIBIBANCOMPTE = SRIBIBANCOMPTE
                         WHERE RIBID = NRIBID;
                    ELSE
                        BAPPCRE := TRUE;
                    END IF;
                END IF;

                IF BAPPCRE
                THEN
                    -- RIB utilise avec autre acteur INSERT/DELETE nouveau ID
                    I_ACTRIB2 (NACTID,
                               NNEWRIBID,
                               SBGUBANQUE,
                               SBGUGUICHET,
                               SRIBCOMPTE,
                               SRIBCLE,
                               SRIBINTITULE,
                               NRINDELAIP,
                               NRINDELAIV,
                               NRINVALREMHP,
                               NRINVALREMSP,
                               NRINVALVIR,
                               NRINVALPRL,
                               NRINVALCHQ,
                               NRINFORCEPRL,
                               NRINFORCEVIR,
                               SARITYPE,
                               DTARIDTDEB,
                               NRIBIBANCLE,
                               SRIBIBANCOMPTE,
                               SBGUGUICHETINVARIANT,
                               SDEVCODE,
                               NRIBIDINTERMEDIATE,
                               SRIBACCOUNTTYPE,
                               NULL,
                               NULL,
                               NULL,
                               NULL,
                               SRIBINTITULEINTERMEDIATE,
                               NRINDELAIPINTERMEDIATE,
                               NRINDELAIVINTERMEDIATE,
                               NRINVALREMHPINTERMEDIATE,
                               NRINVALREMSPINTERMEDIATE,
                               NRINVALVIRINTERMEDIATE,
                               NRINVALPRLINTERMEDIATE,
                               NRINVALCHQINTERMEDIATE,
                               NRINFORCEPRLINTERMEDIATE,
                               NRINFORCEVIRINTERMEDIATE,
                               NULL,
                               NULL,
                               SBGUGUICHETINVINTERMEDIATE,
                               SDEVCODEINTERMEDIATE,
                               SRIBACCOUNTTYPEINTERMEDIATE,
                               NRETURNCODE);

                    IF NRETURNCODE = 0
                    THEN
                        FOR C1R IN C1
                        LOOP
                            IF NRETURNCODE = 0
                            THEN
                                D_ACTRIBACCES (NACTID,
                                               NRIBID,
                                               C1R.ACTIDSIGNATURE,
                                               NRETURNCODE);
                            END IF;

                            IF NRETURNCODE = 0
                            THEN
                                I_ACTRIBACCES (C1R.ACTID,
                                               NNEWRIBID,
                                               C1R.ACTIDSIGNATURE,
                                               C1R.ARAACCESSTYPE,
                                               C1R.ARADTBEG,
                                               C1R.ARADTEND,
                                               C1R.CREID,
                                               NRETURNCODE);
                            END IF;
                        END LOOP;

                        FOR CLRTMP IN CLTMP
                        LOOP
                            IF NRETURNCODE = 0
                            THEN
                                D_ACTRIBTMPDEFAUT (CLRTMP.ACTID,
                                                   NRIBID,
                                                   CLRTMP.ATDTYPE,
                                                   CLRTMP.TMPCODE,
                                                   NRETURNCODE);
                            END IF;

                            IF NRETURNCODE = 0
                            THEN
                                I_ACTRIBTMPDEFAUT (CLRTMP.ACTID,
                                                   NNEWRIBID,
                                                   CLRTMP.ATDTYPE,
                                                   CLRTMP.TMPCODE,
                                                   NRETURNCODE);
                            END IF;
                        END LOOP;

                        IF NRETURNCODE = 0
                        THEN
                            D_ACTRIB (NRIBID, NACTID, NRETURNCODE);
                        END IF;

                        IF NRETURNCODE = 0
                        THEN
                            NRIBID := NNEWRIBID;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END;
    END U_ACTRIBCOMPTE;

    PROCEDURE U_ACTRIB2 (
        NACTID                               ACTEUR.ACTID%TYPE,
        NRIBID                        IN OUT RIB.RIBID%TYPE,
        SRIBINTITULE                         RIB.RIBINTITULE%TYPE,
        NRINBRDCHQSP                         RIBINFO.RINBRDCHQSP%TYPE,
        NRINBRDVIR                           RIBINFO.RINBRDVIR%TYPE,
        NRINBRDPRL                           RIBINFO.RINBRDPRL%TYPE,
        NRINBRDCHQHP                         RIBINFO.RINBRDCHQHP%TYPE,
        NRINDELAIP                           RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV                           RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP                         RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP                         RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR                           RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL                           RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ                           RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL                         RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR                         RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE                             ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB                           ACTRIB.ARIDTDEB%TYPE,
        SBGUGUICHETINVARIANT                 RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG Report FSA-20300
        SDEVCODE                             RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE            IN OUT ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE                      RIB.RIBACCOUNTTYPE%TYPE,
        --
        SRIBINTITULEINTERMEDIATE             RIB.RIBINTITULE%TYPE,
        NRINBRDCHQSPINTERMEDIATE             RIBINFO.RINBRDCHQSP%TYPE,
        NRINBRDVIRINTERMEDIATE               RIBINFO.RINBRDVIR%TYPE,
        NRINBRDPRLINTERMEDIATE               RIBINFO.RINBRDPRL%TYPE,
        NRINBRDCHQHPINTERMEDIATE             RIBINFO.RINBRDCHQHP%TYPE,
        NRINDELAIPINTERMEDIATE               RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE               RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE             RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE             RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE               RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE               RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE               RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE             RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE             RIBINFO.RINFORCEVIR%TYPE,
        SBGUGUICHETINVINTERMEDIATE           RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE                 RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE          RIB.RIBACCOUNTTYPE%TYPE,
        --parameters of U_ACTRIBCOMPTE
        SBGUBANQUE                           RIB.BGUBANQUE%TYPE,
        SBGUGUICHET                          RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE                           RIB.RIBCOMPTE%TYPE,
        SRIBCLE                              RIB.RIBCLE%TYPE,
        NRIBIBANCLE                          RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTE                       RIB.RIBIBANCOMPTE%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT    NUMBER;
            NNEWRIB   NUMBER;
            NOK       NUMBER;
        BEGIN
            NRETURNCODE := 0;
            U_ACTRIBCOMPTE (NACTID,
                            NRIBID,
                            SBGUBANQUE,
                            SBGUGUICHET,
                            SRIBCOMPTE,
                            SRIBCLE,
                            SRIBINTITULE,
                            NRINDELAIP,
                            NRINDELAIV,
                            NRINVALREMHP,
                            NRINVALREMSP,
                            NRINVALVIR,
                            NRINVALPRL,
                            NRINVALCHQ,
                            NRINFORCEPRL,
                            NRINFORCEVIR,
                            SARITYPE,
                            DTARIDTDEB,
                            NRIBIBANCLE,
                            SRIBIBANCOMPTE,
                            SBGUGUICHETINVARIANT,
                            SDEVCODE,
                            NRIBIDINTERMEDIATE,
                            SRIBACCOUNTTYPE,
                            --
                            SRIBINTITULEINTERMEDIATE,
                            NRINDELAIPINTERMEDIATE,
                            NRINDELAIVINTERMEDIATE,
                            NRINVALREMHPINTERMEDIATE,
                            NRINVALREMSPINTERMEDIATE,
                            NRINVALVIRINTERMEDIATE,
                            NRINVALPRLINTERMEDIATE,
                            NRINVALCHQINTERMEDIATE,
                            NRINFORCEPRLINTERMEDIATE,
                            NRINFORCEVIRINTERMEDIATE,
                            SBGUGUICHETINVINTERMEDIATE,
                            SDEVCODEINTERMEDIATE,
                            SRIBACCOUNTTYPEINTERMEDIATE,
                            NRETURNCODE);
            PA_COMMON.S_TPALOGIQUE ('ACTEUR', 'RIBINTERMEDIATE', NOK);

            IF NOK = 1
            THEN
                U_RIB (NRIBIDINTERMEDIATE,
                       SRIBINTITULEINTERMEDIATE,
                       SBGUGUICHETINVINTERMEDIATE,
                       SDEVCODEINTERMEDIATE,
                       SRIBACCOUNTTYPEINTERMEDIATE,
                       NULL,
                       NRIBIBANCLE,
                       SRIBIBANCOMPTE,
                       NRETURNCODE);

                IF NRETURNCODE = 0
                THEN
                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;

                    IF NRETURNCODE != ERR_NO_ROWS_CONST
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM RIBINFO
                         WHERE RIBID = NRIBIDINTERMEDIATE;

                        IF NCOUNT != 0
                        THEN
                            UPDATE RIBINFO
                               SET RINBRDCHQSP = NRINBRDCHQSPINTERMEDIATE,
                                   RINBRDVIR = NRINBRDVIRINTERMEDIATE,
                                   RINBRDPRL = NRINBRDPRLINTERMEDIATE,
                                   RINBRDCHQHP = NRINBRDCHQHPINTERMEDIATE,
                                   RINDELAIP = NRINDELAIPINTERMEDIATE,
                                   RINDELAIV = NRINDELAIVINTERMEDIATE,
                                   RINVALREMHP = NRINVALREMHPINTERMEDIATE,
                                   RINVALREMSP = NRINVALREMSPINTERMEDIATE,
                                   RINVALPRL = NRINVALPRLINTERMEDIATE,
                                   RINVALVIR = NRINVALVIRINTERMEDIATE,
                                   RINVALCHQ = NRINVALCHQINTERMEDIATE,
                                   RINFORCEPRL = NRINFORCEPRLINTERMEDIATE,
                                   RINFORCEVIR = NRINFORCEVIRINTERMEDIATE
                             WHERE RIBID = NRIBIDINTERMEDIATE;

                            IF SQL%ROWCOUNT = 0
                            THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        ELSE
                            INSERT INTO RIBINFO (RIBID,
                                                 RINBRDCHQSP,
                                                 RINBRDVIR,
                                                 RINBRDPRL,
                                                 RINBRDCHQHP,
                                                 RINDELAIP,
                                                 RINDELAIV,
                                                 RINVALREMHP,
                                                 RINVALREMSP,
                                                 RINVALVIR,
                                                 RINVALPRL,
                                                 RINVALCHQ,
                                                 RINFORCEPRL,
                                                 RINFORCEVIR)
                                 VALUES (NRIBIDINTERMEDIATE,
                                         NRINBRDCHQSPINTERMEDIATE,
                                         NRINBRDVIRINTERMEDIATE,
                                         NRINBRDPRLINTERMEDIATE,
                                         NRINBRDCHQHPINTERMEDIATE,
                                         NRINDELAIPINTERMEDIATE,
                                         NRINDELAIVINTERMEDIATE,
                                         NRINVALREMHPINTERMEDIATE,
                                         NRINVALREMSPINTERMEDIATE,
                                         NRINVALVIRINTERMEDIATE,
                                         NRINVALPRLINTERMEDIATE,
                                         NRINVALCHQINTERMEDIATE,
                                         NRINFORCEPRLINTERMEDIATE,
                                         NRINFORCEVIRINTERMEDIATE);
                        END IF;
                    END IF;
                END IF;
            END IF;

            U_RIB (NRIBID,
                   SRIBINTITULE,
                   SBGUGUICHETINVARIANT,
                   SDEVCODE,
                   SRIBACCOUNTTYPE,
                   NULL,
                   NRIBIBANCLE,
                   SRIBIBANCOMPTE,
                   NRETURNCODE);

            -- UPDATE RIB
            -- SET    RIBINTITULE   = sRibIntitule
            -- WHERE  RIBID = nRibId;
            -- IF SQL%ROWCOUNT=0 THEN
            --    nReturnCode := ERR_NO_ROWS_CONST;
            -- END IF;
            -- IF nReturnCode != ERR_NO_ROWS_CONST THEN
            IF NRETURNCODE = 0
            THEN
                UPDATE ACTRIB
                   SET ARITYPE = SARITYPE,
                       ARIDTDEB = DTARIDTDEB,
                       RIBIDINTERMEDIATE = NRIBIDINTERMEDIATE
                 WHERE ACTID = NACTID AND RIBID = NRIBID;

                --PAV4_TRACE.DEBUG ( 'Update ACTRIB reussi' );
                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour ACTRIB' );
                END IF;

                IF NRETURNCODE != ERR_NO_ROWS_CONST
                THEN
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM RIBINFO
                     WHERE RIBID = NRIBID;

                    IF NCOUNT != 0
                    THEN
                        UPDATE RIBINFO
                           SET RINBRDCHQSP = NRINBRDCHQSP,
                               RINBRDVIR = NRINBRDVIR,
                               RINBRDPRL = NRINBRDPRL,
                               RINBRDCHQHP = NRINBRDCHQHP,
                               RINDELAIP = NRINDELAIP,
                               RINDELAIV = NRINDELAIV,
                               RINVALREMHP = NRINVALREMHP,
                               RINVALREMSP = NRINVALREMSP,
                               RINVALPRL = NRINVALPRL,
                               RINVALVIR = NRINVALVIR,
                               RINVALCHQ = NRINVALCHQ,
                               RINFORCEPRL = NRINFORCEPRL,
                               RINFORCEVIR = NRINFORCEVIR
                         WHERE RIBID = NRIBID;

                        --PAV4_TRACE.DEBUG ( 'Update RIBINFO reussi' );
                        IF SQL%ROWCOUNT = 0
                        THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour RIBINFO' );
                        END IF;
                    -- MP 240801
                    ELSE
                        INSERT INTO RIBINFO (RIBID,
                                             RINBRDCHQSP,
                                             RINBRDVIR,
                                             RINBRDPRL,
                                             RINBRDCHQHP,
                                             RINDELAIP,
                                             RINDELAIV,
                                             RINVALREMHP,
                                             RINVALREMSP,
                                             RINVALVIR,
                                             RINVALPRL,
                                             RINVALCHQ,
                                             RINFORCEPRL,
                                             RINFORCEVIR)
                             VALUES (NRIBID,
                                     NRINBRDCHQSP,
                                     NRINBRDVIR,
                                     NRINBRDPRL,
                                     NRINBRDCHQHP,
                                     NRINDELAIP,
                                     NRINDELAIV,
                                     NRINVALREMHP,
                                     NRINVALREMSP,
                                     NRINVALVIR,
                                     NRINVALPRL,
                                     NRINVALCHQ,
                                     NRINFORCEPRL,
                                     NRINFORCEVIR);
                    END IF;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- CV-26012012 CFS55477
                -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ARI_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRIB2;

    /*PROCEDURE U_ACTRIB2 (
    nActId               ACTEUR.ACTID%TYPE,
    nRibId               RIB.RIBID%TYPE,
    sRibIntitule         RIB.RIBINTITULE%TYPE,
    nRinBrdChqSp         RIBINFO.RINBRDCHQSP%TYPE,
    nRinBrdVir           RIBINFO.RINBRDVIR%TYPE,
    nRinBrdPrl           RIBINFO.RINBRDPRL%TYPE,
    nRinBrdChqHp         RIBINFO.RINBRDCHQHP%TYPE,
    nRinDelaiP           RIBINFO.RINDELAIP%TYPE,
    nRinDelaiV           RIBINFO.RINDELAIV%TYPE,
    nRinValRemHp         RIBINFO.RINVALREMHP%TYPE,
    nRinValRemSp         RIBINFO.RINVALREMSP%TYPE,
    nRinValVir           RIBINFO.RINVALVIR%TYPE,
    nRinValPrl           RIBINFO.RINVALPRL%TYPE,
    nRinValChq           RIBINFO.RINVALCHQ%TYPE,
    nRinForcePrl         RIBINFO.RINFORCEPRL%TYPE,
    nRinForceVir         RIBINFO.RINFORCEVIR%TYPE,
    sAriType             ACTRIB.ARITYPE%TYPE,
    dtAriDtDeb           ACTRIB.ARIDTDEB%TYPE,
    sBguGuichetInvariant RIB.BGUGUICHETINVARIANT%TYPE,       -- CV-29062005 FSA-12995 SG Report FSA-20300
    nReturnCode          IN OUT NUMBER ) AS
    BEGIN
    DECLARE
    nCount  NUMBER;
    nNewRib NUMBER;
    BEGIN
    nReturnCode := 0;
    U_RIB ( nRibId,
    sRibIntitule,
    sBguGuichetInvariant,
    nReturnCode );
    -- UPDATE RIB
    -- SET    RIBINTITULE   = sRibIntitule
    -- WHERE  RIBID = nRibId;
    -- IF SQL%ROWCOUNT=0 THEN
    --    nReturnCode := ERR_NO_ROWS_CONST;
    -- END IF;
    -- IF nReturnCode != ERR_NO_ROWS_CONST THEN
    IF nReturnCode = 0 THEN
    UPDATE ACTRIB
    SET    ARITYPE  = sAriType,
    ARIDTDEB = dtAriDtDeb
    WHERE  ACTID     = nActId
    AND RIBID = nRibId;
    --PAV4_TRACE.DEBUG ( 'Update ACTRIB reussi' );
    IF SQL%ROWCOUNT=0 THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour ACTRIB' );
    END IF;
    IF nReturnCode != ERR_NO_ROWS_CONST THEN
    SELECT COUNT(*)
    INTO   nCount
    FROM   RIBINFO
    WHERE  RIBID = nRibId;
    IF nCount != 0 THEN
    UPDATE RIBINFO
    SET    RINBRDCHQSP = nRinBrdChqSp,
    RINBRDVIR   = nRinBrdVir,
    RINBRDPRL   = nRinBrdPrl,
    RINBRDCHQHP = nRinBrdChqHp,
    RINDELAIP   = nRinDelaiP,
    RINDELAIV   = nRinDelaiV,
    RINVALREMHP = nRinValRemHp,
    RINVALREMSP = nRinValRemSp,
    RINVALPRL   = nRinValPrl,
    RINVALVIR   = nRinValVir,
    RINVALCHQ   = nRinValChq,
    RINFORCEPRL = nRinForcePrl,
    RINFORCEVIR = nRinForceVir
    WHERE  RIBID = nRibId;
    --PAV4_TRACE.DEBUG ( 'Update RIBINFO reussi' );
    IF SQL%ROWCOUNT=0 THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour RIBINFO' );
    END IF;
    -- MP 240801
    ELSE
    INSERT INTO RIBINFO (
    RIBID,
    RINBRDCHQSP,
    RINBRDVIR,
    RINBRDPRL,
    RINBRDCHQHP,
    RINDELAIP,
    RINDELAIV,
    RINVALREMHP,
    RINVALREMSP,
    RINVALVIR,
    RINVALPRL,
    RINVALCHQ,
    RINFORCEPRL,
    RINFORCEVIR)
    VALUES         ( nRibId,
    nRinBrdChqSp,
    nRinBrdVir,
    nRinBrdPrl,
    nRinBrdChqHp,
    nRinDelaiP,
    nRinDelaiV,
    nRinValRemHp,
    nRinValRemSp,
    nRinValVir,
    nRinValPrl,
    nRinValChq,
    nRinForcePrl,
    nRinForceVir );
    END IF;
    END IF;
    END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
    nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
    nReturnCode := ERR_DUP_VAL_ON_ARI_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
    nReturnCode := -1 * SQLCODE;
    END;
    END U_ACTRIB2;*/
    -- AROAGERELANCE --
    PROCEDURE I_AROAGERELANCE (
        NACTID                 AROAGERELANCE.ACTID%TYPE,
        SROLCODE               AROAGERELANCE.ROLCODE%TYPE,
        NACTIDGESTION          AROAGERELANCE.ACTIDGESTION%TYPE,
        NAARORDRE              AROAGERELANCE.AARORDRE%TYPE,
        DTAARDTDEB             AROAGERELANCE.AARDTDEB%TYPE,
        DTAARDTFIN             AROAGERELANCE.AARDTFIN%TYPE,
        SAARRELCODE            AROAGERELANCE.AARRELCODE%TYPE,
        SAARBLOCODE            AROAGERELANCE.AARBLOCODE%TYPE,
        NAARMT                 AROAGERELANCE.AARMT%TYPE,
        SDEVCODE               AROAGERELANCE.DEVCODE%TYPE,
        DTAARDTTRAIT           AROAGERELANCE.AARDTTRAIT%TYPE,
        NAARTRAITID            AROAGERELANCE.AARTRAITID%TYPE, -- CV-18062003 FSA-12499
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SAPRTYPE          ACTPROCEDURE.APRTYPE%TYPE;
            SIMPCODE          IMPAYE.IMPCODE%TYPE;
            NIMPFLAGDOUTEUX   IMPAYE.IMPFLAGDOUTEUX%TYPE;
            NMAXAVEORDRE      AAGRVE.AVEORDRE%TYPE;
            NCOUNT            NUMBER;
            DTAAGDTVALID      AROAGE.AAGDTVALID%TYPE;
            NTBAID            NUMBER;
        BEGIN
            -- td FSA 14515
            IF NAARTRAITID IS NULL
            THEN
                PACOM_UPDATEACTEUR_SHARED.I_AROAGERELANCE_GETTBAID (
                    NAARTRAITID,
                    DTAARDTDEB,
                    NACTIDGESTION,
                    NTBAID,
                    NRETURNCODE);
            ELSE
                NTBAID := NAARTRAITID;
            END IF;

            INSERT INTO AROAGERELANCE (ACTID,
                                       ROLCODE,
                                       ACTIDGESTION,
                                       AARORDRE,
                                       AARDTDEB,
                                       AARDTFIN,
                                       AARRELCODE,
                                       AARBLOCODE,
                                       AARMT,
                                       DEVCODE,
                                       AARDTTRAIT,
                                       AARTRAITID)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         NAARORDRE,
                         DTAARDTDEB,
                         DTAARDTFIN,
                         SAARRELCODE,
                         SAARBLOCODE,
                         NAARMT,
                         SDEVCODE,
                         DTAARDTTRAIT,
                         NAARTRAITID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;

            -- Mise a jour des codes d'impayes --
            -- Recherche de la procedure dans laquelle se trouve actuellement l'acteur --
            BEGIN
                SELECT APRTYPE
                  INTO SAPRTYPE
                  FROM ACTPROCEDURE
                 WHERE     ACTID = NACTID
                       AND APRDTDEB =
                           (SELECT MAX (APRDTDEB)
                              FROM ACTPROCEDURE
                             WHERE ACTID = NACTID AND APRDTDEB < DTAARDTDEB);
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    SAPRTYPE := NULL;
            END;

            IF SAPRTYPE IS NOT NULL
            THEN
                BEGIN
                    -- On Cherche le code d'impaye a inserer --
                    BEGIN
                        SELECT IMPCODE, NVL (IMPFLAGDOUTEUX, 0)
                          INTO SIMPCODE, NIMPFLAGDOUTEUX
                          FROM IMPAYE
                         WHERE     ACTID = NACTIDGESTION
                               AND IMPRELCODE = SAARRELCODE
                               AND IMPPROJUD = SAPRTYPE;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            SIMPCODE := NULL;
                    END;

                    IF SIMPCODE IS NOT NULL
                    THEN
                        BEGIN
                            -- On verifie que l'attribut actuel de l'acteur n'est pas deja celui que l'on veut inserer --
                            SELECT COUNT (*)
                              INTO NCOUNT
                              FROM AAGRVE
                             WHERE     ACTID = NACTID
                                   AND ROLCODE = SROLCODE
                                   AND ACTIDGESTION = NACTIDGESTION
                                   AND AVEDTFIN IS NULL
                                   AND RVACODE = 'IMPAYES'
                                   AND RVVCODE = SIMPCODE;

                            IF NCOUNT = 0
                            THEN
                                BEGIN
                                    SELECT AAGDTVALID
                                      INTO DTAAGDTVALID
                                      FROM AROAGE
                                     WHERE     ACTID = NACTID
                                           AND ACTIDGESTION = NACTIDGESTION
                                           AND ROLCODE = SROLCODE
                                           AND AAGDTVALID <= DTAARDTDEB
                                           AND (   (AAGDTFIN IS NULL)
                                                OR (DTAARDTDEB <= AAGDTFIN));

                                    -- On met a jour le dernier attribut de l'acteur --
                                    UPDATE AAGRVE
                                       SET AVEDTFIN =
                                               GREATEST (AVEDTDEB,
                                                         DTAARDTDEB - 1)
                                     WHERE     ACTID = NACTID
                                           AND ROLCODE = SROLCODE
                                           AND ACTIDGESTION = NACTIDGESTION
                                           AND RVACODE = 'IMPAYES'
                                           AND AVEDTFIN IS NULL;

                                    SELECT MAX (AVEORDRE)
                                      INTO NMAXAVEORDRE
                                      FROM AAGRVE
                                     WHERE     ACTIDGESTION = NACTIDGESTION
                                           AND ACTID = NACTID
                                           AND ROLCODE = SROLCODE
                                           AND RVACODE = 'IMPAYES';

                                    NMAXAVEORDRE := NVL (NMAXAVEORDRE, 0);

                                    INSERT INTO AAGRVE (ACTIDGESTION,
                                                        ACTID,
                                                        ROLCODE,
                                                        AAGDTVALID,
                                                        RVACODE,
                                                        AVEORDRE,
                                                        AVEDTDEB,
                                                        AVEDTFIN,
                                                        DEVCODE,
                                                        RVVCODE)
                                         VALUES (NACTIDGESTION,
                                                 NACTID,
                                                 SROLCODE,
                                                 DTAAGDTVALID,
                                                 'IMPAYES',
                                                 NMAXAVEORDRE + 1,
                                                 DTAARDTDEB,
                                                 NULL,
                                                 NULL,
                                                 SIMPCODE);
                                END;
                            END IF;
                        END;
                    END IF;
                END;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AROAGERELANCE;

    PROCEDURE U_AROAGERELANCE (
        NACTID                 AROAGERELANCE.ACTID%TYPE,
        SROLCODE               AROAGERELANCE.ROLCODE%TYPE,
        NACTIDGESTION          AROAGERELANCE.ACTIDGESTION%TYPE,
        NAARORDRE              AROAGERELANCE.AARORDRE%TYPE,
        DTAARDTDEB             AROAGERELANCE.AARDTDEB%TYPE,
        DTAARDTFIN             AROAGERELANCE.AARDTFIN%TYPE,
        SAARRELCODE            AROAGERELANCE.AARRELCODE%TYPE,
        SAARBLOCODE            AROAGERELANCE.AARBLOCODE%TYPE,
        NAARMT                 AROAGERELANCE.AARMT%TYPE,
        SDEVCODE               AROAGERELANCE.DEVCODE%TYPE,
        DTAARDTTRAIT           AROAGERELANCE.AARDTTRAIT%TYPE,
        NAARTRAITID            AROAGERELANCE.AARTRAITID%TYPE, -- CV-18062003 FSA-12499
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE AROAGERELANCE
               SET AARDTDEB = DTAARDTDEB,
                   AARDTFIN = DTAARDTFIN,
                   AARRELCODE = SAARRELCODE,
                   AARBLOCODE = SAARBLOCODE,
                   AARMT = NAARMT,
                   DEVCODE = SDEVCODE,
                   AARDTTRAIT = DTAARDTTRAIT,
                   AARTRAITID = NAARTRAITID           -- CV-18062003 FSA-12499
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND AARORDRE = NAARORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_AROAGERELANCE;

    PROCEDURE D_AROAGERELANCE (
        NACTID                 AROAGERELANCE.ACTID%TYPE,
        SROLCODE               AROAGERELANCE.ROLCODE%TYPE,
        NACTIDGESTION          AROAGERELANCE.ACTIDGESTION%TYPE,
        NAARORDRE              AROAGERELANCE.AARORDRE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM AROAGERELANCE
                  WHERE     ACTID = NACTID
                        AND ROLCODE = SROLCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND AARORDRE = NAARORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AAR_FOUND_CONST;
        END;
    END D_AROAGERELANCE;

    /*
    PROCEDURE F_DEBUG(
    sNomFic VARCHAR2,
    sBuffer VARCHAR2 ) AS
    BEGIN
    DECLARE
    sTypeFichier SYS.UTL_FILE.file_type;
    BEGIN
    sTypeFichier := SYS.UTL_FILE.fopen( 'e:\dbdata\dbdev2\expdev2',
    sNomFic,
    'W');
    SYS.UTL_FILE.put_line( sTypeFichier,
    sBuffer );
    SYS.UTL_FILE.fclose(sTypeFichier);
    EXCEPTION
    WHEN SYS.UTL_FILE.invalid_path THEN
    --PAV4_TRACE.DEBUG ( 'Path invalide !!! ' );
    NULL;
    WHEN SYS.UTL_FILE.invalid_mode THEN
    --PAV4_TRACE.DEBUG ( 'Mode ouverture de fichier invalide !!! ' );
    NULL;
    WHEN SYS.UTL_FILE.invalid_operation THEN
    --PAV4_TRACE.DEBUG ( 'Fichier non ouvert !!! ' );
    NULL;
    END;
    END F_DEBUG;
    */
    -- AAGRVE --
    PROCEDURE I_AAGRVE (
        NACTID                    AAGRVE.ACTID%TYPE,
        SROLCODE                  AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION             AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID              AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                  AAGRVE.RVACODE%TYPE,
        NAVEORDRE                 AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                AAGRVE.AVEDTFIN%TYPE,
        NAVENBOBJECTIF            AAGRVE.AVENBOBJECTIF%TYPE,
        NAVEMTOBJECTIF            AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE             AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT            AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT          AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE                  AAGRVE.DEVCODE%TYPE,
        SRVVCODE                  AAGRVE.RVVCODE%TYPE,
        SAVEMOTIF                 AAGRVE.AVEMOTIF%TYPE, -- CV-23012004 FSA-13272
        NCREID                    AAGRVE.CREID%TYPE,
        NDOSID                    AAGRVE.DOSID%TYPE,
        NTBAID                    AAGRVE.TBAID%TYPE,
        LSAVEMEMO                 AAGRVE.AVEMEMO%TYPE,
        STPGCODE                  AAGRVE.TPGCODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAVEORDRETMP   AAGRVE.AVEORDRE%TYPE;
        BEGIN
            SELECT NVL (MAX (AVEORDRE), 0) + 1
              INTO NAVEORDRETMP
              FROM AAGRVE
             WHERE     ACTID = NACTID
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID
                   AND RVACODE = SRVACODE;

            INSERT INTO AAGRVE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID,
                                RVACODE,
                                AVEORDRE,
                                AVEDTDEB,
                                AVEDTFIN,
                                AVENBOBJECTIF,
                                AVEMTOBJECTIF,
                                AVEMTREALISE,
                                AVEMTATTRIBUT,
                                AVEFLAGBLOQUANT,
                                DEVCODE,
                                RVVCODE,
                                AVEMOTIF,
                                CREID,
                                DOSID,
                                TBAID,
                                AVEMEMO,
                                TPGCODE)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         DTAAGDTVALID,
                         SRVACODE,
                         NAVEORDRETMP,
                         DTAVEDTDEB,
                         DTAVEDTFIN,
                         NAVENBOBJECTIF,
                         NAVEMTOBJECTIF,
                         NAVEMTREALISE,
                         NAVEMTATTRIBUT,
                         NAVEFLAGBLOQUANT,
                         SDEVCODE,
                         SRVVCODE,
                         SAVEMOTIF,
                         NCREID,
                         NDOSID,
                         NTBAID,
                         LSAVEMEMO,
                         STPGCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AAGRVE;

    PROCEDURE I_AAGRVE (
        NACTID                    AAGRVE.ACTID%TYPE,
        SROLCODE                  AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION             AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID              AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                  AAGRVE.RVACODE%TYPE,
        NAVEORDRE                 AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                AAGRVE.AVEDTFIN%TYPE,
        NAVENBOBJECTIF            AAGRVE.AVENBOBJECTIF%TYPE,
        NAVEMTOBJECTIF            AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE             AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT            AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT          AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE                  AAGRVE.DEVCODE%TYPE,
        SRVVCODE                  AAGRVE.RVVCODE%TYPE,
        SAVEMOTIF                 AAGRVE.AVEMOTIF%TYPE, -- CV-23012004 FSA-13272
        NCREID                    AAGRVE.CREID%TYPE,
        NDOSID                    AAGRVE.DOSID%TYPE,
        NTBAID                    AAGRVE.TBAID%TYPE,
        LSAVEMEMO                 AAGRVE.AVEMEMO%TYPE,
        STPGCODE                  AAGRVE.TPGCODE%TYPE,
        SPCRID                    AAGRVE.PCRID%TYPE,
        SPCRORDRE                 AAGRVE.PCRORDRE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO AAGRVE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID,
                                RVACODE,
                                AVEORDRE,
                                AVEDTDEB,
                                AVEDTFIN,
                                AVENBOBJECTIF,
                                AVEMTOBJECTIF,
                                AVEMTREALISE,
                                AVEMTATTRIBUT,
                                AVEFLAGBLOQUANT,
                                DEVCODE,
                                RVVCODE,
                                AVEMOTIF,
                                CREID,
                                DOSID,
                                TBAID,
                                AVEMEMO,
                                TPGCODE,
                                PCRID,
                                PCRORDRE)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         DTAAGDTVALID,
                         SRVACODE,
                         NAVEORDRE,
                         DTAVEDTDEB,
                         DTAVEDTFIN,
                         NAVENBOBJECTIF,
                         NAVEMTOBJECTIF,
                         NAVEMTREALISE,
                         NAVEMTATTRIBUT,
                         NAVEFLAGBLOQUANT,
                         SDEVCODE,
                         SRVVCODE,
                         SAVEMOTIF,
                         NCREID,
                         NDOSID,
                         NTBAID,
                         LSAVEMEMO,
                         STPGCODE,
                         SPCRID,
                         SPCRORDRE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AAGRVE;

    PROCEDURE I_AAGRVE_EVCOL_RELCONF (
        NACTID                     AAGRVE.ACTID%TYPE,
        SROLCODE                   AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION              AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID               AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                   AAGRVE.RVACODE%TYPE,
        NAVEORDRE                  AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                 AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                 AAGRVE.AVEDTFIN%TYPE,
        NAVENBOBJECTIF             AAGRVE.AVENBOBJECTIF%TYPE,
        NAVEMTOBJECTIF             AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE              AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT             AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT           AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE                   AAGRVE.DEVCODE%TYPE,
        SRVVCODE                   AAGRVE.RVVCODE%TYPE,
        SAVEMOTIF                  AAGRVE.AVEMOTIF%TYPE, -- CV-23012004 FSA-13272
        NCREID                     AAGRVE.CREID%TYPE,
        NDOSID                     AAGRVE.DOSID%TYPE,
        NTBAID                     AAGRVE.TBAID%TYPE,
        LSAVEMEMO                  AAGRVE.AVEMEMO%TYPE,
        STPGCODE                   AAGRVE.TPGCODE%TYPE,
        NAVENBCANCELLED            AAGRVE.AVENBCANCELLED%TYPE,
        NAVEMTCANCELLED            AAGRVE.AVEMTCANCELLED%TYPE,
        NAVEMTATTRIBUTEXT          AAGRVE.AVEMTATTRIBUTEXT%TYPE,
        NAVENBDISCOUNT             AAGRVE.AVENBDISCOUNT%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO AAGRVE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID,
                                RVACODE,
                                AVEORDRE,
                                AVEDTDEB,
                                AVEDTFIN,
                                AVENBOBJECTIF,
                                AVEMTOBJECTIF,
                                AVEMTREALISE,
                                AVEMTATTRIBUT,
                                AVEFLAGBLOQUANT,
                                DEVCODE,
                                RVVCODE,
                                AVEMOTIF,
                                CREID,
                                DOSID,
                                TBAID,
                                AVEMEMO,
                                TPGCODE,
                                AVENBCANCELLED,
                                AVEMTCANCELLED,
                                AVEMTATTRIBUTEXT,
                                AVENBDISCOUNT)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         DTAAGDTVALID,
                         SRVACODE,
                         NAVEORDRE,
                         DTAVEDTDEB,
                         DTAVEDTFIN,
                         NAVENBOBJECTIF,
                         NAVEMTOBJECTIF,
                         NAVEMTREALISE,
                         NAVEMTATTRIBUT,
                         NAVEFLAGBLOQUANT,
                         SDEVCODE,
                         SRVVCODE,
                         SAVEMOTIF,
                         NCREID,
                         NDOSID,
                         NTBAID,
                         LSAVEMEMO,
                         STPGCODE,
                         NAVENBCANCELLED,
                         NAVEMTCANCELLED,
                         NAVEMTATTRIBUTEXT,
                         NAVENBDISCOUNT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AAGRVE_EVCOL_RELCONF;

    PROCEDURE U_AAGRVE (
        NACTID                     AAGRVE.ACTID%TYPE,
        SROLCODE                   AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION              AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID               AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                   AAGRVE.RVACODE%TYPE,
        NAVEORDRE                  AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                 AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                 AAGRVE.AVEDTFIN%TYPE,
        NAVENBOBJECTIF             AAGRVE.AVENBOBJECTIF%TYPE,
        NAVEMTOBJECTIF             AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE              AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT             AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT           AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE                   AAGRVE.DEVCODE%TYPE,
        SRVVCODE                   AAGRVE.RVVCODE%TYPE,
        NCREID                     AAGRVE.CREID%TYPE,
        NDOSID                     AAGRVE.DOSID%TYPE,
        NTBAID                     AAGRVE.TBAID%TYPE,
        LSAVEMEMO                  AAGRVE.AVEMEMO%TYPE,
        NAVENBCANCELLED            AAGRVE.AVENBCANCELLED%TYPE,
        NAVEMTCANCELLED            AAGRVE.AVEMTCANCELLED%TYPE,
        NAVEMTATTRIBUTEXT          AAGRVE.AVEMTATTRIBUTEXT%TYPE,
        NAVENBDISCOUNT             AAGRVE.AVENBDISCOUNT%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE AAGRVE
               SET AVEDTDEB = DTAVEDTDEB,
                   AVEDTFIN = DTAVEDTFIN,
                   AVENBOBJECTIF = NAVENBOBJECTIF,
                   AVEMTOBJECTIF = NAVEMTOBJECTIF,
                   AVEMTREALISE = NAVEMTREALISE,
                   AVEMTATTRIBUT = NAVEMTATTRIBUT,
                   AVEFLAGBLOQUANT = NAVEFLAGBLOQUANT,
                   DEVCODE = SDEVCODE,
                   RVVCODE = SRVVCODE,
                   CREID = NCREID,
                   DOSID = NDOSID,
                   TBAID = NTBAID,
                   AVEMEMO = LSAVEMEMO,
                   AVENBCANCELLED = NAVENBCANCELLED,
                   AVEMTCANCELLED = NAVEMTCANCELLED,
                   AVEMTATTRIBUTEXT = NAVEMTATTRIBUTEXT,
                   AVENBDISCOUNT = NAVENBDISCOUNT
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND TO_CHAR (AAGDTVALID, 'YYYY-MM-DD') =
                       TO_CHAR (DTAAGDTVALID, 'YYYY-MM-DD')
                   AND RVACODE = SRVACODE
                   AND AVEORDRE = NAVEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_AAGRVE;

    PROCEDURE D_AAGRVE (NACTID                 AAGRVE.ACTID%TYPE,
                        SROLCODE               AAGRVE.ROLCODE%TYPE,
                        NACTIDGESTION          AAGRVE.ACTIDGESTION%TYPE,
                        DTAAGDTVALID           AAGRVE.AAGDTVALID%TYPE,
                        SRVACODE               AAGRVE.RVACODE%TYPE,
                        NAVEORDRE              AAGRVE.AVEORDRE%TYPE,
                        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM AAGRVE
                  WHERE     ACTID = NACTID
                        AND ROLCODE = SROLCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND AAGDTVALID = DTAAGDTVALID
                        AND RVACODE = SRVACODE
                        AND AVEORDRE = NAVEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AVE_FOUND_CONST;
        END;
    END D_AAGRVE;

    -- ACTSPECIALITE -- CV : Gestion des fournisseurs
    PROCEDURE D_ACTSPECIALITE (NACTID               ACTEUR.ACTID%TYPE,
                               SASPCODE             ACTSPECIALITE.ASPCODE%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            -- CV-29032001 FSA-5420
            DELETE FROM ACTSPEMETIER
                  WHERE ACTID = NACTID AND ASPCODE = SASPCODE;

            DELETE FROM ACTSPECIALITE
                  WHERE ACTID = NACTID AND ASPCODE = SASPCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ASP_FOUND_CONST;
        END;
    END D_ACTSPECIALITE;

    PROCEDURE I_ACTSPECIALITE (
        NACTID                    ACTEUR.ACTID%TYPE,
        SASPCODE                  ACTSPECIALITE.ASPCODE%TYPE,
        NASPFLAGDEFAUT            ACTSPECIALITE.ASPFLAGDEFAUT%TYPE,
        SASPAPPRECIATION          ACTSPECIALITE.ASPAPPRECIATION%TYPE,
        NACTIDGESTION             ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE                  ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID              ACTSPECIALITE.AAGDTVALID%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTSPECIALITE (ACTID,
                                       ASPCODE,
                                       ASPFLAGDEFAUT,
                                       ASPAPPRECIATION,
                                       ACTIDGESTION,
                                       ROLCODE,
                                       AAGDTVALID)
                 VALUES (NACTID,
                         SASPCODE,
                         NASPFLAGDEFAUT,
                         SASPAPPRECIATION,
                         NACTIDGESTION,
                         SROLCODE,
                         DTAAGDTVALID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ASP_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASP_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTSPECIALITE;

    PROCEDURE U_ACTSPECIALITE (
        NACTID                    ACTEUR.ACTID%TYPE,
        SASPCODE                  ACTSPECIALITE.ASPCODE%TYPE,
        NASPFLAGDEFAUT            ACTSPECIALITE.ASPFLAGDEFAUT%TYPE,
        SASPAPPRECIATION          ACTSPECIALITE.ASPAPPRECIATION%TYPE,
        NACTIDGESTION             ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE                  ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID              ACTSPECIALITE.AAGDTVALID%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTSPECIALITE
               SET ASPCODE = SASPCODE,
                   ASPFLAGDEFAUT = NASPFLAGDEFAUT,
                   ASPAPPRECIATION = SASPAPPRECIATION
             WHERE     ACTID = NACTID
                   AND ASPCODE = SASPCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ASP_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASP_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTSPECIALITE;

    -- ACTSPEMETIER -- CV : Gestion des fournisseurs
    PROCEDURE D_ACTSPEMETIER (
        NACTID                 ACTEUR.ACTID%TYPE,
        SASPCODE               ACTSPEMETIER.ASPCODE%TYPE,
        NACTIDGESTION          ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE               ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID           ACTSPECIALITE.AAGDTVALID%TYPE,
        SASMCODE               ACTSPEMETIER.ASMCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTSPEMETIER
                  WHERE     ACTID = NACTID
                        AND ASPCODE = SASPCODE
                        AND ASMCODE = SASMCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND ROLCODE = SROLCODE
                        AND AAGDTVALID = DTAAGDTVALID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ASM_FOUND_CONST;
        END;
    END D_ACTSPEMETIER;

    PROCEDURE I_ACTSPEMETIER (
        NACTID                 ACTEUR.ACTID%TYPE,
        SASPCODE               ACTSPEMETIER.ASPCODE%TYPE,
        NACTIDGESTION          ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE               ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID           ACTSPECIALITE.AAGDTVALID%TYPE,
        SASMCODE               ACTSPEMETIER.ASMCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTSPEMETIER (ACTID,
                                      ASPCODE,
                                      ASMCODE,
                                      ACTIDGESTION,
                                      ROLCODE,
                                      AAGDTVALID)
                 VALUES (NACTID,
                         SASPCODE,
                         SASMCODE,
                         NACTIDGESTION,
                         SROLCODE,
                         DTAAGDTVALID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ASM_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASM_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTSPEMETIER;

    /*PROCEDURE U_ACTSPEMETIER (
    nActId           ACTEUR.ACTID%TYPE,
    sAspCode         ACTSPEMETIER.ASPCODE%TYPE,
    sAsmCode         ACTSPEMETIER.ASMCODE%TYPE,
    nReturnCode                                     IN OUT NUMBER) AS
    BEGIN
    BEGIN
    UPDATE ACTSPEMETIER
    SET    ASMCODE = sAsmCode
    WHERE           ACTID   = nActId
    AND    ASPCODE = sAspCode
    AND    ASMCODE = sAsmCode;
    nReturnCode := 0;
    IF SQL%ROWCOUNT=0 THEN
    nReturnCode := ERR_NO_ROWS_CONST;
    END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
    nReturnCode := ERR_PARENT_ASM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
    nReturnCode := ERR_DUP_VAL_ON_ASM_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_ASM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
    nReturnCode := ERR_VAL_ASM_NULL_CONST;
    WHEN OTHERS THEN
    nReturnCode := -1 * SQLCODE;
    END;
    END U_ACTSPEMETIER;*/
    -- ACTRAYONACTION -- CV : Gestion des fournisseurs
    PROCEDURE D_ACTRAYONACTION (
        NACTID                 ACTEUR.ACTID%TYPE,
        NARAORDRE              ACTRAYONACTION.ARAORDRE%TYPE,
        NACTIDGESTION          ACTRAYONACTION.ACTIDGESTION%TYPE,
        SROLCODE               ACTRAYONACTION.ROLCODE%TYPE,
        DTAAGDTVALID           ACTRAYONACTION.AAGDTVALID%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTRAYONACTION
                  WHERE     ACTID = NACTID
                        AND ARAORDRE = NARAORDRE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND ROLCODE = SROLCODE
                        AND AAGDTVALID = DTAAGDTVALID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ARA_FOUND_CONST;
        END;
    END D_ACTRAYONACTION;

    PROCEDURE I_ACTRAYONACTION (
        NACTID                 ACTEUR.ACTID%TYPE,
        NARAORDRE              ACTRAYONACTION.ARAORDRE%TYPE,
        SARANIVEAU             ACTRAYONACTION.ARANIVEAU%TYPE,
        SARASECTGEO            ACTRAYONACTION.ARASECTGEO%TYPE,
        SASPCODE               ACTRAYONACTION.ASPCODE%TYPE,
        NACTIDGESTION          ACTRAYONACTION.ACTIDGESTION%TYPE,
        SROLCODE               ACTRAYONACTION.ROLCODE%TYPE,
        DTAAGDTVALID           ACTRAYONACTION.AAGDTVALID%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTRAYONACTION (ACTID,
                                        ARAORDRE,
                                        ARANIVEAU,
                                        ARASECTGEO,
                                        ASPCODE,
                                        ACTIDGESTION,
                                        ROLCODE,
                                        AAGDTVALID)
                 VALUES (NACTID,
                         NARAORDRE,
                         SARANIVEAU,
                         SARASECTGEO,
                         SASPCODE,
                         NACTIDGESTION,
                         SROLCODE,
                         DTAAGDTVALID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ARY_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRAYONACTION;

    PROCEDURE U_ACTRAYONACTION (
        NACTID                 ACTEUR.ACTID%TYPE,
        NARAORDRE              ACTRAYONACTION.ARAORDRE%TYPE,
        SARANIVEAU             ACTRAYONACTION.ARANIVEAU%TYPE,
        SARASECTGEO            ACTRAYONACTION.ARASECTGEO%TYPE,
        SASPCODE               ACTRAYONACTION.ASPCODE%TYPE,
        NACTIDGESTION          ACTRAYONACTION.ACTIDGESTION%TYPE,
        SROLCODE               ACTRAYONACTION.ROLCODE%TYPE,
        DTAAGDTVALID           ACTRAYONACTION.AAGDTVALID%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTRAYONACTION
               SET ARAORDRE = NARAORDRE,
                   ARANIVEAU = SARANIVEAU,
                   ARASECTGEO = SARASECTGEO,
                   ASPCODE = SASPCODE
             WHERE     ACTID = NACTID
                   AND ARAORDRE = NARAORDRE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ARY_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ARA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRAYONACTION;

    -- PROCEDURE DE MAJ DE LA TABLE ADMINISTRATIF PAR BATCH DES RELANCES --
    PROCEDURE U_ADMINISTRATIF (
        NTBAID               ADMINISTRATIF.TBAID%TYPE,
        NFORID               ADMINISTRATIF.FORID%TYPE,
        SROLCODE             ADMINISTRATIF.ROLCODE%TYPE,
        DTADMDTEMIS          ADMINISTRATIF.ADMDTEMIS%TYPE,
        SADMETAT             ADMINISTRATIF.ADMETAT%TYPE,
        NRBOID        IN     ADMINISTRATIF.RBOID%TYPE DEFAULT NULL,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            NRETURNCODE := 0;

            IF     (NTBAID IS NOT NULL)
               AND (DTADMDTEMIS IS NOT NULL)
               AND (SADMETAT IS NOT NULL)
            THEN
                IF (NFORID IS NOT NULL) AND (SROLCODE IS NOT NULL)
                THEN
                    UPDATE ADMINISTRATIF
                       SET ADMCOMMENT = NULL,
                           ADMDTEMIS = DTADMDTEMIS,
                           ADMETAT = SADMETAT
                     WHERE     TBAID = NTBAID
                           AND FORID = NFORID
                           AND ROLCODE = SROLCODE;
                ELSE
                    UPDATE ADMINISTRATIF
                       SET ADMCOMMENT = NULL,
                           ADMDTEMIS = DTADMDTEMIS,
                           ADMETAT = SADMETAT
                     WHERE TBAID = NTBAID;
                END IF;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ADM_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADM_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ADMINISTRATIF;

    PROCEDURE I_CODEPOSTAL (
        SPAYCODE               CODEPOSTAL.PAYCODE%TYPE,
        SCPOCODE               CODEPOSTAL.CPOCODE%TYPE,
        SCPOVILLE              CODEPOSTAL.CPOVILLE%TYPE,
        SCPOSUBREGION          CODEPOSTAL.CPOSUBREGION%TYPE,
        SMSACODE               CODEPOSTAL.MSACODE%TYPE,
        SCPODISTRICT           CODEPOSTAL.CPODISTRICT%TYPE,
        SCPOTOWN               CODEPOSTAL.CPOTOWN%TYPE,
        SCPOLIEUDIT            CODEPOSTAL.CPOLIEUDIT%TYPE,
        SCPOVOIE               CODEPOSTAL.CPOVOIE%TYPE,
        SCPORANGE              CODEPOSTAL.CPORANGE%TYPE,
        SCPOFORMAT             CODEPOSTAL.CPOFORMAT%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCBLORDER   CPOBLOCK.CBLORDER%TYPE;
            LSIZE       NUMBER;
        BEGIN
            SELECT NVL (MAX (CBLORDER), 0) + 1
              INTO NCBLORDER
              FROM CPOBLOCK
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE;

            SELECT COUNT (*)
              INTO LSIZE
              FROM CODEPOSTAL
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE;

            IF LSIZE = 0
            THEN
                INSERT INTO CODEPOSTAL (PAYCODE,
                                        CPOCODE,
                                        CPOVILLE,
                                        CPOSUBREGION,
                                        MSACODE,
                                        CPODISTRICT,
                                        CPOTOWN,
                                        CPOLIEUDIT,
                                        CPOVOIE,
                                        CPORANGE,
                                        CPOFORMAT)
                     VALUES (SPAYCODE,
                             SCPOCODE,
                             SCPOVILLE,
                             SCPOSUBREGION,
                             SMSACODE,
                             SCPODISTRICT,
                             SCPOTOWN,
                             SCPOLIEUDIT,
                             SCPOVOIE,
                             SCPORANGE,
                             SCPOFORMAT);

                I_CPOBLOCK (SPAYCODE,
                            SCPOCODE,
                            SCPOVILLE,
                            NCBLORDER,
                            SCPOSUBREGION,
                            SMSACODE,
                            SCPODISTRICT,
                            SCPOTOWN,
                            SCPOLIEUDIT,
                            SCPOVOIE,
                            SCPORANGE,
                            SCPOFORMAT,
                            NRETURNCODE);
            ELSE
                I_CPOBLOCK (SPAYCODE,
                            SCPOCODE,
                            SCPOVILLE,
                            NCBLORDER,
                            SCPOSUBREGION,
                            SMSACODE,
                            SCPODISTRICT,
                            SCPOTOWN,
                            SCPOLIEUDIT,
                            SCPOVOIE,
                            SCPORANGE,
                            SCPOFORMAT,
                            NRETURNCODE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CPO_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_CPO_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CPO_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_CODEPOSTAL;

    PROCEDURE I_CPOBLOCK (SPAYCODE               CPOBLOCK.PAYCODE%TYPE,
                          SCPOCODE               CPOBLOCK.CPOCODE%TYPE,
                          SCPOVILLE              CPOBLOCK.CPOVILLE%TYPE,
                          NCBLORDER              CPOBLOCK.CBLORDER%TYPE,
                          SCPOSUBREGION          CPOBLOCK.CBLSUBREGION%TYPE,
                          SMSACODE               CPOBLOCK.CBLMSACODE%TYPE,
                          SCPODISTRICT           CPOBLOCK.CBLDISTRICT%TYPE,
                          SCPOTOWN               CPOBLOCK.CBLTOWN%TYPE,
                          SCPOLIEUDIT            CPOBLOCK.CBLLIEUDIT%TYPE,
                          SCPOVOIE               CPOBLOCK.CBLVOIE%TYPE,
                          SCPORANGE              CPOBLOCK.CBLRANGE%TYPE,
                          SCPOFORMAT             CPOBLOCK.CBLFORMAT%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO CPOBLOCK (PAYCODE,
                                  CPOCODE,
                                  CPOVILLE,
                                  CBLORDER,
                                  CBLSUBREGION,
                                  CBLMSACODE,
                                  CBLDISTRICT,
                                  CBLTOWN,
                                  CBLLIEUDIT,
                                  CBLVOIE,
                                  CBLRANGE,
                                  CBLFORMAT)
                 VALUES (SPAYCODE,
                         SCPOCODE,
                         SCPOVILLE,
                         NCBLORDER,
                         SCPOSUBREGION,
                         SMSACODE,
                         SCPODISTRICT,
                         SCPOTOWN,
                         SCPOLIEUDIT,
                         SCPOVOIE,
                         SCPORANGE,
                         SCPOFORMAT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CPO_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_CPO_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CPO_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_CPOBLOCK;

    PROCEDURE D_CODEPOSTAL (SPAYCODE             CODEPOSTAL.PAYCODE%TYPE,
                            SCPOCODE             CODEPOSTAL.CPOCODE%TYPE,
                            SCPOVILLE            CODEPOSTAL.CPOVILLE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM CODEPOSTAL
                  WHERE     PAYCODE = SPAYCODE
                        AND CPOCODE = SCPOCODE
                        AND CPOVILLE = SCPOVILLE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_CPO_FOUND_CONST;
        END;
    END D_CODEPOSTAL;

    -- ACTSECTGESTION -- CV 16012001
    PROCEDURE D_ACTSECTGESTION (
        NACTID                   ACTEUR.ACTID%TYPE,
        SACTSECTGESTION          ACTSECTGESTION.ACTSECTGESTION%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTSECTGESTION
                  WHERE ACTID = NACTID AND ACTSECTGESTION = SACTSECTGESTION;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ASE_FOUND_CONST;
        END;
    END D_ACTSECTGESTION;

    PROCEDURE I_ACTSECTGESTION (
        NACTID                   ACTEUR.ACTID%TYPE,
        SACTSECTGESTION          ACTSECTGESTION.ACTSECTGESTION%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTSECTGESTION (ACTID, ACTSECTGESTION)
                 VALUES (NACTID, SACTSECTGESTION);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ASG_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTSECTGESTION;

    -- LKAARFEC --
    PROCEDURE I_LKAARFEC (NACTID                 LKAARFEC.ACTID%TYPE,
                          SROLCODE               LKAARFEC.ROLCODE%TYPE,
                          NACTIDGESTION          LKAARFEC.ACTIDGESTION%TYPE,
                          NAARORDRE              LKAARFEC.AARORDRE%TYPE,
                          NFACID                 LKAARFEC.FACID%TYPE,
                          NFECORDRE              LKAARFEC.FECORDRE%TYPE,
                          SAAFBLOCODE            LKAARFEC.AAFBLOCODE%TYPE,
                          DTAAFDTDEB             LKAARFEC.AAFDTDEB%TYPE,
                          DTAAFDTFIN             LKAARFEC.AAFDTFIN%TYPE,
                          NAAFMTRELANCE          LKAARFEC.AAFMTRELANCE%TYPE,
                          NAAFTXDEVISE           LKAARFEC.AAFTXDEVISE%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKAARFEC (ACTID,
                                  ROLCODE,
                                  ACTIDGESTION,
                                  AARORDRE,
                                  FACID,
                                  FECORDRE,
                                  AAFBLOCODE,
                                  AAFDTDEB,
                                  AAFDTFIN,
                                  AAFMTRELANCE,
                                  AAFTXDEVISE)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         NAARORDRE,
                         NFACID,
                         NFECORDRE,
                         SAAFBLOCODE,
                         DTAAFDTDEB,
                         DTAAFDTFIN,
                         NAAFMTRELANCE,
                         NAAFTXDEVISE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAF_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKAARFEC;

    PROCEDURE U_LKAARFEC (NACTID                 LKAARFEC.ACTID%TYPE,
                          SROLCODE               LKAARFEC.ROLCODE%TYPE,
                          NACTIDGESTION          LKAARFEC.ACTIDGESTION%TYPE,
                          NAARORDRE              LKAARFEC.AARORDRE%TYPE,
                          NFACID                 LKAARFEC.FACID%TYPE,
                          NFECORDRE              LKAARFEC.FECORDRE%TYPE,
                          SAAFBLOCODE            LKAARFEC.AAFBLOCODE%TYPE,
                          DTAAFDTDEB             LKAARFEC.AAFDTDEB%TYPE,
                          DTAAFDTFIN             LKAARFEC.AAFDTFIN%TYPE,
                          NAAFMTRELANCE          LKAARFEC.AAFMTRELANCE%TYPE,
                          NAAFTXDEVISE           LKAARFEC.AAFTXDEVISE%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKAARFEC
               SET AAFBLOCODE = SAAFBLOCODE,
                   AAFDTDEB = DTAAFDTDEB,
                   AAFDTFIN = DTAAFDTFIN,
                   AAFMTRELANCE = NAAFMTRELANCE,
                   AAFTXDEVISE = NAAFTXDEVISE
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND AARORDRE = NAARORDRE
                   AND FACID = NFACID
                   AND FECORDRE = NFECORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAF_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKAARFEC;

    PROCEDURE D_LKAARFEC (NACTID                 LKAARFEC.ACTID%TYPE,
                          SROLCODE               LKAARFEC.ROLCODE%TYPE,
                          NACTIDGESTION          LKAARFEC.ACTIDGESTION%TYPE,
                          NAARORDRE              LKAARFEC.AARORDRE%TYPE,
                          NFACID                 LKAARFEC.FACID%TYPE,
                          NFECORDRE              LKAARFEC.FECORDRE%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKAARFEC
                  WHERE     ACTID = NACTID
                        AND ROLCODE = SROLCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND AARORDRE = NAARORDRE
                        AND FACID = NFACID
                        AND FECORDRE = NFECORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_AAF_FOUND_CONST;
        END;
    END D_LKAARFEC;

    -- ACTPROAGE --
    PROCEDURE D_ACTPROAGE (
        NACTID                 ACTPROAGE.ACTID%TYPE,
        NAPRORDRE              ACTPROAGE.APRORDRE%TYPE,
        NACTIDGESTION          ACTPROAGE.ACTIDGESTION%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPROAGE
                  WHERE     ACTID = NACTID
                        AND APRORDRE = NAPRORDRE
                        AND ACTIDGESTION = NACTIDGESTION;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APG_FOUND_CONST;
        END;
    END D_ACTPROAGE;

    PROCEDURE I_ACTPROAGE (
        NACTID                     ACTPROAGE.ACTID%TYPE,
        NAPRORDRE                  ACTPROAGE.APRORDRE%TYPE,
        NACTIDGESTION              ACTPROAGE.ACTIDGESTION%TYPE,
        SDEVCODE                   ACTPROAGE.DEVCODE%TYPE,
        DTAPGDTCREANCE             ACTPROAGE.APGDTCREANCE%TYPE,
        SAPGSOLUTION               ACTPROAGE.APGSOLUTION%TYPE,
        NAPGMTTOTAL                ACTPROAGE.APGMTTOTAL%TYPE,
        NAPGMTAVANCE               ACTPROAGE.APGMTAVANCE%TYPE,
        NAPGMTECHU                 ACTPROAGE.APGMTECHU%TYPE,
        NAPGFLAGDOSSUITE           ACTPROAGE.APGFLAGDOSSUITE%TYPE,
        NAPGFLAGBAILSUITE          ACTPROAGE.APGFLAGBAILSUITE%TYPE,
        DTAPGDTREPRISECLE          ACTPROAGE.APGDTREPRISECLE%TYPE,
        DTAPGDTDEMEURE             ACTPROAGE.APGDTDEMEURE%TYPE,
        NAPGFLAGCONTESTE           ACTPROAGE.APGFLAGCONTESTE%TYPE,
        NAPGFLAGADMISSION          ACTPROAGE.APGFLAGADMISSION%TYPE,
        DTAPGDTADMISSION           ACTPROAGE.APGDTADMISSION%TYPE,
        SAPGMEMO                   ACTPROAGE.APGMEMO%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTPROAGE (ACTID,
                                   APRORDRE,
                                   ACTIDGESTION,
                                   DEVCODE,
                                   APGDTCREANCE,
                                   APGSOLUTION,
                                   APGMTTOTAL,
                                   APGMTAVANCE,
                                   APGMTECHU,
                                   APGFLAGDOSSUITE,
                                   APGFLAGBAILSUITE,
                                   APGDTREPRISECLE,
                                   APGDTDEMEURE,
                                   APGFLAGCONTESTE,
                                   APGFLAGADMISSION,
                                   APGDTADMISSION,
                                   APGMEMO)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NACTIDGESTION,
                         SDEVCODE,
                         DTAPGDTCREANCE,
                         SAPGSOLUTION,
                         NAPGMTTOTAL,
                         NAPGMTAVANCE,
                         NAPGMTECHU,
                         NAPGFLAGDOSSUITE,
                         NAPGFLAGBAILSUITE,
                         DTAPGDTREPRISECLE,
                         DTAPGDTDEMEURE,
                         NAPGFLAGCONTESTE,
                         NAPGFLAGADMISSION,
                         DTAPGDTADMISSION,
                         SAPGMEMO);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APG_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APG_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APG_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROAGE;

    PROCEDURE U_ACTPROAGE (
        NACTID                     ACTPROAGE.ACTID%TYPE,
        NAPRORDRE                  ACTPROAGE.APRORDRE%TYPE,
        NACTIDGESTION              ACTPROAGE.ACTIDGESTION%TYPE,
        SDEVCODE                   ACTPROAGE.DEVCODE%TYPE,
        DTAPGDTCREANCE             ACTPROAGE.APGDTCREANCE%TYPE,
        SAPGSOLUTION               ACTPROAGE.APGSOLUTION%TYPE,
        NAPGMTTOTAL                ACTPROAGE.APGMTTOTAL%TYPE,
        NAPGMTAVANCE               ACTPROAGE.APGMTAVANCE%TYPE,
        NAPGMTECHU                 ACTPROAGE.APGMTECHU%TYPE,
        NAPGFLAGDOSSUITE           ACTPROAGE.APGFLAGDOSSUITE%TYPE,
        NAPGFLAGBAILSUITE          ACTPROAGE.APGFLAGBAILSUITE%TYPE,
        DTAPGDTREPRISECLE          ACTPROAGE.APGDTREPRISECLE%TYPE,
        DTAPGDTDEMEURE             ACTPROAGE.APGDTDEMEURE%TYPE,
        NAPGFLAGCONTESTE           ACTPROAGE.APGFLAGCONTESTE%TYPE,
        NAPGFLAGADMISSION          ACTPROAGE.APGFLAGADMISSION%TYPE,
        DTAPGDTADMISSION           ACTPROAGE.APGDTADMISSION%TYPE,
        SAPGMEMO                   ACTPROAGE.APGMEMO%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPROAGE
               SET DEVCODE = SDEVCODE,
                   APGDTCREANCE = DTAPGDTCREANCE,
                   APGSOLUTION = SAPGSOLUTION,
                   APGMTTOTAL = NAPGMTTOTAL,
                   APGMTAVANCE = NAPGMTAVANCE,
                   APGMTECHU = NAPGMTECHU,
                   APGFLAGDOSSUITE = NAPGFLAGDOSSUITE,
                   APGFLAGBAILSUITE = NAPGFLAGBAILSUITE,
                   APGDTREPRISECLE = DTAPGDTREPRISECLE,
                   APGDTDEMEURE = DTAPGDTDEMEURE,
                   APGFLAGCONTESTE = NAPGFLAGCONTESTE,
                   APGFLAGADMISSION = NAPGFLAGADMISSION,
                   APGDTADMISSION = DTAPGDTADMISSION,
                   APGMEMO = SAPGMEMO
             WHERE     ACTID = NACTID
                   AND APRORDRE = NAPRORDRE
                   AND ACTIDGESTION = NACTIDGESTION;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APG_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APG_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APG_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPROAGE;

    -- ACTPROPHASE --
    PROCEDURE D_ACTPROPHASE (NACTID               ACTPROPHASE.ACTID%TYPE,
                             NAPRORDRE            ACTPROPHASE.APRORDRE%TYPE,
                             NAPPORDRE            ACTPROPHASE.APPORDRE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPROPHAAUDIENCE
                  WHERE     ACTID = NACTID
                        AND APRORDRE = NAPRORDRE
                        AND APPORDRE = NAPPORDRE;

            DELETE FROM ACTPROPHASE
                  WHERE     ACTID = NACTID
                        AND APRORDRE = NAPRORDRE
                        AND APPORDRE = NAPPORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APP_FOUND_CONST;
        END;
    END D_ACTPROPHASE;

    PROCEDURE I_ACTPROPHASE (NACTID               ACTPROPHASE.ACTID%TYPE,
                             NAPRORDRE            ACTPROPHASE.APRORDRE%TYPE,
                             NAPPORDRE            ACTPROPHASE.APPORDRE%TYPE,
                             SPHACODE             ACTPROPHASE.PHACODE%TYPE,
                             SPHADEST             ACTPROPHASE.PHADEST%TYPE,
                             SJALCODE             ACTPROPHASE.JALCODE%TYPE,
                             DTAPPDTDEB           ACTPROPHASE.APPDTDEB%TYPE,
                             DTAPPDTFIN           ACTPROPHASE.APPDTFIN%TYPE,
                             NCREID               ACTPROPHASE.CREID%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTPROPHASE (ACTID,
                                     APRORDRE,
                                     APPORDRE,
                                     PHACODE,
                                     PHADEST,
                                     JALCODE,
                                     APPDTDEB,
                                     APPDTFIN,
                                     CREID)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NAPPORDRE,
                         SPHACODE,
                         SPHADEST,
                         SJALCODE,
                         DTAPPDTDEB,
                         DTAPPDTFIN,
                         NCREID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APP_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APP_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APP_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROPHASE;

    PROCEDURE U_ACTPROPHASE (NACTID               ACTPROPHASE.ACTID%TYPE,
                             NAPRORDRE            ACTPROPHASE.APRORDRE%TYPE,
                             NAPPORDRE            ACTPROPHASE.APPORDRE%TYPE,
                             SPHACODE             ACTPROPHASE.PHACODE%TYPE,
                             SPHADEST             ACTPROPHASE.PHADEST%TYPE,
                             SJALCODE             ACTPROPHASE.JALCODE%TYPE,
                             DTAPPDTDEB           ACTPROPHASE.APPDTDEB%TYPE,
                             DTAPPDTFIN           ACTPROPHASE.APPDTFIN%TYPE,
                             NCREID               ACTPROPHASE.CREID%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPROPHASE
               SET PHACODE = SPHACODE,
                   PHADEST = SPHADEST,
                   JALCODE = SJALCODE,
                   APPDTDEB = DTAPPDTDEB,
                   APPDTFIN = DTAPPDTFIN,
                   CREID = NCREID
             WHERE     ACTID = NACTID
                   AND APRORDRE = NAPRORDRE
                   AND APPORDRE = NAPPORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_APP_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APP_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APP_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPROPHASE;

    -- ACTPROPHAAUDIENCE --
    PROCEDURE D_ACTPROPHAAUDIENCE (
        NACTID               ACTPROPHAAUDIENCE.ACTID%TYPE,
        NAPRORDRE            ACTPROPHAAUDIENCE.APRORDRE%TYPE,
        NAPPORDRE            ACTPROPHAAUDIENCE.APPORDRE%TYPE,
        NAPAORDRE            ACTPROPHAAUDIENCE.APAORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTPROPHAAUDIENCE
                  WHERE     ACTID = NACTID
                        AND APRORDRE = NAPRORDRE
                        AND APPORDRE = NAPPORDRE
                        AND APAORDRE = NAPAORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_APA_FOUND_CONST;
        END;
    END D_ACTPROPHAAUDIENCE;

    PROCEDURE I_ACTPROPHAAUDIENCE (
        NACTID                     ACTPROPHAAUDIENCE.ACTID%TYPE,
        NAPRORDRE                  ACTPROPHAAUDIENCE.APRORDRE%TYPE,
        NAPPORDRE                  ACTPROPHAAUDIENCE.APPORDRE%TYPE,
        NAPAORDRE                  ACTPROPHAAUDIENCE.APAORDRE%TYPE,
        DTAPADTAUDIENCE            ACTPROPHAAUDIENCE.APADTAUDIENCE%TYPE,
        NAPAFLAGRENVOI             ACTPROPHAAUDIENCE.APAFLAGRENVOI%TYPE,
        SAPADECISION               ACTPROPHAAUDIENCE.APADECISION%TYPE,
        DTAPADTDECISION            ACTPROPHAAUDIENCE.APADTDECISION%TYPE,
        NACTIDHUISSIER             ACTPROPHAAUDIENCE.ACTIDHUISSIER%TYPE,
        SAPAEXPERTISE              ACTPROPHAAUDIENCE.APAEXPERTISE%TYPE,
        SAPACONDAMNE               ACTPROPHAAUDIENCE.APACONDAMNE%TYPE,
        NAPAFLAGEXECPROV           ACTPROPHAAUDIENCE.APAFLAGEXECPROV%TYPE,
        DTAPADTSIGNIFIE            ACTPROPHAAUDIENCE.APADTSIGNIFIE%TYPE,
        NAPADELAI                  ACTPROPHAAUDIENCE.APADELAI%TYPE,
        NAPAFLAGPOURVOI            ACTPROPHAAUDIENCE.APAFLAGPOURVOI%TYPE,
        NACTIDCOUR                 ACTPROPHAAUDIENCE.ACTIDCOUR%TYPE,
        NAPAFLAGDEMANDEUR          ACTPROPHAAUDIENCE.APAFLAGDEMANDEUR%TYPE,
        SAPAMEMO                   ACTPROPHAAUDIENCE.APAMEMO%TYPE,
        SAPATYPE                   ACTPROPHAAUDIENCE.APATYPE%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NNEWAPAORDRE   ACTPROPHAAUDIENCE.APAORDRE%TYPE;
        BEGIN
            SELECT NVL (MAX (APAORDRE), 0) + 1
              INTO NNEWAPAORDRE
              FROM ACTPROPHAAUDIENCE
             WHERE     ACTID = NACTID
                   AND APRORDRE = NAPRORDRE
                   AND APPORDRE = NAPPORDRE;

            INSERT INTO ACTPROPHAAUDIENCE (ACTID,
                                           APRORDRE,
                                           APPORDRE,
                                           APAORDRE,
                                           APADTAUDIENCE,
                                           APAFLAGRENVOI,
                                           APADECISION,
                                           APADTDECISION,
                                           ACTIDHUISSIER,
                                           APAEXPERTISE,
                                           APACONDAMNE,
                                           APAFLAGEXECPROV,
                                           APADTSIGNIFIE,
                                           APADELAI,
                                           APAFLAGPOURVOI,
                                           ACTIDCOUR,
                                           APAFLAGDEMANDEUR,
                                           APAMEMO,
                                           APATYPE)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NAPPORDRE,
                         NNEWAPAORDRE,
                         DTAPADTAUDIENCE,
                         NAPAFLAGRENVOI,
                         SAPADECISION,
                         DTAPADTDECISION,
                         NACTIDHUISSIER,
                         SAPAEXPERTISE,
                         SAPACONDAMNE,
                         NAPAFLAGEXECPROV,
                         DTAPADTSIGNIFIE,
                         NAPADELAI,
                         NAPAFLAGPOURVOI,
                         NACTIDCOUR,
                         NAPAFLAGDEMANDEUR,
                         SAPAMEMO,
                         SAPATYPE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_PPA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APD_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROPHAAUDIENCE;

    PROCEDURE U_ACTPROPHAAUDIENCE (
        NACTID                     ACTPROPHAAUDIENCE.ACTID%TYPE,
        NAPRORDRE                  ACTPROPHAAUDIENCE.APRORDRE%TYPE,
        NAPPORDRE                  ACTPROPHAAUDIENCE.APPORDRE%TYPE,
        NAPAORDRE                  ACTPROPHAAUDIENCE.APAORDRE%TYPE,
        DTAPADTAUDIENCE            ACTPROPHAAUDIENCE.APADTAUDIENCE%TYPE,
        NAPAFLAGRENVOI             ACTPROPHAAUDIENCE.APAFLAGRENVOI%TYPE,
        SAPADECISION               ACTPROPHAAUDIENCE.APADECISION%TYPE,
        DTAPADTDECISION            ACTPROPHAAUDIENCE.APADTDECISION%TYPE,
        NACTIDHUISSIER             ACTPROPHAAUDIENCE.ACTIDHUISSIER%TYPE,
        SAPAEXPERTISE              ACTPROPHAAUDIENCE.APAEXPERTISE%TYPE,
        SAPACONDAMNE               ACTPROPHAAUDIENCE.APACONDAMNE%TYPE,
        NAPAFLAGEXECPROV           ACTPROPHAAUDIENCE.APAFLAGEXECPROV%TYPE,
        DTAPADTSIGNIFIE            ACTPROPHAAUDIENCE.APADTSIGNIFIE%TYPE,
        NAPADELAI                  ACTPROPHAAUDIENCE.APADELAI%TYPE,
        NAPAFLAGPOURVOI            ACTPROPHAAUDIENCE.APAFLAGPOURVOI%TYPE,
        NACTIDCOUR                 ACTPROPHAAUDIENCE.ACTIDCOUR%TYPE,
        NAPAFLAGDEMANDEUR          ACTPROPHAAUDIENCE.APAFLAGDEMANDEUR%TYPE,
        SAPAMEMO                   ACTPROPHAAUDIENCE.APAMEMO%TYPE,
        SAPATYPE                   ACTPROPHAAUDIENCE.APATYPE%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTPROPHAAUDIENCE
               SET APADTAUDIENCE = DTAPADTAUDIENCE,
                   APAFLAGRENVOI = NAPAFLAGRENVOI,
                   APADECISION = SAPADECISION,
                   APADTDECISION = DTAPADTDECISION,
                   ACTIDHUISSIER = NACTIDHUISSIER,
                   APAEXPERTISE = SAPAEXPERTISE,
                   APACONDAMNE = SAPACONDAMNE,
                   APAFLAGEXECPROV = NAPAFLAGEXECPROV,
                   APADTSIGNIFIE = DTAPADTSIGNIFIE,
                   APADELAI = NAPADELAI,
                   APAFLAGPOURVOI = NAPAFLAGPOURVOI,
                   ACTIDCOUR = NACTIDCOUR,
                   APAFLAGDEMANDEUR = NAPAFLAGDEMANDEUR,
                   APAMEMO = SAPAMEMO,
                   APATYPE = SAPATYPE
             WHERE     ACTID = NACTID
                   AND APRORDRE = NAPRORDRE
                   AND APPORDRE = NAPPORDRE
                   AND APAORDRE = NAPAORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_PPA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APD_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPROPHAAUDIENCE;

    PROCEDURE P_PROCINDIVIDUELLE (
        NCREID         IN     CREVT.CREID%TYPE,
        SDESTINATION   IN     LANTTRPARAM.TTPCODE%TYPE,
        NNUMID         IN     NUMBER,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            IF SDESTINATION = 'CHANTIER'
            THEN
                UPDATE CREVT
                   SET CHAID = NNUMID, CRECODEORIGINE = SDESTINATION
                 WHERE CREID = NCREID;
            ELSIF SDESTINATION = 'BIEN'
            THEN
                UPDATE CREVT
                   SET BIMID = NNUMID, CRECODEORIGINE = SDESTINATION
                 WHERE CREID = NCREID;
            ELSIF SDESTINATION = 'DOSSIER'
            THEN
                UPDATE CREVT
                   SET DOSID = NNUMID, CRECODEORIGINE = SDESTINATION
                 WHERE CREID = NCREID;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := 0;
        END;
    END P_PROCINDIVIDUELLE;

    PROCEDURE P_VERIFNUMPROCEDURE (SAPRNUM       IN     ACTPROCEDURE.APRNUM%TYPE,
                                   NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            NRETURNCODE := 0;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM ACTPROCEDURE
             WHERE APRNUM = SAPRNUM;

            IF NCOUNT >= 1
            THEN
                NRETURNCODE := -1;
            END IF;
        END;
    END P_VERIFNUMPROCEDURE;

    -- ACTUNITE --
    PROCEDURE I_ACTUNITE (
        NACTID                    ACTUNITE.ACTID%TYPE,
        NAADORDRE                 ACTUNITE.AADORDRE%TYPE,
        NAUNORDRE                 ACTUNITE.AUNORDRE%TYPE,
        SAUNINTITULE              ACTUNITE.AUNINTITULE%TYPE,
        STMPCODE                  ACTUNITE.TMPCODE%TYPE,
        NRIBID                    ACTUNITE.RIBID%TYPE,
        NACOORDRE                 ACTUNITE.ACOORDRE%TYPE,
        SAUNDELAIPMT              ACTUNITE.AUNDELAIPMT%TYPE,
        NAUNJOUR                  ACTUNITE.AUNJOUR%TYPE,
        SAUNRECAPFAC              ACTUNITE.AUNRECAPFAC%TYPE,
        NAUNFACAVANCE             ACTUNITE.AUNFACAVANCE%TYPE,
        SAUNQUANTIEMEFAC          ACTUNITE.AUNQUANTIEMEFAC%TYPE,
        DTAUNDTDEB                ACTUNITE.AUNDTDEB%TYPE,
        DTAUNDTFIN                ACTUNITE.AUNDTFIN%TYPE,
        NCREID                    ACTUNITE.CREID%TYPE,
        NAUNUNITE                 ACTUNITE.AUNUNITE%TYPE,
        NACTIDGESTION             ACTUNITE.ACTIDGESTION%TYPE,
        SAUNPERIODE               ACTUNITE.AUNPERIODE%TYPE,
        NAUNMULTIPLE              ACTUNITE.AUNMULTIPLE%TYPE,
        NAUNGRPFAC                ACTUNITE.AUNGRPFAC%TYPE,
        NAUNGRPPRL                ACTUNITE.AUNGRPPRL%TYPE,
        SAUNRAISON1               ACTUNITE.AUNRAISON1%TYPE,
        SAUNRAISON2               ACTUNITE.AUNRAISON2%TYPE,
        SAUNCOMMENT               ACTUNITE.AUNCOMMENT%TYPE,
        SAUNREGLECLIENT           ACTUNITE.AUNREGLECLIENT%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTUNITE (ACTID,
                                  AADORDRE,
                                  AUNORDRE,
                                  AUNINTITULE,
                                  TMPCODE,
                                  RIBID,
                                  ACOORDRE,
                                  AUNDELAIPMT,
                                  AUNJOUR,
                                  AUNRECAPFAC,
                                  AUNFACAVANCE,
                                  AUNQUANTIEMEFAC,
                                  AUNDTDEB,
                                  AUNDTFIN,
                                  CREID,
                                  AUNUNITE,
                                  ACTIDGESTION,
                                  AUNPERIODE,
                                  AUNMULTIPLE,
                                  AUNGRPFAC,
                                  AUNGRPPRL,
                                  AUNRAISON1,
                                  AUNRAISON2,
                                  AUNCOMMENT,
                                  AUNREGLECLIENT)
                 VALUES (NACTID,
                         NAADORDRE,
                         NAUNORDRE,
                         SAUNINTITULE,
                         STMPCODE,
                         NRIBID,
                         NACOORDRE,
                         SAUNDELAIPMT,
                         NAUNJOUR,
                         SAUNRECAPFAC,
                         NAUNFACAVANCE,
                         SAUNQUANTIEMEFAC,
                         DTAUNDTDEB,
                         DTAUNDTFIN,
                         NCREID,
                         NAUNUNITE,
                         NACTIDGESTION,
                         SAUNPERIODE,
                         NAUNMULTIPLE,
                         NAUNGRPFAC,
                         NAUNGRPPRL,
                         SAUNRAISON1,
                         SAUNRAISON2,
                         SAUNCOMMENT,
                         SAUNREGLECLIENT);

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AUN_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADU_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTUNITE;

    PROCEDURE U_ACTUNITE (
        NACTID                    ACTUNITE.ACTID%TYPE,
        NAADORDRE                 ACTUNITE.AADORDRE%TYPE,
        NAUNORDRE                 ACTUNITE.AUNORDRE%TYPE,
        SAUNINTITULE              ACTUNITE.AUNINTITULE%TYPE,
        STMPCODE                  ACTUNITE.TMPCODE%TYPE,
        NRIBID                    ACTUNITE.RIBID%TYPE,
        NACOORDRE                 ACTUNITE.ACOORDRE%TYPE,
        SAUNDELAIPMT              ACTUNITE.AUNDELAIPMT%TYPE,
        NAUNJOUR                  ACTUNITE.AUNJOUR%TYPE,
        SAUNRECAPFAC              ACTUNITE.AUNRECAPFAC%TYPE,
        NAUNFACAVANCE             ACTUNITE.AUNFACAVANCE%TYPE,
        SAUNQUANTIEMEFAC          ACTUNITE.AUNQUANTIEMEFAC%TYPE,
        DTAUNDTDEB                ACTUNITE.AUNDTDEB%TYPE,
        DTAUNDTFIN                ACTUNITE.AUNDTFIN%TYPE,
        NCREID                    ACTUNITE.CREID%TYPE,
        NAUNUNITE                 ACTUNITE.AUNUNITE%TYPE,
        NACTIDGESTION             ACTUNITE.ACTIDGESTION%TYPE,
        SAUNPERIODE               ACTUNITE.AUNPERIODE%TYPE,
        NAUNMULTIPLE              ACTUNITE.AUNMULTIPLE%TYPE,
        NAUNGRPFAC                ACTUNITE.AUNGRPFAC%TYPE,
        NAUNGRPPRL                ACTUNITE.AUNGRPPRL%TYPE,
        SAUNRAISON1               ACTUNITE.AUNRAISON1%TYPE,
        SAUNRAISON2               ACTUNITE.AUNRAISON2%TYPE,
        SAUNCOMMENT               ACTUNITE.AUNCOMMENT%TYPE,
        SAUNREGLECLIENT           ACTUNITE.AUNREGLECLIENT%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTUNITE
               SET AUNINTITULE = SAUNINTITULE,
                   AADORDRE = NAADORDRE,
                   TMPCODE = STMPCODE,
                   RIBID = NRIBID,
                   ACOORDRE = NACOORDRE,
                   AUNDELAIPMT = SAUNDELAIPMT,
                   AUNJOUR = NAUNJOUR,
                   AUNRECAPFAC = SAUNRECAPFAC,
                   AUNFACAVANCE = NAUNFACAVANCE,
                   AUNQUANTIEMEFAC = SAUNQUANTIEMEFAC,
                   AUNDTDEB = DTAUNDTDEB,
                   AUNDTFIN = DTAUNDTFIN,
                   CREID = NCREID,
                   AUNUNITE = NAUNUNITE,
                   ACTIDGESTION = NACTIDGESTION,
                   AUNPERIODE = SAUNPERIODE,
                   AUNMULTIPLE = NAUNMULTIPLE,
                   AUNGRPFAC = NAUNGRPFAC,
                   AUNGRPPRL = NAUNGRPPRL,
                   AUNRAISON1 = SAUNRAISON1,
                   AUNRAISON2 = SAUNRAISON2,
                   AUNCOMMENT = SAUNCOMMENT,
                   AUNREGLECLIENT = SAUNREGLECLIENT
             WHERE ACTID = NACTID AND AUNORDRE = NAUNORDRE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AUN_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADU_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTUNITE;

    PROCEDURE D_ACTUNITE (NACTID               ACTUNITE.ACTID%TYPE,
                          NAUNORDRE            ACTUNITE.AUNORDRE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE ACTUNITE
             WHERE ACTID = NACTID AND AUNORDRE = NAUNORDRE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ADU_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTUNITE;

    --ALA 070606 waterfall D2
    PROCEDURE I_ACTRIBACCES (
        NACTID                   ACTRIBACCES.ACTID%TYPE,
        NRIBID                   ACTRIBACCES.RIBID%TYPE,
        NACTIDSIGNATURE          ACTRIBACCES.ACTIDSIGNATURE%TYPE,
        SARAACCESSTYPE           ACTRIBACCES.ARAACCESSTYPE%TYPE,
        DTARADTBEG               ACTRIBACCES.ARADTBEG%TYPE,
        DTARADTEND               ACTRIBACCES.ARADTEND%TYPE,
        NCREID                   ACTRIBACCES.CREID%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTRIBACCES (ACTID,
                                     RIBID,
                                     ACTIDSIGNATURE,
                                     ARAACCESSTYPE,
                                     ARADTBEG,
                                     ARADTEND,
                                     CREID)
                 VALUES (NACTID,
                         NRIBID,
                         NACTIDSIGNATURE,
                         SARAACCESSTYPE,
                         DTARADTBEG,
                         DTARADTEND,
                         NCREID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_I_PARENT_ARAC_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_I_VAL_ARAC_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_I_DUP_VAL_ON_ARAC_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRIBACCES;

    PROCEDURE U_ACTRIBACCES (
        NACTID                   ACTRIBACCES.ACTID%TYPE,
        NRIBID                   ACTRIBACCES.RIBID%TYPE,
        NACTIDSIGNATURE          ACTRIBACCES.ACTIDSIGNATURE%TYPE,
        SARAACCESSTYPE           ACTRIBACCES.ARAACCESSTYPE%TYPE,
        DTARADTBEG               ACTRIBACCES.ARADTBEG%TYPE,
        DTARADTEND               ACTRIBACCES.ARADTEND%TYPE,
        NCREID                   ACTRIBACCES.CREID%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTRIBACCES
               SET ARAACCESSTYPE = SARAACCESSTYPE,
                   ARADTBEG = DTARADTBEG,
                   ARADTEND = DTARADTEND,
                   CREID = NCREID
             WHERE     ACTID = NACTID
                   AND RIBID = NRIBID
                   AND ACTIDSIGNATURE = NACTIDSIGNATURE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_U_PARENT_ARAC_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_U_VAL_ARAC_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_U_DUP_VAL_ON_ARAC_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRIBACCES;

    PROCEDURE D_ACTRIBACCES (
        NACTID                   ACTRIBACCES.ACTID%TYPE,
        NRIBID                   ACTRIBACCES.RIBID%TYPE,
        NACTIDSIGNATURE          ACTRIBACCES.ACTIDSIGNATURE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE ACTRIBACCES
             WHERE     ACTID = NACTID
                   AND RIBID = NRIBID
                   AND ACTIDSIGNATURE = NACTIDSIGNATURE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_D_CHILD_ARAC_FOUND_CONST;
        END;
    END D_ACTRIBACCES;

    --ALA 110706 ACTRELPRODETAIL
    PROCEDURE I_ACTRELPRODETAIL (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTEUR.ACTID%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB              ACTRELATION.AREDTDEB%TYPE,
        NADEORDRE        IN OUT ACTRELPRODETAIL.ADEORDRE%TYPE,
        STATATTRIBUTE           ACTRELPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE               ACTRELPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            --ALA recuperer le max ADEORDRE
            SELECT MAX (ADEORDRE)
              INTO NADEORDRE
              FROM ACTRELPRODETAIL
             WHERE     ACTID = NACTID
                   AND ACTIDRELATION = NACTIDRELATION
                   AND TRECODE = STRECODE
                   AND AREDTDEB = DTAREDTDEB;

            IF NADEORDRE IS NULL
            THEN
                NADEORDRE := 1;
            ELSE
                NADEORDRE := NADEORDRE + 1;
            END IF;

            INSERT INTO ACTRELPRODETAIL (ACTID,
                                         ACTIDRELATION,
                                         TRECODE,
                                         AREDTDEB,
                                         ADEORDRE,
                                         TATATTRIBUTE,
                                         TDEVALUE)
                 VALUES (NACTID,
                         NACTIDRELATION,
                         STRECODE,
                         DTAREDTDEB,
                         NADEORDRE,
                         STATATTRIBUTE,
                         STDEVALUE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_I_PARENT_ADE_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_I_VAL_ADE_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_I_DUP_VAL_ON_ADE_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRELPRODETAIL;

    PROCEDURE U_ACTRELPRODETAIL (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTEUR.ACTID%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB              ACTRELATION.AREDTDEB%TYPE,
        NADEORDRE               ACTRELPRODETAIL.ADEORDRE%TYPE,
        STATATTRIBUTE           ACTRELPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE               ACTRELPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTRELPRODETAIL
               SET TATATTRIBUTE = STATATTRIBUTE, TDEVALUE = STDEVALUE
             WHERE     ACTID = NACTID
                   AND ACTIDRELATION = NACTIDRELATION
                   AND TRECODE = STRECODE
                   AND AREDTDEB = DTAREDTDEB
                   AND ADEORDRE = NADEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_U_PARENT_ADE_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_U_VAL_ADE_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_U_DUP_VAL_ON_ADE_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRELPRODETAIL;

    PROCEDURE D_ACTRELPRODETAIL (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTRELATION.ACTIDRELATION%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB              ACTRELATION.AREDTDEB%TYPE,
        NADEORDRE               ACTRELPRODETAIL.ADEORDRE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTRELPRODETAIL
                  WHERE     ACTID = NACTID
                        AND ACTIDRELATION = NACTIDRELATION
                        AND TRECODE = STRECODE
                        AND AREDTDEB = DTAREDTDEB
                        AND ADEORDRE = NADEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_D_CHILD_ADE_FOUND_CONST;
        END;
    END D_ACTRELPRODETAIL;

    -- LKACTCORADR --
    PROCEDURE I_LKACTCORADR (NACTID               ACTEUR.ACTID%TYPE,
                             NACOORDRE            LKACTCORADR.ACOORDRE%TYPE,
                             NAADORDRE            LKACTCORADR.AADORDRE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKACTCORADR (ACTID, ACOORDRE, AADORDRE)
                 VALUES (NACTID, NACOORDRE, NAADORDRE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_I_ACA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_VAL_I_ACA_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_DUP_VAL_I_ACA_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKACTCORADR;

    PROCEDURE U_LKACTCORADR (NACTID               ACTEUR.ACTID%TYPE,
                             NACOORDRE            LKACTCORADR.ACOORDRE%TYPE,
                             NAADORDRE            LKACTCORADR.AADORDRE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKACTCORADR
               SET AADORDRE = NAADORDRE
             WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_U_ACA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_U_ACA_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_U_ACA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKACTCORADR;

    PROCEDURE D_LKACTCORADR (NACTID               ACTEUR.ACTID%TYPE,
                             NACOORDRE            LKACTCORADR.ACOORDRE%TYPE,
                             NAADORDRE            LKACTCORADR.AADORDRE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKACTCORADR
                  WHERE     ACTID = NACTID
                        AND ACOORDRE = NACOORDRE
                        AND AADORDRE = NAADORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
        END;
    END D_LKACTCORADR;

    PROCEDURE D_ACTSPESERVICERATE (
        NACTID                   ACTEUR.ACTID%TYPE,
        SASPCODE                 ACTSPESERVICERATE.ASPCODE%TYPE,
        NACTIDGESTION            ACTSPESERVICERATE.ACTIDGESTION%TYPE,
        SROLCODE                 ACTSPESERVICERATE.ROLCODE%TYPE,
        DTAAGDTVALID             ACTSPESERVICERATE.AAGDTVALID%TYPE,
        SASRRATETYPE             ACTSPESERVICERATE.ASRRATETYPE%TYPE,
        SASRRATESUBTYPE          ACTSPESERVICERATE.ASRRATESUBTYPE%TYPE,
        DTASRDTBEG               ACTSPESERVICERATE.ASRDTBEG%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTSPESERVICERATE
                  WHERE     ACTID = NACTID
                        AND ASPCODE = SASPCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND ROLCODE = SROLCODE
                        AND AAGDTVALID = DTAAGDTVALID
                        AND ASRRATETYPE = SASRRATETYPE
                        AND ASRRATESUBTYPE = SASRRATESUBTYPE
                        AND ASRDTBEG = DTASRDTBEG;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_D_CHILD_ASR_FOUND_CONST;
        END;
    END D_ACTSPESERVICERATE;

    PROCEDURE U_ACTSPESERVICERATE (
        NACTID                   ACTEUR.ACTID%TYPE,
        SASPCODE                 ACTSPESERVICERATE.ASPCODE%TYPE,
        NACTIDGESTION            ACTSPESERVICERATE.ACTIDGESTION%TYPE,
        SROLCODE                 ACTSPESERVICERATE.ROLCODE%TYPE,
        DTAAGDTVALID             ACTSPESERVICERATE.AAGDTVALID%TYPE,
        SASRRATETYPE             ACTSPESERVICERATE.ASRRATETYPE%TYPE,
        SASRRATESUBTYPE          ACTSPESERVICERATE.ASRRATESUBTYPE%TYPE,
        DTASRDTBEG               ACTSPESERVICERATE.ASRDTBEG%TYPE,
        DTASRDTEND               ACTSPESERVICERATE.ASRDTEND%TYPE,
        NASRPRICE                ACTSPESERVICERATE.ASRPRICE%TYPE,
        SASRUNIT                 ACTSPESERVICERATE.ASRUNIT%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTSPESERVICERATE
               SET ASRDTEND = DTASRDTEND,
                   ASRPRICE = NASRPRICE,
                   ASRUNIT = SASRUNIT
             WHERE     ACTID = NACTID
                   AND ASPCODE = SASPCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID
                   AND ASRRATETYPE = SASRRATETYPE
                   AND ASRRATESUBTYPE = SASRRATESUBTYPE
                   AND ASRDTBEG = DTASRDTBEG;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_U_PARENT_ASR_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_U_VAL_ASR_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_U_DUP_VAL_ON_ASR_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTSPESERVICERATE;

    PROCEDURE I_ACTSPESERVICERATE (
        NACTID                   ACTEUR.ACTID%TYPE,
        SASPCODE                 ACTSPESERVICERATE.ASPCODE%TYPE,
        NACTIDGESTION            ACTSPESERVICERATE.ACTIDGESTION%TYPE,
        SROLCODE                 ACTSPESERVICERATE.ROLCODE%TYPE,
        DTAAGDTVALID             ACTSPESERVICERATE.AAGDTVALID%TYPE,
        SASRRATETYPE             ACTSPESERVICERATE.ASRRATETYPE%TYPE,
        SASRRATESUBTYPE          ACTSPESERVICERATE.ASRRATESUBTYPE%TYPE,
        DTASRDTBEG               ACTSPESERVICERATE.ASRDTBEG%TYPE,
        DTASRDTEND               ACTSPESERVICERATE.ASRDTEND%TYPE,
        NASRPRICE                ACTSPESERVICERATE.ASRPRICE%TYPE,
        SASRUNIT                 ACTSPESERVICERATE.ASRUNIT%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTSPESERVICERATE (ACTID,
                                           ASPCODE,
                                           ACTIDGESTION,
                                           ROLCODE,
                                           AAGDTVALID,
                                           ASRRATETYPE,
                                           ASRRATESUBTYPE,
                                           ASRDTBEG,
                                           ASRDTEND,
                                           ASRPRICE,
                                           ASRUNIT)
                 VALUES (NACTID,
                         SASPCODE,
                         NACTIDGESTION,
                         SROLCODE,
                         DTAAGDTVALID,
                         SASRRATETYPE,
                         SASRRATESUBTYPE,
                         DTASRDTBEG,
                         DTASRDTEND,
                         NASRPRICE,
                         SASRUNIT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_I_PARENT_ASR_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_I_VAL_ASR_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_I_DUP_VAL_ON_ASR_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTSPESERVICERATE;

    PROCEDURE D_ACTSPEATTRIBUTE (
        NACTID                 ACTEUR.ACTID%TYPE,
        SASPCODE               ACTSPEATTRIBUTE.ASPCODE%TYPE,
        NACTIDGESTION          ACTSPEATTRIBUTE.ACTIDGESTION%TYPE,
        SROLCODE               ACTSPEATTRIBUTE.ROLCODE%TYPE,
        DTAAGDTVALID           ACTSPEATTRIBUTE.AAGDTVALID%TYPE,
        SASATYPE               ACTSPEATTRIBUTE.ASATYPE%TYPE,
        DTASADTBEG             ACTSPEATTRIBUTE.ASADTBEG%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ACTSPEATTRIBUTE
                  WHERE     ACTID = NACTID
                        AND ASPCODE = SASPCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND ROLCODE = SROLCODE
                        AND AAGDTVALID = DTAAGDTVALID
                        AND ASATYPE = SASATYPE
                        AND ASADTBEG = DTASADTBEG;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_D_CHILD_ASA_FOUND_CONST;
        END;
    END D_ACTSPEATTRIBUTE;

    PROCEDURE U_ACTSPEATTRIBUTE (
        NACTID                 ACTEUR.ACTID%TYPE,
        SASPCODE               ACTSPEATTRIBUTE.ASPCODE%TYPE,
        NACTIDGESTION          ACTSPEATTRIBUTE.ACTIDGESTION%TYPE,
        SROLCODE               ACTSPEATTRIBUTE.ROLCODE%TYPE,
        DTAAGDTVALID           ACTSPEATTRIBUTE.AAGDTVALID%TYPE,
        SASATYPE               ACTSPEATTRIBUTE.ASATYPE%TYPE,
        DTASADTBEG             ACTSPEATTRIBUTE.ASADTBEG%TYPE,
        DTASADTEND             ACTSPEATTRIBUTE.ASADTEND%TYPE,
        SASAVALUE              ACTSPEATTRIBUTE.ASAVALUE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTSPEATTRIBUTE
               SET ASADTEND = DTASADTEND, ASAVALUE = SASAVALUE
             WHERE     ACTID = NACTID
                   AND ASPCODE = SASPCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID
                   AND ASADTBEG = DTASADTBEG;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_U_PARENT_ASA_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_U_VAL_ASA_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_U_DUP_VAL_ON_ASA_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTSPEATTRIBUTE;

    PROCEDURE I_ACTSPEATTRIBUTE (
        NACTID                 ACTEUR.ACTID%TYPE,
        SASPCODE               ACTSPEATTRIBUTE.ASPCODE%TYPE,
        NACTIDGESTION          ACTSPEATTRIBUTE.ACTIDGESTION%TYPE,
        SROLCODE               ACTSPEATTRIBUTE.ROLCODE%TYPE,
        DTAAGDTVALID           ACTSPEATTRIBUTE.AAGDTVALID%TYPE,
        SASATYPE               ACTSPEATTRIBUTE.ASATYPE%TYPE,
        DTASADTBEG             ACTSPEATTRIBUTE.ASADTBEG%TYPE,
        DTASADTEND             ACTSPEATTRIBUTE.ASADTEND%TYPE,
        SASAVALUE              ACTSPEATTRIBUTE.ASAVALUE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTSPEATTRIBUTE (ACTID,
                                         ASPCODE,
                                         ACTIDGESTION,
                                         ROLCODE,
                                         AAGDTVALID,
                                         ASATYPE,
                                         ASADTBEG,
                                         ASADTEND,
                                         ASAVALUE)
                 VALUES (NACTID,
                         SASPCODE,
                         NACTIDGESTION,
                         SROLCODE,
                         DTAAGDTVALID,
                         SASATYPE,
                         DTASADTBEG,
                         DTASADTEND,
                         SASAVALUE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_I_PARENT_ASA_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_I_VAL_ASA_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_I_DUP_VAL_ON_ASA_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTSPEATTRIBUTE;

    PROCEDURE D_ACTSERVICEAGREEMENT (
        NACTID                          ACTEUR.ACTID%TYPE,
        SASAAGREEMENTTYPE               ACTSERVICEAGREEMENT.ASAAGREEMENTTYPE%TYPE,
        SASAAGREEMENTREFERENCE          ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE,
        NACTIDGESTION                   ACTSERVICEAGREEMENT.ACTIDGESTION%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SASAAGRREF   ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE;
            NCOUNT       NUMBER;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM ACTSERVICEAGREEMENT
             WHERE     ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
                   AND ACTID = NACTID
                   AND (NACTIDGESTION IS NULL OR ACTIDGESTION = NACTIDGESTION)
                   AND ASADTBEG =
                       (SELECT MAX (ASADTBEG)
                          FROM ACTSERVICEAGREEMENT
                         WHERE ASAAGREEMENTTYPE = SASAAGREEMENTTYPE)
                   AND ASADTEND IS NULL;

            IF NCOUNT > 0 OR NACTIDGESTION IS NULL
            THEN
                DELETE FROM ACTSERVICEAGREEMENT
                      WHERE     ACTID = NACTID
                            AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
                            AND ASAAGREEMENTREFERENCE =
                                SASAAGREEMENTREFERENCE;

                NRETURNCODE := 0;
            ELSE
                -- tentative de supprimer un agrement qui n est pas le dernier par couple ( AAGREEMENTTYPE, ACTIDGESTION )
                NRETURNCODE := 9850;
            END IF;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_D_CHILD_AAG_FOUND_CONST;
        END;
    END D_ACTSERVICEAGREEMENT;

    PROCEDURE U_ACTSERVICEAGREEMENT (
        NACTID                               ACTEUR.ACTID%TYPE,
        SASAAGREEMENTTYPE                    ACTSERVICEAGREEMENT.ASAAGREEMENTTYPE%TYPE,
        SASAAGREEMENTREFERENCE               ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE,
        NACTIDGESTION                        ACTSERVICEAGREEMENT.ACTIDGESTION%TYPE,
        DTASADTSIGNATURE                     ACTSERVICEAGREEMENT.ASADTSIGNATURE%TYPE,
        DTASADTBEG                           ACTSERVICEAGREEMENT.ASADTBEG%TYPE,
        DTASADTEND                           ACTSERVICEAGREEMENT.ASADTEND%TYPE,
        DTASADTLASTRENEWAL                   ACTSERVICEAGREEMENT.ASADTLASTRENEWAL%TYPE,
        NASARENEWALFREQUENCY                 ACTSERVICEAGREEMENT.ASARENEWALFREQUENCY%TYPE,
        SUTICODE                             ACTSERVICEAGREEMENT.UTICODE%TYPE,
        NASAFLAGPOLICYAGREEMENT              ACTSERVICEAGREEMENT.ASAFLAGPOLICYAGREEMENT%TYPE,
        SASAPOLICYAGREEMENT                  ACTSERVICEAGREEMENT.ASAPOLICYAGREEMENTTYPE%TYPE,
        DTASADTSIGNPOLICYAGREEMENT           ACTSERVICEAGREEMENT.ASADTSIGNPOLICYAGREEMENT%TYPE,
        DTASADTSTARTPOLICYAGREEMENT          ACTSERVICEAGREEMENT.ASADTSTARTPOLICYAGREEMENT%TYPE,
        DTASADTENDPOLICYAGREEMENT            ACTSERVICEAGREEMENT.ASADTENDPOLICYAGREEMENT%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTSERVICEAGREEMENT
               SET ACTIDGESTION = NACTIDGESTION,
                   ASADTSIGNATURE = DTASADTSIGNATURE,
                   ASADTBEG = DTASADTBEG,
                   ASADTEND = DTASADTEND,
                   ASADTLASTRENEWAL = DTASADTLASTRENEWAL,
                   ASARENEWALFREQUENCY = NASARENEWALFREQUENCY,
                   UTICODE = SUTICODE,
                   ASAFLAGPOLICYAGREEMENT = NASAFLAGPOLICYAGREEMENT,
                   ASAPOLICYAGREEMENTTYPE = SASAPOLICYAGREEMENT,
                   ASADTSIGNPOLICYAGREEMENT = DTASADTSIGNPOLICYAGREEMENT,
                   ASADTSTARTPOLICYAGREEMENT = DTASADTSTARTPOLICYAGREEMENT,
                   ASADTENDPOLICYAGREEMENT = DTASADTENDPOLICYAGREEMENT
             WHERE     ACTID = NACTID
                   AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
                   AND ASAAGREEMENTREFERENCE = SASAAGREEMENTREFERENCE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_U_PARENT_AAG_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_U_VAL_AAG_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_U_DUP_VAL_ON_AAG_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTSERVICEAGREEMENT;

    PROCEDURE I_ACTSERVICEAGREEMENT (
        NACTID                               ACTEUR.ACTID%TYPE,
        SASAAGREEMENTTYPE                    ACTSERVICEAGREEMENT.ASAAGREEMENTTYPE%TYPE,
        SASAAGREEMENTREFERENCE               ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE,
        NACTIDGESTION                        ACTSERVICEAGREEMENT.ACTIDGESTION%TYPE,
        DTASADTSIGNATURE                     ACTSERVICEAGREEMENT.ASADTSIGNATURE%TYPE,
        DTASADTBEG                           ACTSERVICEAGREEMENT.ASADTBEG%TYPE,
        DTASADTEND                           ACTSERVICEAGREEMENT.ASADTEND%TYPE,
        DTASADTLASTRENEWAL                   ACTSERVICEAGREEMENT.ASADTLASTRENEWAL%TYPE,
        NASARENEWALFREQUENCY                 ACTSERVICEAGREEMENT.ASARENEWALFREQUENCY%TYPE,
        SUTICODE                             ACTSERVICEAGREEMENT.UTICODE%TYPE,
        NASAFLAGPOLICYAGREEMENT              ACTSERVICEAGREEMENT.ASAFLAGPOLICYAGREEMENT%TYPE,
        SASAPOLICYAGREEMENT                  ACTSERVICEAGREEMENT.ASAPOLICYAGREEMENTTYPE%TYPE,
        DTASADTSIGNPOLICYAGREEMENT           ACTSERVICEAGREEMENT.ASADTSIGNPOLICYAGREEMENT%TYPE,
        DTASADTSTARTPOLICYAGREEMENT          ACTSERVICEAGREEMENT.ASADTSTARTPOLICYAGREEMENT%TYPE,
        DTASADTENDPOLICYAGREEMENT            ACTSERVICEAGREEMENT.ASADTENDPOLICYAGREEMENT%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT    NUMBER;
            DTDTFIN   ACTSERVICEAGREEMENT.ASADTBEG%TYPE;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM ACTSERVICEAGREEMENT
             WHERE     ACTID = NACTID
                   AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
                   AND ASADTEND IS NULL;

            IF NCOUNT > 0
            THEN
                SELECT MAX (ASADTBEG)
                  INTO DTDTFIN
                  FROM ACTSERVICEAGREEMENT
                 WHERE     ACTID = NACTID
                       AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
                       AND ASADTEND IS NULL;

                IF DTDTFIN > (DTASADTBEG - 1)
                THEN
                    DTDTFIN := DTASADTBEG;
                ELSE
                    DTDTFIN := DTASADTBEG - 1;
                END IF;

                UPDATE ACTSERVICEAGREEMENT
                   SET ASADTEND = DTDTFIN
                 WHERE     ACTID = NACTID
                       AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
                       AND ASADTEND IS NULL;
            END IF;

            INSERT INTO ACTSERVICEAGREEMENT (ACTID,
                                             ASAAGREEMENTTYPE,
                                             ASAAGREEMENTREFERENCE,
                                             ACTIDGESTION,
                                             ASADTSIGNATURE,
                                             ASADTBEG,
                                             ASADTEND,
                                             ASADTLASTRENEWAL,
                                             ASARENEWALFREQUENCY,
                                             UTICODE,
                                             ASAFLAGPOLICYAGREEMENT,
                                             ASAPOLICYAGREEMENTTYPE,
                                             ASADTSIGNPOLICYAGREEMENT,
                                             ASADTSTARTPOLICYAGREEMENT,
                                             ASADTENDPOLICYAGREEMENT)
                 VALUES (NACTID,
                         SASAAGREEMENTTYPE,
                         SASAAGREEMENTREFERENCE,
                         NACTIDGESTION,
                         DTASADTSIGNATURE,
                         DTASADTBEG,
                         DTASADTEND,
                         DTASADTLASTRENEWAL,
                         NASARENEWALFREQUENCY,
                         SUTICODE,
                         NASAFLAGPOLICYAGREEMENT,
                         SASAPOLICYAGREEMENT,
                         DTASADTSIGNPOLICYAGREEMENT,
                         DTASADTSTARTPOLICYAGREEMENT,
                         DTASADTENDPOLICYAGREEMENT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_I_PARENT_AAG_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_I_VAL_AAG_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_I_DUP_VAL_ON_AAG_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTSERVICEAGREEMENT;

    PROCEDURE D_LKASPACO (NACTID                 ACTEUR.ACTID%TYPE,
                          SASPCODE               LKASPACO.ASPCODE%TYPE,
                          NACTIDGESTION          LKASPACO.ACTIDGESTION%TYPE,
                          SROLCODE               LKASPACO.ROLCODE%TYPE,
                          DTAAGDTVALID           LKASPACO.AAGDTVALID%TYPE,
                          NACOORDRE              LKASPACO.ACOORDRE%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKASPACO
                  WHERE     ACTID = NACTID
                        AND ASPCODE = SASPCODE
                        AND ACTIDGESTION = NACTIDGESTION
                        AND ROLCODE = SROLCODE
                        AND AAGDTVALID = DTAAGDTVALID
                        AND ACOORDRE = NACOORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_D_CHILD_AAC_FOUND_CONST;
        END;
    END D_LKASPACO;

    PROCEDURE U_LKASPACO (NACTID                 ACTEUR.ACTID%TYPE,
                          SASPCODE               LKASPACO.ASPCODE%TYPE,
                          NACTIDGESTION          LKASPACO.ACTIDGESTION%TYPE,
                          SROLCODE               LKASPACO.ROLCODE%TYPE,
                          DTAAGDTVALID           LKASPACO.AAGDTVALID%TYPE,
                          NACOORDRE              LKASPACO.ACOORDRE%TYPE,
                          NACOORDREOLD           LKASPACO.ACOORDRE%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKASPACO
               SET ACOORDRE = NACOORDRE
             WHERE     ACTID = NACTID
                   AND ASPCODE = SASPCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID
                   AND ACOORDRE = NACOORDREOLD;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_U_PARENT_AAC_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_U_VAL_AAC_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_U_DUP_VAL_ON_AAC_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKASPACO;

    PROCEDURE I_LKASPACO (NACTID                 ACTEUR.ACTID%TYPE,
                          SASPCODE               LKASPACO.ASPCODE%TYPE,
                          NACTIDGESTION          LKASPACO.ACTIDGESTION%TYPE,
                          SROLCODE               LKASPACO.ROLCODE%TYPE,
                          DTAAGDTVALID           LKASPACO.AAGDTVALID%TYPE,
                          NACOORDRE              LKASPACO.ACOORDRE%TYPE,
                          NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKASPACO (ACTID,
                                  ASPCODE,
                                  ACTIDGESTION,
                                  ROLCODE,
                                  AAGDTVALID,
                                  ACOORDRE)
                 VALUES (NACTID,
                         SASPCODE,
                         NACTIDGESTION,
                         SROLCODE,
                         DTAAGDTVALID,
                         NACOORDRE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_I_PARENT_AAC_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_I_VAL_AAC_NULL_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_I_DUP_VAL_ON_AAC_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKASPACO;

    --MME 25042007
    /*PROCEDURE U_ACTRIBCOMPTE (
    nActId               ACTEUR.ACTID%TYPE,
    nRibId        IN OUT RIB.RIBID%TYPE,
    sBguBanque           RIB.BGUBANQUE%TYPE,
    sBguGuichet          RIB.BGUGUICHET%TYPE,
    sRibCompte           RIB.RIBCOMPTE%TYPE,
    sRibCle              RIB.RIBCLE%TYPE,
    sRibIntitule         RIB.RIBINTITULE%TYPE,
    nRinDelaiP           RIBINFO.RINDELAIP%TYPE,
    nRinDelaiV           RIBINFO.RINDELAIV%TYPE,
    nRinValRemHp         RIBINFO.RINVALREMHP%TYPE,
    nRinValRemSp         RIBINFO.RINVALREMSP%TYPE,
    nRinValVir           RIBINFO.RINVALVIR%TYPE,
    nRinValPrl           RIBINFO.RINVALPRL%TYPE,
    nRinValChq           RIBINFO.RINVALCHQ%TYPE,
    nRinForcePrl         RIBINFO.RINFORCEPRL%TYPE,
    nRinForceVir         RIBINFO.RINFORCEVIR%TYPE,
    sAriType             ACTRIB.ARITYPE%TYPE,
    dtAriDtDeb           ACTRIB.ARIDTDEB%TYPE,
    nRibIBANCle          RIB.RIBIBANCLE%TYPE,
    sRibIBANCompte       RIB.RIBIBANCOMPTE%TYPE,
    sBguGuichetInvariant RIB.BGUGUICHETINVARIANT%TYPE,
    nReturnCode          IN OUT NUMBER ) AS
    BEGIN
    DECLARE
    nOkModif          NUMBER;
    nNewRibId  RIB.RIBID%TYPE;
    nCount     NUMBER;
    bAppCre                          BOOLEAN;
    CURSOR c1 IS
    SELECT ACTID,
    RIBID,
    ACTIDSIGNATURE,
    ARAACCESSTYPE,
    ARADTBEG,
    ARADTEND,
    CREID
    FROM   ACTRIBACCES
    WHERE  ACTID = nActId
    AND    RIBID = nRibId;
    CURSOR clTmp IS
    SELECT ACTID,
    TMPCODE,
    ATDTYPE,
    RIBID
    FROM ACTRIBTMPDEFAUT
    WHERE  ACTID = nActId
    AND    RIBID = nRibId;
    BEGIN
    --modification ou pas du RIB
    SELECT COUNT(*)    INTO   nOkModif   FROM   RIB
    WHERE  RIBID = nRibId
    AND               (BGUBANQUE  != sBguBanque
    OR  BGUGUICHET != sBguGuichet
    OR RIBCOMPTE  != sRibCompte
    or RIBCLE     != sRibCle
    or RIBIBANCLE != nRibIBANCle
    or RIBIBANCOMPTE != sRibIBANCompte);
    bAppCre := FALSE;
    IF nOkModif > 0 THEN
    --modification du RIB
    SELECT  COUNT(*)           INTO    nCount      FROM    RIB
    WHERE   BGUBANQUE  = sBguBanque
    AND  BGUGUICHET = sBguGuichet
    AND  RIBCOMPTE  = sRibCompte
    AND  RIBCLE     = sRibCle;
    --recherche si RIB deja present en base
    IF nCount > 0 THEN
    --RIB deja present en base sous un autre id
    SELECT Max(RIBID)          INTO nNewRibId              FROM   RIB
    WHERE  BGUBANQUE  = sBguBanque
    AND  BGUGUICHET = sBguGuichet
    AND  RIBCOMPTE  = sRibCompte
    AND  RIBCLE     = sRibCle;
    UPDATE               RIB
    SET                         BGUBANQUE  = sBguBanque,
    BGUGUICHET = sBguGuichet,
    RIBCOMPTE  = sRibCompte,
    RIBCLE     = sRibCle,
    RIBIBANCLE = nRibIBANCle,
    RIBIBANCOMPTE  =sRibIBANCompte
    WHERE                 RIBID    = nNewRibId;
    bAppCre := TRUE;
    ELSE
    --RIB non present en base
    --si RIB non utilise sous un autre acteur INSERTION sinon DELETE/INSERT avec nouveau ID
    SELECT COUNT(*)    INTO nCount    FROM ACTRIB
    WHERE RIBID = nRibId    AND ACTID != nActId;
    IF nCount = 0 THEN
    -- RIB non utilise sous un autre acteur INSERTION
    UPDATE               RIB
    SET                         BGUBANQUE  = sBguBanque,
    BGUGUICHET = sBguGuichet,
    RIBCOMPTE  = sRibCompte,
    RIBCLE     = sRibCle,
    RIBIBANCLE = nRibIBANCle,
    RIBIBANCOMPTE  =sRibIBANCompte
    WHERE                 RIBID    = nRibId;
    ELSE
    bAppCre := TRUE;
    END IF;
    END IF;
    IF bAppCre THEN
    -- RIB utilise avec autre acteur INSERT/DELETE nouveau ID
    I_ACTRIB2 ( nActId,nNewRibId,sBguBanque,sBguGuichet,sRibCompte,  sRibCle,sRibIntitule,
    nRinDelaiP,  nRinDelaiV,   nRinValRemHp,   nRinValRemSp, nRinValVir,   nRinValPrl,
    nRinValChq, nRinForcePrl,  nRinForceVir,  sAriType ,dtAriDtDeb ,nRibIBANCle ,
    sRibIBANCompte, sBguGuichetInvariant,nReturnCode );
    IF nReturnCode = 0 THEN
    FOR C1R IN C1 LOOP
    IF nReturnCode = 0 THEN
    D_ACTRIBACCES(nActId,nRibId,C1R.ACTIDSIGNATURE,nReturnCode);
    END IF;
    IF nReturnCode = 0 THEN
    I_ACTRIBACCES (              C1R.ACTID, nNewRibId, C1R.ACTIDSIGNATURE, C1R.ARAACCESSTYPE, C1R.ARADTBEG, C1R.ARADTEND, C1R.CREID, nReturnCode ) ;
    END IF;
    END LOOP;
    FOR CLRTMP IN clTmp LOOP
    IF nReturnCode = 0 THEN
    D_ACTRIBTMPDEFAUT ( CLRTMP.ACTID, nRibId, CLRTMP.ATDTYPE, CLRTMP.TMPCODE,nReturnCode);
    END IF;
    IF nReturnCode = 0 THEN
    I_ACTRIBTMPDEFAUT ( CLRTMP.ACTID, nNewRibId, CLRTMP.ATDTYPE, CLRTMP.TMPCODE,nReturnCode);
    END IF;
    END LOOP;
    IF nReturnCode = 0 THEN
    D_ACTRIB(nRibId,nActId,nReturnCode);
    END IF;
    IF nReturnCode = 0 THEN
    nRibId :=  nNewRibId;
    END IF;
    END IF;
    END IF;
    END IF;
    END;
    END U_ACTRIBCOMPTE;*/
    PROCEDURE U_ACTRIBCOMPTE (
        NACTID                               ACTEUR.ACTID%TYPE,
        NRIBID                        IN OUT RIB.RIBID%TYPE,
        SBGUBANQUE                           RIB.BGUBANQUE%TYPE,
        SBGUGUICHET                          RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE                           RIB.RIBCOMPTE%TYPE,
        SRIBCLE                              RIB.RIBCLE%TYPE,
        SRIBINTITULE                         RIB.RIBINTITULE%TYPE,
        NRINDELAIP                           RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV                           RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP                         RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP                         RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR                           RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL                           RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ                           RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL                         RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR                         RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE                             ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB                           ACTRIB.ARIDTDEB%TYPE,
        NRIBIBANCLE                          RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTE                       RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVARIANT                 RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODE                             RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE            IN OUT ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE                      RIB.RIBACCOUNTTYPE%TYPE,
        --
        SBGUBANQUEINTERMEDIATE               RIB.BGUBANQUE%TYPE,
        SBGUGUICHETINTERMEDIATE              RIB.BGUGUICHET%TYPE,
        SRIBCOMPTEINTERMEDIATE               RIB.RIBCOMPTE%TYPE,
        SRIBCLEINTERMEDIATE                  RIB.RIBCLE%TYPE,
        SRIBINTITULEINTERMEDIATE             RIB.RIBINTITULE%TYPE,
        NRINDELAIPINTERMEDIATE               RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE               RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE             RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE             RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE               RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE               RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE               RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE             RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE             RIBINFO.RINFORCEVIR%TYPE,
        NRIBIBANCLEINTERMEDIATE              RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTEINTERMEDIATE           RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVINTERMEDIATE           RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE                 RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE          RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE                   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NOKMODIF    NUMBER;
            NNEWRIBID   RIB.RIBID%TYPE;
            NCOUNT      NUMBER;
            BAPPCRE     BOOLEAN;

            CURSOR C1
            IS
                SELECT ACTID,
                       RIBID,
                       ACTIDSIGNATURE,
                       ARAACCESSTYPE,
                       ARADTBEG,
                       ARADTEND,
                       CREID
                  FROM ACTRIBACCES
                 WHERE ACTID = NACTID AND RIBID = NRIBID;

            CURSOR CLTMP
            IS
                SELECT ACTID,
                       TMPCODE,
                       ATDTYPE,
                       RIBID
                  FROM ACTRIBTMPDEFAUT
                 WHERE ACTID = NACTID AND RIBID = NRIBID;
        BEGIN
            --modification ou pas du RIB
            SELECT COUNT (*)
              INTO NOKMODIF
              FROM RIB
             WHERE     RIBID = NRIBID
                   AND (   BGUBANQUE != SBGUBANQUE
                        OR BGUGUICHET != SBGUGUICHET
                        OR RIBCOMPTE != SRIBCOMPTE
                        OR RIBCLE != SRIBCLE
                        OR RIBIBANCLE != NRIBIBANCLE
                        OR RIBIBANCOMPTE != SRIBIBANCOMPTE);

            BAPPCRE := FALSE;

            IF NOKMODIF > 0
            THEN
                --modification du RIB
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM RIB
                 WHERE     BGUBANQUE = SBGUBANQUE
                       AND BGUGUICHET = SBGUGUICHET
                       AND RIBCOMPTE = SRIBCOMPTE
                       AND RIBCLE = SRIBCLE;

                --recherche si RIB deja present en base
                IF NCOUNT > 0
                THEN
                    --RIB deja present en base sous un autre id
                    SELECT MAX (RIBID)
                      INTO NNEWRIBID
                      FROM RIB
                     WHERE     BGUBANQUE = SBGUBANQUE
                           AND BGUGUICHET = SBGUGUICHET
                           AND RIBCOMPTE = SRIBCOMPTE
                           AND RIBCLE = SRIBCLE;

                    UPDATE RIB
                       SET BGUBANQUE = SBGUBANQUE,
                           BGUGUICHET = SBGUGUICHET,
                           RIBCOMPTE = SRIBCOMPTE,
                           RIBCLE = SRIBCLE,
                           RIBIBANCLE = NRIBIBANCLE,
                           RIBIBANCOMPTE = SRIBIBANCOMPTE
                     WHERE RIBID = NNEWRIBID;

                    BAPPCRE := TRUE;
                ELSE
                    --RIB non present en base
                    --si RIB non utilise sous un autre acteur INSERTION sinon DELETE/INSERT avec nouveau ID
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM ACTRIB
                     WHERE RIBID = NRIBID AND ACTID != NACTID;

                    IF NCOUNT = 0
                    THEN
                        -- RIB non utilise sous un autre acteur INSERTION
                        UPDATE RIB
                           SET BGUBANQUE = SBGUBANQUE,
                               BGUGUICHET = SBGUGUICHET,
                               RIBCOMPTE = SRIBCOMPTE,
                               RIBCLE = SRIBCLE,
                               RIBIBANCLE = NRIBIBANCLE,
                               RIBIBANCOMPTE = SRIBIBANCOMPTE
                         WHERE RIBID = NRIBID;
                    ELSE
                        BAPPCRE := TRUE;
                    END IF;
                END IF;

                IF BAPPCRE
                THEN
                    -- RIB utilise avec autre acteur INSERT/DELETE nouveau ID
                    I_ACTRIB2 (NACTID,
                               NNEWRIBID,
                               SBGUBANQUE,
                               SBGUGUICHET,
                               SRIBCOMPTE,
                               SRIBCLE,
                               SRIBINTITULE,
                               NRINDELAIP,
                               NRINDELAIV,
                               NRINVALREMHP,
                               NRINVALREMSP,
                               NRINVALVIR,
                               NRINVALPRL,
                               NRINVALCHQ,
                               NRINFORCEPRL,
                               NRINFORCEVIR,
                               SARITYPE,
                               DTARIDTDEB,
                               NRIBIBANCLE,
                               SRIBIBANCOMPTE,
                               SBGUGUICHETINVARIANT,
                               SDEVCODE,
                               NRIBIDINTERMEDIATE,
                               SRIBACCOUNTTYPE,
                               SBGUBANQUEINTERMEDIATE,
                               SBGUGUICHETINTERMEDIATE,
                               SRIBCOMPTEINTERMEDIATE,
                               SRIBCLEINTERMEDIATE,
                               SRIBINTITULEINTERMEDIATE,
                               NRINDELAIPINTERMEDIATE,
                               NRINDELAIVINTERMEDIATE,
                               NRINVALREMHPINTERMEDIATE,
                               NRINVALREMSPINTERMEDIATE,
                               NRINVALVIRINTERMEDIATE,
                               NRINVALPRLINTERMEDIATE,
                               NRINVALCHQINTERMEDIATE,
                               NRINFORCEPRLINTERMEDIATE,
                               NRINFORCEVIRINTERMEDIATE,
                               NRIBIBANCLEINTERMEDIATE,
                               SRIBIBANCOMPTEINTERMEDIATE,
                               SBGUGUICHETINVINTERMEDIATE,
                               SDEVCODEINTERMEDIATE,
                               SRIBACCOUNTTYPEINTERMEDIATE,
                               NRETURNCODE);

                    IF NRETURNCODE = 0
                    THEN
                        FOR C1R IN C1
                        LOOP
                            IF NRETURNCODE = 0
                            THEN
                                D_ACTRIBACCES (NACTID,
                                               NRIBID,
                                               C1R.ACTIDSIGNATURE,
                                               NRETURNCODE);
                            END IF;

                            IF NRETURNCODE = 0
                            THEN
                                I_ACTRIBACCES (C1R.ACTID,
                                               NNEWRIBID,
                                               C1R.ACTIDSIGNATURE,
                                               C1R.ARAACCESSTYPE,
                                               C1R.ARADTBEG,
                                               C1R.ARADTEND,
                                               C1R.CREID,
                                               NRETURNCODE);
                            END IF;
                        END LOOP;

                        FOR CLRTMP IN CLTMP
                        LOOP
                            IF NRETURNCODE = 0
                            THEN
                                D_ACTRIBTMPDEFAUT (CLRTMP.ACTID,
                                                   NRIBID,
                                                   CLRTMP.ATDTYPE,
                                                   CLRTMP.TMPCODE,
                                                   NRETURNCODE);
                            END IF;

                            IF NRETURNCODE = 0
                            THEN
                                I_ACTRIBTMPDEFAUT (CLRTMP.ACTID,
                                                   NNEWRIBID,
                                                   CLRTMP.ATDTYPE,
                                                   CLRTMP.TMPCODE,
                                                   NRETURNCODE);
                            END IF;
                        END LOOP;

                        IF NRETURNCODE = 0
                        THEN
                            D_ACTRIB (NRIBID, NACTID, NRETURNCODE);
                        END IF;

                        IF NRETURNCODE = 0
                        THEN
                            NRIBID := NNEWRIBID;
                        END IF;
                    END IF;
                END IF;
            END IF;
        END;
    END U_ACTRIBCOMPTE;

    --ACH 26/12/2004 CFS 26290
    PROCEDURE U_ACTEURNAFCODE (
        NACTID                 ACTEUR.ACTID%TYPE,
        SUGECODE               ACTEUR.UGECODE%TYPE,
        SUTICODE               ACTEUR.UTICODECREAT%TYPE,
        SNAFCODE               ACTEUR.NAFCODE%TYPE,
        DTACTDTDEBNAF          ACTEUR.ACTDTDEBNAF%TYPE,
        NTBAID                 TBATCH.TBAID%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    IS
    BEGIN
        DECLARE
            NCREID       CREVT.CREID%TYPE;
            SNAFCODEAN   ACTEUR.NAFCODE%TYPE;
            DTDATE       DATE;
            NCOUNT       NUMBER;
        BEGIN
            NRETURNCODE := 0;

            SELECT NAFCODE, ACTDTDEBNAF
              INTO SNAFCODEAN, DTDATE
              FROM ACTEUR
             WHERE ACTID = NACTID;

            --mise ? jour de la table acteur
            SELECT COUNT (*)
              INTO NCOUNT
              FROM NAF
             WHERE NAFCODE = SNAFCODE;

            IF NCOUNT = 0
            THEN
                NRETURNCODE := ERR_NAFCODE_NOTFOUND;
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE ACTEUR
                   SET NAFCODE = SNAFCODE, ACTDTDEBNAF = DTACTDTDEBNAF
                 WHERE ACTID = NACTID;

                --insertion dans CREVT
                SELECT SEQ_CREID.NEXTVAL INTO NCREID FROM DUAL;

                BEGIN
                    INSERT INTO CREVT (CREID,
                                       TACCODE,
                                       UTICODECREAT,
                                       UTICODEVALID,
                                       CREDTEFFET,
                                       CREDTCREAT,
                                       TMOMODULE,
                                       TMFFONCTION,
                                       TEVDEST,
                                       ACTID,
                                       TBAID,
                                       CREDTVALID)
                         VALUES (NCREID,
                                 'GLOBAL',
                                 SUTICODE,
                                 SUTICODE,
                                 TRUNC (DTACTDTDEBNAF),
                                 TRUNC (SYSDATE),
                                 'ACTEUR',
                                 'EVACT_NAFV2',
                                 'ACTEUR',
                                 NACTID,
                                 NTBAID,
                                 TRUNC (SYSDATE));
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NRETURNCODE := ERR_INSERTION_CREVT;
                END;
            END IF;

            --insertion dans CREDATA
            IF NRETURNCODE = 0
            THEN
                BEGIN
                    INSERT INTO CREDATA (CREID,
                                         CDAORDRE,
                                         CDATABLE,
                                         CDACOLONNE,
                                         CDADATASTRING)
                         VALUES (NCREID,
                                 1,
                                 'ACTEUR',
                                 'NAFCODE',
                                 SNAFCODEAN);

                    INSERT INTO CREDATA (CREID,
                                         CDAORDRE,
                                         CDATABLE,
                                         CDACOLONNE,
                                         CDADATASTRING)
                         VALUES (NCREID,
                                 2,
                                 'ACTEUR',
                                 'NEW_NAFCODE',
                                 SNAFCODE);

                    INSERT INTO CREDATA (CREID,
                                         CDAORDRE,
                                         CDATABLE,
                                         CDACOLONNE,
                                         CDADATADATE)
                         VALUES (NCREID,
                                 3,
                                 'ACTEUR',
                                 'ACTDTDEBNAF',
                                 DTDATE);

                    INSERT INTO CREDATA (CREID,
                                         CDAORDRE,
                                         CDATABLE,
                                         CDACOLONNE,
                                         CDADATADATE)
                         VALUES (NCREID,
                                 4,
                                 'ACTEUR',
                                 'NEW_ACTDTDEBNAF',
                                 DTACTDTDEBNAF);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
                END;
            END IF;
        END;
    END U_ACTEURNAFCODE;

    PROCEDURE I_ACTADRESSE (
        NADRID                IN OUT ADRESSE.ADRID%TYPE,
        SPAYCODE                     ADRESSE.PAYCODE%TYPE,
        SADRVOIE                     ADRESSE.ADRVOIE%TYPE,
        SADRLIEUDIT                  ADRESSE.ADRLIEUDIT%TYPE,
        SADRCODEPOST                 ADRESSE.ADRCODEPOST%TYPE,
        SADRVILLE                    ADRESSE.ADRVILLE%TYPE,
        SPRECODE                     ADRESSE.PRECODE%TYPE,
        SPRETYPE                     ADRESSE.PRETYPE%TYPE,
        DTADRDTMAJ                   ADRESSE.ADRDTMAJ%TYPE,
        SUTICODE                     ADRESSE.UTICODE%TYPE,
        SADRCEDEX                    ADRESSE.ADRCEDEX%TYPE,
        SADRSUBREGION                ADRESSE.ADRSUBREGION%TYPE,
        SADRMSACODE                  ADRESSE.ADRMSACODE%TYPE,
        --nAdrId ACTADRESSE.ADRID%TYPE,
        NACTID                       ACTEUR.ACTID%TYPE,
        NAADFLAGSIEGE                ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER             ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION          ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON            ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL                    ACTADRESSE.AADCOMPL%TYPE,
        --sUtiCode ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB                   ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE                    ACTADRESSE.AADORDRE%TYPE,
        NADRSTREETNUMBER             ADRESSE.ADRSTREETNUMBER%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
        NEWADRID      ADRESSE.ADRID%TYPE;
        NUMORDRE      NUMBER;
        DTDATEENDUR   DATE;
    --      NUMRETOUR parameter is missing so this line has been commented - // TODO
    --
    --                             IF ( NUMRETOUR != 0 ) THEN
    --                                             RETURN;
    --                             END IF;
    --             ELSE
    BEGIN
        BEGIN
            --      TABLE AVPARAMGENE IS MISSING SO THIS LINE HAS BEEN COMMENTED - TODO //
            --             select PGEDATE into dtDateEnDur from AVPARAMGENE where PGECODE ='APGACTDTDEB';
            --             exception when others then
            DTDATEENDUR := TRUNC (SYSDATE);
        END;

        IF NADRID IS NULL
        THEN
            PAV4_UPDATEACTEUR.I_ADRESSE (NADRID,
                                         SPAYCODE,
                                         SADRVOIE,
                                         SADRLIEUDIT,
                                         SADRCODEPOST,
                                         SADRVILLE,
                                         SPRECODE,
                                         SPRETYPE,
                                         DTADRDTMAJ,
                                         SUTICODE,
                                         SADRCEDEX,
                                         SADRSUBREGION,
                                         SADRMSACODE,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NADRSTREETNUMBER,
                                         NRETURNCODE);
            --nReturnCode IN OUT NUMBER  ); ;    -- nReturnCode IN OUT NUMBER) AS
            NEWADRID := NADRID;
        END IF;

        BEGIN
            SELECT NVL (MAX (AADORDRE) + 1, 1)
              INTO NUMORDRE
              FROM ACTADRESSE
             WHERE ACTID = NACTID;
        EXCEPTION
            WHEN OTHERS
            THEN
                NUMORDRE := 1;
        END;

        PAV4_UPDATEACTEUR.I_ACTADRESSE (NADRID,
                                        NACTID,
                                        NAADFLAGSIEGE,
                                        NAADFLAGCOURRIER,
                                        NAADFLAGFACTURATION,
                                        NAADFLAGLIVRAISON,
                                        SAADCOMPL,
                                        SUTICODE,
                                        DTAADDTDEB,
                                        NAADORDRE,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NRETURNCODE); -- nReturnCode IN OUT NUMBER
    END I_ACTADRESSE;

    PROCEDURE U_ACTADRESSE (
        NACTID                       ACTEUR.ACTID%TYPE,
        NADRID                       ADRESSE.ADRID%TYPE,
        NAADORDREREMPLACE            ACTADRESSE.AADORDREREMPLACE%TYPE,
        NAADFLAGSIEGE                ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER             ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION          ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON            ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL                    ACTADRESSE.AADCOMPL%TYPE,
        DTAADDTREMPLACE              ACTADRESSE.AADDTMAJ%TYPE,
        NCREID                       CREVT.CREID%TYPE,
        SUTICODE                     ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB                   ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE                    ACTADRESSE.AADORDRE%TYPE,
        -- nAdrId              ADRESSE.ADRID%TYPE,
        SPAYCODE                     ADRESSE.PAYCODE%TYPE,
        --sUtiCode            ADRESSE.UTICODE%TYPE,
        SADRVOIE                     ADRESSE.ADRVOIE%TYPE,
        SADRLIEUDIT                  ADRESSE.ADRLIEUDIT%TYPE,
        SADRCODEPOST                 ADRESSE.ADRCODEPOST%TYPE,
        SADRVILLE                    ADRESSE.ADRVILLE%TYPE,
        SPRECODE                     ADRESSE.PRECODE%TYPE,
        SPRETYPE                     ADRESSE.PRETYPE%TYPE,
        DTADRDTMAJ                   ADRESSE.ADRDTMAJ%TYPE,
        SADRCEDEX                    ADRESSE.ADRCEDEX%TYPE,
        SADRSUBREGION                ADRESSE.ADRSUBREGION%TYPE,
        SADRMSACODE                  ADRESSE.ADRMSACODE%TYPE,
        NADRSTREETNUMBER             ADRESSE.ADRSTREETNUMBER%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
        DTADDDTDEB   DATE;
    --
    --             nAadOrdreRemplace                     ACTADRESSE.AadOrdreRemplace%TYPE := NULL;
    --             sAadCompl                                                                                         ACTADRESSE.AADCOMPL%TYPE := NULL;
    --             dtAadDtRemplace                                           ACTADRESSE.AADDTMAJ%TYPE := NULL;
    --nCreID                                                                                                               CREVT.CREID%TYPE := NULL;
    BEGIN
        PAV4_UPDATEACTEUR.U_ADRESSE (NADRID,
                                     SPAYCODE,
                                     SUTICODE,
                                     SADRVOIE,
                                     SADRLIEUDIT,
                                     SADRCODEPOST,
                                     SADRVILLE,
                                     SPRECODE,
                                     SPRETYPE,
                                     DTADRDTMAJ,
                                     SADRCEDEX,
                                     SADRSUBREGION,
                                     SADRMSACODE,
                                     NADRSTREETNUMBER,
                                     NRETURNCODE); -- nReturnCode IN OUT NUMBER) AS

        IF NRETURNCODE = 0
        THEN
            --                             SELECT AADDTDEB,
            --                                                                                                             AadOrdreRemplace,
            --                                                                                                             AADDTREMPLACE,
            --                                                                                                             CREID
            --                             INTO      dtADDDTDEB,
            --                                                                                             nAadOrdreRemplace,
            --                                                                                             dtAadDtRemplace,
            --                                                                                             nCreID
            --                             FROM ACTADRESSE
            --                             WHERE ACTID                    = nActId
            --                             AND                       AADORDRE         = nAadOrdre;
            PAV4_UPDATEACTEUR.U_ACTADRESSE (NACTID,
                                            NADRID,
                                            NAADORDREREMPLACE,
                                            NAADFLAGSIEGE,
                                            NAADFLAGCOURRIER,
                                            NAADFLAGFACTURATION,
                                            NAADFLAGLIVRAISON,
                                            SAADCOMPL,
                                            DTAADDTREMPLACE,
                                            NCREID,
                                            SUTICODE,
                                            DTAADDTDEB,
                                            NAADORDRE,
                                            NRETURNCODE);
        -- nReturnCode N OUT NUMBER AS
        END IF;
    END U_ACTADRESSE;

    -- ACTTELCOR --
    PROCEDURE I_ACTTELCOR (
        NACTID                   ACTEUR.ACTID%TYPE,
        NATEORDRE                ACTTELECOM.ATEORDRE%TYPE,
        SATENUM                  ACTTELECOM.ATENUM%TYPE,
        SATETYPE                 ACTTELECOM.ATETYPE%TYPE,
        --dtAteDtEffet ACTTELECOM.ATEDTEFFET%TYPE,
        DTATEDTFIN               ACTTELECOM.ATEDTFIN%TYPE,
        NATEFLAGTELECOM          ACTTELECOM.ATEFLAGPREFERE%TYPE,
        NACOORDRE                LKACTTELCOR.ACOORDRE%TYPE,
        NATCFLAGPREFERE          LKACTTELCOR.ATCFLAGPREFERE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            DTATEDTEFFET   ACTTELECOM.ATEDTEFFET%TYPE := SYSDATE;
        BEGIN
            PAV4_UPDATEACTEUR.I_ACTTELECOM (NACTID,
                                            NATEORDRE,
                                            SATENUM,
                                            SATETYPE,
                                            DTATEDTEFFET,
                                            DTATEDTFIN,
                                            NATEFLAGTELECOM,
                                            NRETURNCODE);
        END;

        BEGIN
            PAV4_UPDATEACTEUR.I_LKACTTELCOR (NACTID,
                                             NACOORDRE,
                                             NATEORDRE,
                                             NATCFLAGPREFERE,
                                             NRETURNCODE);
        END;
    END I_ACTTELCOR;

    PROCEDURE U_ACTTELCOR (
        NACTID                   ACTEUR.ACTID%TYPE,
        NATEORDRE                ACTTELECOM.ATEORDRE%TYPE,
        NATENUM                  ACTTELECOM.ATENUM%TYPE,
        DTATEDTFIN               ACTTELECOM.ATEDTFIN%TYPE,
        NATEFLAGTELECOM          ACTTELECOM.ATEFLAGPREFERE%TYPE,
        --nActId ACTEUR.ACTID%TYPE,
        NACOORDRE                LKACTTELCOR.ACOORDRE%TYPE,
        -- nAteOrdre LKACTTELCOR.ATEORDRE%TYPE,
        NATCFLAGPREFERE          LKACTTELCOR.ATCFLAGPREFERE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        --Declare
        --dtAteDtEffet ACTTELECOM.ATEDTEFFET%TYPE :=sysdate;
        BEGIN
            PAV4_UPDATEACTEUR.U_ACTTELECOM (NACTID,
                                            NATEORDRE,
                                            NATENUM,
                                            DTATEDTFIN,
                                            NATEFLAGTELECOM,
                                            NRETURNCODE);
        END;

        BEGIN
            PAV4_UPDATEACTEUR.U_LKACTTELCOR (NACTID,
                                             NACOORDRE,
                                             NATEORDRE,
                                             NATCFLAGPREFERE,
                                             NRETURNCODE);
        END;
    END U_ACTTELCOR;

    PROCEDURE P_EVACT_PL (
        NACTID                ACTEUR.ACTID%TYPE,
        STMOMODULE            TEVENEMENT.TMOMODULE%TYPE,
        STMFFONCTION          TEVENEMENT.TMFFONCTION%TYPE,
        STACCODE              TACTIVITE.TACCODE%TYPE,
        DTEFFET               ACTADRESSE.AADDTREMPLACE%TYPE,
        SUSER          IN     UTILISATEUR.UTICODE%TYPE,
        SUGECODE       IN     UTILISATEUR.UGECODE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        PACOM_UPDATEACTEUR_SHARED.P_EVACT_PL (NACTID,
                                              STMOMODULE,
                                              STMFFONCTION,
                                              STACCODE,
                                              DTEFFET,
                                              SUSER,
                                              SUGECODE,
                                              NRETURNCODE);
    END P_EVACT_PL;

    PROCEDURE P_UPDDOSDEPARTMENT (
        NCREID          IN     CREVT.CREID%TYPE,
        NACTIDGESTION   IN     ACTEUR.ACTID%TYPE,
        NACTID          IN     ACTEUR.ACTID%TYPE,
        SROLCODE        IN     ROLE.ROLCODE%TYPE,
        DTDATE          IN     DATE,
        SDEPARTMENT     IN     DOSSIER.DOSSECTGESTION%TYPE,
        SUTICODE        IN     UTILISATEUR.UTICODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        PACOM_UPDATEACTEUR_SHARED.P_UPDDOSDEPARTMENT (NCREID,
                                                      NACTIDGESTION,
                                                      NACTID,
                                                      SROLCODE,
                                                      DTDATE,
                                                      SDEPARTMENT,
                                                      SUTICODE,
                                                      NRETURNCODE);
    END P_UPDDOSDEPARTMENT;

    PROCEDURE P_UPDACTRATING (NCREID          IN     CREVT.CREID%TYPE,
                              NACTIDGESTION   IN     ACTEUR.ACTID%TYPE,
                              NACTID          IN     ACTEUR.ACTID%TYPE,
                              SROLCODE        IN     ROLE.ROLCODE%TYPE,
                              DTDATE          IN     DATE,
                              NTCOID          IN     TCOTATION.TCOID%TYPE,
                              STVACODE        IN     TCOVALEUR.TVACODE%TYPE,
                              NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NATVORDRE       NUMBER;
            ROWATV          ACTTCOVALEUR%ROWTYPE;
            NCREIDRATREMP   CREVT.CREID%TYPE;
            BCREEVT         BOOLEAN := FALSE; --- PAS DE NEW CREVT sur ACTEUR pour garder la possibilite de restaurer
            BINSERT         BOOLEAN := FALSE;
            SUSER           CREVT.UTICODECREAT%TYPE;
        BEGIN
            NRETURNCODE := 0;

            SELECT UTICODECREAT
              INTO SUSER
              FROM CREVT
             WHERE CREID = NCREID;

            SELECT MAX (ATVORDRE)
              INTO NATVORDRE
              FROM ACTTCOVALEUR
             WHERE TCOID = NTCOID AND ACTID = NACTID AND ATVDTFIN IS NULL;

            IF (NATVORDRE IS NOT NULL)
            THEN
                SELECT *
                  INTO ROWATV
                  FROM ACTTCOVALEUR
                 WHERE     ACTID = NACTID
                       AND TCOID = NTCOID
                       AND ATVORDRE = NATVORDRE;

                BCREEVT :=
                        (ROWATV.TVACODE != STVACODE)
                    AND (ROWATV.ATVDTDEB <= DTDATE);
            ELSE
                BCREEVT := TRUE;
            END IF;

            IF (BCREEVT)
            THEN
                NCREIDRATREMP := NCREID;

                /*PAV4_EVT4.I_EVT(
                'ACTEUR',
                'ACTEUR',
                'EVACT_RATREMP',
                nCreIdRatRemp,
                nActId,
                dtDate,
                'GLOBAL',
                0,
                sUser,
                nReturnCode );*/
                IF (NRETURNCODE = 0)
                THEN
                    BINSERT := TRUE;

                    IF (NATVORDRE IS NOT NULL)
                    THEN
                        IF (ROWATV.ATVDTDEB < DTDATE)
                        THEN
                            BEGIN
                                UPDATE ACTTCOVALEUR
                                   SET ATVDTFIN =
                                           GREATEST (ATVDTDEB, DTDATE - 1)
                                 WHERE     ACTID = NACTID
                                       AND TCOID = NTCOID
                                       AND ATVORDRE = NATVORDRE;

                                ROWATV.ATVORDRE := NULL;
                                ROWATV.TVACODE := STVACODE;
                                ROWATV.ATVDTDEB := DTDATE;
                                ROWATV.CREID := NCREIDRATREMP;
                                ROWATV.UTICODE := SUSER;
                                ROWATV.ATVDTMAJ := SYSDATE;
                                ROWATV.ATVDTFIN := NULL;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    BINSERT := FALSE;
                                    NRETURNCODE := -1 * SQLCODE;
                            END;
                        ELSIF (ROWATV.ATVDTDEB = DTDATE)
                        THEN
                            BEGIN
                                UPDATE ACTTCOVALEUR
                                   SET TVACODE = STVACODE
                                 WHERE     ACTID = NACTID
                                       AND TCOID = NTCOID
                                       AND ATVORDRE = NATVORDRE;

                                BINSERT := FALSE;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    BINSERT := FALSE;
                                    NRETURNCODE := -1 * SQLCODE;
                            END;
                        END IF;
                    ELSE                      -- IF ( nAtvOrdre IS NULL ) THEN
                        BINSERT := TRUE;
                        ROWATV.ACTID := NACTID;
                        ROWATV.ATVORDRE := NULL;
                        ROWATV.TCOID := NTCOID;
                        ROWATV.TVACODE := STVACODE;
                        ROWATV.ATVDTDEB := DTDATE;
                        ROWATV.CREID := NCREIDRATREMP;
                        ROWATV.UTICODE := SUSER;
                        ROWATV.ATVDTMAJ := SYSDATE;
                        ROWATV.ATVDTFIN := NULL;
                        ROWATV.ATVCODEEXTERNE := NULL;
                        ROWATV.ATVETABLISSEMENTPILOTE := NULL;
                        ROWATV.ATVETABLISSEMENTCOTEUR := NULL;
                        ROWATV.ATVFLAGFORCE := NULL;
                    END IF;

                    IF (NRETURNCODE = 0) AND (BINSERT)
                    THEN
                        SELECT NVL (MAX (ATVORDRE), 0) + 1
                          INTO ROWATV.ATVORDRE
                          FROM ACTTCOVALEUR
                         WHERE ACTID = NACTID AND TCOID = NTCOID;

                        PA_UPDATEACTEUR.I_ACTTCOVALEUR (
                            ROWATV.ACTID,
                            ROWATV.ATVORDRE,
                            ROWATV.TCOID,
                            ROWATV.TVACODE,
                            ROWATV.ATVDTDEB,
                            ROWATV.ATVDTFIN,
                            ROWATV.ATVDTMAJ,
                            ROWATV.UTICODE,
                            ROWATV.CREID,
                            ROWATV.ATVCODEEXTERNE,
                            ROWATV.ATVETABLISSEMENTCOTEUR,
                            ROWATV.ATVETABLISSEMENTPILOTE,
                            ROWATV.ATVFLAGFORCE,
                            NRETURNCODE);
                    END IF;
                /*IF ( nReturnCode = 0 ) AND ( nCreIdRatRemp IS NOT NULL ) THEN
                PA_EVT.I_CREDATA( nCreIdRatRemp, NULL, NULL, 'CREVT', 'CREIDMAITRE', NULL, NULL, nCreId, NULL, NULL, NULL, NULL, NULL, nReturnCode );
                IF ( nReturnCode = 0 ) THEN
                PACOM_EVT.U_EVT_VALIDE( nCreIdRatRemp, nReturnCode );
                END IF;
                END IF;*/
                END IF;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END P_UPDACTRATING;

    PROCEDURE P_EVTAXNEWSCHEDULE (
        NACTID                  ACTEUR.ACTID%TYPE,
        STMFFONCTION            CREVT.TMFFONCTION%TYPE,
        SZCECODE         IN OUT ZONCELTYPVALUE.ZCECODE%TYPE,
        SZTYCODE                ZONCELTYPVALUE.ZTYCODE%TYPE,
        DTZVADTBEG              ZONCELTYPVALUE.ZVADTBEG%TYPE,
        SZVADATASTRING          ZONCELTYPVALUE.ZVADATASTRING%TYPE,
        NZVAORDREOLD            ZONCELTYPVALUE.ZVAORDRE%TYPE,
        NZVAORDRENEW     IN OUT ZONCELTYPVALUE.ZVAORDRE%TYPE,
        NCREID           IN OUT CREVT.CREID%TYPE,
        SUSER            IN     UTILISATEUR.UTICODE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SLANGUE         ACTEUR.LANCODE%TYPE;
            SACTLIBCOURT    ACTEUR.ACTLIBCOURT%TYPE;
            NMOISEXIST      NUMBER;
            NANNEEEXIST     NUMBER;
            NNUMERO         NUMBER;
            SNUMFORMAT      ZONCELL.ZCECODE%TYPE;
            NACTIDGESTION   NUMBER;
            DTDATE          DATE;
            ERR_ZONE        EXCEPTION;
            ERR_DISPO       EXCEPTION;
            ERR_NULL        EXCEPTION;
            ERR_SCHEDULE    EXCEPTION;
        BEGIN
            PACOM_EVT.I_EVT ('ACTEUR',
                             'ACTEUR',
                             STMFFONCTION,
                             NCREID,
                             NACTID,
                             DTZVADTBEG,
                             'GLOBAL',
                             NULL,
                             SUSER,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE != 0
            THEN
                RAISE ERR_NULL;
            END IF;

            SELECT ACTLIBCOURT, LANCODE
              INTO SACTLIBCOURT, SLANGUE
              FROM ACTEUR
             WHERE ACTID = NACTID;

            IF SZCECODE IS NULL
            THEN
                --creation zone
                BEGIN
                    NMOISEXIST := 0;
                    NANNEEEXIST := 0;
                    NNUMERO := -1;
                    SNUMFORMAT := NULL;
                    NACTIDGESTION := NULL;
                    DTDATE := TRUNC (SYSDATE);
                    PA_COMMON.S_NUMEROFORMATE ('ZONE',
                                               NACTIDGESTION,
                                               'ZONEESCROW',
                                               DTDATE,
                                               NANNEEEXIST,
                                               NMOISEXIST,
                                               NNUMERO,
                                               SNUMFORMAT);

                    IF SNUMFORMAT IS NOT NULL
                    THEN
                        SZCECODE := SNUMFORMAT;

                        INSERT INTO ZONCELL (ZONCODE, ZCECODE)
                             VALUES ('ESCROW', SZCECODE);

                        INSERT INTO LANZONCELL (ZONCODE,
                                                ZCECODE,
                                                LANCODE,
                                                ZCELIBELLE)
                             VALUES ('ESCROW',
                                     SZCECODE,
                                     SLANGUE,
                                     SACTLIBCOURT);
                    END IF;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        RAISE ERR_ZONE;
                END;

                IF SZCECODE IS NULL
                THEN
                    RAISE ERR_ZONE;
                END IF;

                BEGIN
                    INSERT INTO ZONCELTYPE (ZONCODE,
                                            ZTYCODE,
                                            ZCECODE,
                                            ACTID)
                         VALUES ('ESCROW',
                                 SZTYCODE,
                                 SZCECODE,
                                 NACTID);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        RAISE ERR_DISPO;
                END;
            END IF;

            IF NZVAORDREOLD IS NOT NULL
            THEN
                UPDATE ZONCELTYPVALUE
                   SET ZVADTEND = DTZVADTBEG - 1
                 WHERE     ZONCODE = 'ESCROW'
                       AND ZCECODE = SZCECODE
                       AND ZTYCODE = SZTYCODE;
            END IF;

            SELECT MAX (ZVAORDRE)
              INTO NZVAORDRENEW
              FROM ZONCELTYPVALUE
             WHERE     ZONCODE = 'ESCROW'
                   AND ZCECODE = SZCECODE
                   AND ZTYCODE = SZTYCODE;

            NZVAORDRENEW := NVL (NZVAORDRENEW, 0) + 1;

            BEGIN
                INSERT INTO ZONCELTYPVALUE (ZONCODE,
                                            ZCECODE,
                                            ZTYCODE,
                                            ZVAORDRE,
                                            ZVADTBEG,
                                            ZVADTEND,
                                            ZVATYPE,
                                            DEVCODE,
                                            ZVADATANUMBER,
                                            ZVADATASTRING,
                                            ZVADATADATE,
                                            ZVADATABOOLEAN)
                     VALUES ('ESCROW',
                             SZCECODE,
                             SZTYCODE,
                             NZVAORDRENEW,
                             DTZVADTBEG,
                             NULL,
                             'ZONFREQUENCY',
                             NULL,
                             NULL,
                             SZVADATASTRING,
                             NULL,
                             NULL);
            EXCEPTION
                WHEN OTHERS
                THEN
                    RAISE ERR_SCHEDULE;
            END;

            PA_EVT.U_EVT_VALIDE (NCREID, SUSER, NRETURNCODE);
        EXCEPTION
            WHEN ERR_ZONE
            THEN
                NRETURNCODE := 10056;
            WHEN ERR_DISPO
            THEN
                NRETURNCODE := 10057;
            WHEN ERR_SCHEDULE
            THEN
                NRETURNCODE := 20653;
            WHEN ERR_NULL
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END P_EVTAXNEWSCHEDULE;

    PROCEDURE P_EVTAXNEWSCHEDULEDETAIL (
        NACTID               ACTEUR.ACTID%TYPE,
        SZCECODE             ZONCELTYPVALUE.ZCECODE%TYPE,
        SZTYCODE             ZONCELTYPVALUE.ZTYCODE%TYPE,
        NZVAORDRE            ZONCELTYPVALUE.ZVAORDRE%TYPE,
        NCREID               CREVT.CREID%TYPE,
        NORDRE               ZONCELTYPVALSCHEDULE.ZSCORDRE%TYPE,
        NDAYS                ZONCELTYPVALSCHEDULE.ZSCDAYS%TYPE,
        NMONTHS              ZONCELTYPVALSCHEDULE.ZSCMONTH%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            INSERT INTO ZONCELTYPVALSCHEDULE (ZONCODE,
                                              ZCECODE,
                                              ZTYCODE,
                                              ZVAORDRE,
                                              ZSCORDRE,
                                              ZSCDAYS,
                                              ZSCMONTH,
                                              ZSCYEAR)
                 VALUES ('ESCROW',
                         SZCECODE,
                         SZTYCODE,
                         NZVAORDRE,
                         NORDRE,
                         NDAYS,
                         NMONTHS,
                         NULL);
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := 20653;
        END;
    END P_EVTAXNEWSCHEDULEDETAIL;

    PROCEDURE P_AUTOINSERTACTEUR (NACTID               ACTEUR.ACTID%TYPE,
                                  NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAUTOREPRESENTATIVEON   NUMBER := 0;
            NAUTOCORPORATEON        NUMBER := 0;
            NAUTOEXTERNALREFON      NUMBER := 0;
            SEXTERNALREF            ACTROLE.AROREFEXTERNE%TYPE;
            NDEFAULTCOMPANY         ACTEUR.ACTID%TYPE;
            SACTCODE                ACTEUR.ACTCODE%TYPE;
            NACOORDRE               ACTCORRESPONDANT.ACOORDRE%TYPE := 1;
            NACTIDREPRESENT         ACTEUR.ACTID%TYPE := NULL;
            NACTIDCORPORATE         ACTEUR.ACTID%TYPE := NULL;
            SCJUCODE                ACTEUR.CJUCODE%TYPE := NULL;
            SNAFCODE                ACTEUR.NAFCODE%TYPE := NULL;
            NCVAID                  CCHVALUE.CVAID%TYPE := NULL;
            SCCHSID                 CCHVALUE.CCHSID%TYPE := NULL;

            CURSOR CORIGINALACTOR
            IS
                SELECT ACT.*,
                       APA.APATITRE,
                       APA.APAPRENOM,
                       APA.APANOMPATRONYMIQUE,
                       APA.APAMIDDLENAME
                  FROM ACTEUR ACT, ACTEURPARTICULIER APA
                 WHERE ACT.ACTID = NACTID AND APA.ACTID(+) = ACT.ACTID;
        BEGIN
            NRETURNCODE := 0;

            FOR CORIGINALACTORR IN CORIGINALACTOR
            LOOP
                PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                            'AUTOREPRESENTATIVE',
                                            CORIGINALACTORR.UGECODE,
                                            NAUTOREPRESENTATIVEON);
                PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                            'AUTOCORPORATE',
                                            CORIGINALACTORR.UGECODE,
                                            NAUTOCORPORATEON);

                IF     NAUTOREPRESENTATIVEON = 1
                   AND CORIGINALACTORR.ACTREPRESENTATIVE IS NOT NULL
                THEN
                    IF CORIGINALACTORR.ACTFLAGGUARANTOR = 1
                    THEN
                        BEGIN
                            SELECT ACTID
                              INTO NACTIDREPRESENT
                              FROM ACTEUR
                             WHERE ACTSIRET =
                                   CORIGINALACTORR.ACTREPRESENTATIVE;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NACTIDREPRESENT := NULL;
                        END;

                        IF NACTIDREPRESENT IS NULL
                        THEN
                            SACTCODE := NULL;

                            SELECT MIN (CJUCODE)
                              INTO SCJUCODE
                              FROM CATJURIDIQUE
                             WHERE     CJUTYPE = 'P'
                                   AND PAYCODE =
                                       CORIGINALACTORR.PAYCODECATJURIDIQUE;

                            BEGIN
                                SELECT NVL (DTRDEFAULTVALUE,
                                            CORIGINALACTORR.CJUCODE)
                                  INTO SCJUCODE
                                  FROM DATATRANSCODING
                                 WHERE     DTRCODE = 'CJUCODEPART'
                                       AND UGECODE = CORIGINALACTORR.UGECODE;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    SCJUCODE := CORIGINALACTORR.CJUCODE;
                            END;

                            BEGIN
                                SELECT NVL (DTRDEFAULTVALUE,
                                            CORIGINALACTORR.NAFCODE)
                                  INTO SNAFCODE
                                  FROM DATATRANSCODING
                                 WHERE     DTRCODE = 'NAFCODEPART'
                                       AND UGECODE = CORIGINALACTORR.UGECODE;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    SNAFCODE := CORIGINALACTORR.NAFCODE;
                            END;

                            I_ACTEUR (NACTIDREPRESENT,
                                      CORIGINALACTORR.UGECODE,
                                      CORIGINALACTORR.UTICODECREAT,
                                      SYSDATE,
                                      SACTCODE,
                                      SCJUCODE,
                                      CORIGINALACTORR.PAYCODECATJURIDIQUE,
                                      CORIGINALACTORR.UTICODEMAJ,
                                      CORIGINALACTORR.ACTREPRESENTNAME,
                                      CORIGINALACTORR.ACTNOM,
                                      NULL,
                                      CORIGINALACTORR.ACTREPRESENTATIVE,
                                      SYSDATE,
                                      CORIGINALACTORR.PAYCODE,
                                      CORIGINALACTORR.LANCODE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      SNAFCODE,
                                      CORIGINALACTORR.PAYCODENAF,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      CORIGINALACTORR.PAYCODE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      CORIGINALACTORR.APATITRE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      CORIGINALACTORR.DEVCODE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      CORIGINALACTORR.APANOMPATRONYMIQUE,
                                      CORIGINALACTORR.APAPRENOM,
                                      CORIGINALACTORR.APAMIDDLENAME,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      CORIGINALACTORR.ACTCHANNEL,
                                      CORIGINALACTORR.ACTCHANNELCODE,
                                      'PART',
                                      NULL,
                                      NULL,
                                      CORIGINALACTORR.ACTRESIDENTCODE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      'OK',
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
                            I_ACTPHASE (NACTIDREPRESENT,
                                        'INI',
                                        1,
                                        'ACTEUR',
                                        'OUVERT',
                                        SYSDATE,
                                        CORIGINALACTORR.UTICODEMAJ,
                                        SYSDATE,
                                        SYSDATE,
                                        NULL,
                                        NRETURNCODE);
                            PA_COM_COMMON.S_TPALOGIQUE (
                                'ACTEUR',
                                'ROLCOUNT',
                                CORIGINALACTORR.UGECODE,
                                NAUTOEXTERNALREFON);
                            NDEFAULTCOMPANY :=
                                PA_COM_COMMON.F_GETDEFAULTCOMPANY (
                                    CORIGINALACTORR.UTICODEMAJ);

                            IF NAUTOEXTERNALREFON = 1
                            THEN
                                SEXTERNALREF :=
                                       'GARANT'
                                    || PAV4_SELECTACTEUR.F_GET_ROLCODECOUNTER (
                                           'GARANT',
                                           NDEFAULTCOMPANY);
                            END IF;

                            I_ACTROLE (NACTIDREPRESENT,
                                       'GARANT',
                                       NULL,
                                       NULL,
                                       NULL,
                                       NULL,
                                       SEXTERNALREF,
                                       NULL,
                                       NULL,
                                       NULL,
                                       NULL,
                                       NULL,
                                       NULL,
                                       NULL,
                                       NULL,
                                       NRETURNCODE);
                            I_ACTAROAGE (NACTIDREPRESENT,
                                         'GARANT',
                                         NDEFAULTCOMPANY,
                                         SYSDATE,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,
                                         NULL,                       --phacode
                                         NULL,                       --jalcode
                                         NULL,                 --aagrefexterne
                                         NULL,                --aagdelaipmtenc
                                         NRETURNCODE);
                        END IF;
                    END IF;
                END IF;

                IF     NAUTOCORPORATEON = 1
                   AND CORIGINALACTORR.ACTCORPORATE IS NOT NULL
                THEN
                    BEGIN
                        SELECT ACTID
                          INTO NACTIDCORPORATE
                          FROM ACTEUR
                         WHERE     ACTSIRET = CORIGINALACTORR.ACTCORPORATE
                               AND ROWNUM = 1;
                    EXCEPTION
                        WHEN NO_DATA_FOUND
                        THEN
                            NACTIDCORPORATE := NULL;
                    END;

                    IF NACTIDCORPORATE IS NULL
                    THEN
                        BEGIN
                            SELECT NVL (DTRDEFAULTVALUE,
                                        CORIGINALACTORR.CJUCODE)
                              INTO SCJUCODE
                              FROM DATATRANSCODING
                             WHERE     DTRCODE = 'CJUCODEPM'
                                   AND UGECODE = CORIGINALACTORR.UGECODE;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                SCJUCODE := CORIGINALACTORR.CJUCODE;
                        END;

                        BEGIN
                            SELECT NVL (DTRDEFAULTVALUE,
                                        CORIGINALACTORR.NAFCODE)
                              INTO SNAFCODE
                              FROM DATATRANSCODING
                             WHERE     DTRCODE = 'NAFCODEPM'
                                   AND UGECODE = CORIGINALACTORR.UGECODE;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                SNAFCODE := CORIGINALACTORR.NAFCODE;
                        END;

                        SACTCODE := NULL;
                        I_ACTEUR (NACTIDCORPORATE,
                                  CORIGINALACTORR.UGECODE,
                                  CORIGINALACTORR.UTICODECREAT,
                                  SYSDATE,
                                  SACTCODE,
                                  SCJUCODE,
                                  CORIGINALACTORR.PAYCODECATJURIDIQUE,
                                  CORIGINALACTORR.UTICODEMAJ,
                                  CORIGINALACTORR.ACTLIBCOURT,
                                  CORIGINALACTORR.ACTNOM,
                                  NULL,
                                  CORIGINALACTORR.ACTCORPORATE,
                                  SYSDATE,
                                  CORIGINALACTORR.PAYCODE,
                                  CORIGINALACTORR.LANCODE,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  SNAFCODE,
                                  CORIGINALACTORR.PAYCODENAF,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.PAYCODE,
                                  NULL,
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.APATITRE,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.DEVCODE,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.APANOMPATRONYMIQUE,
                                  CORIGINALACTORR.APAPRENOM,
                                  CORIGINALACTORR.APAMIDDLENAME,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.ACTCHANNEL,
                                  CORIGINALACTORR.ACTCHANNELCODE,
                                  'PM',
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.ACTRESIDENTCODE,
                                  NULL,
                                  NULL,
                                  CORIGINALACTORR.ACTREPRESENTATIVE,
                                  CORIGINALACTORR.ACTREPRESENTNAME,
                                  NULL,
                                  1,
                                  NULL,
                                  'OK',
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NULL,
                                  NRETURNCODE);
                        I_ACTPHASE (NACTIDCORPORATE,
                                    'INI',
                                    1,
                                    'ACTEUR',
                                    'OUVERT',
                                    SYSDATE,
                                    CORIGINALACTORR.UTICODEMAJ,
                                    SYSDATE,
                                    SYSDATE,
                                    NULL,
                                    NRETURNCODE);
                        I_ACTCORRESPONDANT (nActIdCorporate,
                                            NULL,
                                            cOriginalActorR.ACTNOM,
                                            'SELF',
                                            NULL,
                                            1,
                                            NULL,
                                            cOriginalActorR.ACTNOM,
                                            NULL,
                                            NULL,
                                            NULL,
                                            SYSDATE,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            1,
                                            NULL,
                                            NULL,
                                            NULL,
                                            cOriginalActorR.ACTNOM,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            nReturnCode);
                    END IF;
                END IF;

                P_AUTO_ACTIVATE_ACTORS (NACTID, NRETURNCODE);
                P_AUTO_ADD_CONTACTS (NACTID, NRETURNCODE);
                P_AUTO_ADD_RELATIONS (NACTID, NRETURNCODE);
            END LOOP;
        END;
    END P_AUTOINSERTACTEUR;

    PROCEDURE P_AUTO_ADD_RELATIONS (NACTID               ACTEUR.ACTID%TYPE,
                                    NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAUTOREPRESENTATIVEON    NUMBER := 0;
            NAUTOCORPORATEON         NUMBER := 0;
            STRECODEREPRESENTATIVE   ACTRELATION.TRECODE%TYPE := NULL;
            STRECODECORPORATE        ACTRELATION.TRECODE%TYPE := NULL;
            NACTIDREPRESENT          ACTEUR.ACTID%TYPE;
            NACTIDCORPORATE          ACTEUR.ACTID%TYPE;
            RMAINACTOR               ACTEUR%ROWTYPE;
            NCOUNT                   NUMBER;
        BEGIN
            NRETURNCODE := 0;

            SELECT *
              INTO RMAINACTOR
              FROM ACTEUR
             WHERE ACTID = NACTID;

            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOREPRESENTATIVE',
                                        RMAINACTOR.UGECODE,
                                        NAUTOREPRESENTATIVEON);
            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOCORPORATE',
                                        RMAINACTOR.UGECODE,
                                        NAUTOCORPORATEON);
            PA_COM_COMMON.S_TPATEXTE ('ACTEUR',
                                      'AUTOREPRESENTATIVE',
                                      RMAINACTOR.UGECODE,
                                      STRECODEREPRESENTATIVE);
            PA_COM_COMMON.S_TPATEXTE ('ACTEUR',
                                      'AUTOCORPORATE',
                                      RMAINACTOR.UGECODE,
                                      STRECODECORPORATE);

            SELECT MAX (ACTID)
              INTO NACTIDREPRESENT
              FROM ACTEUR
             WHERE ACTSIRET = RMAINACTOR.ACTREPRESENTATIVE;

            SELECT MAX (ACTID)
              INTO NACTIDCORPORATE
              FROM ACTEUR
             WHERE ACTSIRET = RMAINACTOR.ACTCORPORATE;

            IF NAUTOREPRESENTATIVEON = 1
            THEN
                IF     NACTIDREPRESENT IS NOT NULL
                   AND STRECODEREPRESENTATIVE IS NOT NULL
                THEN
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM ACTRELATION
                     WHERE     ACTID = NACTID
                           AND ACTIDRELATION = NACTIDREPRESENT
                           AND TRECODE = STRECODEREPRESENTATIVE
                           AND AREDTFIN IS NULL;

                    IF NCOUNT = 0
                    THEN
                        I_ACTRELATION (NACTID,
                                       NACTIDREPRESENT,
                                       STRECODEREPRESENTATIVE,
                                       SYSDATE,
                                       NULL,
                                       NULL,
                                       NRETURNCODE);
                    END IF;

                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM ACTRELATION
                     WHERE     ACTID = NACTID
                           AND ACTIDRELATION = NACTIDREPRESENT
                           AND TRECODE = 'GARANT'
                           AND AREDTFIN IS NULL;

                    IF NCOUNT = 0
                    THEN
                        I_ACTRELATION (NACTID,
                                       NACTIDREPRESENT,
                                       'GARANT',
                                       SYSDATE,
                                       NULL,
                                       NULL,
                                       NRETURNCODE);
                    END IF;
                END IF;
            END IF;

            IF NAUTOCORPORATEON = 1
            THEN
                IF     NACTIDCORPORATE IS NOT NULL
                   AND STRECODECORPORATE IS NOT NULL
                THEN
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM ACTRELATION
                     WHERE     ACTID = NACTIDCORPORATE
                           AND ACTIDRELATION = NACTID
                           AND TRECODE = STRECODECORPORATE
                           AND AREDTFIN IS NULL;

                    IF NCOUNT = 0
                    THEN
                        I_ACTRELATION (NACTIDCORPORATE,
                                       NACTID,
                                       STRECODECORPORATE,
                                       SYSDATE,
                                       NULL,
                                       NULL,
                                       NRETURNCODE);
                    END IF;

                    IF     NACTIDREPRESENT IS NOT NULL
                       AND STRECODEREPRESENTATIVE IS NOT NULL
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM ACTRELATION
                         WHERE     ACTID = NACTIDCORPORATE
                               AND ACTIDRELATION = NACTIDREPRESENT
                               AND TRECODE = STRECODEREPRESENTATIVE
                               AND AREDTFIN IS NULL;

                        IF NCOUNT = 0
                        THEN
                            I_ACTRELATION (NACTIDCORPORATE,
                                           NACTIDREPRESENT,
                                           STRECODEREPRESENTATIVE,
                                           SYSDATE,
                                           NULL,
                                           NULL,
                                           NRETURNCODE);
                        END IF;
                    END IF;
                END IF;
            END IF;
        END;
    END P_AUTO_ADD_RELATIONS;

    PROCEDURE P_AUTO_ADD_CONTACTS (NACTID               ACTEUR.ACTID%TYPE,
                                   NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAUTOREPRESENTATIVEON   NUMBER := 0;
            NAUTOCORPORATEON        NUMBER := 0;
            NACTSELFQUALITYON       NUMBER := 0;
            SREPREQUALITY           VARCHAR2 (32);
            NCOUNT                  NUMBER;
            NACTIDREPRESENT         ACTEUR.ACTID%TYPE;
            NACTIDCORPORATE         ACTEUR.ACTID%TYPE;
            NACOORDRE               ACTCORRESPONDANT.ACOORDRE%TYPE;

            CURSOR CORIGINALACTOR
            IS
                SELECT ACT.*,
                       APA.APATITRE,
                       APA.APAPRENOM,
                       APA.APANOMPATRONYMIQUE,
                       APA.APAMIDDLENAME
                  FROM ACTEUR ACT, ACTEURPARTICULIER APA
                 WHERE ACT.ACTID = NACTID AND APA.ACTID(+) = ACT.ACTID;

            RMAINACTOR              CORIGINALACTOR%ROWTYPE;
        BEGIN
            NRETURNCODE := 0;

            OPEN CORIGINALACTOR;

            FETCH CORIGINALACTOR INTO RMAINACTOR;

            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOREPRESENTATIVE',
                                        RMAINACTOR.UGECODE,
                                        NAUTOREPRESENTATIVEON);
            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOCORPORATE',
                                        RMAINACTOR.UGECODE,
                                        NAUTOCORPORATEON);
            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'ACTSELFQUALITY',
                                        RMAINACTOR.UGECODE,
                                        NACTSELFQUALITYON);

            SELECT MAX (ACTID)
              INTO NACTIDREPRESENT
              FROM ACTEUR
             WHERE ACTSIRET = RMAINACTOR.ACTREPRESENTATIVE;

            SELECT MAX (ACTID)
              INTO NACTIDCORPORATE
              FROM ACTEUR
             WHERE ACTSIRET = RMAINACTOR.ACTCORPORATE;

            IF NAUTOREPRESENTATIVEON = 1 AND NACTIDREPRESENT IS NOT NULL
            THEN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTCORRESPONDANT
                 WHERE     ACTID = NACTIDREPRESENT
                       AND ACOSIRET = RMAINACTOR.ACTREPRESENTATIVE
                       AND ACODTEND IS NULL;

                IF NCOUNT = 0
                THEN
                    SELECT NVL (MAX (ACO.ACOORDRE), 0)
                      INTO NACOORDRE
                      FROM ACTCORRESPONDANT ACO
                     WHERE ACTID = NACTIDREPRESENT;

                    IF NACTSELFQUALITYON = 1
                    THEN
                        SREPREQUALITY := 'SELF';
                    END IF;

                    I_ACTCORRESPONDANT (
                        NACTIDREPRESENT,
                        NACOORDRE + 1,
                        NVL (RMAINACTOR.APANOMPATRONYMIQUE,
                             RMAINACTOR.ACTNOM),
                        SREPREQUALITY,
                        RMAINACTOR.APATITRE,
                        NULL,
                        NULL,
                        NVL (RMAINACTOR.APAPRENOM, RMAINACTOR.ACTNOM2),
                        NULL,
                        NULL,
                        NULL,
                        SYSDATE,
                        NULL,
                        NULL,
                        NULL,
                        RMAINACTOR.ACTREPRESENTATIVE,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        RMAINACTOR.ACTREPRESENTNAME,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NULL,
                        NRETURNCODE);
                END IF;
            END IF;

            IF NAUTOCORPORATEON = 1 AND NACTIDCORPORATE IS NOT NULL
            THEN
                IF RMAINACTOR.ACTREPRESENTATIVE IS NOT NULL
                THEN
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM ACTCORRESPONDANT
                     WHERE     ACTID = NACTIDCORPORATE
                           AND ACOSIRET = RMAINACTOR.ACTREPRESENTATIVE
                           AND ACODTEND IS NULL;

                    IF NCOUNT = 0
                    THEN
                        SELECT NVL (MAX (ACO.ACOORDRE), 0)
                          INTO NACOORDRE
                          FROM ACTCORRESPONDANT ACO
                         WHERE ACTID = NACTIDCORPORATE;

                        I_ACTCORRESPONDANT (
                            NACTIDCORPORATE,
                            NACOORDRE + 1,
                            NVL (RMAINACTOR.APANOMPATRONYMIQUE,
                                 RMAINACTOR.ACTNOM),
                            'CEO',
                            RMAINACTOR.APATITRE,
                            NULL,
                            NULL,
                            NVL (RMAINACTOR.APAPRENOM, RMAINACTOR.ACTNOM2),
                            NULL,
                            NULL,
                            NULL,
                            SYSDATE,
                            NULL,
                            NULL,
                            NULL,
                            RMAINACTOR.ACTREPRESENTATIVE,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            RMAINACTOR.ACTREPRESENTNAME,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NULL,
                            NRETURNCODE);
                    END IF;
                END IF;
            END IF;
        --Change phase event : not needed line in actcoresspondant as already added
        /*IF RMAINACTOR.ACTREPRESENTATIVE IS NOT NULL THEN
            SELECT COUNT( *) INTO NCOUNT FROM ACTCORRESPONDANT WHERE ACTID = NACTID AND ACOSIRET = RMAINACTOR.ACTREPRESENTATIVE AND ACODTEND IS NULL;
            IF NCOUNT = 0 AND RMAINACTOR.ACTTYPE != 'PART' THEN
                SELECT NVL(MAX(ACO.ACOORDRE), 0) INTO NACOORDRE FROM ACTCORRESPONDANT ACO WHERE ACTID = NACTID;
                I_ACTCORRESPONDANT(NACTID, NACOORDRE + 1, NVL(RMAINACTOR.APANOMPATRONYMIQUE, RMAINACTOR.ACTNOM), 'CEO', RMAINACTOR.APATITRE, NULL, NULL, NVL(RMAINACTOR.APAPRENOM, RMAINACTOR.ACTNOM2), NULL, NULL, NULL, SYSDATE, NULL, NULL, NULL,
                RMAINACTOR.ACTREPRESENTATIVE, NULL, NULL, NULL, NULL, RMAINACTOR.ACTREPRESENTNAME, NULL, NULL, NULL, NULL, NULL, NRETURNCODE) ;
            END IF;
        END IF;*/
        END;
    END P_AUTO_ADD_CONTACTS;

    PROCEDURE P_AUTO_ACTIVATE_ACTORS (NACTID               ACTEUR.ACTID%TYPE,
                                      NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAUTOREPRESENTATIVEON   NUMBER := 0;
            NAUTOCORPORATEON        NUMBER := 0;
            NCOUNT                  NUMBER;
            NAPHORDRE               ACTPHASE.APHORDRE%TYPE;
            NACTIDREPRESENT         ACTEUR.ACTID%TYPE;
            NACTIDCORPORATE         ACTEUR.ACTID%TYPE;
            RMAINACTOR              ACTEUR%ROWTYPE;
        BEGIN
            NRETURNCODE := 0;

            SELECT *
              INTO RMAINACTOR
              FROM ACTEUR
             WHERE ACTID = NACTID;

            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOREPRESENTATIVE',
                                        RMAINACTOR.UGECODE,
                                        NAUTOREPRESENTATIVEON);
            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOCORPORATE',
                                        RMAINACTOR.UGECODE,
                                        NAUTOCORPORATEON);

            SELECT MAX (ACTID)
              INTO NACTIDREPRESENT
              FROM ACTEUR
             WHERE ACTSIRET = RMAINACTOR.ACTREPRESENTATIVE;

            SELECT MAX (ACTID)
              INTO NACTIDCORPORATE
              FROM ACTEUR
             WHERE ACTSIRET = RMAINACTOR.ACTCORPORATE;

            IF NAUTOREPRESENTATIVEON = 1 AND NACTIDREPRESENT IS NOT NULL
            THEN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTPHASE
                 WHERE     ACTID = NACTIDREPRESENT
                       AND APHDTFIN IS NULL
                       AND PHACODE = 'ACTIVE';

                SELECT MAX (APHORDRE + 1)
                  INTO NAPHORDRE
                  FROM ACTPHASE
                 WHERE ACTID = NACTIDREPRESENT;

                IF NCOUNT = 0
                THEN
                    I_ACTPHASE (NACTIDREPRESENT,
                                'ACTIVE',
                                NAPHORDRE,
                                'ACTEUR',
                                'ACTIVE',
                                SYSDATE,
                                RMAINACTOR.UTICODEMAJ,
                                NULL,
                                SYSDATE,
                                NULL,
                                NRETURNCODE);
                END IF;
            END IF;

            IF NAUTOCORPORATEON = 1 AND NACTIDCORPORATE IS NOT NULL
            THEN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTPHASE
                 WHERE     ACTID = NACTIDCORPORATE
                       AND APHDTFIN IS NULL
                       AND PHACODE = 'ACTIVE';

                SELECT MAX (APHORDRE + 1)
                  INTO NAPHORDRE
                  FROM ACTPHASE
                 WHERE ACTID = NACTIDCORPORATE;

                IF NCOUNT = 0
                THEN
                    I_ACTPHASE (NACTIDCORPORATE,
                                'ACTIVE',
                                NAPHORDRE,
                                'ACTEUR',
                                'ACTIVE',
                                SYSDATE,
                                RMAINACTOR.UTICODEMAJ,
                                NULL,
                                SYSDATE,
                                NULL,
                                NRETURNCODE);
                END IF;
            END IF;
        END;
    END P_AUTO_ACTIVATE_ACTORS;

    --UPDATE ACTRELATION AND ACTCORRESPONDANT
    PROCEDURE P_TRADENAME (
        NCREID                     CREVT.CREID%TYPE,
        SUGECODE                   UNITEGESTION.UGECODE%TYPE,
        NACTID                     ACTEUR.ACTID%TYPE,
        SACTREPRESENTOLD           ACTEUR.ACTREPRESENTATIVE%TYPE,
        NACTREPRESENTNAMEOLD       ACTEUR.ACTREPRESENTNAME%TYPE,
        SACTCORPORATEOLD           ACTEUR.ACTCORPORATE%TYPE,
        NRETURNCODE            OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAUTOREPRESENTATIVEON    TOPPARAM.TPALOGIQUE%TYPE;
            SACTREPRESENTNEW         ACTEUR.ACTREPRESENTATIVE%TYPE;
            NAUTOCORPORATEON         TOPPARAM.TPALOGIQUE%TYPE;
            NACTCORPORATENEW         ACTEUR.ACTCORPORATE%TYPE;
            NACTIDREPRESENT          ACTEUR.ACTID%TYPE := NULL;
            NACTIDCORPORATE          ACTEUR.ACTID%TYPE := NULL;
            STRECODEREPRESENTATIVE   TOPPARAM.TPATEXTE%TYPE;
            STRECODECORPORATE        TOPPARAM.TPATEXTE%TYPE;
            DTCREDTEFFET             CREVT.CREDTEFFET%TYPE;
            NCOUNT                   NUMBER;
            NACOORDRE                ACTCORRESPONDANT.ACOORDRE%TYPE;
            RNEWACTREPRESENTATIVE    ACTEUR%ROWTYPE;
        BEGIN
            NRETURNCODE := 0;
            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOREPRESENTATIVE',
                                        SUGECODE,
                                        NAUTOREPRESENTATIVEON);
            PA_COM_COMMON.S_TPALOGIQUE ('ACTEUR',
                                        'AUTOCORPORATE',
                                        SUGECODE,
                                        NAUTOCORPORATEON);
            PA_COM_COMMON.S_TPATEXTE ('ACTEUR',
                                      'AUTOREPRESENTATIVE',
                                      SUGECODE,
                                      STRECODEREPRESENTATIVE);
            PA_COM_COMMON.S_TPATEXTE ('ACTEUR',
                                      'AUTOCORPORATE',
                                      SUGECODE,
                                      STRECODECORPORATE);

            SELECT CREDTEFFET
              INTO DTCREDTEFFET
              FROM CREVT
             WHERE CREID = NCREID;

            IF NAUTOREPRESENTATIVEON = 1
            THEN
                SELECT ACTREPRESENTATIVE
                  INTO SACTREPRESENTNEW
                  FROM ACTEUR
                 WHERE ACTID = NACTID;

                IF SACTREPRESENTNEW <> SACTREPRESENTOLD
                THEN
                    IF SACTREPRESENTOLD IS NOT NULL
                    THEN
                        BEGIN
                            SELECT ACTID
                              INTO NACTIDREPRESENT
                              FROM ACTEUR
                             WHERE ACTSIRET = SACTREPRESENTOLD;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NACTIDREPRESENT := NULL;
                        END;

                        UPDATE ACTRELATION
                           SET AREDTFIN = DTCREDTEFFET - 1
                         WHERE     ACTID = NACTID
                               AND (   TRECODE = STRECODEREPRESENTATIVE
                                    OR TRECODE = 'GARANT')
                               AND AREDTFIN IS NULL
                               AND ACTIDRELATION = NACTIDREPRESENT;

                        UPDATE ACTCORRESPONDANT
                           SET ACODTEND = DTCREDTEFFET - 1
                         WHERE     ACTID = NACTID
                               AND ACODTEND IS NULL
                               AND ACOSIRET = SACTREPRESENTOLD;

                        UPDATE ACTCORRESPONDANT
                           SET ACODTEND = DTCREDTEFFET - 1
                         WHERE     ACTID = NACTIDCORPORATE
                               AND ACODTEND IS NULL
                               AND ACOSIRET = SACTREPRESENTOLD;
                    END IF;
                END IF;
            END IF;

            IF NAUTOCORPORATEON = 1
            THEN
                IF NRETURNCODE = 0
                THEN
                    SELECT ACTCORPORATE
                      INTO NACTCORPORATENEW
                      FROM ACTEUR
                     WHERE ACTID = NACTID;

                    IF NACTCORPORATENEW <> SACTCORPORATEOLD
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM ACTEUR
                         WHERE ACTSIRET = SACTCORPORATEOLD;

                        BEGIN
                            SELECT ACTID
                              INTO NACTIDCORPORATE
                              FROM ACTEUR
                             WHERE ACTSIRET = SACTCORPORATEOLD;
                        EXCEPTION
                            WHEN NO_DATA_FOUND
                            THEN
                                NACTIDCORPORATE := NULL;
                        END;

                        UPDATE ACTRELATION
                           SET AREDTFIN = DTCREDTEFFET - 1
                         WHERE     ACTID = NACTIDCORPORATE
                               AND TRECODE = STRECODECORPORATE
                               AND AREDTFIN IS NULL
                               AND ACTIDRELATION = NACTID;

                        UPDATE ACTRELATION
                           SET AREDTFIN = DTCREDTEFFET - 1
                         WHERE     ACTID = NACTIDCORPORATE
                               AND TRECODE = STRECODEREPRESENTATIVE
                               AND AREDTFIN IS NULL
                               AND ACTIDRELATION = NACTIDREPRESENT;
                    END IF;
                END IF;
            END IF;

            P_AUTO_ACTIVATE_ACTORS (NACTID, NRETURNCODE);
            P_AUTO_ADD_CONTACTS (NACTID, NRETURNCODE);
            P_AUTO_ADD_RELATIONS (NACTID, NRETURNCODE);
        END;
    END P_TRADENAME;

    PROCEDURE D_ACTRELATION (
        NACTID                  ACTEUR.ACTID%TYPE,
        NACTIDRELATION          ACTRELATION.ACTIDRELATION%TYPE,
        STRECODE                ACTRELATION.TRECODE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            BEGIN
                --ALA 110706 suppression du detail relation si existe
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM ACTRELPRODETAIL
                 WHERE     ACTID = NACTID
                       AND ACTIDRELATION = NACTIDRELATION
                       AND TRECODE = STRECODE;

                NRETURNCODE := 0;

                IF NCOUNT != 0
                THEN
                    DELETE FROM ACTRELPRODETAIL
                          WHERE     ACTID = NACTID
                                AND ACTIDRELATION = NACTIDRELATION
                                AND TRECODE = STRECODE;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END IF;

                IF NRETURNCODE = 0
                THEN
                    DELETE FROM ACTRELATION
                          WHERE     ACTID = NACTID
                                AND ACTIDRELATION = NACTIDRELATION
                                AND TRECODE = STRECODE;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                END IF;

                --ALA 050707
                IF NRETURNCODE = 0
                THEN
                    UPDATE ACTEUR
                       SET ACTDTMAJ = TRUNC (SYSDATE)
                     WHERE ACTID IN (NACTID, NACTIDRELATION);
                END IF;
            EXCEPTION
                WHEN ERR_CHILD_FOUND
                THEN
                    NRETURNCODE := ERR_CHILD_ARE_FOUND_CONST;
            END;
        END;
    END D_ACTRELATION;

    PROCEDURE S_GETCUSTCONSENT (NDATE             IN     ACTASSENT.AASDTSTART%TYPE,
                                NAASTYPE          IN     ACTASSENT.AASTYPE%TYPE,
                                STYPE_PARAMETER   IN     VARCHAR2,
                                C_CURSOR             OUT SYS_REFCURSOR)
    AS
    BEGIN
        DECLARE
        BEGIN
            OPEN C_CURSOR FOR
                SELECT /*        ACT.ACTLIBCOURT as d1,
                       ACT.ACTSIRET as d2,
                       ATE.ATENUM as d3,
                       DOS.DOSNUM as d4,
                       DOS.DOSDTSIGNE as d5,
                       DOS.DOSDTSIGNE-1 as d6,
                       add_months(DOS.DOSDTSIGNE,12) as d7,
                       F_PLDATATRANSCO('DOSSIER','PHACODE',DPH.PHACODE) as d8,
                       F_PLDATATRANSCO('DOSSIER','PHALIBELLE',DPH.PHACODE) as d9,
                       AAS.ACTID as d10,
                       AAS.AASORDER as d11*/
                       ACT.ACTLIBCOURT
                           AS D1,
                       ACT.ACTSIRET
                           AS D2,
                       F_TELPHONE (ATE.ATENUM)
                           AS D3,
                       DOS.DOSNUM
                           AS D4,
                       DPH.PHACODE
                           AS D5,
                       (SELECT PHALIBELLE
                          FROM LANPHASE
                         WHERE     LANCODE = 'EN'
                               AND PHACODE = DPH.PHACODE
                               AND PHADEST = 'DOSSIER')
                           AS D6,
                       TO_CHAR (DOS.DOSDTSIGNE, 'yyyyMMDD')
                           AS D7,
                       TO_CHAR (DOS.DOSDTSIGNE - 1, 'yyyyMMDD')
                           AS D8,
                       TO_CHAR (ADD_MONTHS (DOS.DOSDTSIGNE, 12), 'yyyyMMDD')
                           AS D9,
                       AAS.ACTID
                           AS D10,
                       AAS.AASORDER
                           AS D11
                  FROM ACTASSENT   AAS,
                       ACTEUR      ACT,
                       DOSSIER     DOS,
                       DOSPHASE    DPH,
                       ACTTELECOM  ATE
                 WHERE     AAS.AASTYPE = NAASTYPE
                       AND NOT EXISTS
                               (SELECT 1
                                  FROM CREVT A
                                 WHERE     A.TMFFONCTION = 'EVTACT_DECASS'
                                       AND A.ACTID = AAS.ACTID
                                       AND A.CREMT = AAS.AASORDER)
                       AND AAS.AASDTSTART <= NDATE
                       AND AAS.AASDTEND IS NULL
                       AND ACT.ACTID = AAS.ACTID
                       AND DOS.DOSID(+) = AAS.DOSID
                       AND ATE.ACTID = AAS.ACTID
                       AND ATE.ATEORDRE =
                           (SELECT MIN (ATEORDRE)
                              FROM ACTTELECOM B
                             WHERE     B.ACTID = ACT.ACTID
                                   AND ATETYPE IN (STYPE_PARAMETER))
                       AND DPH.DOSID(+) = DOS.DOSID
                       AND DPH.DPHDTFIN IS NULL;
        END;
    END S_GETCUSTCONSENT;

    /*-------------------------------------------------------------------
    -- Closing accounting period batch
    -- Name                 : Job_Closing_AccPeriod.sql
    -- Author     : FOL
    -- Date        : 09.10.2010
    -- Version    : 1.0
    -- Execute    : Daily
    -- Parameters :
    --                                  - <CLOSURE_DAY> only in this format YYYYMMDD
    --            - <NB_OPEN_MONTH> Number of period to open (month)
    --            - <ACTID> Acteur ID for management company
    -- You take as a parameter a date, an actor and a number of month to open.
    1. You close untill that date (means aexdtcloture= this date and aetxtypeclosure=P
    2. number of open months should always be equals to the parameter (be careful with end of years).
    --------------------------------------------------------------------*/
    PROCEDURE P_CLOSING_ACCPERIOD (NACTID           IN     ACTEURGESTION.ACTID%TYPE,
                                   SPARAMETERDATE   IN     VARCHAR2,
                                   NBOPENMONTH      IN     NUMBER,
                                   NERREUR          IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            DTPARAMETERDATE   DATE;
            NCOUNT            NUMBER;
            NCALID            CALDAYS.CALID%TYPE;
        BEGIN
            --- Retrieve paramaeters
            DTPARAMETERDATE := TO_DATE (SPARAMETERDATE, 'YYYYMMDD');

            SELECT COUNT (1)
              INTO NCOUNT
              FROM ACTEXERCICE AE
             WHERE     AE.ACTID = NACTID
                   AND AE.AEXEXERCICE = TO_CHAR (DTPARAMETERDATE, 'YYYY');

            IF NBOPENMONTH < 0 OR NBOPENMONTH > 12 OR NCOUNT = 0
            THEN
                NERREUR := 1;
                RETURN;
            END IF;

            SELECT CALID
              INTO NCALID
              FROM ACTEURGESTION
             WHERE ACTID = NACTID;

            IF TO_CHAR (DTPARAMETERDATE, 'D') = 1
            THEN
                DTPARAMETERDATE := DTPARAMETERDATE - 1;
            ELSE
                IF TO_CHAR (DTPARAMETERDATE, 'D') = 2
                THEN
                    DTPARAMETERDATE := DTPARAMETERDATE - 2;
                END IF;
            END IF;

            DTPARAMETERDATE :=
                CALCULATELASTWORKINGDAY (DTPARAMETERDATE - 1, NCALID, FALSE);

            --- Close the period on the given date
            IF TRUNC (DTPARAMETERDATE, 'year') =
               TRUNC (ADD_MONTHS (DTPARAMETERDATE + 1, NBOPENMONTH - 1),
                      'year')
            THEN
                UPDATE ACTEXERCICE AE
                   SET AE.AEXDTSAISIE = TRUNC (SYSDATE),
                       AE.AEXDTCLOTURE = DTPARAMETERDATE,
                       AE.AEXNBMOISOUVERT = NBOPENMONTH,
                       AE.AEXTYPECLOTURE = 'P'
                 WHERE     AE.ACTID = NACTID
                       AND AE.AEXEXERCICE = TO_CHAR (DTPARAMETERDATE, 'YYYY');
            ELSE
                SELECT COUNT (1)
                  INTO NCOUNT
                  FROM ACTEXERCICE AE
                 WHERE AE.AEXEXERCICE = TO_CHAR (DTPARAMETERDATE, 'YYYY') + 1;

                IF NCOUNT = 0
                THEN
                    INSERT INTO ACTEXERCICE (ACTID,
                                             AEXEXERCICE,
                                             DEVCODE,
                                             AEXANNEEDEB,
                                             AEXMOISDEB,
                                             AEXANNEEFIN,
                                             AEXMOISFIN,
                                             AEXDTSAISIE,
                                             AEXNBMOISOUVERT)
                        SELECT ACTID,
                               AEXEXERCICE + 1,
                               DEVCODE,
                               AEXANNEEDEB + 1,
                               AEXMOISDEB,
                               AEXANNEEFIN + 1,
                               AEXMOISFIN,
                               TRUNC (SYSDATE),
                               AEXNBMOISOUVERT
                          FROM ACTEXERCICE AE
                         WHERE     AE.ACTID = NACTID
                               AND AE.AEXEXERCICE =
                                   TO_CHAR (DTPARAMETERDATE, 'YYYY');
                END IF;

                IF TRUNC (DTPARAMETERDATE, 'year') =
                   TRUNC (DTPARAMETERDATE + 1, 'year')
                THEN
                    UPDATE ACTEXERCICE AE
                       SET AE.AEXDTSAISIE = TRUNC (SYSDATE),
                           AE.AEXDTCLOTURE = DTPARAMETERDATE,
                           AE.AEXNBMOISOUVERT =
                               13 - TO_CHAR (DTPARAMETERDATE + 1, 'MM'),
                           AE.AEXTYPECLOTURE = 'P'
                     WHERE     AE.ACTID = NACTID
                           AND AE.AEXEXERCICE =
                               TO_CHAR (DTPARAMETERDATE, 'YYYY');

                    UPDATE ACTEXERCICE AE
                       SET AE.AEXDTSAISIE = TRUNC (SYSDATE),
                           AE.AEXNBMOISOUVERT =
                                 NBOPENMONTH
                               - 13
                               + TO_CHAR (DTPARAMETERDATE + 1, 'MM')
                     WHERE     AE.ACTID = NACTID
                           AND AE.AEXEXERCICE =
                               TO_CHAR (DTPARAMETERDATE, 'YYYY') + 1;
                ELSE
                    UPDATE ACTEXERCICE AE
                       SET AE.AEXDTSAISIE = TRUNC (SYSDATE),
                           AE.AEXDTCLOTURE = DTPARAMETERDATE,
                           AE.AEXNBMOISOUVERT = 0,
                           AE.AEXTYPECLOTURE = 'P'
                     WHERE     AE.ACTID = NACTID
                           AND AE.AEXEXERCICE =
                               TO_CHAR (DTPARAMETERDATE, 'YYYY');

                    UPDATE ACTEXERCICE AE
                       SET AE.AEXDTSAISIE = TRUNC (SYSDATE),
                           AE.AEXNBMOISOUVERT = NBOPENMONTH
                     WHERE     AE.ACTID = NACTID
                           AND AE.AEXEXERCICE =
                               TO_CHAR (DTPARAMETERDATE, 'YYYY') + 1;
                END IF;
            END IF;

            DELETE ACTEXEDPT;

            COMMIT;
        EXCEPTION
            WHEN OTHERS
            THEN
                ROLLBACK;
                NERREUR := 1;
        END;
    END P_CLOSING_ACCPERIOD;

    FUNCTION CALCULATELASTWORKINGDAY (
        DTPARAMETERDATE   IN DATE,
        NCALID               CALDAYS.CALID%TYPE,
        BFLAG                BOOLEAN)
        RETURN DATE
    IS
    BEGIN
        DECLARE
            NCOUNT             NUMBER := 0;
            BFLAG2             BOOLEAN;
            DTPARAMETERDATE2   DATE;
        BEGIN
            DTPARAMETERDATE2 := DTPARAMETERDATE;
            BFLAG2 := BFLAG;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM CALDAYS
             WHERE     CALID = NCALID
                   AND CALDAY = TO_CHAR (DTPARAMETERDATE2, 'DD')
                   AND CALMONTH = TO_CHAR (DTPARAMETERDATE2, 'MM')
                   AND NVL (CALYEAR, TO_CHAR (DTPARAMETERDATE2, 'YYYY')) =
                       TO_CHAR (DTPARAMETERDATE2, 'YYYY');

            IF NCOUNT > 0
            THEN
                DTPARAMETERDATE2 :=
                    CALCULATELASTWORKINGDAY (DTPARAMETERDATE2 - 1,
                                             NCALID,
                                             BFLAG2);
            ELSE
                IF NCOUNT = 0 AND BFLAG = FALSE
                THEN
                    BFLAG2 := TRUE;
                    DTPARAMETERDATE2 :=
                        CALCULATELASTWORKINGDAY (DTPARAMETERDATE2 - 1,
                                                 NCALID,
                                                 BFLAG2);
                END IF;
            END IF;

            RETURN DTPARAMETERDATE2;
        END;
    END CALCULATELASTWORKINGDAY;

    PROCEDURE I_ACTASSMARKETPARTNER (
        NACTID                 ACTASSMARKETPARTNER.ACTID%TYPE,
        NAASORDER              ACTASSMARKETPARTNER.AASORDER%TYPE,
        NAMPORDER              ACTASSMARKETPARTNER.AMPORDER%TYPE,
        SROLCODE               ACTASSMARKETPARTNER.ROLCODE%TYPE,
        NAMPFLAGTM             ACTASSMARKETPARTNER.AMPFLAGTM%TYPE,
        NAMPFLAGEMAIL          ACTASSMARKETPARTNER.AMPFLAGEMAIL%TYPE,
        NAMPFLAGDM             ACTASSMARKETPARTNER.AMPFLAGDM%TYPE,
        NAMPFLAGSMS            ACTASSMARKETPARTNER.AMPFLAGSMS%TYPE,
        NAMPFLAGMISC           ACTASSMARKETPARTNER.AMPFLAGMISC%TYPE,
        NACTIDPARTNER          ACTASSMARKETPARTNER.ACTIDPARTNER%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ACTASSMARKETPARTNER (ACTID,
                                             AASORDER,
                                             AMPORDER,
                                             ROLCODE,
                                             AMPFLAGTM,
                                             AMPFLAGEMAIL,
                                             AMPFLAGDM,
                                             AMPFLAGSMS,
                                             AMPFLAGMISC,
                                             ACTIDPARTNER)
                 VALUES (NACTID,
                         NAASORDER,
                         NAMPORDER,
                         SROLCODE,
                         NAMPFLAGTM,
                         NAMPFLAGEMAIL,
                         NAMPFLAGDM,
                         NAMPFLAGSMS,
                         NAMPFLAGMISC,
                         NACTIDPARTNER);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ASS_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSENT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTASSMARKETPARTNER;

    PROCEDURE U_ACTASSMARKETPARTNER (
        NACTID                 ACTASSMARKETPARTNER.ACTID%TYPE,
        NAASORDER              ACTASSMARKETPARTNER.AASORDER%TYPE,
        NAMPORDER              ACTASSMARKETPARTNER.AMPORDER%TYPE,
        SROLCODE               ACTASSMARKETPARTNER.ROLCODE%TYPE,
        NAMPFLAGTM             ACTASSMARKETPARTNER.AMPFLAGTM%TYPE,
        NAMPFLAGEMAIL          ACTASSMARKETPARTNER.AMPFLAGEMAIL%TYPE,
        NAMPFLAGDM             ACTASSMARKETPARTNER.AMPFLAGDM%TYPE,
        NAMPFLAGSMS            ACTASSMARKETPARTNER.AMPFLAGSMS%TYPE,
        NAMPFLAGMISC           ACTASSMARKETPARTNER.AMPFLAGMISC%TYPE,
        NACTIDPARTNER          ACTASSMARKETPARTNER.ACTIDPARTNER%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ACTASSMARKETPARTNER
               SET ROLCODE = SROLCODE,
                   AMPFLAGTM = NAMPFLAGTM,
                   AMPFLAGEMAIL = NAMPFLAGEMAIL,
                   AMPFLAGDM = NAMPFLAGDM,
                   AMPFLAGSMS = NAMPFLAGSMS,
                   AMPFLAGMISC = NAMPFLAGMISC,
                   ACTIDPARTNER = NACTIDPARTNER
             WHERE     ACTID = NACTID
                   AND AASORDER = NAASORDER
                   AND AMPORDER = NAMPORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ASS_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ASSENT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ASS_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTASSMARKETPARTNER;

    PROCEDURE I_POSTALCODE (
        SPAYCODE               CODEPOSTAL.PAYCODE%TYPE,
        SCPOCODE               CODEPOSTAL.CPOCODE%TYPE,
        SCPOVILLE              CODEPOSTAL.CPOVILLE%TYPE,
        SCPOSUBREGION          CODEPOSTAL.CPOSUBREGION%TYPE,
        SMSACODE               CODEPOSTAL.MSACODE%TYPE,
        SCPODISTRICT           CODEPOSTAL.CPODISTRICT%TYPE,
        SCPOTOWN               CODEPOSTAL.CPOTOWN%TYPE,
        SCPOLIEUDIT            CODEPOSTAL.CPOLIEUDIT%TYPE,
        SCPOVOIE               CODEPOSTAL.CPOVOIE%TYPE,
        SCPORANGE              CODEPOSTAL.CPORANGE%TYPE,
        SCPOFORMAT             CODEPOSTAL.CPOFORMAT%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCBLORDER   CPOBLOCK.CBLORDER%TYPE;
            LSIZE       NUMBER;
        BEGIN
            SELECT NVL (MAX (CBLORDER), 0) + 1
              INTO NCBLORDER
              FROM CPOBLOCK
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE;

            SELECT COUNT (*)
              INTO LSIZE
              FROM CODEPOSTAL
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE;

            IF LSIZE = 0
            THEN
                INSERT INTO CODEPOSTAL (PAYCODE,
                                        CPOCODE,
                                        CPOVILLE,
                                        CPOSUBREGION,
                                        MSACODE,
                                        CPODISTRICT,
                                        CPOTOWN,
                                        CPOLIEUDIT,
                                        CPOVOIE,
                                        CPORANGE,
                                        CPOFORMAT)
                     VALUES (SPAYCODE,
                             SCPOCODE,
                             SCPOVILLE,
                             SCPOSUBREGION,
                             SMSACODE,
                             SCPODISTRICT,
                             SCPOTOWN,
                             SCPOLIEUDIT,
                             SCPOVOIE,
                             SCPORANGE,
                             SCPOFORMAT);

                I_CPOBLOCK (SPAYCODE,
                            SCPOCODE,
                            SCPOVILLE,
                            NCBLORDER,
                            SCPOSUBREGION,
                            SMSACODE,
                            SCPODISTRICT,
                            SCPOTOWN,
                            SCPOLIEUDIT,
                            SCPOVOIE,
                            SCPORANGE,
                            SCPOFORMAT,
                            NRETURNCODE);
            ELSE
                I_CPOBLOCK (SPAYCODE,
                            SCPOCODE,
                            SCPOVILLE,
                            NCBLORDER,
                            SCPOSUBREGION,
                            SMSACODE,
                            SCPODISTRICT,
                            SCPOTOWN,
                            SCPOLIEUDIT,
                            SCPOVOIE,
                            SCPORANGE,
                            SCPOFORMAT,
                            NRETURNCODE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CPO_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_CPO_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CPO_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_POSTALCODE;

    PROCEDURE U_POSTALCODE (
        SPAYCODE               CODEPOSTAL.PAYCODE%TYPE,
        SCPOCODE               CODEPOSTAL.CPOCODE%TYPE,
        SCPOVILLE              CODEPOSTAL.CPOVILLE%TYPE,
        SCPOSUBREGION          CODEPOSTAL.CPOSUBREGION%TYPE,
        SMSACODE               CODEPOSTAL.MSACODE%TYPE,
        SCPODISTRICT           CODEPOSTAL.CPODISTRICT%TYPE,
        SCPOTOWN               CODEPOSTAL.CPOTOWN%TYPE,
        SCPOLIEUDIT            CODEPOSTAL.CPOLIEUDIT%TYPE,
        SCPOVOIE               CODEPOSTAL.CPOVOIE%TYPE,
        SCPORANGE              CODEPOSTAL.CPORANGE%TYPE,
        SCPOFORMAT             CODEPOSTAL.CPOFORMAT%TYPE,
        NCBLORDER              CPOBLOCK.CBLORDER%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE CPOBLOCK
               SET CBLSUBREGION = SCPOSUBREGION,
                   CBLMSACODE = SMSACODE,
                   CBLDISTRICT = SCPODISTRICT,
                   CBLTOWN = SCPOTOWN,
                   CBLLIEUDIT = SCPOLIEUDIT,
                   CBLVOIE = SCPOVOIE,
                   CBLRANGE = SCPORANGE,
                   CBLFORMAT = SCPOFORMAT
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE
                   AND CBLORDER = NCBLORDER;

            UPDATE CODEPOSTAL
               SET CPOSUBREGION = SCPOSUBREGION,
                   MSACODE = SMSACODE,
                   CPODISTRICT = SCPODISTRICT,
                   CPOTOWN = SCPOTOWN,
                   CPOLIEUDIT = SCPOLIEUDIT,
                   CPOVOIE = SCPOVOIE,
                   CPORANGE = SCPORANGE,
                   CPOFORMAT = SCPOFORMAT
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CPO_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_CPO_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_CPO_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_POSTALCODE;

    PROCEDURE D_POSTALCODE (SPAYCODE             CPOBLOCK.PAYCODE%TYPE,
                            SCPOCODE             CPOBLOCK.CPOCODE%TYPE,
                            SCPOVILLE            CPOBLOCK.CPOVILLE%TYPE,
                            NCBLORDER            CPOBLOCK.CBLORDER%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            LSIZE   NUMBER;
        BEGIN
            DELETE FROM CPOBLOCK
                  WHERE     PAYCODE = SPAYCODE
                        AND CPOCODE = SCPOCODE
                        AND CPOVILLE = SCPOVILLE
                        AND CBLORDER = NCBLORDER;

            SELECT COUNT (*)
              INTO LSIZE
              FROM CPOBLOCK
             WHERE     PAYCODE = SPAYCODE
                   AND CPOCODE = SCPOCODE
                   AND CPOVILLE = SCPOVILLE;

            IF LSIZE = 0
            THEN
                DELETE FROM CODEPOSTAL
                      WHERE     PAYCODE = SPAYCODE
                            AND CPOCODE = SCPOCODE
                            AND CPOVILLE = SCPOVILLE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_CPO_FOUND_CONST;
        END;
    END D_POSTALCODE;

    PROCEDURE D_ACTASSMARKETPARTNER (
        NACTID               ACTASSMARKETPARTNER.ACTID%TYPE,
        NAASORDER            ACTASSMARKETPARTNER.AASORDER%TYPE,
        NAMPORDER            ACTASSMARKETPARTNER.AMPORDER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM ACTASSMARKETPARTNER
                  WHERE     ACTID = NACTID
                        AND AASORDER = NAASORDER
                        AND AMPORDER = NAMPORDER;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ACO_FOUND_CONST;
        END;
    END D_ACTASSMARKETPARTNER;

    PROCEDURE D_ACTASSMARKETPARTNER1 (
        NACTID               ACTASSMARKETPARTNER.ACTID%TYPE,
        NAASORDER            ACTASSMARKETPARTNER.AASORDER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM ACTASSMARKETPARTNER
                  WHERE ACTID = NACTID AND AASORDER = NAASORDER;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ACO_FOUND_CONST;
        END;
    END D_ACTASSMARKETPARTNER1;

    PROCEDURE P_SMSSEND (DTEVENT              DATE,
                         STYPEANNIV           TTRPARAM.TTRNOM%TYPE,
                         SUTICODE             UTILISATEUR.UTICODE%TYPE,
                         SLANCODE             LANGUE.LANCODE%TYPE,
                         NTBAID        IN OUT TBATCH.TBAID%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID     CREVT.CREID%TYPE;
            STBACODE   TBATCH.TBACODE%TYPE := 'A_BSMS';
        BEGIN
            NRETURNCODE := 0;
            PA_UPDATETBATCH.I_TBATCH (NTBAID,
                                      STBACODE,
                                      TRUNC (SYSDATE),
                                      'SMS anniversary',
                                      SUTICODE,
                                      0,
                                      TRUNC (SYSDATE),
                                      NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_EVT ('EVTGLOB',
                                 'EVTGLOB',
                                 'A_BSMS',
                                 NCREID,
                                 NULL,
                                 DTEVENT,
                                 'GLOBAL',
                                 1,
                                 SUTICODE,
                                 NULL,
                                 NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_CREDATA (NCREID,
                                     1,
                                     NULL,
                                     'SMSANNIV',
                                     'TYPE',
                                     NULL,
                                     STYPEANNIV,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID
                 WHERE CREID = NCREID;

                PA_EVT.U_EVT_VALIDE (NCREID, SUTICODE, NRETURNCODE);
            END IF;
        END;
    END P_SMSSEND;

    PROCEDURE P_SMSACTSEND (
        NTBAID                 TBATCH.TBAID%TYPE,
        DTEVENT                DATE,
        STYPEANNIV             TTRPARAM.TTRNOM%TYPE,
        DTANNIVERSARY          DATE,
        NACTID                 ACTEUR.ACTID%TYPE,
        NFORID                 FORMALITE.FORID%TYPE,
        SSUBJECT               CREDATA.CDADATASTRING%TYPE,
        SMSG                   CREDATA.CDAMEMO%TYPE,
        SUTICODE               UTILISATEUR.UTICODE%TYPE,
        SLANCODE               LANGUE.LANCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID      CREVT.CREID%TYPE;
            NADMID      ADMINISTRATIF.ADMID%TYPE;
            NASTORDRE   ADMSTATUS.ASTORDRE%TYPE;
            SDPTCODE    UTITSM.TSMSECTGESTION%TYPE;
            -- Bulk credata
            aCredata    TBL_ICREDATABLK := TBL_ICREDATABLK ();
        BEGIN
            NRETURNCODE := 0;
            PACOM_EVT.I_EVT ('ACTEUR',
                             'ACTEUR',
                             'EVACT_BSMS',
                             NCREID,
                             NACTID,
                             DTEVENT,
                             'GLOBAL',
                             1,
                             SUTICODE,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      1,
                                      NULL,
                                      'SMSANNIV',
                                      'SUBJECT',
                                      NULL,
                                      SSUBJECT,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      2,
                                      NULL,
                                      'SMSANNIV',
                                      'TYPE',
                                      NULL,
                                      STYPEANNIV,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      3,
                                      NULL,
                                      'SMSANNIV',
                                      'MSG',
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      SMSG,
                                      NRETURNCODE);
            END IF;

            -- Real insert into CREDATA,first because it's the end of the datasetbut also because an external package is called (PA_EVT.U_EVT_VALIDE)
            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_CREDATA_Blk (aCredata, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                PA_UPDATEADMINISTRATIF.I_ADMINISTRATIF (NADMID,
                                                        NULL,
                                                        NFORID,
                                                        NULL,
                                                        NULL,
                                                        NACTID,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        TRUNC (SYSDATE),
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        'IN',
                                                        0,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                BEGIN
                    SELECT TSMSECTGESTION
                      INTO SDPTCODE
                      FROM UTITSM
                     WHERE     UTICODE = SUTICODE
                           AND TSMDTEND IS NULL
                           AND ROWNUM = 1;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        SDPTCODE := NULL;
                END;

                PA_UPDATEADMINISTRATIF.I_ADMSTATUS3 (NADMID,
                                                     NASTORDRE,
                                                     'IN',
                                                     TRUNC (SYSDATE),
                                                     NULL,
                                                     TRUNC (SYSDATE),
                                                     NULL,
                                                     SUTICODE,
                                                     NULL,
                                                     SDPTCODE,
                                                     NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID
                 WHERE CREID = NCREID;

                PA_EVT.U_EVT_VALIDE (NCREID, SUTICODE, NRETURNCODE);
            END IF;
        END;
    END P_SMSACTSEND;

    PROCEDURE P_COLDELINQUENCYSEND (
        DTEVENT              DATE,
        SINFOTYPE            TTRPARAM.TTRNOM%TYPE,
        SUTICODE             UTILISATEUR.UTICODE%TYPE,
        SLANCODE             LANGUE.LANCODE%TYPE,
        NTBAID        IN OUT TBATCH.TBAID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID     CREVT.CREID%TYPE;
            STBACODE   TBATCH.TBACODE%TYPE := 'D_CCINF';
        BEGIN
            NRETURNCODE := 0;
            PA_UPDATETBATCH.I_TBATCH (NTBAID,
                                      STBACODE,
                                      TRUNC (SYSDATE),
                                      'Delinquency send',
                                      SUTICODE,
                                      0,
                                      TRUNC (SYSDATE),
                                      NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_EVT ('EVTGLOB',
                                 'EVTGLOB',
                                 'D_CCSENDINFO',
                                 NCREID,
                                 NULL,
                                 DTEVENT,
                                 'GLOBAL',
                                 1,
                                 SUTICODE,
                                 NULL,
                                 NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_CREDATA (NCREID,
                                     1,
                                     NULL,
                                     'TYPE',
                                     'INFO',
                                     NULL,
                                     SINFOTYPE,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID
                 WHERE CREID = NCREID;

                PA_EVT.U_EVT_VALIDE (NCREID, SUTICODE, NRETURNCODE);
            END IF;
        END;
    END P_COLDELINQUENCYSEND;

    PROCEDURE P_DOSCOLDELINQUENCYSEND (
        NTBAID                TBATCH.TBAID%TYPE,
        DTEVENT               DATE,
        NCCAID                COLLECTIONCASE.CCAID%TYPE,
        NDOSID                DOSSIER.DOSID%TYPE,
        STACCODE              DOSSIER.TACCODE%TYPE,
        NFORID                FORMALITE.FORID%TYPE,
        SSUBJECT              CREDATA.CDADATASTRING%TYPE,
        SMSG                  CREDATA.CDAMEMO%TYPE,
        NACTID                CREDATA.CDADATANUMBER%TYPE,
        NLOANBAL              CREDATA.CDADATANUMBER%TYPE,
        NLOANAMT              CREDATA.CDADATANUMBER%TYPE,
        NTOTALUNPAID          CREDATA.CDADATANUMBER%TYPE,
        SUTICODE              UTILISATEUR.UTICODE%TYPE,
        SLANCODE              LANGUE.LANCODE%TYPE,
        NCREID1        IN OUT CREVT.CREID%TYPE,
        NADMID1        IN OUT ADMINISTRATIF.ADMID%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID      CREVT.CREID%TYPE;
            NADMID      ADMINISTRATIF.ADMID%TYPE;
            NASTORDRE   ADMSTATUS.ASTORDRE%TYPE;
            SDPTCODE    UTITSM.TSMSECTGESTION%TYPE;
            aCredata    TBL_ICREDATABLK := TBL_ICREDATABLK ();
        BEGIN
            NRETURNCODE := 0;
            PACOM_EVT.I_EVT ('DOSSIER',
                             'DOSSIER',
                             'EVD_CCSENDINFO',
                             NCREID,
                             NDOSID,
                             DTEVENT,
                             STACCODE,
                             1,
                             SUTICODE,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE = 0 AND SSUBJECT IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      1,
                                      NULL,
                                      'CCINFO',
                                      'SUBJECT',
                                      NULL,
                                      SSUBJECT,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SMSG IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      2,
                                      NULL,
                                      'CCINFO',
                                      'MSG',
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      SMSG,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NCCAID IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      3,
                                      NULL,
                                      'CCINFO',
                                      'CCAID',
                                      NULL,
                                      NULL,
                                      NCCAID,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);

                UPDATE COLLECTIONCASE
                   SET CCADTLOCKED = SYSDATE
                 WHERE CCAID = NCCAID;
            END IF;

            IF NRETURNCODE = 0 AND NACTID IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      4,
                                      NULL,
                                      'CCINFO',
                                      'ACTID',
                                      NULL,
                                      NULL,
                                      NACTID,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NLOANBAL IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      5,
                                      NULL,
                                      'CCINFO',
                                      'LOANBAL',
                                      NULL,
                                      NULL,
                                      NLOANBAL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NLOANAMT IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      6,
                                      NULL,
                                      'CCINFO',
                                      'LOANAMT',
                                      NULL,
                                      NULL,
                                      NLOANAMT,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NTOTALUNPAID IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      7,
                                      NULL,
                                      'CCINFO',
                                      'TOTALUNPAID',
                                      NULL,
                                      NULL,
                                      NTOTALUNPAID,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            -- Real insert into CREDATA,first because it's the end of the datasetbut also because an external package is called (PA_EVT.U_EVT_VALIDE)
            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_CREDATA_Blk (aCredata, NRETURNCODE);
            END IF;

            IF NFORID IS NOT NULL
            THEN
                IF NRETURNCODE = 0
                THEN
                    PA_UPDATEADMINISTRATIF.I_ADMINISTRATIF (NADMID,
                                                            NULL,
                                                            NFORID,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            TRUNC (SYSDATE),
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            'IN',
                                                            0,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NCCAID,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NRETURNCODE);
                END IF;

                IF NRETURNCODE = 0
                THEN
                    BEGIN
                        SELECT TSMSECTGESTION
                          INTO SDPTCODE
                          FROM UTITSM
                         WHERE     UTICODE = SUTICODE
                               AND TSMDTEND IS NULL
                               AND ROWNUM = 1;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            SDPTCODE := NULL;
                    END;

                    PA_UPDATEADMINISTRATIF.I_ADMSTATUS3 (NADMID,
                                                         NASTORDRE,
                                                         'IN',
                                                         TRUNC (SYSDATE),
                                                         NULL,
                                                         TRUNC (SYSDATE),
                                                         NULL,
                                                         SUTICODE,
                                                         NULL,
                                                         SDPTCODE,
                                                         NRETURNCODE);
                END IF;
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID
                 WHERE CREID = NCREID;

                PA_EVT.U_EVT_VALIDE (NCREID, SUTICODE, NRETURNCODE);
            END IF;

            NCREID1 := NCREID;
            NADMID1 := NADMID;
        END;
    END P_DOSCOLDELINQUENCYSEND;

    PROCEDURE P_COLPUBSALEINVSEND (
        DTEVENT              DATE,
        SINFOTYPE            TTRPARAM.TTRNOM%TYPE,
        SUTICODE             UTILISATEUR.UTICODE%TYPE,
        SLANCODE             LANGUE.LANCODE%TYPE,
        NTBAID        IN OUT TBATCH.TBAID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID     CREVT.CREID%TYPE;
            STBACODE   TBATCH.TBACODE%TYPE := 'D_CCINF';
        BEGIN
            NRETURNCODE := 0;
            PA_UPDATETBATCH.I_TBATCH (NTBAID,
                                      STBACODE,
                                      TRUNC (SYSDATE),
                                      'Delinquency send Public Sale Inv',
                                      SUTICODE,
                                      0,
                                      TRUNC (SYSDATE),
                                      NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_EVT ('EVTGLOB',
                                 'EVTGLOB',
                                 'D_CCSENDINFO',
                                 NCREID,
                                 NULL,
                                 DTEVENT,
                                 'GLOBAL',
                                 1,
                                 SUTICODE,
                                 NULL,
                                 NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_CREDATA (NCREID,
                                     1,
                                     NULL,
                                     'TYPE',
                                     'INFO',
                                     NULL,
                                     SINFOTYPE,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID
                 WHERE CREID = NCREID;

                PA_EVT.U_EVT_VALIDE (NCREID, SUTICODE, NRETURNCODE);
            END IF;
        END;
    END P_COLPUBSALEINVSEND;

    PROCEDURE P_DOSCOLPUBSALEINVSEND (
        NTBAID                    TBATCH.TBAID%TYPE,
        DTEVENT                   DATE,
        NITRID                    IMMOTRANCHE.ITRID%TYPE,                --new
        NIRUORDRE                 ITRRUBRIQUE.IRUORDRE%TYPE,             --new
        NIRTORDER                 ITRRUBAUCTION.IRTORDER%TYPE,           --new
        SITRCODE                  ITRRUBAUCTION.IRTCODE%TYPE,            --new
        SIRUSERIALNUMBER          ITRRUBRIQUE.IRUSERIALNUMBER%TYPE,
        --nCcaId COLLECTIONCASE.CCAID%TYPE,   --commented
        --nDosId DOSSIER.DOSID%TYPE,                               --commented
        --sTacCode DOSSIER.TACCODE%TYPE,    --commented
        NFORID                    FORMALITE.FORID%TYPE,
        SSUBJECT                  CREDATA.CDADATASTRING%TYPE,
        SMSG                      CREDATA.CDAMEMO%TYPE,
        SVEHDETAIL                CREDATA.CDADATASTRING%TYPE,
        DTMFG                     CREDATA.CDADATADATE%TYPE,
        NMILEAGE                  CREDATA.CDADATANUMBER%TYPE,
        DTBIDDING                 CREDATA.CDADATADATE%TYPE,
        STRANSMISSION             CREDATA.CDADATASTRING%TYPE,
        NAMTLOWBIDDING            CREDATA.CDADATANUMBER%TYPE,
        DTBIDTIMEFROM             CREDATA.CDADATADATE%TYPE,
        DTBIDTIMETO               CREDATA.CDADATADATE%TYPE,
        SLOCATION                 CREDATA.CDADATASTRING%TYPE,
        SBIDMAIL                  CREDATA.CDADATASTRING%TYPE,
        SNOTE                     CREDATA.CDADATASTRING%TYPE,
        SUTICODE                  UTILISATEUR.UTICODE%TYPE,
        SLANCODE                  LANGUE.LANCODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID      CREVT.CREID%TYPE;
            NADMID      ADMINISTRATIF.ADMID%TYPE;
            NASTORDRE   ADMSTATUS.ASTORDRE%TYPE;
            SDPTCODE    UTITSM.TSMSECTGESTION%TYPE;
            aCredata    TBL_ICREDATABLK := TBL_ICREDATABLK ();
        BEGIN
            NRETURNCODE := 0;
            PACOM_EVT.I_EVT ('TRANCHE',
                             'BIEN',
                             'EVITR_CAINF',
                             NCREID,
                             NITRID,
                             DTEVENT,
                             'GLOBAL',
                             1,
                             SUTICODE,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE = 0 AND SSUBJECT IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'SUBJECT',
                                      NULL,
                                      SSUBJECT,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SMSG IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'MSG',
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      SMSG,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NIRUORDRE IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'TRANCHE',
                                      'IRUORDRE',
                                      NULL,
                                      NULL,
                                      NIRUORDRE,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NIRTORDER IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'TRANCHE',
                                      'ITRORDER',
                                      NULL,
                                      NULL,
                                      NIRTORDER,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SITRCODE IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'TRANCHE',
                                      'IRTCODE',
                                      NULL,
                                      SITRCODE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SIRUSERIALNUMBER IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'TRANCHE',
                                      'IRUSERIALNUMBER',
                                      NULL,
                                      SIRUSERIALNUMBER,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SVEHDETAIL IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'VEHDETAIL',
                                      NULL,
                                      SVEHDETAIL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND DTMFG IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'DTMFG',
                                      DTMFG,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NMILEAGE IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'MILEAGE',
                                      NULL,
                                      NULL,
                                      NMILEAGE,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND DTBIDDING IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'DTBIDDING',
                                      DTBIDDING,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND STRANSMISSION IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'TRANSMISSION',
                                      NULL,
                                      STRANSMISSION,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND NAMTLOWBIDDING IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'AMTLOWBIDDING',
                                      NULL,
                                      NULL,
                                      NAMTLOWBIDDING,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND DTBIDTIMEFROM IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'DTBIDTIMEFROM',
                                      DTBIDTIMEFROM,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND DTBIDTIMETO IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'DTBIDTIMETO',
                                      DTBIDTIMETO,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SLOCATION IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'LOCATION',
                                      NULL,
                                      SLOCATION,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SBIDMAIL IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'BIDMAIL',
                                      NULL,
                                      SBIDMAIL,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0 AND SNOTE IS NOT NULL
            THEN
                P_ALIM_T_ICREDATABLK (aCredata,
                                      NCREID,
                                      NULL,
                                      NULL,
                                      'CCINFO',
                                      'NOTE',
                                      NULL,
                                      SNOTE,
                                      NULL,
                                      NULL,
                                      NULL,
                                      NRETURNCODE);
            END IF;

            -- Real insert into CREDATA,first because it's the end of the datasetbut also because an external package
            IF NRETURNCODE = 0
            THEN
                PACOM_EVT.I_CREDATA_Blk (aCredata, NRETURNCODE);
            END IF;

            IF NFORID IS NOT NULL
            THEN
                IF NRETURNCODE = 0
                THEN
                    PA_UPDATEADMINISTRATIF.I_ADMINISTRATIF (NADMID,
                                                            NULL,
                                                            NFORID,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NITRID,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            TRUNC (SYSDATE),
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            'IN',
                                                            0,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NULL,
                                                            NRETURNCODE);
                END IF;

                IF NRETURNCODE = 0
                THEN
                    BEGIN
                        SELECT TSMSECTGESTION
                          INTO SDPTCODE
                          FROM UTITSM
                         WHERE     UTICODE = SUTICODE
                               AND TSMDTEND IS NULL
                               AND ROWNUM = 1;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            SDPTCODE := NULL;
                    END;

                    PA_UPDATEADMINISTRATIF.I_ADMSTATUS3 (NADMID,
                                                         NASTORDRE,
                                                         'IN',
                                                         TRUNC (SYSDATE),
                                                         NULL,
                                                         TRUNC (SYSDATE),
                                                         NULL,
                                                         SUTICODE,
                                                         NULL,
                                                         SDPTCODE,
                                                         NRETURNCODE);

                    IF NRETURNCODE = 0
                    THEN
                        INSERT INTO ADMRECIPIENT (ADMID,
                                                  ARCORDRE,
                                                  ACTID,
                                                  ATETYPE,
                                                  ACOORDRE,
                                                  ARCNUM)
                            SELECT NADMID,
                                   ROWNUM,
                                   ACTBIDDING.ACTID,
                                   'TEL',
                                   NULL,
                                   NULL
                              FROM ACTBIDDING
                             WHERE ABIPARTTYPE = 'USEDEALER';
                    END IF;
                --loop to create ADMRECIPIENT
                END IF;
            END IF;

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID
                 WHERE CREID = NCREID;

                PA_EVT.U_EVT_VALIDE (NCREID, SUTICODE, NRETURNCODE);
            END IF;
        END;
    END P_DOSCOLPUBSALEINVSEND;

    --START procedure Process_Telephone
    PROCEDURE PROCESS_TELEPHONE (P_TELNO IN OUT VARCHAR2)
    AS
        NHASHCNT            NUMBER := 0;
        NSECHASHOCCURANCE   NUMBER;
        NPRETELEPHONE       VARCHAR2 (100);
        NPOSTTELEPHONE      VARCHAR2 (100);
        NTPHCHAR            VARCHAR2 (100);
        NCNT                NUMBER := 0;
        NHCNT               NUMBER := 0;
        NLEN                NUMBER;
    BEGIN
        NLEN := LENGTH (P_TELNO);

        FOR NCNT IN 0 .. NLEN
        LOOP
            NTPHCHAR := SUBSTR (P_TELNO, NCNT, 1);

            IF NTPHCHAR = '#'
            THEN
                NHCNT := NHCNT + 1;
            END IF;
        END LOOP;

        IF NHCNT = 2
        THEN
            NSECHASHOCCURANCE :=
                INSTR (P_TELNO,
                       '#',
                       1,
                       2);
            NPRETELEPHONE := SUBSTR (P_TELNO, 0, NSECHASHOCCURANCE - 1);
            NPOSTTELEPHONE := SUBSTR (P_TELNO, NSECHASHOCCURANCE + 1);
            P_TELNO := NPRETELEPHONE || NPOSTTELEPHONE;
        ELSE
            P_TELNO := P_TELNO;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            PAV4_TRACE.ERROR ('Exception is:' || ' ' || SQLERRM);
    END PROCESS_TELEPHONE;

    --End procedure Process_Telephone
    PROCEDURE I_ACTBIDDING (
        NACTID                      ACTBIDDING.ACTID%TYPE,
        --nAbiOrder ACTBIDDING.ABIORDER%TYPE,
        SDPTCODE                    ACTBIDDING.DPTCODE%TYPE,
        SABIPARTCODE                ACTBIDDING.ABIPARTCODE%TYPE,
        SABIPARTTYPE                ACTBIDDING.ABIPARTTYPE%TYPE,
        NABIFLAGANNFEEPAID          ACTBIDDING.ABIFLAGANNFEEPAID%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NABIORDER   ACTBIDDING.ABIORDER%TYPE;
            NSELROWS    NUMBER;
        BEGIN
            NSELROWS := 0;

            SELECT COUNT (*)
              INTO NSELROWS
              FROM ACTBIDDING
             WHERE     DPTCODE = SDPTCODE
                   AND ABIPARTCODE = SABIPARTCODE
                   AND ABIPARTTYPE = SABIPARTTYPE;

            IF NSELROWS = 0
            THEN
                SELECT NVL (MAX (ABIORDER), 0) + 1
                  INTO NABIORDER
                  FROM ACTBIDDING
                 WHERE ACTID = NACTID;

                INSERT INTO ACTBIDDING (ACTID,
                                        ABIORDER,
                                        DPTCODE,
                                        ABIPARTCODE,
                                        ABIPARTTYPE,
                                        ABIFLAGANNFEEPAID)
                     VALUES (NACTID,
                             NABIORDER,
                             SDPTCODE,
                             SABIPARTCODE,
                             SABIPARTTYPE,
                             NABIFLAGANNFEEPAID);

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            ELSE
                NRETURNCODE := 21249;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTBIDDING;

    PROCEDURE U_ACTBIDDING (
        NACTID                      ACTBIDDING.ACTID%TYPE,
        NABIORDER                   ACTBIDDING.ABIORDER%TYPE,
        SDPTCODE                    ACTBIDDING.DPTCODE%TYPE,
        SABIPARTCODE                ACTBIDDING.ABIPARTCODE%TYPE,
        SABIPARTTYPE                ACTBIDDING.ABIPARTTYPE%TYPE,
        NABIFLAGANNFEEPAID          ACTBIDDING.ABIFLAGANNFEEPAID%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NSELROWS   NUMBER;
        BEGIN
            NSELROWS := 0;

            SELECT COUNT (*)
              INTO NSELROWS
              FROM ACTBIDDING
             WHERE     DPTCODE = SDPTCODE
                   AND ABIPARTCODE = SABIPARTCODE
                   AND ABIPARTTYPE = SABIPARTTYPE;

            IF NSELROWS = 0
            THEN
                UPDATE ACTBIDDING
                   SET DPTCODE = SDPTCODE,
                       ABIPARTCODE = SABIPARTCODE,
                       ABIPARTTYPE = SABIPARTTYPE,
                       ABIFLAGANNFEEPAID = NABIFLAGANNFEEPAID
                 WHERE ACTID = NACTID AND ABIORDER = NABIORDER;

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            ELSE
                NRETURNCODE := 21249;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTBIDDING;

    PROCEDURE D_ACTBIDDING (NACTID               ACTBIDDING.ACTID%TYPE,
                            NABIORDER            ACTBIDDING.ABIORDER%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM ACTBIDDING
                  WHERE ACTID = NACTID AND ABIORDER = NABIORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTBIDDING;

    PROCEDURE I_ACTPROAGEEXT (
        NACTID            IN     ACTEUR.ACTID%TYPE,
        NACTIDGESTION     IN     ACTPROAGEEXT.ACTIDGESTION%TYPE,
        NAPRORDRE         IN     ACTPROAGEEXT.APRORDRE%TYPE,
        NTBAID            IN     TBATCH.TBAID%TYPE,
        NCREID            IN     CREVT.CREID%TYPE,
        NAGXPRECAUTION    IN     ACTPROAGEEXT.AGXPRECAUTION%TYPE,
        NAGXMTESTREL      IN     ACTPROAGEEXT.AGXMTESTREL%TYPE,
        NAGXMTCOLUNCONF   IN     ACTPROAGEEXT.AGXMTCOLUNCONF%TYPE,
        NAGXMTCOLCONF     IN     ACTPROAGEEXT.AGXMTCOLCONF%TYPE,
        NDOSID            IN     DOSSIER.DOSID%TYPE,
        SDEVCODE          IN     ACTPROAGE.DEVCODE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    IS
    BEGIN
        BEGIN
            INSERT INTO ACTPROAGE (ACTID,
                                   ACTIDGESTION,
                                   APRORDRE,
                                   DOSID,
                                   DEVCODE)
                 VALUES (NACTID,
                         NACTIDGESTION,
                         NAPRORDRE,
                         NDOSID,
                         SDEVCODE);

            INSERT INTO ACTPROAGEEXT (ACTID,
                                      ACTIDGESTION,
                                      APRORDRE,
                                      TBAID,
                                      CREID,
                                      AGXPRECAUTION,
                                      AGXMTESTREL,
                                      AGXMTCOLUNCONF,
                                      AGXMTCOLCONF)
                 VALUES (NACTID,
                         NACTIDGESTION,
                         NAPRORDRE,
                         NTBAID,
                         NCREID,
                         NAGXPRECAUTION,
                         NAGXMTESTREL,
                         NAGXMTCOLUNCONF,
                         NAGXMTCOLCONF);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROAGEEXT;

    PROCEDURE I_ACTPROCEDUREEXT (
        NACTID                 IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE              IN OUT ACTPROCEDUREEXT.APRORDRE%TYPE,
        NCCAID                 IN     COLLECTIONCASE.CCAID%TYPE,
        NTBAID                 IN     TBATCH.TBAID%TYPE,
        NCREID                 IN     CREVT.CREID%TYPE,
        SAPXTYPEFORGIVENESS    IN     ACTPROCEDUREEXT.APXTYPEFORGIVENESS%TYPE,
        NACTIDCOURT            IN     ACTPROCEDUREEXT.ACTIDCOURT%TYPE,
        SAPXSTATUS             IN     ACTPROCEDUREEXT.APXSTATUS%TYPE,
        DTAPXDTAPP             IN     ACTPROCEDUREEXT.APXDTAPP%TYPE,
        SAPXORIGIN             IN     ACTPROCEDUREEXT.APXORIGIN%TYPE,
        DTAPXDTREG             IN     ACTPROCEDUREEXT.APXDTREG%TYPE,
        DTAPXDTDBOS            IN     ACTPROCEDUREEXT.APXDTDBOS%TYPE,
        NAPXFLAGDEBTOR         IN     ACTPROCEDUREEXT.APXFLAGDEBTOR%TYPE,
        DTAPXDTLIAREP          IN     ACTPROCEDUREEXT.APXDTLIAREP%TYPE,
        DTAPXDTOBJAPP          IN     ACTPROCEDUREEXT.APXDTOBJAPP%TYPE,
        DTAPXDTRELVALSH        IN     ACTPROCEDUREEXT.APXDTRELVALSH%TYPE,
        DTAPXDTDOOF            IN     ACTPROCEDUREEXT.APXDTDOOF%TYPE,
        DTAPXDTDFOS            IN     ACTPROCEDUREEXT.APXDTDFOS%TYPE,
        DTAPXDTDBQ             IN     ACTPROCEDUREEXT.APXDTDBQ%TYPE,
        DTAPXDTCREASSE         IN     ACTPROCEDUREEXT.APXDTCREASSE%TYPE,
        DTAPXDTDFQ             IN     ACTPROCEDUREEXT.APXDTDFQ%TYPE,
        NAPXFLAGADMIN          IN     ACTPROCEDUREEXT.APXFLAGADMIN%TYPE,
        NAPXFLAGSCANNED        IN     ACTPROCEDUREEXT.APXFLAGSCANNED%TYPE,
        SAPXWCM                IN     ACTPROCEDUREEXT.APXWCM%TYPE,
        NAPXDOCNUM             IN     ACTPROCEDUREEXT.APXDOCNUM%TYPE,
        NAPXFLAGREACCEPT       IN     ACTPROCEDUREEXT.APXFLAGREACCEPT%TYPE,
        DTAPXDTOBJDEAD         IN     ACTPROCEDUREEXT.APXDTOBJDEAD%TYPE,
        SAPXOBJRES             IN     ACTPROCEDUREEXT.APXOBJRES%TYPE,
        NAPXFLAGOBJREF         IN     ACTPROCEDUREEXT.APXFLAGOBJREF%TYPE,
        NAPXFLAGASJOIN         IN     ACTPROCEDUREEXT.APXFLAGASJOIN%TYPE,
        DTAPXDTOBJRES          IN     ACTPROCEDUREEXT.APXDTOBJRES%TYPE,
        SAPXRESCCR             IN     ACTPROCEDUREEXT.APXRESCCR%TYPE,
        DTAPXDTRCR             IN     ACTPROCEDUREEXT.APXDTRCR%TYPE,
        DTAPXDTRR              IN     ACTPROCEDUREEXT.APXDTRR%TYPE,
        SAPXRESRR              IN     ACTPROCEDUREEXT.APXRESRR%TYPE,
        DTAPXDTRELFIRSTPAY     IN     ACTPROCEDUREEXT.APXDTRELFIRSTPAY%TYPE,
        DTAPXDTCTA             IN     ACTPROCEDUREEXT.APXDTCTA%TYPE,
        DTAPXDTCTD             IN     ACTPROCEDUREEXT.APXDTCTD%TYPE,
        SAPXRESCT              IN     ACTPROCEDUREEXT.APXRESCT%TYPE,
        NAPXFLAGCONFLICT       IN     ACTPROCEDUREEXT.APXFLAGCONFLICT%TYPE,
        NAPXFLAGOWNRE          IN     ACTPROCEDUREEXT.APXFLAGOWNRE%TYPE,
        NAPXFLAGPROVSEI        IN     ACTPROCEDUREEXT.APXFLAGPROVSEI%TYPE,
        NAPXFLAGPEREXCEP       IN     ACTPROCEDUREEXT.APXFLAGPEREXCEP%TYPE,
        NAPXFLAGCOMAUC         IN     ACTPROCEDUREEXT.APXFLAGCOMAUC%TYPE,
        NAPXFLAGSEIRESERV      IN     ACTPROCEDUREEXT.APXFLAGSEIRESERV%TYPE,
        NAPXFLAGASGNORDER      IN     ACTPROCEDUREEXT.APXFLAGASGNORDER%TYPE,
        DTAPXDTPAR             IN     ACTPROCEDUREEXT.APXDTPAR%TYPE,
        DTAPXDTPAREV           IN     ACTPROCEDUREEXT.APXDTPAREV%TYPE,
        DTAPXDTPRAPP           IN     ACTPROCEDUREEXT.APXDTPRAPP%TYPE,
        DTAPXDTPRCCI           IN     ACTPROCEDUREEXT.APXDTPRCCI%TYPE,
        DTAPXDTDTAPP           IN     ACTPROCEDUREEXT.APXDTDTAPP%TYPE,
        DTAPXDTCCN             IN     ACTPROCEDUREEXT.APXDTCCN%TYPE,
        DTAPXDTCCR             IN     ACTPROCEDUREEXT.APXDTCCR%TYPE,
        DTAPXDTOBJAPP1         IN     ACTPROCEDUREEXT.APXDTOBJAPP1%TYPE,
        DTAPXDTOBJAPP2         IN     ACTPROCEDUREEXT.APXDTOBJAPP2%TYPE,
        DTAPXDTOBJAPP3         IN     ACTPROCEDUREEXT.APXDTOBJAPP3%TYPE,
        NAPXFLAGCAROWNER       IN     ACTPROCEDUREEXT.APXFLAGCAROWNER%TYPE,
        NAPXMODELYR            IN     ACTPROCEDUREEXT.APXMODELYR%TYPE,
        NAPXMTESTINSTALL       IN     ACTPROCEDUREEXT.APXMTESTINSTALL%TYPE,
        NAPXINSTPER            IN     ACTPROCEDUREEXT.APXINSTPER%TYPE,
        NAPXTXREPAY            IN     ACTPROCEDUREEXT.APXTXREPAY%TYPE,
        DTAPXDTESTLASTPAY      IN     ACTPROCEDUREEXT.APXDTESTLASTPAY%TYPE,
        NAPXFLAGCLCONF         IN     ACTPROCEDUREEXT.APXFLAGCLCONF%TYPE,
        NAPXMTCONFCL           IN     ACTPROCEDUREEXT.APXMTCONFCL%TYPE,
        DTAPXDTSTARTCYC        IN     ACTPROCEDUREEXT.APXDTSTARTCYC%TYPE,
        DTAPXDTENDCYC          IN     ACTPROCEDUREEXT.APXDTENDCYC%TYPE,
        DTAPXDTINSTMONTH       IN     ACTPROCEDUREEXT.APXDTINSTMONTH%TYPE,
        NAPXMTESTREL           IN     ACTPROCEDUREEXT.APXMTESTREL%TYPE,
        NAPXMTUNCONFCL         IN     ACTPROCEDUREEXT.APXMTUNCONFCL%TYPE,
        DTAPXDTESTFIRSTPAY     IN     ACTPROCEDUREEXT.APXDTESTFIRSTPAY%TYPE,
        DTAPXDTREPDUE          IN     ACTPROCEDUREEXT.APXDTREPDUE%TYPE,
        DTAPXDTREPORTED        IN     ACTPROCEDUREEXT.APXDTREPORTED%TYPE,
        SAPXCREDASSEM          IN     ACTPROCEDUREEXT.APXCREDASSEM%TYPE,
        DTAPXDTASSEMBLY        IN     ACTPROCEDUREEXT.APXDTASSEMBLY%TYPE,
        SAPXASSEMLOC           IN     ACTPROCEDUREEXT.APXASSEMLOC%TYPE,
        DTAPXDTASSEMCYC        IN     ACTPROCEDUREEXT.APXDTASSEMCYC%TYPE,
        NAPXFLAGOBJNOTREC      IN     ACTPROCEDUREEXT.APXFLAGOBJNOTREC%TYPE,
        SAPXRESOBJREJ          IN     ACTPROCEDUREEXT.APXRESOBJREJ%TYPE,
        SAPXOBJRESULT          IN     ACTPROCEDUREEXT.APXOBJRESULT%TYPE,
        NAPXMTREPSECR          IN     ACTPROCEDUREEXT.APXMTREPSECR%TYPE,
        NAPXMTCONFSECR         IN     ACTPROCEDUREEXT.APXMTCONFSECR%TYPE,
        NAPXMTREPCL            IN     ACTPROCEDUREEXT.APXMTREPCL%TYPE,
        DTAPXDTCHREP           IN     ACTPROCEDUREEXT.APXDTCHREP%TYPE,
        SAPXRESCR              IN     ACTPROCEDUREEXT.APXRESCR%TYPE,
        NAPXFLAGPUBBOND        IN     ACTPROCEDUREEXT.APXFLAGPUBBOND%TYPE,
        NAPXVOTRATIOSR         IN     ACTPROCEDUREEXT.APXVOTRATIOSR%TYPE,
        NAPXVOTRATIOCL         IN     ACTPROCEDUREEXT.APXVOTRATIOCL%TYPE,
        NAPXMTISSPRBOND        IN     ACTPROCEDUREEXT.APXMTISSPRBOND%TYPE,
        NAPXFLAGVOTINREC       IN     ACTPROCEDUREEXT.APXFLAGVOTINREC%TYPE,
        NAPXMTDEBSWAP          IN     ACTPROCEDUREEXT.APXMTDEBSWAP%TYPE,
        DTAPXDTSTARTPAY        IN     ACTPROCEDUREEXT.APXDTSTARTPAY%TYPE,
        NAPXMANAGE             IN     ACTPROCEDUREEXT.APXMANAGE%TYPE,
        NAPXINCHARGE           IN     ACTPROCEDUREEXT.APXINCHARGE%TYPE,
        NAPXACOORDREINCHARGE   IN     ACTPROCEDUREEXT.APXINCHARGECONTACTNO%TYPE,
        NAPXACTIDLEGAGENT      IN     ACTPROCEDUREEXT.APXLEGAGENT%TYPE,
        NAPXACOORDRELEGAGENT   IN     ACTPROCEDUREEXT.APXLEGAGENTCONTACTNO%TYPE,
        NAPXACTIDAPPLICANT     IN     ACTPROCEDUREEXT.APXAPPLICANT%TYPE,
        NAPXMTCONFPRINCE       IN     ACTPROCEDUREEXT.APXMTCONFPRINCE%TYPE,
        NAPXMTCONFINT          IN     ACTPROCEDUREEXT.APXMTCONFINT%TYPE,
        NAPXMTDEBSWAPVAL       IN     ACTPROCEDUREEXT.APXMTDEBSWAPVAL%TYPE,
        NAPXMTSTOCKFACE        IN     ACTPROCEDUREEXT.APXMTSTOCKFACE%TYPE,
        NAPXMTISSPRICE         IN     ACTPROCEDUREEXT.APXMTISSPRICE%TYPE,
        NAPXNBSTOCK            IN     ACTPROCEDUREEXT.APXNBSTOCK%TYPE,
        NAPXMTCBIP             IN     ACTPROCEDUREEXT.APXMTCBIP%TYPE,
        NAPXMTREPAYYR          IN     ACTPROCEDUREEXT.APXREPAYYR%TYPE,
        NAPXMTSRRP             IN     ACTPROCEDUREEXT.APXMTSRRP%TYPE,
        NAPXMTSRRI             IN     ACTPROCEDUREEXT.APXMTSRRI%TYPE,
        NAPXMTCRP              IN     ACTPROCEDUREEXT.APXMTCRP%TYPE,
        NAPXMTCRI              IN     ACTPROCEDUREEXT.APXMTCRI%TYPE,
        NAPXTXDISCOUNT         IN     ACTPROCEDUREEXT.APXTXDISCOUNT%TYPE,
        NAPXMTSRCV             IN     ACTPROCEDUREEXT.APXMTSRCV%TYPE,
        NAPXMTCCV              IN     ACTPROCEDUREEXT.APXMTCCV%TYPE,
        NAPXTXCVR              IN     ACTPROCEDUREEXT.APXTXCVR%TYPE,
        SAPRNUM                IN     ACTPROCEDURE.APRNUM%TYPE,
        SAPRTYPE               IN     ACTPROCEDURE.APRTYPE%TYPE,
        DTAPRDTDEB             IN     ACTPROCEDURE.APRDTDEB%TYPE,
        DTAPRDTFIN             IN     ACTPROCEDURE.APRDTFIN%TYPE,
        NAPRFLAGDEMANDEUR      IN     ACTPROCEDURE.APRFLAGDEMANDEUR%TYPE,
        SAPRTYPETRIBUNAL       IN     ACTPROCEDURE.APRTYPETRIBUNAL%TYPE,
        SAPRNIVEAURISQUE       IN     ACTPROCEDURE.APRNIVEAURISQUE%TYPE,
        SAPRMEMOFAIT           IN     ACTPROCEDURE.APRMEMOFAIT%TYPE,
        SAPRTRANSACTION        IN     ACTPROCEDURE.APRTRANSACTION%TYPE,
        SAPRTYPEMISSION        IN     ACTPROCEDURE.APRTYPEMISSION%TYPE,
        SAPRMEMOACCEDIT        IN     ACTPROCEDURE.APRMEMOACCEDIT%TYPE,
        NRETURNCODE            IN OUT NUMBER)
    IS
    BEGIN
        DECLARE
            NAPRORDRE1   NUMBER;
        BEGIN
            IF NAPRORDRE IS NULL
            THEN
                SELECT NVL (MAX (APRORDRE), 0) + 1
                  INTO NAPRORDRE1
                  FROM ACTPROCEDURE
                 WHERE ACTID = NACTID;

                NAPRORDRE := NAPRORDRE1;
            END IF;

            INSERT INTO ACTPROCEDURE (ACTID,
                                      APRORDRE,
                                      APRNUM,
                                      APRTYPE,
                                      APRDTDEB,
                                      CREID,
                                      APRDTFIN,
                                      APRFLAGDEMANDEUR,
                                      APRTYPETRIBUNAL,
                                      APRNIVEAURISQUE,
                                      APRMEMOFAIT,
                                      APRTRANSACTION,
                                      APRTYPEMISSION,
                                      APRMEMOACCEDIT)
                 VALUES (NACTID,
                         NAPRORDRE,
                         SAPRNUM,
                         SAPRTYPE,
                         DTAPRDTDEB,
                         NCREID,
                         DTAPRDTFIN,
                         NAPRFLAGDEMANDEUR,
                         SAPRTYPETRIBUNAL,
                         SAPRNIVEAURISQUE,
                         SAPRMEMOFAIT,
                         SAPRTRANSACTION,
                         SAPRTYPEMISSION,
                         SAPRMEMOACCEDIT);

            INSERT INTO ACTPROCEDUREEXT (ACTID,
                                         APRORDRE,
                                         CCAID,
                                         TBAID,
                                         CREID,
                                         APXTYPEFORGIVENESS,
                                         ACTIDCOURT,
                                         APXSTATUS,
                                         APXDTAPP,
                                         APXORIGIN,
                                         APXDTREG,
                                         APXDTDBOS,
                                         APXFLAGDEBTOR,
                                         APXDTLIAREP,
                                         APXDTOBJAPP,
                                         APXDTRELVALSH,
                                         APXDTDOOF,
                                         APXDTDFOS,
                                         APXDTDBQ,
                                         APXDTCREASSE,
                                         APXDTDFQ,
                                         APXFLAGADMIN,
                                         APXFLAGSCANNED,
                                         APXWCM,
                                         APXDOCNUM,
                                         APXFLAGREACCEPT,
                                         APXDTOBJDEAD,
                                         APXOBJRES,
                                         APXFLAGOBJREF,
                                         APXFLAGASJOIN,
                                         APXDTOBJRES,
                                         APXRESCCR,
                                         APXDTRCR,
                                         APXDTRR,
                                         APXRESRR,
                                         APXDTRELFIRSTPAY,
                                         APXDTCTA,
                                         APXDTCTD,
                                         APXRESCT,
                                         APXFLAGCONFLICT,
                                         APXFLAGOWNRE,
                                         APXFLAGPROVSEI,
                                         APXFLAGPEREXCEP,
                                         APXFLAGCOMAUC,
                                         APXFLAGSEIRESERV,
                                         APXFLAGASGNORDER,
                                         APXDTPAR,
                                         APXDTPAREV,
                                         APXDTPRAPP,
                                         APXDTPRCCI,
                                         APXDTDTAPP,
                                         APXDTCCN,
                                         APXDTCCR,
                                         APXDTOBJAPP1,
                                         APXDTOBJAPP2,
                                         APXDTOBJAPP3,
                                         APXFLAGCAROWNER,
                                         APXMODELYR,
                                         APXMTESTINSTALL,
                                         APXINSTPER,
                                         APXTXREPAY,
                                         APXDTESTLASTPAY,
                                         APXFLAGCLCONF,
                                         APXMTCONFCL,
                                         APXDTSTARTCYC,
                                         APXDTENDCYC,
                                         APXDTINSTMONTH,
                                         APXMTESTREL,
                                         APXMTUNCONFCL,
                                         APXDTESTFIRSTPAY,
                                         APXDTREPDUE,
                                         APXDTREPORTED,
                                         APXCREDASSEM,
                                         APXDTASSEMBLY,
                                         APXASSEMLOC,
                                         APXDTASSEMCYC,
                                         APXFLAGOBJNOTREC,
                                         APXRESOBJREJ,
                                         APXOBJRESULT,
                                         APXMTREPSECR,
                                         APXMTCONFSECR,
                                         APXMTREPCL,
                                         APXDTCHREP,
                                         APXRESCR,
                                         APXFLAGPUBBOND,
                                         APXVOTRATIOSR,
                                         APXVOTRATIOCL,
                                         APXMTISSPRBOND,
                                         APXFLAGVOTINREC,
                                         APXMTDEBSWAP,
                                         APXDTSTARTPAY,
                                         APXMANAGE,
                                         APXINCHARGE,
                                         APXINCHARGECONTACTNO,
                                         APXLEGAGENT,
                                         APXLEGAGENTCONTACTNO,
                                         APXAPPLICANT,
                                         APXMTCONFPRINCE,
                                         APXMTCONFINT,
                                         APXMTDEBSWAPVAL,
                                         APXMTSTOCKFACE,
                                         APXMTISSPRICE,
                                         APXNBSTOCK,
                                         APXMTCBIP,
                                         APXREPAYYR,
                                         APXMTSRRP,
                                         APXMTSRRI,
                                         APXMTCRP,
                                         APXMTCRI,
                                         APXTXDISCOUNT,
                                         APXMTSRCV,
                                         APXMTCCV,
                                         APXTXCVR)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NCCAID,
                         NTBAID,
                         NCREID,
                         SAPXTYPEFORGIVENESS,
                         NACTIDCOURT,
                         SAPXSTATUS,
                         DTAPXDTAPP,
                         SAPXORIGIN,
                         DTAPXDTREG,
                         DTAPXDTDBOS,
                         NAPXFLAGDEBTOR,
                         DTAPXDTLIAREP,
                         DTAPXDTOBJAPP,
                         DTAPXDTRELVALSH,
                         DTAPXDTDOOF,
                         DTAPXDTDFOS,
                         DTAPXDTDBQ,
                         DTAPXDTCREASSE,
                         DTAPXDTDFQ,
                         NAPXFLAGADMIN,
                         NAPXFLAGSCANNED,
                         SAPXWCM,
                         NAPXDOCNUM,
                         NAPXFLAGREACCEPT,
                         DTAPXDTOBJDEAD,
                         SAPXOBJRES,
                         NAPXFLAGOBJREF,
                         NAPXFLAGASJOIN,
                         DTAPXDTOBJRES,
                         SAPXRESCCR,
                         DTAPXDTRCR,
                         DTAPXDTRR,
                         SAPXRESRR,
                         DTAPXDTRELFIRSTPAY,
                         DTAPXDTCTA,
                         DTAPXDTCTD,
                         SAPXRESCT,
                         NAPXFLAGCONFLICT,
                         NAPXFLAGOWNRE,
                         NAPXFLAGPROVSEI,
                         NAPXFLAGPEREXCEP,
                         NAPXFLAGCOMAUC,
                         NAPXFLAGSEIRESERV,
                         NAPXFLAGASGNORDER,
                         DTAPXDTPAR,
                         DTAPXDTPAREV,
                         DTAPXDTPRAPP,
                         DTAPXDTPRCCI,
                         DTAPXDTDTAPP,
                         DTAPXDTCCN,
                         DTAPXDTCCR,
                         DTAPXDTOBJAPP1,
                         DTAPXDTOBJAPP2,
                         DTAPXDTOBJAPP3,
                         NAPXFLAGCAROWNER,
                         NAPXMODELYR,
                         NAPXMTESTINSTALL,
                         NAPXINSTPER,
                         NAPXTXREPAY,
                         DTAPXDTESTLASTPAY,
                         NAPXFLAGCLCONF,
                         NAPXMTCONFCL,
                         DTAPXDTSTARTCYC,
                         DTAPXDTENDCYC,
                         DTAPXDTINSTMONTH,
                         NAPXMTESTREL,
                         NAPXMTUNCONFCL,
                         DTAPXDTESTFIRSTPAY,
                         DTAPXDTREPDUE,
                         DTAPXDTREPORTED,
                         SAPXCREDASSEM,
                         DTAPXDTASSEMBLY,
                         SAPXASSEMLOC,
                         DTAPXDTASSEMCYC,
                         NAPXFLAGOBJNOTREC,
                         SAPXRESOBJREJ,
                         SAPXOBJRESULT,
                         NAPXMTREPSECR,
                         NAPXMTCONFSECR,
                         NAPXMTREPCL,
                         DTAPXDTCHREP,
                         SAPXRESCR,
                         NAPXFLAGPUBBOND,
                         NAPXVOTRATIOSR,
                         NAPXVOTRATIOCL,
                         NAPXMTISSPRBOND,
                         NAPXFLAGVOTINREC,
                         NAPXMTDEBSWAP,
                         DTAPXDTSTARTPAY,
                         NAPXMANAGE,
                         NAPXINCHARGE,
                         NAPXACOORDREINCHARGE,
                         NAPXACTIDLEGAGENT,
                         NAPXACOORDRELEGAGENT,
                         NAPXACTIDAPPLICANT,
                         NAPXMTCONFPRINCE,
                         NAPXMTCONFINT,
                         NAPXMTDEBSWAPVAL,
                         NAPXMTSTOCKFACE,
                         NAPXMTISSPRICE,
                         NAPXNBSTOCK,
                         NAPXMTCBIP,
                         NAPXMTREPAYYR,
                         NAPXMTSRRP,
                         NAPXMTSRRI,
                         NAPXMTCRP,
                         NAPXMTCRI,
                         NAPXTXDISCOUNT,
                         NAPXMTSRCV,
                         NAPXMTCCV,
                         NAPXTXCVR);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROCEDUREEXT;

    PROCEDURE I_ACTPROJUGEMENTEXT (
        NACTID               IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE            IN     ACTPROJUGEMENTEXT.APRORDRE%TYPE,
        NAPJTYPE             IN     ACTPROJUGEMENTEXT.APJTYPE%TYPE,
        NTBAID               IN     TBATCH.TBAID%TYPE,
        NCREID               IN     CREVT.CREID%TYPE,
        DTAJXDTPRECLAIM      IN     ACTPROJUGEMENTEXT.AJXDTPRECLAIM%TYPE,
        DTAAJXDTRESORD       IN     ACTPROJUGEMENTEXT.AJXDTRESORD%TYPE,
        DTAAJXDTCOURTACC     IN     ACTPROJUGEMENTEXT.AJXDTCOURTACC%TYPE,
        DTAPJDTCOURTREJECT   IN     ACTPROJUGEMENT.APJDTCOURTREJECT%TYPE,
        DTAPJDTDEB           IN     ACTPROJUGEMENT.APJDTDEB%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    IS
    BEGIN
        BEGIN
            INSERT INTO ACTPROJUGEMENT (ACTID,
                                        APRORDRE,
                                        APJTYPE,
                                        APJDTCOURTREJECT,
                                        APJDTDEB)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NAPJTYPE,
                         DTAPJDTCOURTREJECT,
                         DTAPJDTDEB);

            INSERT INTO ACTPROJUGEMENTEXT (ACTID,
                                           APRORDRE,
                                           APJTYPE,
                                           TBAID,
                                           CREID,
                                           AJXDTPRECLAIM,
                                           AJXDTRESORD,
                                           AJXDTCOURTACC)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NAPJTYPE,
                         NTBAID,
                         NCREID,
                         DTAJXDTPRECLAIM,
                         DTAAJXDTRESORD,
                         DTAAJXDTCOURTACC);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROJUGEMENTEXT;

    PROCEDURE I_ACTPROPHAAUDIENCEEXT (
        NACTID           IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE        IN     ACTPROPHAAUDIENCEEXT.APRORDRE%TYPE,
        NAPPORDRE        IN     ACTPROPHAAUDIENCEEXT.APPORDRE%TYPE,
        NAPAORDRE        IN     ACTPROPHAAUDIENCEEXT.APAORDRE%TYPE,
        SROLCODE         IN     ACTPROPHAAUDIENCEEXT.ROLCODE%TYPE,
        NACTIDHUISSIER   IN     ACTPROPHAAUDIENCE.ACTIDHUISSIER%TYPE,
        NTBAID           IN     TBATCH.TBAID%TYPE,
        NCREID           IN     CREVT.CREID%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    IS
    BEGIN
        INSERT INTO ACTPROPHAAUDIENCE (ACTID,
                                       APRORDRE,
                                       APPORDRE,
                                       APAORDRE,
                                       ACTIDHUISSIER)
             VALUES (NACTID,
                     NAPRORDRE,
                     NAPPORDRE,
                     NAPAORDRE,
                     NACTIDHUISSIER);

        INSERT INTO ACTPROPHAAUDIENCEEXT (ACTID,
                                          APRORDRE,
                                          APPORDRE,
                                          APAORDRE,
                                          ROLCODE,
                                          TBAID,
                                          CREID)
             VALUES (NACTID,
                     NAPRORDRE,
                     NAPPORDRE,
                     NAPAORDRE,
                     SROLCODE,
                     NTBAID,
                     NCREID);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_ACTPROPHAAUDIENCEEXT;

    PROCEDURE I_ACTPROMEMO (NACTID        IN     ACTEUR.ACTID%TYPE,
                            NAPRORDRE     IN     ACTPROMEMO.APRORDRE%TYPE,
                            NAPMORDER     IN     ACTPROMEMO.APMORDER%TYPE,
                            DTAPMDTREG    IN     ACTPROMEMO.APMDTREG%TYPE,
                            SDPTCODE      IN     ACTPROMEMO.DPTCODE%TYPE,
                            SUTICODE      IN     ACTPROMEMO.UTICODE%TYPE,
                            SAPMMEMO      IN     ACTPROMEMO.APMMEMO%TYPE,
                            NTBAID        IN     TBATCH.TBAID%TYPE,
                            NCREID        IN     CREVT.CREID%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        DECLARE
            NAPMORDERE   NUMBER;
        BEGIN
            IF NAPMORDER IS NULL
            THEN
                SELECT NVL (MAX (APMORDER), 0) + 1
                  INTO NAPMORDERE
                  FROM ACTPROMEMO
                 WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
            ELSE
                NAPMORDERE := NAPMORDER;
            END IF;

            INSERT INTO ACTPROMEMO (ACTID,
                                    APRORDRE,
                                    APMORDER,
                                    APMDTREG,
                                    DPTCODE,
                                    UTICODE,
                                    APMMEMO,
                                    CREID,
                                    TBAID)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NAPMORDERE,
                         DTAPMDTREG,
                         SDPTCODE,
                         SUTICODE,
                         SAPMMEMO,
                         NCREID,
                         NTBAID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPROMEMO;

    PROCEDURE D_ACTPROCEDUREEXT (
        NACTID        IN     ACTPROCEDUREEXT.ACTID%TYPE,
        NAPRORDRE     IN     ACTPROCEDUREEXT.APRORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        DELETE ACTPROCEDUREEXT
         WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_ACTPROCEDUREEXT;

    PROCEDURE D_ACTPROAGEEXT (
        NACTID          IN     ACTPROAGEEXT.ACTID%TYPE,
        NAPRORDRE       IN     ACTPROAGEEXT.APRORDRE%TYPE,
        NACTIDGESTION   IN     ACTPROAGEEXT.ACTIDGESTION%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    IS
    BEGIN
        DELETE ACTPROAGEEXT
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND ACTIDGESTION = NACTIDGESTION;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_ACTPROAGEEXT;

    PROCEDURE D_ACTPROJUGEMENTEXT (
        NACTID        IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE     IN     ACTPROJUGEMENTEXT.APRORDRE%TYPE,
        SAPJTYPE      IN     ACTPROJUGEMENTEXT.APJTYPE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        DELETE ACTPROJUGEMENTEXT
         WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APJTYPE = SAPJTYPE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_ACTPROJUGEMENTEXT;

    PROCEDURE D_ACTPROPHAAUDIENCEEXT (
        NACTID        IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE     IN     ACTPROPHAAUDIENCEEXT.APRORDRE%TYPE,
        NAPPORDRE     IN     ACTPROPHAAUDIENCEEXT.APPORDRE%TYPE,
        NAPAORDRE     IN     ACTPROPHAAUDIENCEEXT.APAORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        DELETE ACTPROPHAAUDIENCEEXT
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND APPORDRE = NAPPORDRE
               AND APAORDRE = NAPAORDRE;

        DELETE ACTPROPHAAUDIENCE
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND APPORDRE = NAPPORDRE
               AND APAORDRE = NAPAORDRE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_ACTPROPHAAUDIENCEEXT;

    PROCEDURE D_ACTPROMEMO (NACTID        IN     ACTEUR.ACTID%TYPE,
                            NAPRORDRE     IN     ACTPROMEMO.APRORDRE%TYPE,
                            NAPMORDER     IN     ACTPROMEMO.APMORDER%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        DELETE ACTPROMEMO
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND APMORDER = NAPMORDER;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_ACTPROMEMO;

    PROCEDURE U_ACTPROAGEEXT (
        NACTID            IN     ACTEUR.ACTID%TYPE,
        NACTIDGESTION     IN     ACTPROAGEEXT.ACTIDGESTION%TYPE,
        NAPRORDRE         IN     ACTPROAGEEXT.APRORDRE%TYPE,
        NDOSID            IN     ACTPROAGE.DOSID%TYPE,
        NAGXPRECAUTION    IN     ACTPROAGEEXT.AGXPRECAUTION%TYPE,
        NAGXMTESTREL      IN     ACTPROAGEEXT.AGXMTESTREL%TYPE,
        NAGXMTCOLUNCONF   IN     ACTPROAGEEXT.AGXMTCOLUNCONF%TYPE,
        NAGXMTCOLCONF     IN     ACTPROAGEEXT.AGXMTCOLCONF%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    IS
    BEGIN
        UPDATE ACTPROAGE
           SET DOSID = NDOSID
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND ACTIDGESTION = NACTIDGESTION;

        UPDATE ACTPROAGEEXT
           SET AGXPRECAUTION = NAGXPRECAUTION,
               AGXMTESTREL = NAGXMTESTREL,
               AGXMTCOLUNCONF = NAGXMTCOLUNCONF,
               AGXMTCOLCONF = NAGXMTCOLCONF
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND ACTIDGESTION = NACTIDGESTION;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_ACTPROAGEEXT;

    PROCEDURE U_ACTPROJUGEMENTEXT (
        NACTID               IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE            IN     ACTPROJUGEMENTEXT.APRORDRE%TYPE,
        SAPJTYPE             IN     ACTPROJUGEMENTEXT.APJTYPE%TYPE,
        DTAJXDTPRECLAIM      IN     ACTPROJUGEMENTEXT.AJXDTPRECLAIM%TYPE,
        DTAAJXDTRESORD       IN     ACTPROJUGEMENTEXT.AJXDTRESORD%TYPE,
        DTAAJXDTCOURTACC     IN     ACTPROJUGEMENTEXT.AJXDTCOURTACC%TYPE,
        DTAPJDTCOURTREJECT   IN     ACTPROJUGEMENT.APJDTCOURTREJECT%TYPE,
        DTAPJDTDEB           IN     ACTPROJUGEMENT.APJDTDEB%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    IS
    BEGIN
        UPDATE ACTPROJUGEMENT
           SET APJDTCOURTREJECT = DTAPJDTCOURTREJECT, APJDTDEB = DTAPJDTDEB
         WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APJTYPE = SAPJTYPE;

        UPDATE ACTPROJUGEMENTEXT
           SET AJXDTPRECLAIM = DTAJXDTPRECLAIM,
               AJXDTRESORD = DTAAJXDTRESORD,
               AJXDTCOURTACC = DTAAJXDTCOURTACC
         WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APJTYPE = SAPJTYPE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_ACTPROJUGEMENTEXT;

    PROCEDURE U_ACTPROPHAAUDIENCEEXT (
        NACTID           IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE        IN     ACTPROPHAAUDIENCEEXT.APRORDRE%TYPE,
        NAPPORDRE        IN     ACTPROPHAAUDIENCEEXT.APPORDRE%TYPE,
        NAPAORDRE        IN     ACTPROPHAAUDIENCEEXT.APAORDRE%TYPE,
        SROLCODE         IN     ACTPROPHAAUDIENCEEXT.ROLCODE%TYPE,
        NACTIDHUISSIER   IN     ACTPROPHAAUDIENCE.ACTIDHUISSIER%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    IS
    BEGIN
        UPDATE ACTPROPHAAUDIENCEEXT
           SET ROLCODE = SROLCODE
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND APPORDRE = NAPPORDRE
               AND APAORDRE = NAPAORDRE;

        UPDATE ACTPROPHAAUDIENCE
           SET ACTIDHUISSIER = NACTIDHUISSIER
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND APPORDRE = NAPPORDRE
               AND APAORDRE = NAPAORDRE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_ACTPROPHAAUDIENCEEXT;

    PROCEDURE U_ACTPROMEMO (NACTID        IN     ACTEUR.ACTID%TYPE,
                            NAPRORDRE     IN     ACTPROMEMO.APRORDRE%TYPE,
                            NAPMORDER     IN     ACTPROMEMO.APMORDER%TYPE,
                            DTAPMDTREG    IN     ACTPROMEMO.APMDTREG%TYPE,
                            SDPTCODE      IN     ACTPROMEMO.DPTCODE%TYPE,
                            SUTICODE      IN     ACTPROMEMO.UTICODE%TYPE,
                            SAPMMEMO      IN     ACTPROMEMO.APMMEMO%TYPE,
                            NTBAID        IN     TBATCH.TBAID%TYPE,
                            NCREID        IN     CREVT.CREID%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        UPDATE ACTPROMEMO
           SET APMDTREG = DTAPMDTREG,
               DPTCODE = SDPTCODE,
               UTICODE = SUTICODE,
               APMMEMO = SAPMMEMO
         WHERE     ACTID = NACTID
               AND APRORDRE = NAPRORDRE
               AND APMORDER = NAPMORDER;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_ACTPROMEMO;

    PROCEDURE U_ACTPROCEDUREEXT (
        NACTID                  IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE               IN     ACTPROCEDUREEXT.APRORDRE%TYPE,
        NCCAID                  IN     COLLECTIONCASE.CCAID%TYPE,
        NTBAID                  IN     TBATCH.TBAID%TYPE,
        NCREID                  IN     CREVT.CREID%TYPE,
        SAPXTYPEFORGIVENESS     IN     ACTPROCEDUREEXT.APXTYPEFORGIVENESS%TYPE,
        NACTIDCOURT             IN     ACTPROCEDUREEXT.ACTIDCOURT%TYPE,
        SAPXSTATUS              IN     ACTPROCEDUREEXT.APXSTATUS%TYPE,
        DTAPXDTAPP              IN     ACTPROCEDUREEXT.APXDTAPP%TYPE,
        SAPXORIGIN              IN     ACTPROCEDUREEXT.APXORIGIN%TYPE,
        DTAPXDTREG              IN     ACTPROCEDUREEXT.APXDTREG%TYPE,
        DTAPXDTBOS              IN     ACTPROCEDUREEXT.APXDTDBOS%TYPE,
        NAPXFLAGDEBTOR          IN     ACTPROCEDUREEXT.APXFLAGDEBTOR%TYPE,
        DTAPXDTLIARE            IN     ACTPROCEDUREEXT.APXDTLIAREP%TYPE,
        DTAPXDTOBJAPP           IN     ACTPROCEDUREEXT.APXDTOBJAPP%TYPE,
        DTAPXDTRELVALSH         IN     ACTPROCEDUREEXT.APXDTRELVALSH%TYPE,
        DTAPXDTDOOF             IN     ACTPROCEDUREEXT.APXDTDOOF%TYPE,
        DTAPXDTDFOS             IN     ACTPROCEDUREEXT.APXDTDFOS%TYPE,
        DTAPXDTDBQ              IN     ACTPROCEDUREEXT.APXDTDBQ%TYPE,
        DTAPXDTCREASSE          IN     ACTPROCEDUREEXT.APXDTCREASSE%TYPE,
        DTAPXDTDFQ              IN     ACTPROCEDUREEXT.APXDTDFQ%TYPE,
        NAPXFLAGADMIN           IN     ACTPROCEDUREEXT.APXFLAGADMIN%TYPE,
        NAPXFLAGSCANNED         IN     ACTPROCEDUREEXT.APXFLAGSCANNED%TYPE,
        SAPXWCM                 IN     ACTPROCEDUREEXT.APXWCM%TYPE, --modified
        NAPXDOCNUM              IN     ACTPROCEDUREEXT.APXDOCNUM%TYPE,
        NAPXFLAGREACCEPT        IN     ACTPROCEDUREEXT.APXFLAGREACCEPT%TYPE,
        DTAPXDTOBJDEAD          IN     ACTPROCEDUREEXT.APXDTOBJDEAD%TYPE,
        SAPXOBJRES              IN     ACTPROCEDUREEXT.APXOBJRES%TYPE,
        NAPXFLAGOBJREF          IN     ACTPROCEDUREEXT.APXFLAGOBJREF%TYPE,
        NAPXFLAGASJOIN          IN     ACTPROCEDUREEXT.APXFLAGASJOIN%TYPE,
        DTAPXDTOBJRES           IN     ACTPROCEDUREEXT.APXDTOBJRES%TYPE,
        SAPXRESCCR              IN     ACTPROCEDUREEXT.APXRESCCR%TYPE,
        DTAPXDTRCR              IN     ACTPROCEDUREEXT.APXDTRCR%TYPE,
        DTAPXDTRR               IN     ACTPROCEDUREEXT.APXDTRR%TYPE,
        SAPXRESRR               IN     ACTPROCEDUREEXT.APXRESRR%TYPE,
        DTAPXDTRELFIRSTPAY      IN     ACTPROCEDUREEXT.APXDTRELFIRSTPAY%TYPE,
        DTAPXDTCTA              IN     ACTPROCEDUREEXT.APXDTCTA%TYPE,
        DTAPXDTCTD              IN     ACTPROCEDUREEXT.APXDTCTD%TYPE,
        SAPXRESCT               IN     ACTPROCEDUREEXT.APXRESCT%TYPE,
        NAPXFLAGCONFLICT        IN     ACTPROCEDUREEXT.APXFLAGCONFLICT%TYPE,
        NAPXFLAGOWNRE           IN     ACTPROCEDUREEXT.APXFLAGOWNRE%TYPE,
        NAPXFLAGPROVSEI         IN     ACTPROCEDUREEXT.APXFLAGPROVSEI%TYPE,
        NAPXFLAGPEREXCEP        IN     ACTPROCEDUREEXT.APXFLAGPEREXCEP%TYPE,
        NAPXFLAGCOMAUC          IN     ACTPROCEDUREEXT.APXFLAGCOMAUC%TYPE,
        NAPXFLAGSEIRESERV       IN     ACTPROCEDUREEXT.APXFLAGSEIRESERV%TYPE,
        NAPXFLAGASGNORDER       IN     ACTPROCEDUREEXT.APXFLAGASGNORDER%TYPE,
        DTAPXDTPAR              IN     ACTPROCEDUREEXT.APXDTPAR%TYPE,
        DTAPXDTPAREV            IN     ACTPROCEDUREEXT.APXDTPAREV%TYPE,
        DTAPXDTPRAPP            IN     ACTPROCEDUREEXT.APXDTPRAPP%TYPE,
        DTAPXDTPRCCI            IN     ACTPROCEDUREEXT.APXDTPRCCI%TYPE,
        DTAPXDTDTAPP            IN     ACTPROCEDUREEXT.APXDTDTAPP%TYPE,
        DTAPXDTCCN              IN     ACTPROCEDUREEXT.APXDTCCN%TYPE,
        DTAPXDTCCR              IN     ACTPROCEDUREEXT.APXDTCCR%TYPE,
        DTAPXDTOBJAPP1          IN     ACTPROCEDUREEXT.APXDTOBJAPP1%TYPE,
        DTAPXDTOBJAPP2          IN     ACTPROCEDUREEXT.APXDTOBJAPP2%TYPE,
        DTAPXDTOBJAPP3          IN     ACTPROCEDUREEXT.APXDTOBJAPP3%TYPE,
        NAPXFLAGCAROWNER        IN     ACTPROCEDUREEXT.APXFLAGCAROWNER%TYPE,
        NAPXMODELYR             IN     ACTPROCEDUREEXT.APXMODELYR%TYPE,
        NAPXMTESTINSTALL        IN     ACTPROCEDUREEXT.APXMTESTINSTALL%TYPE,
        NAPXINSTPER             IN     ACTPROCEDUREEXT.APXINSTPER%TYPE,
        NAPXTXREPAY             IN     ACTPROCEDUREEXT.APXTXREPAY%TYPE, --modified
        DTAPXDTESTLASTPAY       IN     ACTPROCEDUREEXT.APXDTESTLASTPAY%TYPE,
        NAPXFLAGCLCONF          IN     ACTPROCEDUREEXT.APXFLAGCLCONF%TYPE,
        NAPXMTCONFCL            IN     ACTPROCEDUREEXT.APXMTCONFCL%TYPE,
        DTAPXDTSTARTCYC         IN     ACTPROCEDUREEXT.APXDTSTARTCYC%TYPE,
        DTAPXDTENDCYC           IN     ACTPROCEDUREEXT.APXDTENDCYC%TYPE,
        DTAPXDTINSTMONTH        IN     ACTPROCEDUREEXT.APXDTINSTMONTH%TYPE,
        NAPXMTESTREL            IN     ACTPROCEDUREEXT.APXMTESTREL%TYPE,
        NAPXMTUNCONFCL          IN     ACTPROCEDUREEXT.APXMTUNCONFCL%TYPE,
        DTAPXDTESTFIRSTPAY      IN     ACTPROCEDUREEXT.APXDTESTFIRSTPAY%TYPE,
        DTAPXDTREPDUE           IN     ACTPROCEDUREEXT.APXDTREPDUE%TYPE,
        DTAPXDTREPORTED         IN     ACTPROCEDUREEXT.APXDTREPORTED%TYPE,
        SAPXCREDASSEM           IN     ACTPROCEDUREEXT.APXCREDASSEM%TYPE,
        DTAPXDTASSEMBLY         IN     ACTPROCEDUREEXT.APXDTASSEMBLY%TYPE,
        SAPXASSEMLOC            IN     ACTPROCEDUREEXT.APXASSEMLOC%TYPE,
        DTAPXDTASSEMCYC         IN     ACTPROCEDUREEXT.APXDTASSEMCYC%TYPE,
        NAPXFLAGOBJNOTREC       IN     ACTPROCEDUREEXT.APXFLAGOBJNOTREC%TYPE,
        SAPXRESOBJREJ           IN     ACTPROCEDUREEXT.APXRESOBJREJ%TYPE,
        SAPXOBJRESULT           IN     ACTPROCEDUREEXT.APXOBJRESULT%TYPE,
        NAPXMTREPSECR           IN     ACTPROCEDUREEXT.APXMTREPSECR%TYPE,
        NAPXMTCONFSECR          IN     ACTPROCEDUREEXT.APXMTCONFSECR%TYPE,
        NAPXMTREPCL             IN     ACTPROCEDUREEXT.APXMTREPCL%TYPE,
        DTAPXDTCHREP            IN     ACTPROCEDUREEXT.APXDTCHREP%TYPE,
        SAPXRESCR               IN     ACTPROCEDUREEXT.APXRESCR%TYPE,
        NAPXFLAGPUBBOND         IN     ACTPROCEDUREEXT.APXFLAGPUBBOND%TYPE,
        NAPXVOTRATIOSR          IN     ACTPROCEDUREEXT.APXVOTRATIOSR%TYPE,
        NAPXVOTRATIOCL          IN     ACTPROCEDUREEXT.APXVOTRATIOCL%TYPE,
        NAPXMTISSPRBOND         IN     ACTPROCEDUREEXT.APXMTISSPRBOND%TYPE,
        NAPXFLAGVOTINREC        IN     ACTPROCEDUREEXT.APXFLAGVOTINREC%TYPE,
        NAPXMTDEBSWAP           IN     ACTPROCEDUREEXT.APXMTDEBSWAP%TYPE,
        DTAPXDTSTARTPAY         IN     ACTPROCEDUREEXT.APXDTSTARTPAY%TYPE,
        NAPXMANAGE              IN     ACTPROCEDUREEXT.APXMANAGE%TYPE,
        NAPXINCHARGE            IN     ACTPROCEDUREEXT.APXINCHARGE%TYPE,
        NAPXINCHARGECONTACTNO   IN     ACTPROCEDUREEXT.APXINCHARGECONTACTNO%TYPE,
        NAPXLEGAGENT            IN     ACTPROCEDUREEXT.APXLEGAGENT%TYPE,
        NAPXLEGAGENTCONTACTNO   IN     ACTPROCEDUREEXT.APXLEGAGENTCONTACTNO%TYPE,
        NAPXAPPLICANT           IN     ACTPROCEDUREEXT.APXAPPLICANT%TYPE,
        NAPXMTCONFPRINCE        IN     ACTPROCEDUREEXT.APXMTCONFPRINCE%TYPE,
        NAPXMTCONFINT           IN     ACTPROCEDUREEXT.APXMTCONFINT%TYPE,
        NAPXMTDEBSWAPVAL        IN     ACTPROCEDUREEXT.APXMTDEBSWAPVAL%TYPE,
        NAPXMTSTOCKFACE         IN     ACTPROCEDUREEXT.APXMTSTOCKFACE%TYPE,
        NAPXMTISSPRICE          IN     ACTPROCEDUREEXT.APXMTISSPRICE%TYPE,
        NAPXNBSTOCK             IN     ACTPROCEDUREEXT.APXNBSTOCK%TYPE,
        NAPXMTCBIP              IN     ACTPROCEDUREEXT.APXMTCBIP%TYPE,
        NAPXMTREPAYYR           IN     ACTPROCEDUREEXT.APXREPAYYR%TYPE,
        NAPXMTSRRP              IN     ACTPROCEDUREEXT.APXMTSRRP%TYPE,
        NAPXMTSRRI              IN     ACTPROCEDUREEXT.APXMTSRRI%TYPE,
        NAPXMTCRP               IN     ACTPROCEDUREEXT.APXMTCRP%TYPE,
        NAPXMTCRI               IN     ACTPROCEDUREEXT.APXMTCRI%TYPE,
        NAPXTXDISCOUNT          IN     ACTPROCEDUREEXT.APXTXDISCOUNT%TYPE,
        NAPXMTSRCV              IN     ACTPROCEDUREEXT.APXMTSRCV%TYPE,
        NAPXMTCCV               IN     ACTPROCEDUREEXT.APXMTCCV%TYPE,
        NAPXTXCVR               IN     ACTPROCEDUREEXT.APXTXCVR%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    IS
    BEGIN
        UPDATE ACTPROCEDUREEXT
           SET APXTYPEFORGIVENESS = SAPXTYPEFORGIVENESS,
               ACTIDCOURT = NACTIDCOURT,
               APXSTATUS = SAPXSTATUS,
               APXDTAPP = DTAPXDTAPP,
               APXORIGIN = SAPXORIGIN,
               APXDTREG = DTAPXDTREG,
               APXDTDBOS = DTAPXDTBOS,
               APXFLAGDEBTOR = NAPXFLAGDEBTOR,
               APXDTLIAREP = DTAPXDTLIARE,
               APXDTOBJAPP = DTAPXDTOBJAPP,
               APXDTRELVALSH = DTAPXDTRELVALSH,
               APXDTDOOF = DTAPXDTDOOF,
               APXDTDFOS = DTAPXDTDFOS,
               APXDTDBQ = DTAPXDTDBQ,
               APXDTCREASSE = DTAPXDTCREASSE,
               APXDTDFQ = DTAPXDTDFQ,
               APXFLAGADMIN = NAPXFLAGADMIN,
               APXFLAGSCANNED = NAPXFLAGSCANNED,
               --APXACTIDWORK = sApxactidwork,
               APXDOCNUM = NAPXDOCNUM,
               APXFLAGREACCEPT = NAPXFLAGREACCEPT,
               APXDTOBJDEAD = DTAPXDTOBJDEAD,
               APXOBJRES = SAPXOBJRES,
               APXFLAGOBJREF = NAPXFLAGOBJREF,
               APXFLAGASJOIN = NAPXFLAGASJOIN,
               APXDTOBJRES = DTAPXDTOBJRES,
               APXRESCCR = SAPXRESCCR,
               APXDTRCR = DTAPXDTRCR,
               APXDTRR = DTAPXDTRR,
               APXRESRR = SAPXRESRR,
               APXDTRELFIRSTPAY = DTAPXDTRELFIRSTPAY,
               APXDTCTA = DTAPXDTCTA,
               APXDTCTD = DTAPXDTCTD,
               APXRESCT = SAPXRESCT,
               APXFLAGCONFLICT = NAPXFLAGCONFLICT,
               APXFLAGOWNRE = NAPXFLAGOWNRE,
               APXFLAGPROVSEI = NAPXFLAGPROVSEI,
               APXFLAGPEREXCEP = NAPXFLAGPEREXCEP,
               APXFLAGCOMAUC = NAPXFLAGCOMAUC,
               APXFLAGSEIRESERV = NAPXFLAGSEIRESERV,
               APXFLAGASGNORDER = NAPXFLAGASGNORDER,
               APXDTPAR = DTAPXDTPAR,
               APXDTPAREV = DTAPXDTPAREV,
               APXDTPRAPP = DTAPXDTPRAPP,
               APXDTPRCCI = DTAPXDTPRCCI,
               APXDTDTAPP = DTAPXDTDTAPP,
               APXDTCCN = DTAPXDTCCN,
               APXDTCCR = DTAPXDTCCR,
               APXDTOBJAPP1 = DTAPXDTOBJAPP1,
               APXDTOBJAPP2 = DTAPXDTOBJAPP2,
               APXDTOBJAPP3 = DTAPXDTOBJAPP3,
               APXFLAGCAROWNER = NAPXFLAGCAROWNER,
               APXMODELYR = NAPXMODELYR,
               APXMTESTINSTALL = NAPXMTESTINSTALL,
               APXINSTPER = NAPXINSTPER,
               APXTXREPAY = NAPXTXREPAY,
               APXDTESTLASTPAY = DTAPXDTESTLASTPAY,
               APXFLAGCLCONF = NAPXFLAGCLCONF,
               APXMTCONFCL = NAPXMTCONFCL,
               APXDTSTARTCYC = DTAPXDTSTARTCYC,
               APXDTENDCYC = DTAPXDTENDCYC,
               APXDTINSTMONTH = DTAPXDTINSTMONTH,
               APXMTESTREL = NAPXMTESTREL,
               APXMTUNCONFCL = NAPXMTUNCONFCL,
               APXDTESTFIRSTPAY = DTAPXDTESTFIRSTPAY,
               APXDTREPDUE = DTAPXDTREPDUE,
               APXDTREPORTED = DTAPXDTREPORTED,
               APXCREDASSEM = SAPXCREDASSEM,
               APXDTASSEMBLY = DTAPXDTASSEMBLY,
               APXASSEMLOC = SAPXASSEMLOC,
               APXDTASSEMCYC = DTAPXDTASSEMCYC,
               APXFLAGOBJNOTREC = NAPXFLAGOBJNOTREC,
               APXRESOBJREJ = SAPXRESOBJREJ,
               APXOBJRESULT = SAPXOBJRESULT,
               APXMTREPSECR = NAPXMTREPSECR,
               APXMTCONFSECR = NAPXMTCONFSECR,
               APXMTREPCL = NAPXMTREPCL,
               APXDTCHREP = DTAPXDTCHREP,
               APXRESCR = SAPXRESCR,
               APXFLAGPUBBOND = NAPXFLAGPUBBOND,
               APXVOTRATIOSR = NAPXVOTRATIOSR,
               APXVOTRATIOCL = NAPXVOTRATIOCL,
               APXMTISSPRBOND = NAPXMTISSPRBOND,
               APXFLAGVOTINREC = NAPXFLAGVOTINREC,
               APXMTDEBSWAP = NAPXMTDEBSWAP,
               APXDTSTARTPAY = DTAPXDTSTARTPAY,
               APXMANAGE = NAPXMANAGE,
               APXINCHARGE = NAPXINCHARGE,
               APXINCHARGECONTACTNO = NAPXINCHARGECONTACTNO,
               APXLEGAGENT = NAPXLEGAGENT,
               APXLEGAGENTCONTACTNO = NAPXLEGAGENTCONTACTNO,
               APXAPPLICANT = NAPXAPPLICANT,
               APXMTCONFPRINCE = NAPXMTCONFPRINCE,
               APXMTCONFINT = NAPXMTCONFINT,
               APXMTDEBSWAPVAL = NAPXMTDEBSWAPVAL,
               APXMTSTOCKFACE = NAPXMTSTOCKFACE,
               APXMTISSPRICE = NAPXMTISSPRICE,
               APXNBSTOCK = NAPXNBSTOCK,
               APXMTCBIP = NAPXMTCBIP,
               APXREPAYYR = NAPXMTREPAYYR,
               APXMTSRRP = NAPXMTSRRP,
               APXMTSRRI = NAPXMTSRRI,
               APXMTCRP = NAPXMTCRP,
               APXMTCRI = NAPXMTCRI,
               APXTXDISCOUNT = NAPXTXDISCOUNT,
               APXMTSRCV = NAPXMTSRCV,
               APXMTCCV = NAPXMTCCV,
               APXTXCVR = NAPXTXCVR,
               APXWCM = SAPXWCM
         WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_ACTPROCEDUREEXT;

    PROCEDURE P_EVACT_BLOCKPAY (NCREID        IN OUT CREVT.CREID%TYPE,
                                SUTICODE      IN     UTILISATEUR.UTICODE%TYPE,
                                SLANCODE      IN     LANGUE.LANCODE%TYPE,
                                DTEVENT       IN     DATE,
                                SFACETAT      IN     FACTURE.FACETAT%TYPE, --status
                                STYPE         IN     TTRPARAM.TTPCODE%TYPE, -- type of operation
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            NRETURNCODE := 0;
            PACOM_EVT.I_EVT ('ACTEUR',
                             'ACTEUR',
                             'EVACT_BLOCKPAY',
                             NCREID,
                             NULL,
                             DTEVENT,
                             'GLOBAL',
                             1,
                             SUTICODE,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET CREDTVALID = SYSDATE, UTICODEVALID = SUTICODE
                 WHERE CREID = NCREID;

                PACOM_EVT.I_CREDATA (NCREID,
                                     1,
                                     NULL,
                                     'GEN',
                                     'FACETAT',
                                     NULL,
                                     SFACETAT,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);
                PACOM_EVT.I_CREDATA (NCREID,
                                     2,
                                     NULL,
                                     'GEN',
                                     'TYPE',
                                     NULL,
                                     STYPE,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);
            END IF;
        END;
    END P_EVACT_BLOCKPAY;

    PROCEDURE P_EVACT_FACTBLOCKPAY (
        NCREID        IN     CREVT.CREID%TYPE,                --existing CREID
        SUTICODE      IN     UTILISATEUR.UTICODE%TYPE,
        SLANCODE      IN     LANGUE.LANCODE%TYPE,
        DTEVENT       IN     DATE,
        SFACETAT      IN     FACTURE.FACETAT%TYPE,                    --status
        STYPE         IN     TTRPARAM.TTPCODE%TYPE,       -- type of operation
        NFACID        IN     FACTURE.FACID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NFACCREID      CREVT.CREID%TYPE;
            STMFFONCTION   TEVENEMENT.TMFFONCTION%TYPE;
            STACCODE       FACTURE.TACCODE%TYPE;
            NACTIONVALUE   NUMBER;
            NWHEREVALUE    NUMBER;
        BEGIN
            --if sType = 'BLOCK' then run EVFAC_PRLBLOC
            IF STYPE = 'BLOCK'
            THEN
                STMFFONCTION := 'EVFAC_PRLBLOC';
                NACTIONVALUE := 1;
                NWHEREVALUE := 0;
            --else run EVFAC_PRLDEBLOC
            ELSE
                STMFFONCTION := 'EVFAC_PRLDEBLOC';
                NACTIONVALUE := 0;
                NWHEREVALUE := 1;
            END IF;

            NRETURNCODE := 0;

            SELECT TACCODE
              INTO STACCODE
              FROM FACTURE
             WHERE FACID = NFACID;

            --PACOM_EVT.I_EVT( 'FACTURE', 'FACTURES', sTmfFonction, nFacCreId, NULL, dtEvent, sTacCode, 1, sUtiCode, NULL, nReturnCode);
            IF NRETURNCODE = 0
            THEN
                --             PACOM_EVT.I_CREDATA ( nCreId, NULL, NULL, 'FACTURE', 'FACID', NULL, NULL, nFacId, NULL, NULL, nReturnCode );
                --PACOM_EVT.I_CREDATA ( nCreId, NULL, NULL, 'CREVT', 'CREID', NULL, NULL, nFacCreId, NULL, NULL, nReturnCode );
                UPDATE FACECHEANCE
                   SET FECFLAGPRLBLOQUE = NACTIONVALUE
                 WHERE     FACID = NFACID
                       AND NVL (FECFLAGPRLBLOQUE, 0) = NWHEREVALUE;

                UPDATE FACTURE
                   SET FACETAT = SFACETAT
                 WHERE FACID = NFACID;
            END IF;
        END;
    END P_EVACT_FACTBLOCKPAY;

    PROCEDURE I_LEGAL_DOSRUBECHEANCIER (
        NDOSID                    IN     DOSSIER.DOSID%TYPE,
        STYPE                     IN     TTRPARAM.TTPCODE%TYPE, -- type of legal proceeding (not used right now)
        SUTICODE                  IN     UTILISATEUR.UTICODE%TYPE,
        SLANCODE                  IN     LANGUE.LANCODE%TYPE,
        NYEAR                     IN     NUMBER,
        NMTCOLLAREPAIDPRINCIPAL   IN     NUMBER,
        NMTCOLLAREPAIDINT         IN     NUMBER,
        NMTCOLLEREPAIDPRINCIPAL   IN     NUMBER,
        NMTCOLLEREPAIDINT         IN     NUMBER,
        NDISCOUNTRATE             IN     NUMBER,
        NMTCOLLACURRENTVALUE      IN     NUMBER,
        NMTCOLLECURRENTVALUE      IN     NUMBER,
        NCURRENTRATE              IN     NUMBER,
        NPAIDAMOUNT               IN     NUMBER,
        NRETURNCODE               IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NDRUORDRE     DOSRUBRIQUE.DRUORDRE%TYPE;
            NRUBID        DOSRUBRIQUE.RUBID%TYPE;
            SRUBLIBELLE   DOSRUBRIQUE.DRULIBELLE%TYPE;
            SDEVCODE      DOSSIER.DEVCODE%TYPE;
            NCALID        DOSSIER.CALID%TYPE;
            NDREORDRE     DOSRUBECHEANCIER.DREORDRE%TYPE;
        BEGIN
            SELECT MAX (DRUORDRE)
              INTO NDRUORDRE
              FROM DOSRUBRIQUE DRU
             WHERE     DRU.DOSID = NDOSID
                   AND DRU.DRUTYPE = 'B'
                   AND DRU.DRUCLASSE = 'A'
                   AND EXISTS
                           (SELECT 1
                              FROM RUBACCES RAC
                             WHERE     RAC.RUBID = DRU.RUBID
                                   AND RAC.RACACCES = 'PASSIVE')
                   AND EXISTS
                           (SELECT 1
                              FROM RUBACCES RAC
                             WHERE     RAC.RUBID = DRU.RUBID
                                   AND RAC.RACACCES = 'LEGAL');

            IF NDRUORDRE IS NULL
            THEN
                SELECT MAX (RUBID)
                  INTO NRUBID
                  FROM RUBRIQUE
                 WHERE     EXISTS
                               (SELECT 1
                                  FROM RUBACCES RAC
                                 WHERE RAC.RACACCES = 'PASSIVE')
                       AND EXISTS
                               (SELECT 1
                                  FROM RUBACCES RAC
                                 WHERE RAC.RACACCES = 'LEGAL');

                IF NRUBID IS NOT NULL
                THEN
                    SELECT RUBLIBELLE
                      INTO SRUBLIBELLE
                      FROM LANRUBRIQUE
                     WHERE RUBID = NRUBID AND LANCODE = SLANCODE;

                    SELECT DEVCODE, CALID
                      INTO SDEVCODE, NCALID
                      FROM DOSSIER
                     WHERE DOSID = NDOSID;

                    IF SRUBLIBELLE IS NOT NULL
                    THEN
                        SELECT NVL (MAX (DRUORDRE), 0) + 1
                          INTO NDRUORDRE
                          FROM DOSRUBRIQUE DRU
                         WHERE DRU.DOSID = NDOSID;

                        INSERT INTO DOSRUBRIQUE (DOSID,
                                                 DRUORDRE,
                                                 UTICODE,
                                                 RUBID,
                                                 DRUSENS,
                                                 DRUFLAGMANUEL,
                                                 DRUCLASSE,
                                                 DRUDTDEB,
                                                 DRUDTFIN,
                                                 DRUMONTAGE,
                                                 DRUDECOMPTENUM,
                                                 DRUDECOMPTEDEN,
                                                 DRUDTMAJRUB,
                                                 DRUDTMAJECH,
                                                 DRUTYPEMONTAGE,
                                                 DRUTYPE,
                                                 DRUMULTREFTAUX,
                                                 DRUFLAGSUSPEND,
                                                 DRULIBELLE,
                                                 DEVCODE,
                                                 CALID)
                                 VALUES (
                                            NDOSID,
                                            NDRUORDRE,
                                            NRUBID,
                                            SUTICODE,
                                            '+',
                                            1,
                                            'A',
                                            TO_DATE (
                                                '01/01/' || TO_CHAR (NYEAR),
                                                'dd/mm/yyyy'),
                                            NULL,
                                            'LOYFIX',
                                            '360',
                                            '360',
                                            SYSDATE,
                                            SYSDATE,
                                            'MONTANT',
                                            'B',
                                            1,
                                            0,
                                            SRUBLIBELLE,
                                            SDEVCODE,
                                            NCALID);

                        INSERT INTO DOSRUBFLUX (DOSID,
                                                DRUORDRE,
                                                DRFORDRE,
                                                DRFPERCEPTION,
                                                DRFDTDEB,
                                                DRFDTFIN,
                                                DRFNBPERIODE,
                                                DRFMULTIPLE,
                                                DRFPERIODE,
                                                DRFMT,
                                                DRFPROGRESSION)
                                 VALUES (
                                            NDOSID,
                                            NDRUORDRE,
                                            1,
                                            'A',
                                            TO_DATE (
                                                '01/01/' || TO_CHAR (NYEAR),
                                                'dd/mm/yyyy'),
                                            TO_DATE (
                                                '31/12/' || TO_CHAR (NYEAR),
                                                'dd/mm/yyyy'),
                                            1,
                                            1,
                                            '360',
                                            0,
                                            'C');
                    END IF;
                END IF;
            END IF;

            SELECT NVL (MAX (DREORDRE), 0) + 1
              INTO NDREORDRE
              FROM DOSRUBECHEANCIER DRE
             WHERE DRE.DOSID = NDOSID AND DRUORDRE = NDRUORDRE;

            INSERT INTO DOSRUBECHEANCIER (DOSID,
                                          DRUORDRE,
                                          DRFORDRE,
                                          DREORDRE,
                                          DRENUM,
                                          DREDTDEB,
                                          DREDTFIN,
                                          DREDTECH,
                                          DREMTVERS,
                                          DREMTINTCC,
                                          DREMTECF,
                                          DREMTINTPERIODE,
                                          DRETAUXNOMINAL,
                                          DREMTBASE,
                                          DREMTAMO,
                                          DRETAUX,
                                          DREMTSOLDEHTCC,
                                          DRETYPE)
                 VALUES (NDOSID,
                         NDRUORDRE,
                         1,
                         NDREORDRE,
                         NDREORDRE,
                         TO_DATE ('01/01/' || TO_CHAR (NYEAR), 'dd/mm/yyyy'),
                         TO_DATE ('31/12/' || TO_CHAR (NYEAR), 'dd/mm/yyyy'),
                         TO_DATE ('31/12/' || TO_CHAR (NYEAR), 'dd/mm/yyyy'),
                         NMTCOLLAREPAIDPRINCIPAL,
                         NMTCOLLAREPAIDINT,
                         NMTCOLLEREPAIDPRINCIPAL,
                         NMTCOLLEREPAIDINT,
                         NDISCOUNTRATE,
                         NMTCOLLACURRENTVALUE,
                         NMTCOLLECURRENTVALUE,
                         NCURRENTRATE,
                         NPAIDAMOUNT,
                         STYPE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LEGAL_DOSRUBECHEANCIER;

    PROCEDURE U_LEGAL_DOSRUBECHEANCIER (
        NDOSID                    IN     DOSSIER.DOSID%TYPE,
        STYPE                     IN     TTRPARAM.TTPCODE%TYPE, -- type of legal proceeding (not used right now)
        SUTICODE                  IN     UTILISATEUR.UTICODE%TYPE,
        SLANCODE                  IN     LANGUE.LANCODE%TYPE,
        NDRUORDRE                 IN     DOSRUBECHEANCIER.DRUORDRE%TYPE,
        NDREORDRE                 IN     DOSRUBECHEANCIER.DREORDRE%TYPE,
        NYEAR                     IN     NUMBER,
        NMTCOLLAREPAIDPRINCIPAL   IN     NUMBER,
        NMTCOLLAREPAIDINT         IN     NUMBER,
        NMTCOLLEREPAIDPRINCIPAL   IN     NUMBER,
        NMTCOLLEREPAIDINT         IN     NUMBER,
        NDISCOUNTRATE             IN     NUMBER,
        NMTCOLLACURRENTVALUE      IN     NUMBER,
        NMTCOLLECURRENTVALUE      IN     NUMBER,
        NCURRENTRATE              IN     NUMBER,
        NPAIDAMOUNT               IN     NUMBER,
        NRETURNCODE               IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            BEGIN
                UPDATE DOSRUBECHEANCIER
                   SET DREDTDEB =
                           TO_DATE ('01/01/' || TO_CHAR (NYEAR),
                                    'dd/mm/yyyy'),
                       DREDTFIN =
                           TO_DATE ('31/12/' || TO_CHAR (NYEAR),
                                    'dd/mm/yyyy'),
                       DREDTECH =
                           TO_DATE ('31/12/' || TO_CHAR (NYEAR),
                                    'dd/mm/yyyy'),
                       DREMTVERS = NMTCOLLAREPAIDPRINCIPAL,
                       DREMTINTCC = NMTCOLLAREPAIDINT,
                       DREMTECF = NMTCOLLEREPAIDPRINCIPAL,
                       DREMTINTPERIODE = NMTCOLLEREPAIDINT,
                       DRETAUXNOMINAL = NDISCOUNTRATE,
                       DREMTBASE = NMTCOLLACURRENTVALUE,
                       DREMTAMO = NMTCOLLECURRENTVALUE,
                       DRETAUX = NCURRENTRATE,
                       DREMTSOLDEHTCC = NPAIDAMOUNT
                 WHERE     DOSID = NDOSID
                       AND DRUORDRE = NDRUORDRE
                       AND DREORDRE = NDREORDRE;

                NRETURNCODE := 0;                                  --BDE030114
            EXCEPTION
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END U_LEGAL_DOSRUBECHEANCIER;

    PROCEDURE D_LEGAL_DOSRUBECHEANCIER (
        NDOSID        IN     DOSSIER.DOSID%TYPE,
        NDRUORDRE     IN     DOSRUBECHEANCIER.DRUORDRE%TYPE,
        NDREORDRE     IN     DOSRUBECHEANCIER.DREORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            BEGIN
                DELETE DOSRUBECHEANCIER
                 WHERE     DOSID = NDOSID
                       AND DRUORDRE = NDRUORDRE
                       AND DREORDRE = NDREORDRE;

                NRETURNCODE := 0;                                  --BDE030114
            EXCEPTION
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END D_LEGAL_DOSRUBECHEANCIER;

    PROCEDURE I_PROCESSACTTCOVALEUR (
        NACTID                 ACTTCOVALEUR.ACTID%TYPE,
        NTCOCODE        IN     TCOTATION.TCOCODE%TYPE,
        STVACODE               ACTTCOVALEUR.TVACODE%TYPE,
        SUTICODE        IN     ACTTCOVALEUR.UTICODE%TYPE,
        SEVTCODE        IN     TEVENEMENT.TMFFONCTION%TYPE,
        NCREID          IN OUT CREVT.CREID%TYPE,
        NTBAID          IN OUT TBATCH.TBAID%TYPE,
        SNAME_OF_FILE   IN     CREDATA.CDADATASTRING%TYPE,
        SATVCOMMENT            ACTTCOVALEUR.ATVCOMMENT%TYPE,
        NFLAG                  ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
        NFLAGUPDATE            ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NTCOID      TCOTATION.TCOID%TYPE;
            NATVORDRE   ACTTCOVALEUR.ATVORDRE%TYPE;
            SUGECODE    UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
        BEGIN
            BEGIN
                SELECT TCO.TCOID
                  INTO NTCOID
                  FROM TCOTATION TCO, TCOVALEUR TCOV
                 WHERE     TCO.TCOID = TCOV.TCOID
                       AND TCOV.TVACODE = STVACODE
                       AND TCO.TCOCODE = NTCOCODE
                       AND TCO.UGECODE = SUGECODE
                       AND ROWNUM = 1;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NATVORDRE := 1;
            END;

            BEGIN
                SELECT (MAX (ATVORDRE) + 1)
                  INTO NATVORDRE
                  FROM ACTTCOVALEUR
                 WHERE ACTID = NACTID;

                IF NATVORDRE IS NULL
                THEN
                    NATVORDRE := 1;
                END IF;
            EXCEPTION
                WHEN NO_DATA_FOUND
                THEN
                    NATVORDRE := 1;
            END;

            PACOM_EVT.I_EVT ('ACTEUR',
                             'ACTEUR',
                             SEVTCODE,
                             NCREID,
                             NACTID,
                             SYSDATE,
                             'GLOBAL',
                             1,
                             SUTICODE,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID,
                       CREDTVALID = SYSDATE,
                       UTICODEVALID = SUTICODE
                 WHERE CREID = NCREID;

                PACOM_EVT.I_CREDATA (NCREID,
                                     1,
                                     NULL,
                                     'FILE',
                                     'NAME',
                                     NULL,
                                     SNAME_OF_FILE,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);

                IF NFLAGUPDATE = 1
                THEN
                    UPDATE ACTTCOVALEUR
                       SET ATVDTFIN = SYSDATE
                     WHERE TCOID = NTCOID;
                END IF;

                INSERT INTO ACTTCOVALEUR (ACTID,
                                          ATVORDRE,
                                          TCOID,
                                          TVACODE,
                                          ATVDTDEB,
                                          CREID,
                                          UTICODE,
                                          ATVDTMAJ,
                                          ATVDTFIN,
                                          ATVCODEEXTERNE,
                                          ATVETABLISSEMENTPILOTE,
                                          ATVETABLISSEMENTCOTEUR,
                                          ATVFLAGFORCE,
                                          ATVCOMMENT,
                                          ATVSCORE,
                                          ATVDTVALIDITY)
                     VALUES (NACTID,
                             NATVORDRE,
                             NTCOID,
                             STVACODE,
                             SYSDATE,
                             NCREID,
                             SUTICODE,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NULL,
                             NFLAG,
                             SATVCOMMENT,
                             NULL,
                             NULL);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ARA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RAT_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_PROCESSACTTCOVALEUR;

    PROCEDURE P_INIABG (NTBAID          IN OUT TBATCH.TBAID%TYPE,
                        SUTICODE        IN     UTILISATEUR.UTICODE%TYPE,
                        SLANCODE        IN     LANGUE.LANCODE%TYPE,
                        SEVTCODE        IN     TEVENEMENT.TMFFONCTION%TYPE,
                        SNAME_OF_FILE   IN     CREDATA.CDADATASTRING%TYPE,
                        DTEVENT         IN     DATE,
                        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCREID           CREVT.CREID%TYPE;
            P_DPTCODEVALID   VARCHAR2 (7);
        BEGIN
            P_DPTCODEVALID := F_GETDEPTFROMUTICODE (SUTICODE);
            NRETURNCODE := 0;

            SELECT SEQ_TBAID.NEXTVAL INTO NTBAID FROM DUAL;

            INSERT INTO TBATCH (TBAID,
                                TBACODE,
                                TBADTDEB,
                                TBACOMMANDE,
                                UTICODE,
                                TBADTFIN,
                                TBACODERETOUR)
                 VALUES (NTBAID,
                         SEVTCODE,
                         SYSDATE,
                         SNAME_OF_FILE,
                         SUTICODE,
                         SYSDATE,
                         0);

            PACOM_EVT.I_EVT ('EVTGLOB',
                             'EVTGLOB',
                             SEVTCODE,
                             NCREID,
                             NULL,
                             DTEVENT,
                             'GLOBAL',
                             1,
                             SUTICODE,
                             NULL,
                             NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                UPDATE CREVT
                   SET TBAID = NTBAID,
                       CREDTVALID = SYSDATE,
                       UTICODEVALID = SUTICODE,
                       DPTCODEVALID = P_DPTCODEVALID
                 WHERE CREID = NCREID;

                PACOM_EVT.I_CREDATA (NCREID,
                                     1,
                                     NULL,
                                     'FILE',
                                     'NAME',
                                     NULL,
                                     SNAME_OF_FILE,
                                     NULL,
                                     NULL,
                                     NULL,
                                     NRETURNCODE);
            END IF;
        END;
    END P_INIABG;

    PROCEDURE I_AAGRVE (
        NACTID                    AAGRVE.ACTID%TYPE,
        SROLCODE                  AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION             AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID              AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                  AAGRVE.RVACODE%TYPE,
        NAVEORDRE                 AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF            AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE             AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT            AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT          AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE                  AAGRVE.DEVCODE%TYPE,
        SRVVCODE                  AAGRVE.RVVCODE%TYPE,
        SAVEMOTIF                 AAGRVE.AVEMOTIF%TYPE, -- CV-23012004 FSA-13272
        NRETURNCODE        IN OUT NUMBER)
    AS
        NCOUNT   NUMBER := 0;
    BEGIN
        SELECT COUNT (*)
          INTO NCOUNT
          FROM AROAGE
         WHERE     ACTID = NACTID
               AND ROLCODE = SROLCODE
               AND ACTIDGESTION = NACTIDGESTION
               AND TO_CHAR (AAGDTVALID, 'YYYY-MM-DD') =
                   TO_CHAR (DTAAGDTVALID, 'YYYY-MM-DD');

        IF NCOUNT = 0
        THEN
            INSERT INTO AROAGE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         DTAAGDTVALID);
        END IF;

        I_AAGRVE (NACTID,
                  SROLCODE,
                  NACTIDGESTION,
                  DTAAGDTVALID,
                  SRVACODE,
                  NAVEORDRE,
                  DTAVEDTDEB,
                  DTAVEDTFIN,
                  NULL,
                  NAVEMTOBJECTIF,
                  NAVEMTREALISE,
                  NAVEMTATTRIBUT,
                  NAVEFLAGBLOQUANT,
                  SDEVCODE,
                  SRVVCODE,
                  SAVEMOTIF,
                  NULL,                                             -- nCreId,
                  NULL,                                             -- nDosId,
                  NULL,                                             -- nTbaId,
                  NULL,                                           -- sAveMemo,
                  NULL,
                  NRETURNCODE);
    END I_AAGRVE;

    PROCEDURE I_AAGRVE_PERFORMANCE (
        NACTID                    AAGRVE.ACTID%TYPE,
        SROLCODE                  AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION             AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID              AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                  AAGRVE.RVACODE%TYPE,
        NAVEORDRE                 AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF            AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE             AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT            AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT          AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE                  AAGRVE.DEVCODE%TYPE,
        SRVVCODE                  AAGRVE.RVVCODE%TYPE,
        SAVEMOTIF                 AAGRVE.AVEMOTIF%TYPE, -- CV-23012004 FSA-13272
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;

            CURSOR CPERFORMANCE
            IS
                SELECT DISTINCT RVACODE
                  FROM ROLVARIABLE
                 WHERE ROLCODE = 'USECARA' AND RVATYPE = 'PERF';
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM AROAGE
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND AAGDTVALID = DTAAGDTVALID;

            IF NCOUNT = 0
            THEN
                INSERT INTO AROAGE (ACTID,
                                    ROLCODE,
                                    ACTIDGESTION,
                                    AAGDTVALID)
                     VALUES (NACTID,
                             SROLCODE,
                             NACTIDGESTION,
                             DTAAGDTVALID);
            END IF;

            FOR CPERF IN CPERFORMANCE
            LOOP
                I_AAGRVE (NACTID,
                          SROLCODE,
                          NACTIDGESTION,
                          DTAAGDTVALID,
                          CPERF.RVACODE,
                          NAVEORDRE,
                          DTAVEDTDEB,
                          DTAVEDTFIN,
                          NULL,
                          NAVEMTOBJECTIF,
                          NAVEMTREALISE,
                          NAVEMTATTRIBUT,
                          NAVEFLAGBLOQUANT,
                          SDEVCODE,
                          SRVVCODE,
                          SAVEMOTIF,
                          NULL,                                     -- nCreId,
                          NULL,                                     -- nDosId,
                          NULL,                                     -- nTbaId,
                          NULL,                                   -- sAveMemo,
                          NULL,
                          NRETURNCODE);
            END LOOP;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AAGRVE_PERFORMANCE;

    PROCEDURE U_AAGRVE_PERFORMANCE (
        NACTID                  AAGRVE.ACTID%TYPE,
        SROLCODE                AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION           AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID            AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                AAGRVE.RVACODE%TYPE,
        NAVEORDRE               AAGRVE.AVEORDRE%TYPE,
        NAVEMTOBJECTIF          AAGRVE.AVEMTOBJECTIF%TYPE,
        LSAVEMEMO               AAGRVE.AVEMEMO%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE AAGRVE
               SET AVEMTOBJECTIF = NAVEMTOBJECTIF, AVEMEMO = LSAVEMEMO
             WHERE     ACTID = NACTID
                   AND ROLCODE = SROLCODE
                   AND ACTIDGESTION = NACTIDGESTION
                   AND TO_CHAR (AAGDTVALID, 'YYYY-MM-DD') =
                       TO_CHAR (DTAAGDTVALID, 'YYYY-MM-DD')
                   AND RVACODE = SRVACODE
                   AND AVEORDRE = NAVEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_AAGRVE_PERFORMANCE;

    PROCEDURE P_UPDATESUSUSCARAPROCSTAT (
        NACTID        IN     ACTEUR.ACTID%TYPE,
        SROLECODE     IN     DOSACTEUR.ROLCODE%TYPE,
        SOLDPHACODE   IN     PHASE.PHACODE%TYPE,
        SOLDJALCODE   IN     JALON.JALCODE%TYPE,
        SUTICODE      IN     UTILISATEUR.UTICODE%TYPE,
        DTEVENT       IN     DATE,
        NCREID        IN     CREVT.CREID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT      NUMBER;
            SPRCESTAT   VARCHAR2 (50);
        BEGIN
            BEGIN
                SELECT PROCSTAT
                  INTO SPRCESTAT
                  FROM (SELECT TBAID, TDEORDER, PROCSTAT
                          FROM (WITH
                                    EWARN
                                    AS
                                        (SELECT TBAID,
                                                TDEORDER,
                                                TDDCOLUMN,
                                                TDDDATASTRING
                                           FROM TBADETDATA
                                          WHERE TDDTABLE = 'EWARN')
                                SELECT *
                                  FROM EWARN
                                       PIVOT (MIN (TDDDATASTRING)
                                             FOR TDDCOLUMN
                                             IN ('PROCSTAT' AS PROCSTAT)))
                               DATA)
                 WHERE     TBAID =
                           (SELECT TBAID
                              FROM TBADETAIL
                             WHERE     TBAID = (SELECT MAX (TBAID)
                                                  FROM TBATCH
                                                 WHERE TBACODE LIKE 'EWARN')
                                   AND ACTID = NACTID)
                       AND TDEORDER =
                           (SELECT TDEORDER
                              FROM TBADETAIL
                             WHERE     TBAID = (SELECT MAX (TBAID)
                                                  FROM TBATCH
                                                 WHERE TBACODE LIKE 'EWARN')
                                   AND ACTID = NACTID)
                       AND ROWNUM = 1;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NRETURNCODE := 0;
            END;

            BEGIN
                IF     SROLECODE = 'USECARA'
                   AND SOLDPHACODE = 'INA'
                   AND SOLDJALCODE = 'SUSB'
                   AND SPRCESTAT = 'B'
                THEN
                    UPDATE TBADETDATA
                       SET TDDDATASTRING = 'D'
                     WHERE     TBAID =
                               (SELECT TBAID
                                  FROM TBADETAIL
                                 WHERE     TBAID = (SELECT MAX (TBAID)
                                                      FROM TBATCH
                                                     WHERE TBACODE = 'EWARN')
                                       AND ACTID = NACTID)
                           AND TDEORDER =
                               (SELECT TDEORDER
                                  FROM TBADETAIL
                                 WHERE     TBAID = (SELECT MAX (TBAID)
                                                      FROM TBATCH
                                                     WHERE TBACODE = 'EWARN')
                                       AND ACTID = NACTID)
                           AND TDDCOLUMN = 'PROCSTAT';
                END IF;

                NRETURNCODE := 0;
            END;
        END;
    END P_UPDATESUSUSCARAPROCSTAT;

    -- Procedure d'insertion --
    -- UTIACTDEFAULT --
    PROCEDURE I_UTIACTDEFAULT (
        SUTICODE             UTIACTDEFAULT.UTICODE%TYPE,
        NUADORDRE            UTIACTDEFAULT.UADORDRE%TYPE,
        STPGCODE             UTIACTDEFAULT.TPGCODE%TYPE,
        NACTID               UTIACTDEFAULT.ACTID%TYPE,
        SROLCODE             UTIACTDEFAULT.ROLCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO UTIACTDEFAULT (UTICODE,
                                       UADORDRE,
                                       TPGCODE,
                                       ACTID,
                                       ROLCODE,
                                       UADLINKTYPE)
                 VALUES (SUTICODE,
                         NUADORDRE,
                         STPGCODE,
                         NACTID,
                         SROLCODE,
                         'MYSELF');

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                -- nReturnCode := ERR_PARENT_ADR_FOUND_CONST;
                NRETURNCODE :=
                    F_GETFKMOREINFO (SQLERRM, ERR_PARENT_ADR_FOUND_CONST);
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_UTIACTDEFAULT;

    PROCEDURE I_ACTPRODOSSIER (
        NACTID        IN     ACTEUR.ACTID%TYPE,
        NAPRORDRE     IN     ACTPRODOSSIER.APRORDRE%TYPE,
        NAPDORDRE     IN     ACTPRODOSSIER.APDORDRE%TYPE,
        NDOSID        IN     ACTPRODOSSIER.DOSID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NMAXAPDORDRE   CREDATA.CDAORDRE%TYPE;
        BEGIN
            SELECT NVL (MAX (APDORDRE), 0)
              INTO NMAXAPDORDRE
              FROM ACTPRODOSSIER
             WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            INSERT INTO ACTPRODOSSIER (ACTID,
                                       APRORDRE,
                                       APDORDRE,
                                       DOSID)
                 VALUES (NACTID,
                         NAPRORDRE,
                         NMAXAPDORDRE + 1,
                         NDOSID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_PPA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APD_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTPRODOSSIER;

    PROCEDURE U_ACTPROPHASEBYWS (
        NACTID        IN     ACTPROPHASE.ACTID%TYPE,
        NAPRORDRE     IN     ACTPROPHASE.APRORDRE%TYPE,
        NAPPORDRE     IN     ACTPROPHASE.APPORDRE%TYPE,
        SPHACODE      IN     ACTPROPHASE.PHACODE%TYPE,
        SJALCODE      IN     ACTPROPHASE.JALCODE%TYPE,
        SAPPDTDEB     IN     ACTPROPHASE.APPDTDEB%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            UPDATE ACTPROPHASE
               SET JALCODE = SJALCODE, PHACODE = SPHACODE
             WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTPROPHASEBYWS;

    PROCEDURE I_ACTBIDDING (
        NACTID                      ACTBIDDING.ACTID%TYPE,
        --nAbiOrder ACTBIDDING.ABIORDER%TYPE,
        SDPTCODE                    ACTBIDDING.DPTCODE%TYPE,
        SABIPARTCODE                ACTBIDDING.ABIPARTCODE%TYPE,
        SABIPARTTYPE                ACTBIDDING.ABIPARTTYPE%TYPE,
        NABIFLAGANNFEEPAID          ACTBIDDING.ABIFLAGANNFEEPAID%TYPE,
        NACTIDGESTION               AROAGE.ACTIDGESTION%TYPE,
        SUTICODE                    ADRESSE.UTICODE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NABIORDER      ACTBIDDING.ABIORDER%TYPE;
            NSELROWS       NUMBER;
            NCREID         NUMBER;
            NCOUNT         NUMBER;
            NCOUNTAROAGE   NUMBER;
            SAROREF        VARCHAR2 (10);
        BEGIN
            DECLARE
                NANNEEEXIST      NUMBER;
                NMOISEXIST       NUMBER;
                NNUMERO          NUMBER;
                DTSAMPLE         DATE;
                SACTIDGESTION    NUMBER;
                P_DPTCODECREAT   VARCHAR2 (7);
                P_DPTCODEVALID   VARCHAR2 (7);
            BEGIN
                NSELROWS := 0;
                SAROREF := NULL;

                SELECT COUNT (1)
                  INTO NCOUNT
                  FROM ACTROLE
                 WHERE ROLCODE = SABIPARTTYPE AND ACTID = NACTID;

                NANNEEEXIST := 0;
                NMOISEXIST := 0;
                NNUMERO := -1;
                DTSAMPLE := NULL;
                SACTIDGESTION := NULL;

                IF NCOUNT = 0
                THEN
                    PA_COMMON.S_NUMEROFORMATE ('AROPREFEXTERNE',
                                               SACTIDGESTION,
                                               'AROPREFEXTERNE',
                                               DTSAMPLE,
                                               NANNEEEXIST,
                                               NMOISEXIST,
                                               NNUMERO,
                                               SAROREF);

                    INSERT INTO ACTROLE (ACTID, ROLCODE, AROREFEXTERNE)
                         VALUES (NACTID, SABIPARTTYPE, SAROREF);
                END IF;

                SELECT COUNT (1)
                  INTO NCOUNTAROAGE
                  FROM AROAGE
                 WHERE     ROLCODE = SABIPARTTYPE
                       AND ACTID = NACTID
                       AND ACTIDGESTION = NACTIDGESTION
                       AND TO_DATE (AAGDTVALID, 'dd-mm-yyyy') =
                           TO_DATE (SYSDATE, 'dd-mm-yyyy');

                IF NCOUNTAROAGE = 0
                THEN
                    INSERT INTO AROAGE (ACTID,
                                        ROLCODE,
                                        ACTIDGESTION,
                                        AAGDTVALID)
                         VALUES (NACTID,
                                 SABIPARTTYPE,
                                 NACTIDGESTION,
                                 SYSDATE);
                END IF;

                SELECT COUNT (1)
                  INTO NSELROWS
                  FROM ACTBIDDING
                 WHERE     DPTCODE = SDPTCODE
                       AND ABIPARTCODE = SABIPARTCODE
                       AND ABIPARTTYPE = SABIPARTTYPE;

                P_DPTCODECREAT := F_GETDEPTFROMUTICODE (SUTICODE);
                P_DPTCODEVALID := P_DPTCODECREAT;

                IF NSELROWS = 0
                THEN
                    SELECT NVL (MAX (ABIORDER), 0) + 1
                      INTO NABIORDER
                      FROM ACTBIDDING
                     WHERE ACTID = NACTID;

                    INSERT INTO ACTBIDDING (ACTID,
                                            ABIORDER,
                                            DPTCODE,
                                            ABIPARTCODE,
                                            ABIPARTTYPE,
                                            ABIFLAGANNFEEPAID)
                         VALUES (NACTID,
                                 NABIORDER,
                                 SDPTCODE,
                                 SABIPARTCODE,
                                 SABIPARTTYPE,
                                 NABIFLAGANNFEEPAID);

                    SELECT SEQ_CREID.NEXTVAL INTO NCREID FROM DUAL;

                    BEGIN
                        INSERT INTO CREVT (CREID,
                                           TACCODE,
                                           UTICODECREAT,
                                           UTICODEVALID,
                                           CREDTEFFET,
                                           CREDTCREAT,
                                           TMOMODULE,
                                           TMFFONCTION,
                                           TEVDEST,
                                           ACTID,
                                           TBAID,
                                           CREDTVALID,
                                           DPTCODECREAT,
                                           DPTCODEVALID)
                             VALUES (NCREID,
                                     'GLOBAL',
                                     SUTICODE,
                                     SUTICODE,
                                     TRUNC (SYSDATE),
                                     TRUNC (SYSDATE),
                                     'ACTEUR',
                                     'EVACT_SUPERVIS',
                                     'ACTEUR',
                                     NACTID,
                                     NULL,
                                     NULL,
                                     P_DPTCODECREAT,
                                     P_DPTCODEVALID);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NRETURNCODE := ERR_INSERTION_CREVT;
                    END;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT = 0
                    THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END IF;
                ELSE
                    NRETURNCODE := 21249;
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END I_ACTBIDDING;

    PROCEDURE U_COLLECTION_CDADATALOCK (NRETURNCODE IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE COLLECTIONCASE
               SET CCADTLOCKED = NULL;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_PPA_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_APD_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_APA_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_COLLECTION_CDADATALOCK;

    PROCEDURE I_ACTRIBMANDATE (
        NACTID                IN     ACTRIBMANDATE.ACTID%TYPE,
        NRIBID                IN     ACTRIBMANDATE.RIBID%TYPE,
        NARMORDER             IN     ACTRIBMANDATE.ARMORDER%TYPE,
        NARMDOSID             IN     ACTRIBMANDATE.ARMDOSID%TYPE,
        SARMRUM               IN     ACTRIBMANDATE.ARMRUM%TYPE,
        SARMSCHEMATYPE        IN     ACTRIBMANDATE.ARMSCHEMATYPE%TYPE,
        SARMSTATUS            IN     ACTRIBMANDATE.ARMSTATUS%TYPE,
        DARMDTSIGNATURE       IN     ACTRIBMANDATE.ARMDTSIGNATURE%TYPE,
        DARMDTSTART           IN     ACTRIBMANDATE.ARMDTSTART%TYPE,
        DARMDTEND             IN     ACTRIBMANDATE.ARMDTEND%TYPE,
        SARMTRANSACTIONTYPE   IN     ACTRIBMANDATE.ARMTRANSACTIONTYPE%TYPE,
        SARMSEQUENCETYPE      IN     ACTRIBMANDATE.ARMSEQUENCETYPE%TYPE,
        NARMFLAGAMENDMENT     IN     ACTRIBMANDATE.ARMFLAGAMENDMENT%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    IS
    BEGIN
        BEGIN
            NRETURNCODE := 0;

            INSERT INTO ACTRIBMANDATE (ACTID,
                                       RIBID,
                                       ARMORDER,
                                       ARMDOSID,
                                       ARMRUM,
                                       ARMSCHEMATYPE,
                                       ARMSTATUS,
                                       ARMDTSIGNATURE,
                                       ARMDTSTART,
                                       ARMDTEND,
                                       ARMTRANSACTIONTYPE,
                                       ARMSEQUENCETYPE,
                                       ARMFLAGAMENDMENT)
                 VALUES (NACTID,
                         NRIBID,
                         NARMORDER,
                         NARMDOSID,
                         SARMRUM,
                         SARMSCHEMATYPE,
                         SARMSTATUS,
                         DARMDTSIGNATURE,
                         DARMDTSTART,
                         DARMDTEND,
                         SARMTRANSACTIONTYPE,
                         SARMSEQUENCETYPE,
                         NARMFLAGAMENDMENT);
        EXCEPTION
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTRIBMANDATE;

    PROCEDURE U_ACTRIBMANDATE (
        NACTID                IN     ACTRIBMANDATE.ACTID%TYPE,
        NRIBID                IN     ACTRIBMANDATE.RIBID%TYPE,
        NARMORDER             IN     ACTRIBMANDATE.ARMORDER%TYPE,
        NARMDOSID             IN     ACTRIBMANDATE.ARMDOSID%TYPE,
        SARMRUM               IN     ACTRIBMANDATE.ARMRUM%TYPE,
        SARMSCHEMATYPE        IN     ACTRIBMANDATE.ARMSCHEMATYPE%TYPE,
        SARMSTATUS            IN     ACTRIBMANDATE.ARMSTATUS%TYPE,
        DARMDTSIGNATURE       IN     ACTRIBMANDATE.ARMDTSIGNATURE%TYPE,
        DARMDTSTART           IN     ACTRIBMANDATE.ARMDTSTART%TYPE,
        DARMDTEND             IN     ACTRIBMANDATE.ARMDTEND%TYPE,
        SARMTRANSACTIONTYPE   IN     ACTRIBMANDATE.ARMTRANSACTIONTYPE%TYPE,
        SARMSEQUENCETYPE      IN     ACTRIBMANDATE.ARMSEQUENCETYPE%TYPE,
        NARMFLAGAMENDMENT     IN     ACTRIBMANDATE.ARMFLAGAMENDMENT%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    IS
    BEGIN
        BEGIN
            NRETURNCODE := 0;

            UPDATE ACTRIBMANDATE
               SET ARMDOSID = NARMDOSID,
                   ARMRUM = SARMRUM,
                   ARMSCHEMATYPE = SARMSCHEMATYPE,
                   ARMSTATUS = SARMSTATUS,
                   ARMDTSIGNATURE = DARMDTSIGNATURE,
                   ARMDTSTART = DARMDTSTART,
                   ARMDTEND = DARMDTEND,
                   ARMTRANSACTIONTYPE = SARMTRANSACTIONTYPE,
                   ARMSEQUENCETYPE = SARMSEQUENCETYPE,
                   ARMFLAGAMENDMENT = NARMFLAGAMENDMENT
             WHERE ACTID = NACTID AND RIBID = NRIBID AND ARMORDER = NARMORDER;
        EXCEPTION
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTRIBMANDATE;

    PROCEDURE D_ACTRIBMANDATE (
        NACTID        IN     ACTRIBMANDATE.ACTID%TYPE,
        NRIBID        IN     ACTRIBMANDATE.RIBID%TYPE,
        NARMORDER     IN     ACTRIBMANDATE.ARMORDER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    IS
    BEGIN
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM ACTRIBMANDATE
                  WHERE     ACTID = NACTID
                        AND RIBID = NRIBID
                        AND ARMORDER = NARMORDER;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ARM_FOUND_CONST;
        END;
    END D_ACTRIBMANDATE;

    PROCEDURE D_OWNERBIENIMMO (NACTID        IN     ACTEUR.ACTID%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            -- DELETE BIMACTOR
            DELETE FROM BIMACTOR
                  WHERE ACTID = NACTID;

            -- DELETE ITRPHASE
            DELETE FROM ITRPHASE
                  WHERE ITRID = (SELECT ITRID
                                   FROM IMMOTRANCHE
                                  WHERE ACTID = NACTID);

            -- DELETE IMMOTRANCHE
            DELETE FROM LKITRBIM
                  WHERE ITRID = (SELECT ITRID
                                   FROM IMMOTRANCHE
                                  WHERE ACTID = NACTID);

            -- DELETE IMMOTRANCHE
            DELETE FROM IMMOTRANCHE
                  WHERE ACTID = NACTID;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_OWNERBIENIMMO;

    PROCEDURE P_COPYACTRIBMANDATE (
        nActId            IN     ACTEUR.ACTID%TYPE,
        nRibIdOld         IN     ACTRIB.RIBID%TYPE,
        nRibIdNew         IN     ACTRIB.RIBID%TYPE,
        nDosId            IN     DOSSIER.DOSID%TYPE,
        dtEffet           IN     ACTRIB.ARIDTREMPLACE%TYPE,
        nReturnArmorder   IN OUT NUMBER,
        nReturnCode       IN OUT NUMBER)
    IS
    BEGIN
        DECLARE
            nMaxOrdre          NUMBER := 0;
            nOrigMaxOrdre      NUMBER := 0;
            sOldBguBanque      RIB.BGUBANQUE%TYPE;
            sOldPaycode        BANQUEGUICHET.PAYCODE%TYPE;
            sNewBguBanque      RIB.BGUBANQUE%TYPE;
            sNewPaycode        BANQUEGUICHET.PAYCODE%TYPE;
            sNewSequenceType   ACTRIBMANDATE.ARMSEQUENCETYPE%TYPE;
            dArmdtend          ACTRIBMANDATE.ARMDTEND%TYPE;
            sArmrum            ACTRIBMANDATE.ARMRUM%TYPE;
            nActidgestion      ACTEUR.ACTID%TYPE;
            nIsNewRum          NUMBER := 1;

            CURSOR cOldActRibMandate
            IS
                SELECT ACTID,
                       RIBID,
                       ARMORDER,
                       ARMDOSID,
                       ARMSCHEMATYPE,
                       ARMSTATUS,
                       ARMDTSIGNATURE,
                       ARMDTSTART,
                       ARMDTEND,
                       ARMTRANSACTIONTYPE,
                       ARMSEQUENCETYPE,
                       ARMDRUORDRE,
                       ARMFLAGNOUTDATED,
                       ARMFLAGAMENDMENT,
                       ARMRUM
                  FROM ACTRIBMANDATE
                 WHERE     RIBID = nRibIdOld
                       AND ACTID = nActId
                       AND (ARMDOSID = nDosId OR nDosId IS NULL)
                       AND ARMDTEND IS NULL
                UNION
                (SELECT ACTID,
                        RIBID,
                        ARMORDER,
                        ARMDOSID,
                        ARMSCHEMATYPE,
                        ARMSTATUS,
                        ARMDTSIGNATURE,
                        ARMDTSTART,
                        ARMDTEND,
                        ARMTRANSACTIONTYPE,
                        ARMSEQUENCETYPE,
                        ARMDRUORDRE,
                        ARMFLAGNOUTDATED,
                        ARMFLAGAMENDMENT,
                        ARMRUM
                   FROM ACTRIBMANDATE
                  WHERE     RIBID = nRibIdOld
                        AND ACTID = nActId
                        AND (ARMDOSID = nDosId OR nDosId IS NULL)
                        AND ARMORDER IN
                                (SELECT MAX (ARMORDER) - 1
                                   FROM ACTRIBMANDATE
                                  WHERE     RIBID = nRibIdOld
                                        AND ACTID = nActId
                                        AND (   ARMDOSID = nDosId
                                             OR nDosId IS NULL))
                        AND ARMSTATUS = 'INI');

            CURSOR cgetDosid
            IS
                SELECT ACTID
                  FROM DOSSIER
                 WHERE DOSID = nDosId;
        BEGIN
            SELECT RIB.BGUBANQUE, BANQUEGUICHET.PAYCODE
              INTO sOldBguBanque, sOldPaycode
              FROM RIB
                   JOIN BANQUEGUICHET
                       ON     RIB.BGUBANQUE = BANQUEGUICHET.BGUBANQUE
                          AND RIB.BGUGUICHET = BANQUEGUICHET.BGUGUICHET
             WHERE RIB.RIBID = nRibIdOld;

            SELECT RIB.BGUBANQUE, BANQUEGUICHET.PAYCODE
              INTO sNewBguBanque, sNewPaycode
              FROM RIB
                   JOIN BANQUEGUICHET
                       ON     RIB.BGUBANQUE = BANQUEGUICHET.BGUBANQUE
                          AND RIB.BGUGUICHET = BANQUEGUICHET.BGUGUICHET
             WHERE RIB.RIBID = nRibIdNew;

            SELECT NVL (MAX (ARMORDER), 0)
              INTO nMaxOrdre
              FROM ACTRIBMANDATE
             WHERE ACTID = nActId;

            BEGIN
                OPEN cgetDosid;

                FETCH cgetDosid INTO nActidgestion;

                CLOSE cgetDosid;
            EXCEPTION
                WHEN OTHERS
                THEN
                    SELECT ACTIDGESTION
                      INTO nActidgestion
                      FROM ACTRIBMANDATE
                     WHERE RIBID = nRibIdOld AND ACTID = nActId;
            END;

            nOrigMaxOrdre := nMaxOrdre;

            FOR oldMandate IN cOldActRibMandate
            LOOP
                nMaxOrdre := nMaxOrdre + 1;

                IF (   sOldBguBanque != sNewBguBanque
                    OR sOldPaycode != sNewPaycode)
                THEN
                    sNewSequenceType := 'FRST';
                ELSE
                    sNewSequenceType := oldMandate.ARMSEQUENCETYPE;
                END IF;

                IF (oldMandate.ARMDTEND IS NOT NULL)
                THEN
                    dArmdtend := dtEffet;
                ELSE
                    dArmdtend := NULL;
                END IF;

                IF nIsNewRum = 1
                THEN
                    PAV4_SELECTACTEUR.S_GETARMRUM (nActId,
                                                   nActidgestion,
                                                   nRibIdNew,
                                                   oldMandate.ARMDOSID,
                                                   nMaxOrdre,
                                                   sArmrum);
                    nIsNewRum := 0;
                END IF;

                PAV4_UPDATEACTEUR.I_ACTRIBMANDATE (
                    oldMandate.ACTID,
                    nRibIdNew,
                    nMaxOrdre,
                    oldMandate.ARMDOSID,
                    oldMandate.ARMRUM,
                    oldMandate.ARMSCHEMATYPE,
                    oldMandate.ARMSTATUS,
                    oldMandate.ARMDTSIGNATURE,
                    dtEffet,
                    dArmdtend,
                    oldMandate.ARMTRANSACTIONTYPE,
                    sNewSequenceType,
                    0,
                    nReturnCode);

                -- Update de la EndDate sur les rib source avec la SYSDATE
                PAV4_UPDATEACTEUR.U_ACTRIBMANDATE (
                    oldMandate.ACTID,
                    oldMandate.RIBID,
                    oldMandate.ARMORDER,
                    oldMandate.ARMDOSID,
                    oldMandate.ARMRUM,
                    oldMandate.ARMSCHEMATYPE,
                    oldMandate.ARMSTATUS,
                    oldMandate.ARMDTSIGNATURE,
                    oldMandate.ARMDTSTART,
                    GREATEST (oldMandate.ARMDTSTART, dtEffet - 1),
                    oldMandate.ARMTRANSACTIONTYPE,
                    oldMandate.ARMSEQUENCETYPE,
                    oldMandate.ARMFLAGAMENDMENT,
                    nReturnCode);
            END LOOP;

            IF (nRibIdNew != nRibIdOld)
            THEN
                UPDATE ACTRIBMANDATE
                   SET ARMFLAGAMENDMENT = 1
                 WHERE     ACTID = nActId
                       AND RIBID = nRibIdNew
                       AND ARMORDER > nOrigMaxOrdre;

                IF (sOldBguBanque != sNewBguBanque)
                THEN
                    UPDATE ACTRIBMANDATE
                       SET ARMSEQUENCETYPE = 'FRST'
                     WHERE     ACTID = nActId
                           AND RIBID = nRibIdNew
                           AND ARMORDER > nOrigMaxOrdre;
                ELSE
                    UPDATE ACTRIBMANDATE
                       SET ARMSEQUENCETYPE = 'RCUR'
                     WHERE     ACTID = nActId
                           AND RIBID = nRibIdNew
                           AND ARMORDER > nOrigMaxOrdre;
                END IF;
            END IF;

            nReturnArmorder := nMaxOrdre;
        EXCEPTION
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END P_COPYACTRIBMANDATE;

    PROCEDURE S_CALCULATEIDENTIFICATIONKEY (
        NACTID     IN ACTEUR.ACTID%TYPE,
        SLANCODE   IN LANPAYS.LANCODE%TYPE)
    AS
    BEGIN
        DECLARE
            sActidentificationkey   ACTEUR.ACTIDENTIFICATIONKEY%TYPE;
            sActnom                 ACTEUR.ACTNOM%TYPE;
            sApaprenom              ACTEURPARTICULIER.APAPRENOM%TYPE;
            NDTRID                  DATATRANSCODING.DTRID%TYPE;
            SDDEHOSTVALUE           DTRDETAIL.DDEHOSTVALUE%TYPE;
            SCHAINE                 DTRDETAIL.DDEHOSTVALUE%TYPE;
            SCHAINE1                DTRDETAIL.DDEHOSTVALUE%TYPE;
            STABLE                  DTRDETAIL.DDEHOSTVALUE%TYPE;
            SFROM                   VARCHAR2 (2000);
            SSELECT                 VARCHAR2 (500);
            SWHERE                  VARCHAR2 (2000);
            SListeTable             VARCHAR2 (2000);
            SFunction               VARCHAR2 (200);
            NINDEX                  NUMBER;
            NLONG                   NUMBER;
            NPOS                    NUMBER;

            CURSOR C_ACTORPROSPECT
            IS
                SELECT ACT.ACTID,
                       ACT.ACTNOM,
                       ACT.ACTSIRET,
                       ACT.ACTTYPE,
                       APA.APAPRENOM,
                       APA.APADTNAISS,
                       APA.APADEPTNAISS,
                       APA.APACOMNAISS,
                       APA.PAYCODE,
                       (SELECT PAYLIBELLE
                          FROM LANPAYS
                         WHERE PAYCODE = APA.PAYCODE AND LANCODE = SLANCODE)
                           AS PAYLIBELLE,
                       (SELECT TUPLIBELLE
                          FROM LANTUSPARAM
                         WHERE     TUSNOM = 'TITRE'
                               AND TUPCODE = APA.APATITRE
                               AND LANCODE = SLANCODE)
                           AS ACTTITRE
                  FROM ACTEUR ACT, ACTEURPARTICULIER APA
                 WHERE     ACT.ACTID = APA.ACTID(+)
                       AND (   ACT.ACTID = NACTID
                            OR ACT.ACTID IN (SELECT DISTINCT ACTID
                                               FROM ACTRELATION
                                              WHERE ACTIDRELATION = NACTID)
                            OR ACT.ACTID IN (SELECT DISTINCT ACTIDRELATION
                                               FROM ACTRELATION
                                              WHERE ACTID = NACTID))
                       -- AND ACT.ACTFLAGPROSPECT = 1
                       AND ACT.ACTIDSERVICING IS NULL;
        BEGIN
            BEGIN
                SELECT DTRID
                  INTO NDTRID
                  FROM DATATRANSCODING DAT
                 WHERE     DTRCODE = 'ACTIDKEY'
                       AND DTRTABLENAME = 'ACTEUR'
                       AND DTRTYPE = 'INTERNE'
                       AND EXISTS
                               (SELECT 1
                                  FROM ACTEUR
                                 WHERE     ACTID = NACTID
                                       AND UGECODE = DAT.UGECODE);
            EXCEPTION
                WHEN OTHERS
                THEN
                    NDTRID := NULL;
            END;

            IF NDTRID IS NOT NULL
            THEN
                DBMS_OUTPUT.PUT_LINE ('NDTRID ' || NDTRID);

                FOR C1R IN C_ACTORPROSPECT
                LOOP
                    IF C1R.ACTTYPE IS NOT NULL
                    THEN
                        BEGIN
                            SELECT DDEHOSTVALUE
                              INTO SDDEHOSTVALUE
                              FROM DTRDETAIL
                             WHERE     DTRID = NDTRID
                                   AND DDECASSIOPEEVALUE = C1R.ACTTYPE;
                        EXCEPTION
                            WHEN OTHERS
                            THEN
                                SDDEHOSTVALUE := NULL;
                        END;

                        IF SDDEHOSTVALUE IS NOT NULL
                        THEN
                            NINDEX := 0;
                            sActidentificationkey := RTRIM (SDDEHOSTVALUE);
                            SCHAINE := sActidentificationkey;
                            SCHAINE1 := SCHAINE;
                            NLONG := LENGTH (SCHAINE);
                            SFROM := NULL;

                            --DBMS_OUTPUT.PUT_LINE('NLONG ' || NLONG || ' SCHAINE1 ' || SCHAINE1 );
                            WHILE NINDEX <= NLONG
                            LOOP
                                NPOS := INSTR (SCHAINE1, '.');

                                IF SFROM IS NULL
                                THEN
                                    STABLE := SUBSTR (SCHAINE1, 1, NPOS - 1);
                                    SFROM := STABLE;
                                    SListeTable := '||' || STABLE || '||';

                                    SCHAINE1 :=
                                        SUBSTR (SCHAINE, NPOS + 1, NLONG);
                                    NINDEX := NPOS;
                                ELSIF NPOS > 0
                                THEN
                                    STABLE :=
                                        SUBSTR (
                                            SCHAINE1,
                                            INSTR (SCHAINE1, '|') + 2,
                                            NPOS - INSTR (SCHAINE1, '|') - 2);

                                    IF     INSTR (SListeTable,
                                                  '||' || STABLE || '||') =
                                           0
                                       AND SUBSTR (STABLE, 1, 2) != 'F_'
                                    THEN
                                        SFROM := SFROM || ' , ' || STABLE;
                                        --DBMS_OUTPUT.PUT_LINE('SFROM ' || SFROM );
                                        SListeTable :=
                                            SListeTable || STABLE || '||';
                                    END IF;

                                    SCHAINE1 :=
                                        SUBSTR (SCHAINE1,
                                                NPOS + 1,
                                                LENGTH (SCHAINE1));
                                    NINDEX := NINDEX + NPOS;
                                END IF;

                                NINDEX := NINDEX + 1;
                            END LOOP;
                        END IF;

                        SSELECT :=
                            'SELECT ' || SCHAINE || ' sActidentificationkey ';
                        SFROM := 'FROM ' || SFROM;

                        IF C1R.ACTTYPE = 'PART'
                        THEN
                            SWHERE :=
                                   'WHERE ACTEUR.ACTID = '
                                || TO_CHAR (C1R.ACTID)
                                || ' AND ACTEURPARTICULIER.ACTID = ACTEUR.ACTID ';
                        ELSE
                            SWHERE :=
                                   'WHERE ACTEUR.ACTID = '
                                || TO_CHAR (C1R.ACTID);
                        END IF;

                        IF SSELECT IS NOT NULL AND SFROM IS NOT NULL
                        THEN
                            BEGIN
                                EXECUTE IMMEDIATE
                                    SSELECT || ' ' || SFROM || ' ' || SWHERE
                                    INTO sActidentificationkey;
                            EXCEPTION
                                WHEN OTHERS
                                THEN
                                    sActidentificationkey := NULL;
                            END;

                            IF sActidentificationkey IS NOT NULL
                            THEN
                                sActidentificationkey :=
                                    PA_COM_GENERAL.CLEANUP_SPECIAL_CHARACTERS (
                                        sActidentificationkey);
                            END IF;

                            IF sActidentificationkey IS NOT NULL
                            THEN
                                UPDATE ACTEUR
                                   SET ACTIDENTIFICATIONKEY =
                                           sActidentificationkey
                                 WHERE ACTID = C1R.ACTID;
                            END IF;
                        END IF;
                    END IF;
                END LOOP;
            END IF;
        END;
    END S_CALCULATEIDENTIFICATIONKEY;

    PROCEDURE I_AAGRVE_OBJECTIVES (
        NACTID                     AAGRVE.ACTID%TYPE,
        SROLCODE                   AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION              AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID               AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                   AAGRVE.RVACODE%TYPE,
        NAVEORDRE                  AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                 AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                 AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF             AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE              AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT             AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVENBOBJECTIF             AAGRVE.AVENBOBJECTIF%TYPE,
        NAVENBREALISE              AAGRVE.AVENBREALISE%TYPE,
        NAVEMTCANCELLED            AAGRVE.AVEMTCANCELLED%TYPE,
        NAVENBCANCELLED            AAGRVE.AVENBCANCELLED%TYPE,
        NCREID                     AAGRVE.CREID%TYPE,
        LSAVEMEMO                  AAGRVE.AVEMEMO%TYPE,
        NAVEMTATTRIBUTEXT          AAGRVE.AVEMTATTRIBUTEXT%TYPE,
        NAVENBDISCOUNT             AAGRVE.AVENBDISCOUNT%TYPE,
        NDOSID                     AAGRVE.DOSID%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO AAGRVE (ACTID,
                            ROLCODE,
                            ACTIDGESTION,
                            AAGDTVALID,
                            RVACODE,
                            AVEORDRE,
                            AVEDTDEB,
                            AVEDTFIN,
                            AVEMTOBJECTIF,
                            AVEMTREALISE,
                            AVEMTATTRIBUT,
                            AVENBOBJECTIF,
                            AVENBREALISE,
                            AVEMTCANCELLED,
                            AVENBCANCELLED,
                            CREID,
                            AVEMEMO,
                            AVEMTATTRIBUTEXT,
                            AVENBDISCOUNT,
                            DOSID)
             VALUES (NACTID,
                     SROLCODE,
                     NACTIDGESTION,
                     DTAAGDTVALID,
                     SRVACODE,
                     NAVEORDRE,
                     DTAVEDTDEB,
                     DTAVEDTFIN,
                     NAVEMTOBJECTIF,
                     NAVEMTREALISE,
                     NAVEMTATTRIBUT,
                     NAVENBOBJECTIF,
                     NAVENBREALISE,
                     NAVEMTCANCELLED,
                     NAVENBCANCELLED,
                     NCREID,
                     LSAVEMEMO,
                     NAVEMTATTRIBUTEXT,
                     NAVENBDISCOUNT,
                     NDOSID);

        NRETURNCODE := 0;
    END I_AAGRVE_OBJECTIVES;

    PROCEDURE P_UPDATE_AAGRVE_OBJECTIVES (
        NACTID                     AAGRVE.ACTID%TYPE,
        SROLCODE                   AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION              AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID               AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                   AAGRVE.RVACODE%TYPE,
        NAVEORDRE                  AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                 AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                 AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF             AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE              AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT             AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVENBOBJECTIF             AAGRVE.AVENBOBJECTIF%TYPE,
        NAVENBREALISE              AAGRVE.AVENBREALISE%TYPE,
        NAVEMTCANCELLED            AAGRVE.AVEMTCANCELLED%TYPE,
        NAVENBCANCELLED            AAGRVE.AVENBCANCELLED%TYPE,
        NCREID                     AAGRVE.CREID%TYPE,
        LSAVEMEMO                  AAGRVE.AVEMEMO%TYPE,
        NAVEMTATTRIBUTEXT          AAGRVE.AVEMTATTRIBUTEXT%TYPE,
        NAVENBDISCOUNT             AAGRVE.AVENBDISCOUNT%TYPE,
        NDOSID                     AAGRVE.DOSID%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        UPDATE AAGRVE
           SET AVEDTDEB = DTAVEDTDEB,
               AVEDTFIN = DTAVEDTFIN,
               AVEMTOBJECTIF = NAVEMTOBJECTIF,
               AVEMTREALISE = NAVEMTREALISE,
               AVEMTATTRIBUT = NAVEMTATTRIBUT,
               AVENBOBJECTIF = NAVENBOBJECTIF,
               AVENBREALISE = NAVENBREALISE,
               AVEMTCANCELLED = NAVEMTCANCELLED,
               AVENBCANCELLED = NAVENBCANCELLED,
               AVEMEMO = LSAVEMEMO,
               AVEMTATTRIBUTEXT = NAVEMTATTRIBUTEXT,
               AVENBDISCOUNT = NAVENBDISCOUNT,
               DOSID = NDOSID,
               CREID = NCREID
         WHERE     ACTID = NACTID
               AND ROLCODE = SROLCODE
               AND ACTIDGESTION = NACTIDGESTION
               AND TO_CHAR (AAGDTVALID, 'YYYY-MM-DD') =
                   TO_CHAR (DTAAGDTVALID, 'YYYY-MM-DD')
               AND RVACODE = SRVACODE
               AND AVEORDRE = NAVEORDRE;

        NRETURNCODE := 0;
    END P_UPDATE_AAGRVE_OBJECTIVES;

    PROCEDURE P_INSERT_AAGRVE_OBJECTIVES (
        NACTID                     AAGRVE.ACTID%TYPE,
        SROLCODE                   AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION              AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID               AAGRVE.AAGDTVALID%TYPE,
        SRVACODE                   AAGRVE.RVACODE%TYPE,
        NAVEORDRE                  AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB                 AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN                 AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF             AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE              AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT             AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVENBOBJECTIF             AAGRVE.AVENBOBJECTIF%TYPE,
        NAVENBREALISE              AAGRVE.AVENBREALISE%TYPE,
        NAVEMTCANCELLED            AAGRVE.AVEMTCANCELLED%TYPE,
        NAVENBCANCELLED            AAGRVE.AVENBCANCELLED%TYPE,
        NCREID                     AAGRVE.CREID%TYPE,
        LSAVEMEMO                  AAGRVE.AVEMEMO%TYPE,
        NAVEMTATTRIBUTEXT          AAGRVE.AVEMTATTRIBUTEXT%TYPE,
        NAVENBDISCOUNT             AAGRVE.AVENBDISCOUNT%TYPE,
        NDOSID                     AAGRVE.DOSID%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
        NCOUNT   NUMBER := 0;
    BEGIN
        SELECT COUNT (*)
          INTO NCOUNT
          FROM AROAGE
         WHERE     ACTID = NACTID
               AND ROLCODE = SROLCODE
               AND ACTIDGESTION = NACTIDGESTION
               AND TO_CHAR (AAGDTVALID, 'YYYY-MM-DD') =
                   TO_CHAR (DTAAGDTVALID, 'YYYY-MM-DD');

        IF NCOUNT = 0
        THEN
            INSERT INTO AROAGE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         DTAAGDTVALID);
        END IF;

        I_AAGRVE_OBJECTIVES (NACTID,
                             SROLCODE,
                             NACTIDGESTION,
                             DTAAGDTVALID,
                             SRVACODE,
                             NAVEORDRE,
                             DTAVEDTDEB,
                             DTAVEDTFIN,
                             NAVEMTOBJECTIF,
                             NAVEMTREALISE,
                             NAVEMTATTRIBUT,
                             NAVENBOBJECTIF,
                             NAVENBREALISE,
                             NAVEMTCANCELLED,
                             NAVENBCANCELLED,
                             NCREID,
                             LSAVEMEMO,
                             NAVEMTATTRIBUTEXT,
                             NAVENBDISCOUNT,
                             NDOSID,
                             NRETURNCODE);
    END P_INSERT_AAGRVE_OBJECTIVES;

    PROCEDURE P_DELETE_AAGRVE_OBJECTIVES (
        NACTID                 AAGRVE.ACTID%TYPE,
        SROLCODE               AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION          AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID           AAGRVE.AAGDTVALID%TYPE,
        SRVACODE               AAGRVE.RVACODE%TYPE,
        NAVEORDRE              AAGRVE.AVEORDRE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM AAGRVE
              WHERE     ACTID = NACTID
                    AND ROLCODE = SROLCODE
                    AND ACTIDGESTION = NACTIDGESTION
                    AND AAGDTVALID = DTAAGDTVALID
                    AND RVACODE = SRVACODE
                    AND AVEORDRE = NAVEORDRE;

        NRETURNCODE := 0;
    END P_DELETE_AAGRVE_OBJECTIVES;

    PROCEDURE U_CONSUMEAMOUNT (NDOSID               DOSSIER.DOSID%TYPE,
                               NAMOUNT              NUMBER,
                               NSTORE               NUMBER,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            IF NSTORE = 1
            THEN
                UPDATE AAGRVE
                   SET AVEMTREALISE =
                           NVL (AVEMTREALISE, 0) + NVL (NAMOUNT, 0)
                 WHERE     DOSID = NDOSID
                       AND ROLCODE = 'GENERIC'
                       AND RVACODE = 'LIMCARD'
                       AND AVEDTDEB <= SYSDATE
                       AND NVL (AVEDTFIN, '31/12/4000') >= SYSDATE;

                NRETURNCODE := 0;
            END IF;

            UPDATE AAGRVE
               SET AVEMTREALISE = NVL (AVEMTREALISE, 0) + NVL (NAMOUNT, 0)
             WHERE     DOSID = NDOSID
                   AND ROLCODE = 'EMPRUNT'
                   AND RVACODE = 'LIMCARD'
                   AND AVEDTDEB <= SYSDATE
                   AND NVL (AVEDTFIN, '31/12/4000') >= SYSDATE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ARA_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_CONSUMEAMOUNT;

    PROCEDURE U_EXPIRED (nTBAID IN TBAANOMALIE.TBAID%TYPE)
    AS
    BEGIN
        DECLARE
            CURSOR EXPIREDAUTH_cursor
            IS
                SELECT DOSAUTHORIZATION.DOSID,
                       DOSAUTHORIZATION.DAHDTEND,
                       DOSAUTHORIZATION.DAHORDER,
                       DOSAUTHORIZATION.DAHMT,
                       DOSAUTHORIZATION.DAHTYPE
                  FROM DOSAUTHORIZATION
                 WHERE DAHSTATUS = 'ACTIVE' AND DAHDTEND <= SYSDATE;

            TYPE TEXPIREDAUTH_cursor IS TABLE OF EXPIREDAUTH_cursor%ROWTYPE;

            EXPIREDAUTHCur   TEXPIREDAUTH_cursor;
            nGENERICACTID    AAGRVE.ACTID%TYPE;
            SSQLCODE         NUMBER;
            SSQLERRM         VARCHAR2 (50);
            nTBAORDRE        TBAANOMALIE.TBAORDRE%TYPE;
            nRETURNCODE      NUMBER;
        BEGIN
            nRETURNCODE := 0;
            nTBAORDRE := 0;

            OPEN EXPIREDAUTH_cursor;

            LOOP
                FETCH EXPIREDAUTH_cursor BULK COLLECT INTO EXPIREDAUTHCur;

                FOR indx IN 1 .. EXPIREDAUTHCur.COUNT
                LOOP
                    BEGIN
                        UPDATE DOSAUTHORIZATION
                           SET DOSAUTHORIZATION.DAHSTATUS = 'EXPIRED'
                         WHERE     EXPIREDAUTHCur (indx).DOSID =
                                   DOSAUTHORIZATION.DOSID
                               AND EXPIREDAUTHCur (indx).DAHORDER =
                                   DOSAUTHORIZATION.DAHORDER;

                        IF (EXPIREDAUTHCur (indx).DAHTYPE = 'OUTSIDE')
                        THEN
                            PAV4_UPDATEACTEUR.U_CONSUMEAMOUNT (
                                EXPIREDAUTHCur (indx).DOSID,
                                -1 * EXPIREDAUTHCur (indx).DAHMT,
                                0,
                                nRETURNCODE);
                        ELSIF (EXPIREDAUTHCur (indx).DAHTYPE = 'INSIDE')
                        THEN
                            PAV4_UPDATEACTEUR.U_CONSUMEAMOUNT (
                                EXPIREDAUTHCur (indx).DOSID,
                                -1 * EXPIREDAUTHCur (indx).DAHMT,
                                1,
                                nRETURNCODE);
                        ELSE
                            nTBAORDRE := nTBAORDRE + 1;

                            INSERT INTO TBAANOMALIE (TBAID, TBAORDRE)
                                 VALUES (nTBAID, nTBAORDRE);

                            INSERT INTO TBAANODATA (TBAID,
                                                    TBAORDRE,
                                                    TADORDRE,
                                                    TADTABLE,
                                                    TADDATASTRING)
                                     VALUES (
                                                nTBAID,
                                                nTBAORDRE,
                                                1,
                                                'TECH',
                                                SUBSTRB (
                                                       'dosid: '
                                                    || EXPIREDAUTHCur (indx).DOSID,
                                                    1,
                                                    49));

                            INSERT INTO TBAANODATA (TBAID,
                                                    TBAORDRE,
                                                    TADORDRE,
                                                    TADTABLE,
                                                    TADDATASTRING)
                                     VALUES (
                                                nTBAID,
                                                nTBAORDRE,
                                                2,
                                                'TECH',
                                                SUBSTRB (
                                                       'Unknown DAHTYPE: '
                                                    || EXPIREDAUTHCur (indx).DAHTYPE,
                                                    1,
                                                    49));
                        END IF;

                        IF (nRETURNCODE != 0)
                        THEN
                            nTBAORDRE := nTBAORDRE + 1;

                            INSERT INTO TBAANOMALIE (TBAID, TBAORDRE)
                                 VALUES (nTBAID, nTBAORDRE);

                            INSERT INTO TBAANODATA (TBAID,
                                                    TBAORDRE,
                                                    TADORDRE,
                                                    TADTABLE,
                                                    TADDATASTRING)
                                     VALUES (
                                                nTBAID,
                                                nTBAORDRE,
                                                1,
                                                'TECH',
                                                SUBSTRB (
                                                       'dosid: '
                                                    || EXPIREDAUTHCur (indx).DOSID,
                                                    1,
                                                    49));

                            INSERT INTO TBAANODATA (TBAID,
                                                    TBAORDRE,
                                                    TADORDRE,
                                                    TADTABLE,
                                                    TADDATASTRING)
                                     VALUES (
                                                nTBAID,
                                                nTBAORDRE,
                                                2,
                                                'TECH',
                                                SUBSTRB (
                                                       'U_CONSUMEAMOUNT returned: '
                                                    || nRETURNCODE,
                                                    1,
                                                    49));
                        END IF;
                    END;
                END LOOP;

                COMMIT;
                EXIT WHEN EXPIREDAUTH_cursor%NOTFOUND;
            END LOOP;

            CLOSE EXPIREDAUTH_cursor;
        EXCEPTION
            WHEN OTHERS
            THEN
                SSQLCODE := SQLCODE;
                SSQLERRM := SUBSTRB (SQLERRM, 1, 49);
                nTBAORDRE := nTBAORDRE + 1;

                INSERT INTO TBAANOMALIE (TBAID, TBAORDRE)
                     VALUES (nTBAID, nTBAORDRE);

                INSERT INTO TBAANODATA (TBAID,
                                        TBAORDRE,
                                        TADORDRE,
                                        TADTABLE,
                                        TADDATASTRING,
                                        TADDATANUMBER)
                     VALUES (nTBAID,
                             nTBAORDRE,
                             1,
                             'SQLERR',
                             SSQLERRM,
                             SSQLCODE);

                COMMIT;
        END;
    END U_EXPIRED;

    PROCEDURE U_AROGRPPREL (NACTID               ACTEUR.ACTID%TYPE,
                            SROLCODE             ACTROLE.ROLCODE%TYPE,
                            NAROGRPPREL          ACTROLE.AROGRPPREL%TYPE,
                            nRETURN       IN OUT INTEGER)
    AS
    BEGIN
        nRETURN := 0;

        UPDATE ACTROLE
           SET AROGRPPREL = NAROGRPPREL
         WHERE ACTID = nACTID AND ROLCODE = SROLCODE;
    END U_AROGRPPREL;

    --VWTRK-579_START
    PROCEDURE D_ACTAPAFINANCIER (
        NACTID               APAFINANCIALDATA.ACTID%TYPE,
        NAFDORDER            APAFINANCIALDATA.AFDORDER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM APAFINANCIALDATA
                  WHERE ACTID = NACTID AND AFDORDER = NAFDORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ACTAPAFINANCIER;

    PROCEDURE I_ACTAPAFINANCIER (
        NACTID                          APAFINANCIALDATA.ACTID%TYPE,
        NAFDORDER                IN OUT APAFINANCIALDATA.AFDORDER%TYPE,
        NAFDYEAR                        APAFINANCIALDATA.AFDYEAR%TYPE,
        SDEVCODE                        APAFINANCIALDATA.DEVCODE%TYPE,
        DAFDDTCREATION                  APAFINANCIALDATA.AFDDTCREATION%TYPE,
        SAFDEMPLOYERADDRESS1            APAFINANCIALDATA.AFDEMPLOYERADDRESS1%TYPE,
        SAFDEMPLOYERADDRESS2            APAFINANCIALDATA.AFDEMPLOYERADDRESS2%TYPE,
        SAFDEMPLOYERPOSTALCODE          APAFINANCIALDATA.AFDEMPLOYERPOSTALCODE%TYPE,
        SPAYCODEEMPLOYER                APAFINANCIALDATA.PAYCODEEMPLOYER%TYPE,
        SAFDEMPLOYERCITY                APAFINANCIALDATA.AFDEMPLOYERCITY%TYPE,
        SAFDEMPLOYERPHONE               APAFINANCIALDATA.AFDEMPLOYERPHONE%TYPE,
        NAFDMTWAGEINCOME                APAFINANCIALDATA.AFDMTWAGEINCOME%TYPE,
        NAFDMTREALESTATEINCOME          APAFINANCIALDATA.AFDMTREALESTATEINCOME%TYPE,
        NAFDMTALIMONYINCOME             APAFINANCIALDATA.AFDMTALIMONYINCOME%TYPE,
        NAFDMTOTHERINCOME               APAFINANCIALDATA.AFDMTOTHERINCOME%TYPE,
        NAFDMTRENTPAID                  APAFINANCIALDATA.AFDMTRENTPAID%TYPE,
        NAFDMTLOANPAID                  APAFINANCIALDATA.AFDMTLOANPAID%TYPE,
        NAFDMTALIMONYPAID               APAFINANCIALDATA.AFDMTALIMONYPAID%TYPE,
        NAFDMTOTHERPAID                 APAFINANCIALDATA.AFDMTOTHERPAID%TYPE,
        NAFDNBLOAN                      APAFINANCIALDATA.AFDNBLOAN%TYPE,
        NAFDMTPAIDMONTHTAX              APAFINANCIALDATA.AFDMTPAIDMONTHTAX%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO APAFINANCIALDATA (ACTID,
                                          AFDORDER,
                                          AFDYEAR,
                                          DEVCODE,
                                          AFDDTCREATION,
                                          AFDEMPLOYERADDRESS1,
                                          AFDEMPLOYERADDRESS2,
                                          AFDEMPLOYERPOSTALCODE,
                                          PAYCODEEMPLOYER,
                                          AFDEMPLOYERCITY,
                                          AFDEMPLOYERPHONE,
                                          AFDMTWAGEINCOME,
                                          AFDMTREALESTATEINCOME,
                                          AFDMTALIMONYINCOME,
                                          AFDMTOTHERINCOME,
                                          AFDMTRENTPAID,
                                          AFDMTLOANPAID,
                                          AFDMTALIMONYPAID,
                                          AFDMTOTHERPAID,
                                          AFDNBLOAN,
                                          AFDMTPAIDMONTHTAX)
                 VALUES (NACTID,
                         NAFDORDER,
                         NAFDYEAR,
                         SDEVCODE,
                         DAFDDTCREATION,
                         SAFDEMPLOYERADDRESS1,
                         SAFDEMPLOYERADDRESS2,
                         SAFDEMPLOYERPOSTALCODE,
                         SPAYCODEEMPLOYER,
                         SAFDEMPLOYERCITY,
                         SAFDEMPLOYERPHONE,
                         NAFDMTWAGEINCOME,
                         NAFDMTREALESTATEINCOME,
                         NAFDMTALIMONYINCOME,
                         NAFDMTOTHERINCOME,
                         NAFDMTRENTPAID,
                         NAFDMTLOANPAID,
                         NAFDMTALIMONYPAID,
                         NAFDMTOTHERPAID,
                         NAFDNBLOAN,
                         NAFDMTPAIDMONTHTAX);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ACTAPAFINANCIER;

    PROCEDURE U_ACTAPAFINANCIER (
        NACTID                          APAFINANCIALDATA.ACTID%TYPE,
        NAFDORDER                       APAFINANCIALDATA.AFDORDER%TYPE,
        NAFDYEAR                        APAFINANCIALDATA.AFDYEAR%TYPE,
        SDEVCODE                        APAFINANCIALDATA.DEVCODE%TYPE,
        DAFDDTCREATION                  APAFINANCIALDATA.AFDDTCREATION%TYPE,
        SAFDEMPLOYERADDRESS1            APAFINANCIALDATA.AFDEMPLOYERADDRESS1%TYPE,
        SAFDEMPLOYERADDRESS2            APAFINANCIALDATA.AFDEMPLOYERADDRESS2%TYPE,
        SAFDEMPLOYERPOSTALCODE          APAFINANCIALDATA.AFDEMPLOYERPOSTALCODE%TYPE,
        SPAYCODEEMPLOYER                APAFINANCIALDATA.PAYCODEEMPLOYER%TYPE,
        SAFDEMPLOYERCITY                APAFINANCIALDATA.AFDEMPLOYERCITY%TYPE,
        SAFDEMPLOYERPHONE               APAFINANCIALDATA.AFDEMPLOYERPHONE%TYPE,
        NAFDMTWAGEINCOME                APAFINANCIALDATA.AFDMTWAGEINCOME%TYPE,
        NAFDMTREALESTATEINCOME          APAFINANCIALDATA.AFDMTREALESTATEINCOME%TYPE,
        NAFDMTALIMONYINCOME             APAFINANCIALDATA.AFDMTALIMONYINCOME%TYPE,
        NAFDMTOTHERINCOME               APAFINANCIALDATA.AFDMTOTHERINCOME%TYPE,
        NAFDMTRENTPAID                  APAFINANCIALDATA.AFDMTRENTPAID%TYPE,
        NAFDMTLOANPAID                  APAFINANCIALDATA.AFDMTLOANPAID%TYPE,
        NAFDMTALIMONYPAID               APAFINANCIALDATA.AFDMTALIMONYPAID%TYPE,
        NAFDMTOTHERPAID                 APAFINANCIALDATA.AFDMTOTHERPAID%TYPE,
        NAFDNBLOAN                      APAFINANCIALDATA.AFDNBLOAN%TYPE,
        NAFDMTPAIDMONTHTAX              APAFINANCIALDATA.AFDMTPAIDMONTHTAX%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE APAFINANCIALDATA
               SET AFDYEAR = NAFDYEAR,
                   DEVCODE = SDEVCODE,
                   AFDDTCREATION = DAFDDTCREATION,
                   AFDEMPLOYERADDRESS1 = SAFDEMPLOYERADDRESS1,
                   AFDEMPLOYERADDRESS2 = SAFDEMPLOYERADDRESS2,
                   AFDEMPLOYERPOSTALCODE = SAFDEMPLOYERPOSTALCODE,
                   PAYCODEEMPLOYER = SPAYCODEEMPLOYER,
                   AFDEMPLOYERCITY = SAFDEMPLOYERCITY,
                   AFDEMPLOYERPHONE = SAFDEMPLOYERPHONE,
                   AFDMTWAGEINCOME = NAFDMTWAGEINCOME,
                   AFDMTREALESTATEINCOME = NAFDMTREALESTATEINCOME,
                   AFDMTALIMONYINCOME = NAFDMTALIMONYINCOME,
                   AFDMTOTHERINCOME = NAFDMTOTHERINCOME,
                   AFDMTRENTPAID = NAFDMTRENTPAID,
                   AFDMTLOANPAID = NAFDMTLOANPAID,
                   AFDMTALIMONYPAID = NAFDMTALIMONYPAID,
                   AFDMTOTHERPAID = NAFDMTOTHERPAID,
                   AFDNBLOAN = NAFDNBLOAN,
                   AFDMTPAIDMONTHTAX = NAFDMTPAIDMONTHTAX
             WHERE ACTID = NACTID AND AFDORDER = NAFDORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AAD_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ACTAPAFINANCIER;

    --VWTRK-579_END
    PROCEDURE I_AAGRVE (NACTID                  AAGRVE.ACTID%TYPE,
                        SROLCODE                AAGRVE.ROLCODE%TYPE,
                        NACTIDGESTION           AAGRVE.ACTIDGESTION%TYPE,
                        DTAAGDTVALID            AAGRVE.AAGDTVALID%TYPE,
                        SRVACODE                AAGRVE.RVACODE%TYPE,
                        NAVEORDRE               AAGRVE.AVEORDRE%TYPE,
                        DTAVEDTDEB              AAGRVE.AVEDTDEB%TYPE,
                        DTAVEDTFIN              AAGRVE.AVEDTFIN%TYPE,
                        NAVEMTREALISE           AAGRVE.AVEMTREALISE%TYPE,
                        NAVEMTATTRIBUT          AAGRVE.AVEMTATTRIBUT%TYPE,
                        SDEVCODE                AAGRVE.DEVCODE%TYPE,
                        SRVVCODE                AAGRVE.RVVCODE%TYPE,
                        NCREID                  AAGRVE.CREID%TYPE,
                        NDOSID                  AAGRVE.DOSID%TYPE,
                        LSAVEMEMO               AAGRVE.AVEMEMO%TYPE,
                        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NAVEORDRETMP   AAGRVE.AVEORDRE%TYPE;
        BEGIN
            SELECT NVL (MAX (AVEORDRE), 0) + 1
              INTO NAVEORDRETMP
              FROM AAGRVE
             WHERE     ACTID = NACTID
                   AND ACTIDGESTION = NACTIDGESTION
                   AND ROLCODE = SROLCODE
                   AND AAGDTVALID = DTAAGDTVALID
                   AND RVACODE = SRVACODE;

            INSERT INTO AAGRVE (ACTID,
                                ROLCODE,
                                ACTIDGESTION,
                                AAGDTVALID,
                                RVACODE,
                                AVEORDRE,
                                AVEDTDEB,
                                AVEDTFIN,
                                AVEMTREALISE,
                                AVEMTATTRIBUT,
                                DEVCODE,
                                RVVCODE,
                                CREID,
                                DOSID,
                                AVEMEMO)
                 VALUES (NACTID,
                         SROLCODE,
                         NACTIDGESTION,
                         DTAAGDTVALID,
                         SRVACODE,
                         NAVEORDRETMP,
                         DTAVEDTDEB,
                         DTAVEDTFIN,
                         NAVEMTREALISE,
                         NAVEMTATTRIBUT,
                         SDEVCODE,
                         SRVVCODE,
                         NCREID,
                         NDOSID,
                         LSAVEMEMO);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_AAGRVE;

    PROCEDURE P_EVACTUPDATECONTACT (
        NACTID                ACTEUR.ACTID%TYPE,
        STMOMODULE            TEVENEMENT.TMOMODULE%TYPE,
        STMFFONCTION          TEVENEMENT.TMFFONCTION%TYPE,
        STACCODE              TACTIVITE.TACCODE%TYPE,
        NACOORDRENEW          ACTCORRESPONDANT.ACOORDRE%TYPE,
        NACOORDREOLD          ACTCORRESPONDANT.ACOORDRE%TYPE,
        SUTICODE              ACTPHASE.UTICODE%TYPE,
        DTEFFET               DATE,
        NCREID         IN OUT NUMBER,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            LDOSID      DOSACTEUR.DOSID%TYPE;
            LDACORDRE   DOSACTEUR.DACORDRE%TYPE;
            LDAOORDER   DOSACTCORRESPONDANT.DAOORDER%TYPE;
            LDATORDER   DOSACTTELECOM.DATORDER%TYPE;
            LCOUNT      NUMBER := 0;

            -- CUSROR FOR DOSSIER
            CURSOR L_QUERY_DOSSIER
            IS
                SELECT DOS.DOSID, DAC.DACORDRE
                  FROM DOSSIER DOS, DOSACTEUR DAC
                 WHERE     DOS.DOSID = DAC.DOSID
                       AND DAC.ACTID = NACTID
                       AND DOS.DOSID IN
                               (SELECT CDADATANUMBER
                                  FROM credata
                                 WHERE     creid = NCREID
                                       AND CDACOLONNE = 'PROCESSEDDOSID');

            -- CURSOR OF DOSACTCORRESPONDANT
            CURSOR L_QUERY_DOSACT
            IS
                SELECT ACP.*
                  FROM ACTCORRESPONDANT ACP
                 WHERE     ACP.ACTID = NACTID
                       AND ACP.ACOORDRE IN (NACOORDRENEW, NACOORDREOLD)
                       AND ACP.ACOORDRE NOT IN
                               (SELECT ACOORDRE
                                  FROM DOSACTCORRESPONDANT DAC
                                 WHERE     DAC.ACTID = ACP.ACTID
                                       AND DAC.DOSID = LDOSID);

            -- CURSOR FOR DOSACTTELECOM
            CURSOR L_QUERY_DOSACTTEL
            IS
                SELECT LKATE.*
                  FROM ACTTELECOM ATE, LKACTTELCOR LKATE
                 WHERE     ATE.ACTID = LKATE.ACTID
                       AND ATE.ATEORDRE = LKATE.ATEORDRE
                       AND ATE.ACTID = NACTID
                       AND LKATE.ACOORDRE IN (NACOORDRENEW, NACOORDREOLD)
                       AND ATE.ATEORDRE NOT IN
                               (SELECT ATEORDRE
                                  FROM DOSACTTELECOM DAC
                                 WHERE     DAC.ACTID = ATE.ACTID
                                       AND DOSID = LDOSID);
        BEGIN
            IF (NRETURNCODE = 0)
            THEN
                IF NACOORDRENEW IS NOT NULL OR NACOORDREOLD IS NOT NULL
                THEN
                    BEGIN
                        FOR L_DOSSIER IN L_QUERY_DOSSIER
                        LOOP
                            LDOSID := L_DOSSIER.DOSID;
                            LDACORDRE := L_DOSSIER.DACORDRE;

                            FOR L_DOSACT IN L_QUERY_DOSACT
                            LOOP
                                SELECT (NVL (MAX (DAOORDER), 0)) + 1
                                  INTO LDAOORDER
                                  FROM DOSACTCORRESPONDANT
                                 WHERE     DOSID = LDOSID
                                       AND ACTID = L_DOSACT.ACTID
                                       AND DACORDRE = LDACORDRE;

                                INSERT INTO DOSACTCORRESPONDANT
                                     VALUES (LDOSID,
                                             LDACORDRE,
                                             LDAOORDER,
                                             L_DOSACT.ACTID,
                                             L_DOSACT.ACOORDRE,
                                             NULL);
                            END LOOP;

                            FOR L_DOSACTTEL IN L_QUERY_DOSACTTEL
                            LOOP
                                SELECT (NVL (MAX (DATORDER), 0)) + 1
                                  INTO LDATORDER
                                  FROM DOSACTTELECOM
                                 WHERE     DOSID = LDOSID
                                       AND ACTID = L_DOSACTTEL.ACTID
                                       AND DACORDRE = LDACORDRE;

                                INSERT INTO DOSACTTELECOM
                                     VALUES (L_DOSSIER.DOSID,
                                             L_DOSSIER.DACORDRE,
                                             LDATORDER,
                                             L_DOSACTTEL.ACTID,
                                             L_DOSACTTEL.ATEORDRE,
                                             NULL);
                            END LOOP;
                        END LOOP;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            NRETURNCODE := -1 * SQLCODE;
                    END;
                END IF;
            END IF;
        END;
    END P_EVACTUPDATECONTACT;
END PAV4_UPDATEACTEUR;
