create or replace PACKAGE BODY         PAV4_UPDATEPARGEN
AS
    ERR_PARENT_REC_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_CHILD_REC_FOUND_CONST        CONSTANT INTEGER := 2255;
    ERR_DUP_TBT_INDEX_CONST          CONSTANT INTEGER := 1890;
    -- Declaration des constantes de codes retours a renvoyer pour TCRO
    ERR_PARENT_TCR_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_TCR_INDEX_CONST          CONSTANT INTEGER := 1432;
    ERR_NULL_TCR_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_TCR_FOUND_CONST        CONSTANT INTEGER := 1858;
    -- Declaration des constantes de codes retours a renvoyer pour TCROLIGNE
    ERR_PARENT_TCL_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_TCL_INDEX_CONST          CONSTANT INTEGER := 1870;
    ERR_NULL_TCL_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_TCL_FOUND_CONST        CONSTANT INTEGER := 1860;
    -- Declaration des constantes de codes retours a renvoyer pour CRITERECRO
    ERR_PARENT_CCR_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_CCR_INDEX_CONST          CONSTANT INTEGER := 12903;
    ERR_NULL_CCR_KEY_CONST           CONSTANT INTEGER := 12905;
    ERR_CHILD_CCR_FOUND_CONST        CONSTANT INTEGER := 1045;
    ERR_CHILD_CIM_FOUND_CONST        CONSTANT INTEGER := 1045;
    -- Declaration des constantes de codes retours a renvoyer pour CCRCHAMP
    ERR_PARENT_CCH_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_CCH_INDEX_CONST          CONSTANT INTEGER := 3277;
    ERR_NULL_CCH_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_CCH_FOUND_CONST        CONSTANT INTEGER := 3276;
    ERR_CHILD_FOUND                           EXCEPTION;
    ERR_PARENT_NOT_FOUND                      EXCEPTION;
    ERR_I_NULL_MANDATORY_KEY                  EXCEPTION;
    ERR_U_NULL_MANDATORY_KEY                  EXCEPTION;
    ERR_PARENT_CCL_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_CCL_INDEX_CONST          CONSTANT INTEGER := 1046;
    ERR_NULL_CCL_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_PARENT_NOT_FOUND_APP         CONSTANT INTEGER := 1044;
    ERR_DUP_VAL_ON_INDEX_APP         CONSTANT INTEGER := 1046;
    ERR_NULL_MANDATORY_KEY_APP       CONSTANT INTEGER := 1055;
    -- Association des exceptions avec les erreurs ORACLE
    PRAGMA EXCEPTION_INIT (ERR_PARENT_NOT_FOUND, -2291);
    PRAGMA EXCEPTION_INIT (ERR_CHILD_FOUND, -2292);
    PRAGMA EXCEPTION_INIT (ERR_I_NULL_MANDATORY_KEY, -1400);
    PRAGMA EXCEPTION_INIT (ERR_U_NULL_MANDATORY_KEY, -1407);
    ERR_NO_ROWS_CONST                CONSTANT INTEGER := 1;
    ERR_CONTROL_PRESENT_CONST        CONSTANT INTEGER := 228;
    ERR_NULL_TBT_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_TBT_FOUND_CONST        CONSTANT INTEGER := 1883;
    ERR_PARENT_TFO_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_TFO_INDEX_CONST          CONSTANT INTEGER := 1046;
    ERR_NULL_TFO_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_TFO_FOUND_CONST        CONSTANT INTEGER := 1045;
    ERR_PARENT_ROL_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_ROL_INDEX_CONST          CONSTANT INTEGER := 1747;
    ERR_NULL_ROL_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_ROL_FOUND_CONST        CONSTANT INTEGER := 1409;
    ERR_PARENT_RDE_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_RDE_INDEX_CONST          CONSTANT INTEGER := 1748;
    ERR_NULL_RDE_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_RDE_FOUND_CONST        CONSTANT INTEGER := 1413;
    ERR_PARENT_REL_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_REL_INDEX_CONST          CONSTANT INTEGER := 8021;
    ERR_NULL_REL_KEY_CONST           CONSTANT INTEGER := 8022;
    ERR_CHILD_REL_FOUND_CONST        CONSTANT INTEGER := 8020;
    -- Declaration des constantes de codes retours a renvoyer pour LKTPGTACTEVPHA
    ERR_PARENT_LTP_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_LTP_INDEX_CONST          CONSTANT INTEGER := 1046;
    ERR_NULL_LTP_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_LTP_FOUND_CONST        CONSTANT INTEGER := 1045;
    ERR_BUD_CHILD_FOUND_CONST        CONSTANT INTEGER := 3419;
    ERR_DUP_TABLES_CONST             CONSTANT INTEGER := 1952;
    ERR_NULL_TABLES_CONST            CONSTANT INTEGER := 1908;
    ERR_CHILD_TABLES_CONST           CONSTANT INTEGER := 1937;
    ERR_CHILD_PAY_FOUND_CONST        CONSTANT INTEGER := 7308;
    -- PAYREGION
    ERR_CHILD_PRE_FOUND_CONST        CONSTANT INTEGER := 7309;
    -- Declaration des constantes de codes retours a renvoyer pour Impaye
    ERR_PARENT_IMP_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_IMP_INDEX_CONST          CONSTANT INTEGER := 2258;
    ERR_NULL_IMP_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_IMP_FOUND_CONST        CONSTANT INTEGER := 2259;
    -- Declaration for NAP
    ERR_PARENT_NAP_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_NAP_INDEX_CONST          CONSTANT INTEGER := 2257;
    ERR_NULL_NAP_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_NAP_FOUND_CONST        CONSTANT INTEGER := 2255;
    ERR_PARENT_RUL_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_RUL_INDEX_CONST          CONSTANT INTEGER := 2258;
    ERR_NULL_RUL_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_RUL_FOUND_CONST        CONSTANT INTEGER := 2259;
    ERR_USER_INVALIDATION_CONST      CONSTANT INTEGER := 12000;
    ERR_DUP_VAL_ON_INDEX_CCCP        CONSTANT INTEGER := 21104;
    ERR_DELETE_FISC_SHUT_CONST       CONSTANT INTEGER := 1738;
    -- LANGUE
    ERR_PARENT_LAN_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_LAN_INDEX_CONST          CONSTANT INTEGER := 7301;
    ERR_NULL_LAN_KEY_CONST           CONSTANT INTEGER := 7302;
    ERR_CHILD_LAN_FOUND_CONST        CONSTANT INTEGER := 7300;
    ERR_DUP_VAL_ON_RUL_CONST         CONSTANT INTEGER := 12624;
    ERR_CHILD_COV_FOUND_CONST        CONSTANT INTEGER := 11490;
    ERR_PARENT_COV_FOUND_CONST       CONSTANT INTEGER := 1044;
    ERR_DUP_COV_INDEX_CONST          CONSTANT INTEGER := 11491;
    ERR_NULL_COV_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_CHILD_COVFOR_FOUND_CONST     CONSTANT INTEGER := 11492;
    ERR_PARENT_COVFOR_FOUND_CONST    CONSTANT INTEGER := 1044;
    ERR_DUP_COVFOR_INDEX_CONST       CONSTANT INTEGER := 11493;
    ERR_NULL_COVFOR_KEY_CONST        CONSTANT INTEGER := 1055;
    ERR_TNB_PARENT_NOT_FOUND_CONST   CONSTANT INTEGER := 1044;
    ERR_TNB_CHILD_FOUND_CONST        CONSTANT INTEGER := 1045;
    ERR_TNB_NULL_KEY_CONST           CONSTANT INTEGER := 1055;
    ERR_NULL_MANDATORY_KEY_PFITYPE   CONSTANT INTEGER := 1055;
    ERR_DUP_VAL_ON_INDEX_PAPF        CONSTANT INTEGER := 1055;
    ERR_NULL_DEPARTMENT_CODE         CONSTANT INTEGER := 3431;
    ERR_PARENT_NOT_FOUND_PHAJALDPT   CONSTANT INTEGER := 90159;

    PROCEDURE U_LANGUE (SLANGCODE              LANGUE.LANCODE%TYPE,
                        SLANLIBELLE            LANLANGUE.LANLIBELLE%TYPE,
                        SLANGCODETRAD          LANLANGUE.LANCODETRAD%TYPE,
                        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANLANGUE
             WHERE LANCODE = SLANGCODE AND LANCODETRAD = SLANGCODETRAD;

            IF NCOUNT != 0
            THEN
                UPDATE LANLANGUE
                   SET LANLIBELLE = SLANLIBELLE
                 WHERE LANCODE = SLANGCODE AND LANCODETRAD = SLANGCODETRAD;
            --     ELSE
            --         I_LANGUE( sLangCode, sLanLibelle , sLangCodeTrad ,  nReturnCode ) ;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_LAN_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_LAN_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_LAN_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LANGUE;

    PROCEDURE D_CCHIMPUTATION (
        SCCRCODE             CCHIMPUTATION.CCRCODE%TYPE,
        NCIMORDRE            CCHIMPUTATION.CIMORDRE%TYPE,
        SUGECODE             UNITEGESTION.UGECODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM CCHIMPUTATION
                  WHERE     CCRCODE = SCCRCODE
                        AND CIMORDRE = NCIMORDRE
                        AND UGECODE = SUGECODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_CIM_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_CCHIMPUTATION;

    PROCEDURE I_FISCSHUT (STACCODE             TACREGIMEFISCAL.TACCODE%TYPE,
                          STRFCODE             TACREGIMEFISCAL.TRFCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TACREGIMEFISCAL (TACCODE, TRFCODE)
                 VALUES (STACCODE, STRFCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_FISCSHUT;

    PROCEDURE D_FISCSHUT (STACCODE             TACREGIMEFISCAL.TACCODE%TYPE,
                          STRFCODE             TACREGIMEFISCAL.TRFCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKAMOLOIDEFAUT
                  WHERE TACCODE = STACCODE AND TRFCODE = STRFCODE;

            DELETE FROM TFUNAP
                  WHERE TACCODE = STACCODE AND TRFCODE = STRFCODE;

            DELETE FROM TLFTRFUSAGE
                  WHERE TACCODE = STACCODE AND TRFCODE = STRFCODE;

            DELETE FROM TACREGIMEFISCAL
                  WHERE TACCODE = STACCODE AND TRFCODE = STRFCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_DELETE_FISC_SHUT_CONST;
        END;
    END D_FISCSHUT;

    PROCEDURE D_GROUPACCESS (
        STMFFONCTION          LKGROTMFDROIT.TMFFONCTION%TYPE,
        STMOMODULE            LKGROTMFDROIT.TMOMODULE%TYPE,
        SGROCODE              LKGROTMFDROIT.GROCODE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKGROTMFDROIT
                  WHERE     TMFFONCTION = STMFFONCTION
                        AND TMOMODULE = STMOMODULE
                        AND GROCODE = SGROCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_GROUPACCESS;

    PROCEDURE U_GROUPACCESS (
        SGFDMODIFIER           LKGROTMFDROIT.GFDMODIFIER%TYPE,
        SGFDSUPPRIMER          LKGROTMFDROIT.GFDSUPPRIMER%TYPE,
        STMFFONCTION           LKGROTMFDROIT.TMFFONCTION%TYPE,
        STMOMODULE             LKGROTMFDROIT.TMOMODULE%TYPE,
        SGROCODE               LKGROTMFDROIT.GROCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKGROTMFDROIT
               SET GFDMODIFIER = SGFDMODIFIER, GFDSUPPRIMER = SGFDSUPPRIMER
             WHERE     TMFFONCTION = STMFFONCTION
                   AND TMOMODULE = STMOMODULE
                   AND GROCODE = SGROCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_GROUPACCESS;

    PROCEDURE I_GROUPACCESS (
        SGFDMODIFIER           LKGROTMFDROIT.GFDMODIFIER%TYPE,
        SGFDSUPPRIMER          LKGROTMFDROIT.GFDSUPPRIMER%TYPE,
        STMFFONCTION           LKGROTMFDROIT.TMFFONCTION%TYPE,
        STMOMODULE             LKGROTMFDROIT.TMOMODULE%TYPE,
        SGROCODE               LKGROTMFDROIT.GROCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
     DECLARE
      NCOUNT NUMBER := 0;
        BEGIN
         SELECT COUNT( *) INTO NCOUNT FROM LKGROTMFDROIT WHERE
         GROCODE = SGROCODE AND TMOMODULE = STMOMODULE AND TMFFONCTION = STMFFONCTION;
    
         IF NCOUNT = 0 THEN
            INSERT INTO LKGROTMFDROIT (GROCODE,
                                       TMOMODULE,
                                       TMFFONCTION,
                                       GFDMODIFIER,
                                       GFDSUPPRIMER)
                 VALUES (SGROCODE,
                         STMOMODULE,
                         STMFFONCTION,
                         SGFDMODIFIER,
                         SGFDSUPPRIMER);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
            ELSE
         UPDATE
            LKGROTMFDROIT
        SET
            GFDMODIFIER  = SGFDMODIFIER,
         GFDSUPPRIMER = SGFDSUPPRIMER
        WHERE
            TMFFONCTION   = STMFFONCTION
            AND TMOMODULE = STMOMODULE
            AND GROCODE   = SGROCODE;
        
           END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_GROUPACCESS;

    PROCEDURE I_TPROFILGESTION (
        STPGDTDEB                          TPROFILGESTION.TPGDTDEB%TYPE,
        STPGDTFIN                          TPROFILGESTION.TPGDTFIN%TYPE,
        STPGMTMINI                         TPROFILGESTION.TPGMTMINI%TYPE,
        STPGMTMAXI                         TPROFILGESTION.TPGMTMAXI%TYPE,
        STPGDUREEANMINI                    TPROFILGESTION.TPGDUREEANMINI%TYPE,
        STPGDUREEMOISMINI                  TPROFILGESTION.TPGDUREEMOISMINI%TYPE,
        STPGDUREEJOURMINI                  TPROFILGESTION.TPGDUREEJOURMINI%TYPE,
        STPGDUREEANMAXI                    TPROFILGESTION.TPGDUREEANMAXI%TYPE,
        STPGDUREEMOISMAXI                  TPROFILGESTION.TPGDUREEMOISMAXI%TYPE,
        STPGDUREEJOURMAXI                  TPROFILGESTION.TPGDUREEJOURMAXI%TYPE,
        STPGCODE                           TPROFILGESTION.TPGCODE%TYPE,
        SLIBPROFIL                         LANTPROFILGESTION.TPGLIBELLE%TYPE,
        STACCODE                           TPROFILGESTION.TACCODE%TYPE,
        STPGFLAGCONSTRUCTION               TPROFILGESTION.TPGFLAGCONSTRUCTION%TYPE,
        STPGREVOLVINGTYPE                  TPROFILGESTION.TPGREVOLVINGTYPE%TYPE,
        STPGFLAGFACILITY                   TPROFILGESTION.TPGFLAGFACILITY%TYPE,
        STPGFLAGMOBILIER                   TPROFILGESTION.TPGFLAGMOBILIER%TYPE,
        STPGFLAGIMMOBILIER                 TPROFILGESTION.TPGFLAGIMMOBILIER%TYPE,
        SLANGUE                            LANGUE.LANCODE%TYPE,
        NTPGFLAGGUARANTEECONTRACT          TPROFILGESTION.TPGFLAGGUARANTEECONTRACT%TYPE,
        NTPGFLAGLOT                        TPROFILGESTION.TPGFLAGLOT%TYPE,
        STPGFACTORTYPE                     TPROFILGESTION.TPGFACTORTYPE%TYPE,
        STPGWHOLESALETYPE                  TPROFILGESTION.TPGWHOLESALETYPE%TYPE,
        STPGCODEPARENT                     TPROFILGESTION.TPGCODEPARENT%TYPE,
        NRETURNCODE                 IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TPROFILGESTION (TPGCODE,
                                        TACCODE,
                                        TPGDTDEB,
                                        TPGDTFIN,
                                        TPGMTMINI,
                                        TPGMTMAXI,
                                        TPGDUREEANMINI,
                                        TPGDUREEMOISMINI,
                                        TPGDUREEJOURMINI,
                                        TPGDUREEANMAXI,
                                        TPGDUREEMOISMAXI,
                                        TPGDUREEJOURMAXI,
                                        TPGFLAGCONSTRUCTION,
                                        TPGREVOLVINGTYPE,
                                        TPGFLAGFACILITY,
                                        TPGFLAGMOBILIER,
                                        TPGFLAGIMMOBILIER,
                                        TPGFLAGGUARANTEECONTRACT,
                                        TPGFLAGLOT,
                                        TPGFACTORTYPE,
                                        TPGWHOLESALETYPE,
                                        TPGCODEPARENT)
                 VALUES (STPGCODE,
                         STACCODE,
                         STPGDTDEB,
                         STPGDTFIN,
                         STPGMTMINI,
                         STPGMTMAXI,
                         STPGDUREEANMINI,
                         STPGDUREEMOISMINI,
                         STPGDUREEJOURMINI,
                         STPGDUREEANMAXI,
                         STPGDUREEMOISMAXI,
                         STPGDUREEJOURMAXI,
                         STPGFLAGCONSTRUCTION,
                         STPGREVOLVINGTYPE,
                         STPGFLAGFACILITY,
                         STPGFLAGMOBILIER,
                         STPGFLAGIMMOBILIER,
                         NTPGFLAGGUARANTEECONTRACT,
                         NTPGFLAGLOT,
                         STPGFACTORTYPE,
                         STPGWHOLESALETYPE,
                         STPGCODEPARENT);

            INSERT INTO LANTPROFILGESTION (TPGCODE, TPGLIBELLE, LANCODE)
                 VALUES (STPGCODE, SLIBPROFIL, SLANGUE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TPROFILGESTION;

    PROCEDURE U_TPROFILGESTION (
        STPGDTDEB                          TPROFILGESTION.TPGDTDEB%TYPE,
        STPGDTFIN                          TPROFILGESTION.TPGDTFIN%TYPE,
        STPGMTMINI                         TPROFILGESTION.TPGMTMINI%TYPE,
        STPGMTMAXI                         TPROFILGESTION.TPGMTMAXI%TYPE,
        STPGDUREEANMINI                    TPROFILGESTION.TPGDUREEANMINI%TYPE,
        STPGDUREEMOISMINI                  TPROFILGESTION.TPGDUREEMOISMINI%TYPE,
        STPGDUREEJOURMINI                  TPROFILGESTION.TPGDUREEJOURMINI%TYPE,
        STPGDUREEANMAXI                    TPROFILGESTION.TPGDUREEANMAXI%TYPE,
        STPGDUREEMOISMAXI                  TPROFILGESTION.TPGDUREEMOISMAXI%TYPE,
        STPGDUREEJOURMAXI                  TPROFILGESTION.TPGDUREEJOURMAXI%TYPE,
        STPGCODE                           TPROFILGESTION.TPGCODE%TYPE,
        SLIBPROFIL                         LANTPROFILGESTION.TPGLIBELLE%TYPE,
        STPGFLAGCONSTRUCTION               TPROFILGESTION.TPGFLAGCONSTRUCTION%TYPE,
        STPGREVOLVINGTYPE                  TPROFILGESTION.TPGREVOLVINGTYPE%TYPE,
        STPGFLAGFACILITY                   TPROFILGESTION.TPGFLAGFACILITY%TYPE,
        STPGFLAGMOBILIER                   TPROFILGESTION.TPGFLAGMOBILIER%TYPE,
        STPGFLAGIMMOBILIER                 TPROFILGESTION.TPGFLAGIMMOBILIER%TYPE,
        NTPGFLAGGUARANTEECONTRACT          TPROFILGESTION.TPGFLAGGUARANTEECONTRACT%TYPE,
        NTPGFLAGLOT                        TPROFILGESTION.TPGFLAGLOT%TYPE,
        STPGFACTORTYPE                     TPROFILGESTION.TPGFACTORTYPE%TYPE,
        STPGWHOLESALETYPE                  TPROFILGESTION.TPGWHOLESALETYPE%TYPE,
        STPGCODEPARENT                     TPROFILGESTION.TPGCODEPARENT%TYPE,
        NRETURNCODE                 IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TPROFILGESTION
               SET TPGDTDEB = STPGDTDEB,
                   TPGDTFIN = STPGDTFIN,
                   TPGMTMINI = STPGMTMINI,
                   TPGMTMAXI = STPGMTMAXI,
                   TPGDUREEANMINI = STPGDUREEANMINI,
                   TPGDUREEMOISMINI = STPGDUREEMOISMINI,
                   TPGDUREEJOURMINI = STPGDUREEJOURMINI,
                   TPGDUREEANMAXI = STPGDUREEANMAXI,
                   TPGDUREEMOISMAXI = STPGDUREEMOISMAXI,
                   TPGDUREEJOURMAXI = STPGDUREEJOURMAXI,
                   TPGFLAGCONSTRUCTION = STPGFLAGCONSTRUCTION,
                   TPGREVOLVINGTYPE = STPGREVOLVINGTYPE,
                   TPGFLAGFACILITY = STPGFLAGFACILITY,
                   TPGFLAGMOBILIER = STPGFLAGMOBILIER,
                   TPGFLAGIMMOBILIER = STPGFLAGIMMOBILIER,
                   TPGFLAGGUARANTEECONTRACT = NTPGFLAGGUARANTEECONTRACT,
                   TPGFLAGLOT = NTPGFLAGLOT,
                   TPGFACTORTYPE = STPGFACTORTYPE,
                   TPGWHOLESALETYPE = STPGWHOLESALETYPE,
                   TPGCODEPARENT = STPGCODEPARENT
             WHERE TPGCODE = STPGCODE;

            UPDATE LANTPROFILGESTION
               SET TPGLIBELLE = SLIBPROFIL
             WHERE TPGCODE = STPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TPROFILGESTION;

    -- user acess update
    PROCEDURE U_USERACCESS (
        SUFDMODIFICATION          LKUTITMFACGDROIT.UADMODIFIER%TYPE,
        SUFDSUPPRESSION           LKUTITMFACGDROIT.UADSUPPRIMER%TYPE,
        STMFFONCTION              TMOFONCTION.TMFFONCTION%TYPE,
        STMOMODULE                LKUTITMFACGDROIT.TMOMODULE%TYPE,
        SUTICODE                  LKUTITMFACGDROIT.UTICODE%TYPE,
        NWSTE                     LKUTITMFACGDROIT.ACTID%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKUTITMFACGDROIT
               SET UADMODIFIER = SUFDMODIFICATION,
                   UADSUPPRIMER = SUFDSUPPRESSION
             WHERE     TMFFONCTION = STMFFONCTION
                   AND TMOMODULE = STMOMODULE
                   AND UTICODE = SUTICODE
                   AND ACTID = NWSTE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_USERACCESS;

    PROCEDURE U_USERACCESS_STE (
        SUFDMODIFICATION          LKUTITMFDROIT.UFDMODIFIER%TYPE,
        SUFDSUPPRESSION           LKUTITMFDROIT.UFDSUPPRIMER%TYPE,
        STMFFONCTION              TMOFONCTION.TMFFONCTION%TYPE,
        STMOMODULE                LKUTITMFDROIT.TMOMODULE%TYPE,
        SUTICODE                  LKUTITMFDROIT.UTICODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKUTITMFDROIT
               SET UFDMODIFIER = SUFDMODIFICATION,
                   UFDSUPPRIMER = SUFDSUPPRESSION
             WHERE     TMFFONCTION = STMFFONCTION
                   AND TMOMODULE = STMOMODULE
                   AND UTICODE = SUTICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_USERACCESS_STE;

    -- user acess delete
    PROCEDURE D_USERACCESS (
        STMFFONCTION          LKUTITMFACGDROIT.TMFFONCTION%TYPE,
        STMOMODULE            LKUTITMFACGDROIT.TMOMODULE%TYPE,
        SWUSER                LKUTITMFACGDROIT.UTICODE%TYPE,
        NWSTE                 LKUTITMFACGDROIT.ACTID%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKUTITMFACGDROIT
                  WHERE     TMFFONCTION = STMFFONCTION
                        AND TMOMODULE = STMOMODULE
                        AND UTICODE = SWUSER
                        AND ACTID = NWSTE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_USERACCESS;

    PROCEDURE D_USERACCESS_STE (
        STMFFONCTION          LKUTITMFDROIT.TMFFONCTION%TYPE,
        STMOMODULE            LKUTITMFDROIT.TMOMODULE%TYPE,
        SWUSER                LKUTITMFDROIT.UTICODE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKUTITMFDROIT
                  WHERE     TMFFONCTION = STMFFONCTION
                        AND TMOMODULE = STMOMODULE
                        AND UTICODE = SWUSER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_USERACCESS_STE;

    -- user acess insert
    PROCEDURE I_USERACCESS (
        SUFDMODIFICATION          LKUTITMFACGDROIT.UADMODIFIER%TYPE,
        SUFDSUPPRESSION           LKUTITMFACGDROIT.UADSUPPRIMER%TYPE,
        STMFFONCTION              TMOFONCTION.TMFFONCTION%TYPE,
        STMOMODULE                LKUTITMFACGDROIT.TMOMODULE%TYPE,
        SUTICODE                  LKUTITMFACGDROIT.UTICODE%TYPE,
        NWSTE                     LKUTITMFACGDROIT.ACTID%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKUTITMFACGDROIT (UTICODE,
                                          TMOMODULE,
                                          TMFFONCTION,
                                          UADMODIFIER,
                                          UADSUPPRIMER,
                                          ACTID)
                 VALUES (SUTICODE,
                         STMOMODULE,
                         STMFFONCTION,
                         SUFDMODIFICATION,
                         SUFDSUPPRESSION,
                         NWSTE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_USERACCESS;

    PROCEDURE I_USERACCESS_STE (
        SUFDMODIFICATION          LKUTITMFDROIT.UFDMODIFIER%TYPE,
        SUFDSUPPRESSION           LKUTITMFDROIT.UFDSUPPRIMER%TYPE,
        STMFFONCTION              TMOFONCTION.TMFFONCTION%TYPE,
        STMOMODULE                LKUTITMFDROIT.TMOMODULE%TYPE,
        SUTICODE                  LKUTITMFDROIT.UTICODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKUTITMFDROIT (UTICODE,
                                       TMOMODULE,
                                       TMFFONCTION,
                                       UFDMODIFIER,
                                       UFDSUPPRIMER)
                 VALUES (SUTICODE,
                         STMOMODULE,
                         STMFFONCTION,
                         SUFDMODIFICATION,
                         SUFDSUPPRESSION);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_USERACCESS_STE;

    PROCEDURE I_TMODULE (
        STMOMODULE                TMODULE.TMOMODULE%TYPE,
        STMOEXE                   TMODULE.TMOEXE%TYPE,
        NTMOORDRE                 TMODULE.TMOORDRE%TYPE,
        NTMOFLAGEXTERNE           TMODULE.TMOFLAGEXTERNE%TYPE,
        NTMOFLAGDROITSTE          TMODULE.TMOFLAGDROITSTE%TYPE,
        NTMOFLAGORFI              TMODULE.TMOFLAGORFI%TYPE,
        STMOLIBELLE               LANTMODULE.TMOLIBELLE%TYPE,
        SLANGUE                   LANGUE.LANCODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TMODULE (TMOMODULE,
                                 TMOEXE,
                                 TMOORDRE,
                                 TMOFLAGEXTERNE,
                                 TMOFLAGDROITSTE,
                                 TMOFLAGORFI)
                 VALUES (STMOMODULE,
                         STMOEXE,
                         NTMOORDRE,
                         NTMOFLAGEXTERNE,
                         NTMOFLAGDROITSTE,
                         NTMOFLAGORFI);

            INSERT INTO LANTMODULE (LANCODE, TMOMODULE, TMOLIBELLE)
                 VALUES (SLANGUE, STMOMODULE, STMOLIBELLE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TMODULE;

    PROCEDURE U_TMODULE (
        STMOMODULE                TMODULE.TMOMODULE%TYPE,
        STMOEXE                   TMODULE.TMOEXE%TYPE,
        NTMOORDRE                 TMODULE.TMOORDRE%TYPE,
        NTMOFLAGEXTERNE           TMODULE.TMOFLAGEXTERNE%TYPE,
        NTMOFLAGDROITSTE          TMODULE.TMOFLAGDROITSTE%TYPE,
        NTMOFLAGORFI              TMODULE.TMOMODULE%TYPE,
        STMOLIBELLE               LANTMODULE.TMOLIBELLE%TYPE,
        SLANGUE                   LANGUE.LANCODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TMODULE
               SET TMOEXE = STMOEXE,
                   TMOORDRE = NTMOORDRE,
                   TMOFLAGEXTERNE = NTMOFLAGEXTERNE,
                   TMOFLAGDROITSTE = NTMOFLAGDROITSTE,
                   TMOFLAGORFI = NTMOFLAGORFI
             WHERE TMOMODULE = STMOMODULE;

            UPDATE LANTMODULE
               SET TMOLIBELLE = STMOLIBELLE
             WHERE TMOMODULE = STMOMODULE AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TMODULE;

    PROCEDURE D_TMODULE (STMOMODULE           TMODULE.TMOMODULE%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NINDEX   NUMBER;
        BEGIN
            DELETE FROM LKGROTMFDROIT
                  WHERE TMOMODULE = STMOMODULE;

            DELETE FROM LKUTITMFACGDROIT
                  WHERE TMOMODULE = STMOMODULE;

            DELETE FROM LKUTITMFDROIT
                  WHERE TMOMODULE = STMOMODULE;

            DELETE FROM LANTMOFONCTION
                  WHERE TMOMODULE = STMOMODULE;

            DELETE FROM TMOFONCTION
                  WHERE TMOMODULE = STMOMODULE;

            DELETE FROM LANTMODULE
                  WHERE TMOMODULE = STMOMODULE;

            DELETE FROM TMODULE
                  WHERE TMOMODULE = STMOMODULE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_TMODULE;

    PROCEDURE I_TMOFONCTION (
        STMOMODULE     IN     TMOFONCTION.TMOMODULE%TYPE,
        STMFFONCTION   IN     TMOFONCTION.TMFFONCTION%TYPE,
        NTMFFLAGEVT    IN     TMOFONCTION.TMFFLAGEVT%TYPE,
        STMFLIBELLE    IN     LANTMOFONCTION.TMFLIBELLE%TYPE,
        SLANGUE        IN     LANGUE.LANCODE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TMOFONCTION (TMOMODULE, TMFFONCTION, TMFFLAGEVT)
                 VALUES (STMOMODULE, STMFFONCTION, 1);

            INSERT INTO LANTMOFONCTION (TMOMODULE,
                                        TMFFONCTION,
                                        LANCODE,
                                        TMFLIBELLE)
                 VALUES (STMOMODULE,
                         STMFFONCTION,
                         SLANGUE,
                         STMFLIBELLE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TMOFONCTION;

    PROCEDURE U_TMOFONCTION (
        STMOMODULE     IN     TMOFONCTION.TMOMODULE%TYPE,
        STMFFONCTION   IN     TMOFONCTION.TMFFONCTION%TYPE,
        NTMFFLAGEVT    IN     TMOFONCTION.TMFFLAGEVT%TYPE,
        STMFLIBELLE    IN     LANTMOFONCTION.TMFLIBELLE%TYPE,
        SLANGUE        IN     LANGUE.LANCODE%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LANTMOFONCTION
               SET TMFLIBELLE = STMFLIBELLE
             WHERE     TMOMODULE = STMOMODULE
                   AND TMFFONCTION = STMFFONCTION
                   AND LANCODE = SLANGUE;

            UPDATE TMOFONCTION
               SET                          /*-- TMFFONCTION = sTmffonction,*/
                   TMFFLAGEVT = NTMFFLAGEVT
             WHERE TMOMODULE = STMOMODULE AND TMFFONCTION = STMFFONCTION;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TMOFONCTION;

    PROCEDURE D_TMOFONCTION (
        STMOMODULE     IN     TMOFONCTION.TMOMODULE%TYPE,
        STMFFONCTION   IN     TMOFONCTION.TMFFONCTION%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NINDEX   NUMBER;
        BEGIN
            DELETE FROM LKGROTMFDROIT
                  WHERE     TMOMODULE = STMOMODULE
                        AND TMFFONCTION = CONCAT ('U_', STMFFONCTION);

            DELETE FROM LKUTITMFDROIT
                  WHERE     TMOMODULE = STMOMODULE
                        AND TMFFONCTION = CONCAT ('U_', STMFFONCTION);

            DELETE FROM LKUTITMFACGDROIT
                  WHERE     TMOMODULE = STMOMODULE
                        AND TMFFONCTION = CONCAT ('U_', STMFFONCTION);

            DELETE FROM LANTMOFONCTION
                  WHERE     TMOMODULE = STMOMODULE
                        AND TMFFONCTION = CONCAT ('U_', STMFFONCTION);

            DELETE FROM TMOFONCTION
                  WHERE     TMOMODULE = STMOMODULE
                        AND TMFFONCTION = CONCAT ('U_', STMFFONCTION);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_TMOFONCTION;

    PROCEDURE I_ROLE (SROLCODE           IN     ROLE.ROLCODE%TYPE,
                      SROLCODEEXTERNE    IN     ROLE.ROLCODEEXTERNE%TYPE,
                      NROLFLAGORFI       IN     ROLE.ROLFLAGORFI%TYPE,
                      NROLFLAGATTRIBUT   IN     ROLE.ROLFLAGATTRIBUT%TYPE,
                      NROLFLAGENTRANT    IN     ROLE.ROLFLAGENTRANT%TYPE,
                      NROLFLAGSORTANT    IN     ROLE.ROLFLAGSORTANT%TYPE,
                      SROLLIBELLE        IN     LANROLE.ROLLIBELLE%TYPE,
                      SLANGUE            IN     LANGUE.LANCODE%TYPE,
                      NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ROLE (ROLCODE,
                              ROLCODEEXTERNE,
                              ROLFLAGORFI,
                              ROLFLAGATTRIBUT,
                              ROLFLAGENTRANT,
                              ROLFLAGSORTANT)
                 VALUES (SROLCODE,
                         SROLCODEEXTERNE,
                         NROLFLAGORFI,
                         NROLFLAGATTRIBUT,
                         NROLFLAGENTRANT,
                         NROLFLAGSORTANT);

            INSERT INTO LANROLE (LANCODE, ROLCODE, ROLLIBELLE)
                 VALUES (SLANGUE, SROLCODE, SROLLIBELLE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ROLE;

    PROCEDURE U_ROLE (SROLCODE           IN     ROLE.ROLCODE%TYPE,
                      SROLCODEEXTERNE    IN     ROLE.ROLCODEEXTERNE%TYPE,
                      NROLFLAGORFI       IN     ROLE.ROLFLAGORFI%TYPE,
                      NROLFLAGATTRIBUT   IN     ROLE.ROLFLAGATTRIBUT%TYPE,
                      NROLFLAGENTRANT    IN     ROLE.ROLFLAGENTRANT%TYPE,
                      NROLFLAGSORTANT    IN     ROLE.ROLFLAGSORTANT%TYPE,
                      SROLLIBELLE        IN     LANROLE.ROLLIBELLE%TYPE,
                      SLANGUE            IN     LANGUE.LANCODE%TYPE,
                      NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ROLE
               SET ROLFLAGORFI = NROLFLAGORFI,
                   ROLFLAGENTRANT = NROLFLAGENTRANT,
                   ROLFLAGSORTANT = NROLFLAGSORTANT,
                   ROLFLAGATTRIBUT = NROLFLAGATTRIBUT,
                   ROLCODEEXTERNE = SROLCODEEXTERNE
             WHERE ROLCODE = SROLCODE;

            UPDATE LANROLE
               SET ROLLIBELLE = SROLLIBELLE
             WHERE ROLCODE = SROLCODE AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ROLE;

    PROCEDURE D_ROLE (SROLCODE      IN     ROLE.ROLCODE%TYPE,
                      NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NINDEX   NUMBER;
        BEGIN
            DELETE FROM ROLDELEGATION
                  WHERE ROLCODE = SROLCODE;

            DELETE FROM LANROLVARVALEUR
                  WHERE ROLCODE = SROLCODE;

            DELETE FROM ROLVARVALEUR
                  WHERE ROLCODE = SROLCODE;

            DELETE FROM LANROLVARIABLE
                  WHERE ROLCODE = SROLCODE;

            DELETE FROM ROLVARIABLE
                  WHERE ROLCODE = SROLCODE;

            DELETE FROM LANROLE
                  WHERE ROLCODE = SROLCODE;

            DELETE FROM ROLE
                  WHERE ROLCODE = SROLCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ROLE;

    -- ROLDELEGATION --
    PROCEDURE I_ROLDELEGATION (
        SROLCODE        IN     ROLDELEGATION.ROLCODE%TYPE,
        SRDEDELEGCODE   IN     ROLDELEGATION.RDEDELEGCODE%TYPE,
        NRDEFLAGORFI    IN     ROLDELEGATION.RDEFLAGORFI%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ROLDELEGATION (ROLCODE, RDEDELEGCODE, RDEFLAGORFI)
                 VALUES (SROLCODE, SRDEDELEGCODE, NRDEFLAGORFI);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RDE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_RDE_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RDE_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RDE_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ROLDELEGATION;

    PROCEDURE U_ROLDELEGATION (
        SROLCODE        IN     ROLDELEGATION.ROLCODE%TYPE,
        SRDEDELEGCODE   IN     ROLDELEGATION.RDEDELEGCODE%TYPE,
        NRDEFLAGORFI    IN     ROLDELEGATION.RDEFLAGORFI%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ROLDELEGATION
               SET RDEFLAGORFI = NRDEFLAGORFI
             WHERE ROLCODE = SROLCODE AND RDEDELEGCODE = SRDEDELEGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RDE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_RDE_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RDE_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RDE_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_ROLDELEGATION;

    PROCEDURE D_ROLDELEGATION (
        SROLCODE        IN     ROLDELEGATION.ROLCODE%TYPE,
        SRDEDELEGCODE   IN     ROLDELEGATION.RDEDELEGCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM ROLDELEGATION
                  WHERE ROLCODE = SROLCODE AND RDEDELEGCODE = SRDEDELEGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_RDE_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ROLDELEGATION;

    PROCEDURE U_UNITEGESTION (SCOLUGENOM           UNITEGESTION.UGENOM%TYPE,
                              SCOLUGECODE          UNITEGESTION.UGECODE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        UPDATE UNITEGESTION
           SET UGENOM = SCOLUGENOM
         WHERE UGECODE = SCOLUGECODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_UNITEGESTION;

    PROCEDURE I_UNITEGESTION (SCOLUGENOM           UNITEGESTION.UGENOM%TYPE,
                              SCOLUGECODE          UNITEGESTION.UGECODE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO UNITEGESTION (UGECODE, UGENOM)
             VALUES (SCOLUGECODE, SCOLUGENOM);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_UNITEGESTION;

    PROCEDURE D_UNITEGESTION (SCOLUGECODE          UNITEGESTION.UGECODE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM UNITEGESTION
              WHERE UGECODE = SCOLUGECODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
    END D_UNITEGESTION;

    PROCEDURE I_TRELANCE (SRELCODE      IN     TRELANCE.RELCODE%TYPE,
                          SRELLIBELLE   IN     LANTRELANCE.RELLIBELLE%TYPE,
                          SLANCODE      IN     LANGUE.LANCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TRELANCE (RELCODE)
                 VALUES (SRELCODE);

            INSERT INTO LANTRELANCE (RELCODE, RELLIBELLE, LANCODE)
                 VALUES (SRELCODE, SRELLIBELLE, SLANCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TRELANCE;

    PROCEDURE U_TRELANCE (SRELCODE      IN     TRELANCE.RELCODE%TYPE,
                          SRELLIBELLE   IN     LANTRELANCE.RELLIBELLE%TYPE,
                          SLANCODE      IN     LANGUE.LANCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LANTRELANCE
               SET RELLIBELLE = SRELLIBELLE
             WHERE RELCODE = SRELCODE AND LANCODE = SLANCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TRELANCE;

    PROCEDURE D_TRELANCE (SRELCODE      IN     TRELANCE.RELCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LANTRELANCE
                  WHERE RELCODE = SRELCODE;

            DELETE FROM TRELANCE
                  WHERE RELCODE = SRELCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_REL_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_TRELANCE;

    PROCEDURE I_UTILISATEUR (
        SUTICODE                IN     UTILISATEUR.UTICODE%TYPE,
        SUTINOM                 IN     UTILISATEUR.UTINOM%TYPE,
        SUTIPRENOM              IN     UTILISATEUR.UTIPRENOM%TYPE,
        SUTITELECOM             IN     UTILISATEUR.UTITELECOM%TYPE,
        SUTIPWD                 IN     UTILISATEUR.UTIPWD%TYPE,
        SGROCODE                IN     UTILISATEUR.GROCODE%TYPE,
        SUGECODE                IN     UTILISATEUR.UGECODE%TYPE,
        SUTIWHODUNNIT           IN     UTILISATEUR.UTIWHODUNNIT%TYPE,
        DTUTIDTBIRTH            IN     UTILISATEUR.UTIDTBIRTH%TYPE,
        DTUTIDTBEG              IN     UTILISATEUR.UTIDTBEG%TYPE,
        DTUTIDTEND              IN     UTILISATEUR.UTIDTEND%TYPE,
        SUTILEVEL               IN     UTILISATEUR.UTILEVEL%TYPE,
        SUTIPOSITION            IN     UTILISATEUR.UTIPOSITION%TYPE,
        SUTISUBPOSITION         IN     UTILISATEUR.UTISUBPOSITION%TYPE,
        SUTIEXTERNALREFERENCE   IN     UTILISATEUR.UTIEXTERNALREFERENCE%TYPE,
        SUTIPWDSALT             IN     UTILISATEUR.UTIPWDSALT%TYPE,
        SUTILDAPREFERENCE       IN     UTILISATEUR.UTILDAPREFERENCE%TYPE,
        NUTIFLAGPASSWORD        IN     UTILISATEUR.UTIFLAGPASSWORD%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID        ROWID;
            nUtiFlagpwd   UTILISATEUR.UTIFLAGPASSWORD%TYPE;
            HASHALGOINTOPPARAM varchar(20);
            --   HASHALGOINTOPPARAM UTILISATEUR.UTIPWDHASHALGORITHM%TYPE;
        BEGIN
            SELECT DECODE (NVL (NUTIFLAGPASSWORD, 1), 1, 1, 0)
              INTO nUtiFlagpwd
              FROM DUAL;

            INSERT INTO UTILISATEUR (UTICODE,
                                     UTINOM,
                                     UTIPRENOM,
                                     UTITELECOM,
                                     GROCODE,
                                     UGECODE,
                                     UTIPWD,
                                     UTIFLAGPASSWORD,
                                     UTILOCKED,
                                     UTIDTUPD,
                                     UTIWHODUNNIT,
                                     UTIDTBEG,
                                     UTIDTEND,
                                     UTILEVEL,
                                     UTIPOSITION,
                                     UTISUBPOSITION,
                                     UTIEXTERNALREFERENCE,
                                     UTIPWDSALT,
                                     UTILDAPREFERENCE,
                                     UTIDTBIRTH)
                 VALUES (SUTICODE,
                         SUTINOM,
                         SUTIPRENOM,
                         SUTITELECOM,
                         SGROCODE,
                         SUGECODE,
                         SUTIPWD,
                         nUtiFlagpwd,
                         'N',
                         SYSDATE,
                         SUTIWHODUNNIT,
                         DTUTIDTBEG,
                         DTUTIDTEND,
                         SUTILEVEL,
                         SUTIPOSITION,
                         SUTISUBPOSITION,
                         SUTIEXTERNALREFERENCE,
                         SUTIPWDSALT,
                         SUTILDAPREFERENCE,
                         DTUTIDTBIRTH);

        -- Added below update statement for SOGELEASE-166. This will update the UTIPWDHASHALGORITHM column of UTILISATEUR table 
		-- with the one configured in TOPPARAM table.
		BEGIN
			SELECT TPATEXTE INTO HASHALGOINTOPPARAM from TOPPARAM 
			WHERE TOPTABLE = 'AUTHENTICATION' AND TPAPARAM = 'UTIPWDHASHALGO' 
			AND UGECODE = ( SELECT UGECODE FROM UTILISATEUR WHERE UTICODE = SUTICODE );
        EXCEPTION
            WHEN OTHERS THEN
                HASHALGOINTOPPARAM := 'SHA-256';
        END;
		
		IF HASHALGOINTOPPARAM is null OR HASHALGOINTOPPARAM = '' THEN
			HASHALGOINTOPPARAM := 'SHA-256';
		END IF;
		
       /* UPDATE
            UTILISATEUR
        SET
            UTIPWDHASHALGORITHM  = HASHALGOINTOPPARAM
        WHERE
            UTICODE = SUTICODE;*/
		
		NRETURNCODE     := 0;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM UTILISATEUR
                 WHERE UTICODE = SUTICODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('UTILISATEUR',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_UTILISATEUR;

    PROCEDURE U_UTILISATEUR (
        SUTICODE                IN     UTILISATEUR.UTICODE%TYPE,
        SUTINOM                 IN     UTILISATEUR.UTINOM%TYPE,
        SUTIPRENOM              IN     UTILISATEUR.UTIPRENOM%TYPE,
        SUTITELECOM             IN     UTILISATEUR.UTITELECOM%TYPE,
        SGROCODE                IN     UTILISATEUR.GROCODE%TYPE,
        SUGECODE                IN     UTILISATEUR.UGECODE%TYPE,
        SUTIWHODUNNIT           IN     UTILISATEUR.UTIWHODUNNIT%TYPE,
        SUTIFLAGINACTIF         IN     UTILISATEUR.UTIFLAGINACTIF%TYPE,
        SUTILOCKED              IN     UTILISATEUR.UTILOCKED%TYPE,
        DTUTIDTBIRTH            IN     UTILISATEUR.UTIDTBIRTH%TYPE,
        DTUTIDTBEG              IN     UTILISATEUR.UTIDTBEG%TYPE,
        DTUTIDTEND              IN     UTILISATEUR.UTIDTEND%TYPE,
        SUTILEVEL               IN     UTILISATEUR.UTILEVEL%TYPE,
        SUTIPOSITION            IN     UTILISATEUR.UTIPOSITION%TYPE,
        SUTISUBPOSITION         IN     UTILISATEUR.UTISUBPOSITION%TYPE,
        SUTIEXTERNALREFERENCE   IN     UTILISATEUR.UTIEXTERNALREFERENCE%TYPE,
        SUTILDAPREFERENCE       IN     UTILISATEUR.UTILDAPREFERENCE%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            UPDATE UTILISATEUR
               SET UTINOM = SUTINOM,
                   UTIPRENOM = SUTIPRENOM,
                   UTITELECOM = SUTITELECOM,
                   GROCODE = SGROCODE,
                   UTIFLAGINACTIF = SUTIFLAGINACTIF,
                   UGECODE = SUGECODE,
                   UTIWHODUNNIT = SUTIWHODUNNIT,
                   UTILOCKED = SUTILOCKED,
                   UTIDTBEG = DTUTIDTBEG,
                   UTIDTEND = DTUTIDTEND,
                   UTILEVEL = SUTILEVEL,
                   UTIPOSITION = SUTIPOSITION,
                   UTISUBPOSITION = SUTISUBPOSITION,
                   UTIEXTERNALREFERENCE = SUTIEXTERNALREFERENCE,
                   UTILDAPREFERENCE = SUTILDAPREFERENCE,
                   UTIDTBIRTH = DTUTIDTBIRTH
             WHERE UTICODE = SUTICODE;

            -- SPA - CFS 55623 PROD - Wrong recording for the user modification
            -- Need to set the Utiwhodunnit with the current User modifying the content.
            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM UTILISATEUR
                 WHERE UTICODE = SUTICODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('UTILISATEUR',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_UTILISATEUR;

    PROCEDURE I_COEFAMO (SPAYCODE             TAMOCOEFFISC.PAYCODE%TYPE,
                         STCFDTDEB            TAMOCOEFFISC.TCFDTDEB%TYPE,
                         SMINIMOIS            TAMOCOEFFISC.TCFMINIMOIS%TYPE,
                         SMAXIMOIS            TAMOCOEFFISC.TCFMAXIMOIS%TYPE,
                         SCOEFFDEGR           TAMOCOEFFISC.TCFCOEFFDEGR%TYPE,
                         SCOEFFPROG           TAMOCOEFFISC.TCFCOEFFPROG%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO TAMOCOEFFISC (PAYCODE,
                                  TCFDTDEB,
                                  TCFMINIMOIS,
                                  TCFMAXIMOIS,
                                  TCFCOEFFDEGR,
                                  TCFCOEFFPROG)
             VALUES (SPAYCODE,
                     STCFDTDEB,
                     SMINIMOIS,
                     SMAXIMOIS,
                     SCOEFFDEGR,
                     SCOEFFPROG);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_COEFAMO;

    PROCEDURE U_COEFAMO (SPAYCODE             TAMOCOEFFISC.PAYCODE%TYPE,
                         STCFDTDEB            TAMOCOEFFISC.TCFDTDEB%TYPE,
                         SMINIMOIS            TAMOCOEFFISC.TCFMINIMOIS%TYPE,
                         SMAXIMOIS            TAMOCOEFFISC.TCFMAXIMOIS%TYPE,
                         SCOEFFDEGR           TAMOCOEFFISC.TCFCOEFFDEGR%TYPE,
                         SCOEFFPROG           TAMOCOEFFISC.TCFCOEFFPROG%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TAMOCOEFFISC
               SET TCFCOEFFDEGR = SCOEFFDEGR, TCFCOEFFPROG = SCOEFFPROG
             WHERE     PAYCODE = SPAYCODE
                   AND TCFDTDEB = STCFDTDEB
                   AND TCFMINIMOIS = SMINIMOIS
                   AND TCFMAXIMOIS = SMAXIMOIS;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_COEFAMO;

    PROCEDURE D_COEFAMO (SPAYCODE             TAMOCOEFFISC.PAYCODE%TYPE,
                         STCFDTDEB            TAMOCOEFFISC.TCFDTDEB%TYPE,
                         SMINIMOIS            TAMOCOEFFISC.TCFMINIMOIS%TYPE,
                         SMAXIMOIS            TAMOCOEFFISC.TCFMAXIMOIS%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM TAMOCOEFFISC
              WHERE     PAYCODE = SPAYCODE
                    AND TCFDTDEB = STCFDTDEB
                    AND TCFMINIMOIS = SMINIMOIS
                    AND TCFMAXIMOIS = SMAXIMOIS;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
    END D_COEFAMO;

    PROCEDURE U_TAMOLOIFISC (
        STLFTYPE              IN     LANTTRPARAM.TTPCODE%TYPE,
        STLFFLAGDUREECONT     IN     TAMOLOIFISC.TLFFLAGDUREECONT%TYPE,
        STLFCODEOCCASION      IN     TAMOLOIFISC.TLFCODEOCCASION%TYPE,
        STLFCODE              IN     LANTAMOLOIFISC.TLFCODE%TYPE,
        STLFLIBELLE           IN     LANTAMOLOIFISC.TLFLIBELLE%TYPE,
        STLFSTARTCODE         IN     TAMOLOIFISC.TLFSTARTCODE%TYPE,
        STLFPCTBONUS          IN     TAMOLOIFISC.TLFPCTBONUS%TYPE,
        STLFMASTERCODE        IN     TAMOLOIFISC.TLFMASTERCODE%TYPE,
        STLFDATEEND           IN     TAMOLOIFISC.TLFDATEEND%TYPE,
        STLFFLAGFIXDURATION   IN     TAMOLOIFISC.TLFFLAGFIXDURATION%TYPE,
        STLFFLAGFIXMETHOD     IN     TAMOLOIFISC.TLFFLAGFIXMETHOD%TYPE,
        STLFFLAGRESPECTMAX    IN     TAMOLOIFISC.TLFFLAGRESPECTMAX%TYPE,
        STLFFLAGRESPECTMIN    IN     TAMOLOIFISC.TLFFLAGRESPECTMIN%TYPE,
        STLFFLAGUPDATEDUREE   IN     TAMOLOIFISC.TLFFLAGUPDATEDUREE%TYPE,
        STLFPRORATATYPE       IN     TAMOLOIFISC.TLFPRORATATYPE%TYPE,
        SLANCODE              IN     LANGUE.LANCODE%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TAMOLOIFISC
               SET TLFTYPE = STLFTYPE,
                   TLFFLAGDUREECONT = STLFFLAGDUREECONT,
                   TLFCODEOCCASION = STLFCODEOCCASION,
                   TLFSTARTCODE = STLFSTARTCODE,
                   TLFPCTBONUS = STLFPCTBONUS,
                   TLFMASTERCODE = STLFMASTERCODE,
                   TLFDATEEND = STLFDATEEND,
                   TLFFLAGFIXDURATION = STLFFLAGFIXDURATION,
                   TLFFLAGFIXMETHOD = STLFFLAGFIXMETHOD,
                   TLFFLAGRESPECTMAX = STLFFLAGRESPECTMAX,
                   TLFFLAGRESPECTMIN = STLFFLAGRESPECTMIN,
                   TLFFLAGUPDATEDUREE = STLFFLAGUPDATEDUREE,
                   TLFPRORATATYPE = STLFPRORATATYPE
             WHERE TLFCODE = STLFCODE;

            UPDATE LANTAMOLOIFISC
               SET TLFLIBELLE = STLFLIBELLE
             WHERE TLFCODE = STLFCODE AND LANCODE = SLANCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TAMOLOIFISC;

    PROCEDURE U_TOPPARAM (STOPTABLE            TOPPARAM.TOPTABLE%TYPE,
                          STPAPARAM            TOPPARAM.TPAPARAM%TYPE,
                          STPALOGIQUE          TOPPARAM.TPALOGIQUE%TYPE,
                          STPADATE             TOPPARAM.TPADATE%TYPE,
                          STPANOMBRE           TOPPARAM.TPANOMBRE%TYPE,
                          STPATEXTE            TOPPARAM.TPATEXTE%TYPE,
                          SUGECODE      IN     VARCHAR2,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TOPPARAM
               SET TPALOGIQUE = STPALOGIQUE,
                   TPADATE = STPADATE,
                   TPANOMBRE = STPANOMBRE,
                   TPATEXTE = STPATEXTE
             WHERE     TOPTABLE = STOPTABLE
                   AND TPAPARAM = STPAPARAM
                   AND UGECODE = SUGECODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TOPPARAM;

    PROCEDURE I_GROUPE (SGROCODE              GROUPE.GROCODE%TYPE,
                        SGROINTITULE          GROUPE.GROINTITULE%TYPE,
                        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
            NCKEID   CONFIGURATIONKEY.CKEID%TYPE := NULL;

            CURSOR C1
            IS
                SELECT GRECODE
                  FROM GRAPHICALELEMENT
                 WHERE GRETYPE IN ('menu', 'menuItem');
        BEGIN
            INSERT INTO GROUPE (GROCODE, GROINTITULE)
                 VALUES (SGROCODE, SGROINTITULE);

            SELECT COUNT (1)
              INTO NCOUNT
              FROM CONFIGURATIONKEY
             WHERE GROCODE = SGROCODE;

            IF NCOUNT = 0
            THEN
                PA_COM_CONFIGURATION.I_CONFIGURATIONKEY (NCKEID,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         SGROCODE,
                                                         NULL,
                                                         NULL,
                                                         'H',
                                                         NULL,
                                                         'CKE_GROUPE',
                                                         1024,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NRETURNCODE);

                FOR CDATA IN C1
                LOOP
                    INSERT INTO LKCKEGRE (CKEID,
                                          GRECODE,
                                          EGRFLAGDISABLED,
                                          EGRFLAGHIDDEN)
                         VALUES (NCKEID,
                                 CDATA.GRECODE,
                                 1,
                                 1);
                END LOOP;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_GROUPE;

    PROCEDURE U_GROUPE (SGROCODE              GROUPE.GROCODE%TYPE,
                        SGROINTITULE          GROUPE.GROINTITULE%TYPE,
                        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE GROUPE
               SET GROINTITULE = SGROINTITULE
             WHERE GROCODE = SGROCODE;

            NRETURNCODE := 0;
        END;
    END U_GROUPE;

    PROCEDURE D_GROUPE (SGROCODE             GROUPE.GROCODE%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKGROTACAGE
                  WHERE GROCODE = SGROCODE;

            DELETE FROM LKGROTMFDROIT
                  WHERE GROCODE = SGROCODE;

            DELETE FROM GROUPE
                  WHERE GROCODE = SGROCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_GROUPE;

    PROCEDURE I_LKTPGAGE (
        NACTID                  LKTPGAGE.ACTID%TYPE,
        STPGCODE                LKTPGAGE.TPGCODE%TYPE,
        NTAGFLAGDEFAUT          LKTPGAGE.TAGFLAGDEFAUT%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTPGAGE (ACTID, TPGCODE, TAGFLAGDEFAUT)
                 VALUES (NACTID, STPGCODE, NTAGFLAGDEFAUT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTPGAGE;

    PROCEDURE U_LKTPGAGE (
        NACTID                  LKTPGAGE.ACTID%TYPE,
        STPGCODE                LKTPGAGE.TPGCODE%TYPE,
        NTAGFLAGDEFAUT          LKTPGAGE.TAGFLAGDEFAUT%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKTPGAGE
               SET TAGFLAGDEFAUT = NTAGFLAGDEFAUT
             WHERE ACTID = NACTID AND TPGCODE = STPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKTPGAGE;

    PROCEDURE D_LKTPGAGE (NACTID               LKTPGAGE.ACTID%TYPE,
                          STPGCODE             LKTPGAGE.TPGCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTPGAGE
                  WHERE ACTID = NACTID AND TPGCODE = STPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_LKTPGAGE;

    -- For Internal tables Screen
    PROCEDURE U_PARAMORFI_TABLELCONTENT (
        STTPLIBELLE          LANTTRPARAM.TTPLIBELLE%TYPE,
        STTRNOM       IN     LANTTRPARAM.TTRNOM%TYPE,
        STTPCODE      IN     LANTTRPARAM.TTPCODE%TYPE,
        SLANCODE             LANGUE.LANCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LANTTRPARAM
           SET TTPLIBELLE = STTPLIBELLE
         WHERE TTRNOM = STTRNOM AND TTPCODE = STTPCODE AND LANCODE = SLANCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_PARAMORFI_TABLELCONTENT;

    -- For External tables Screen
    PROCEDURE U_PARAMUSER_TABLELCONTENT (
        STUPLIBELLE          LANTUSPARAM.TUPLIBELLE%TYPE,
        STUPCODE             LANTUSPARAM.TUPCODE%TYPE,
        STUSNOM       IN     TUSPARAM.TUSNOM%TYPE,
        SLANCODE             LANGUE.LANCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LANTUSPARAM
           SET TUPLIBELLE = STUPLIBELLE
         WHERE TUPCODE = STUPCODE AND TUSNOM = STUSNOM AND LANCODE = SLANCODE;

        NRETURNCODE := 0;
    END U_PARAMUSER_TABLELCONTENT;

    PROCEDURE D_PARAMUSER_TABLELCONTENT (
        STUPCODE             LANTUSPARAM.TUPCODE%TYPE,
        STUSNOM       IN     TUSPARAM.TUSNOM%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LANTUSPARAM
              WHERE TUPCODE = STUPCODE AND TUSNOM = STUSNOM;

        DELETE FROM LKTUPTACTPG
              WHERE TUPCODE = STUPCODE AND TUSNOM = STUSNOM;

        DELETE FROM TUSPARAM
              WHERE TUPCODE = STUPCODE AND TUSNOM = STUSNOM;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_CHILD_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_PARAMUSER_TABLELCONTENT;

    PROCEDURE I_PARAMUSER_TABLELCONTENT (
        STUPCODE             LANTUSPARAM.TUPCODE%TYPE,
        STUPLIBELLE          LANTUSPARAM.TUPLIBELLE%TYPE,
        SLANCODE             LANGUE.LANCODE%TYPE,
        STUSNOM       IN     TUSPARAM.TUSNOM%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO TUSPARAM (TUPCODE, TUSNOM)
             VALUES (STUPCODE, STUSNOM);

        INSERT INTO LANTUSPARAM (TUPCODE,
                                 TUPLIBELLE,
                                 LANCODE,
                                 TUSNOM)
             VALUES (STUPCODE,
                     STUPLIBELLE,
                     SLANCODE,
                     STUSNOM);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TABLES_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_PARAMUSER_TABLELCONTENT;

    -- For Prefernce on External Tables Screen
    PROCEDURE U_PREUSERPARAMORFI_ANALYTICAL (
        NTUGORDRE               LKTUPTACTPG.TUGORDRE%TYPE,
        NTUGFLAGDEFAUT   IN     LKTUPTACTPG.TUGFLAGDEFAUT%TYPE,
        STUPCODE         IN     LKTUPTACTPG.TUPCODE%TYPE,
        STUSNOM          IN     LKTUPTACTPG.TUSNOM%TYPE,
        STACCODE         IN     LKTUPTACTPG.TACCODE%TYPE,
        STPGCODE         IN     LKTUPTACTPG.TPGCODE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LKTUPTACTPG
           SET TUGORDRE = NTUGORDRE, TUGFLAGDEFAUT = NTUGFLAGDEFAUT
         WHERE     TUPCODE = STUPCODE
               AND TUSNOM = STUSNOM
               AND TACCODE = STACCODE
               AND TPGCODE = STPGCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_PREUSERPARAMORFI_ANALYTICAL;

    PROCEDURE D_PREUSERPARAMORFI_ANALYTICAL (
        STPGCODE      IN     LKTUPTACTPG.TPGCODE%TYPE,
        STACCODE      IN     LKTUPTACTPG.TACCODE%TYPE,
        STUPCODE      IN     LKTUPTACTPG.TUPCODE%TYPE,
        STUSNOM       IN     LKTUPTACTPG.TUSNOM%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LKTUPTACTPG
              WHERE     TPGCODE = STPGCODE
                    AND TACCODE = STACCODE
                    AND TUPCODE = STUPCODE
                    AND TUSNOM = STUSNOM;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_PREUSERPARAMORFI_ANALYTICAL;

    PROCEDURE I_PREUSERPARAMORFI_ANALYTICAL (
        STPGCODE         IN     LKTUPTACTPG.TPGCODE%TYPE,
        STACCODE         IN     LKTUPTACTPG.TACCODE%TYPE,
        STUPCODE         IN     LKTUPTACTPG.TUPCODE%TYPE,
        STUSNOM          IN     LKTUPTACTPG.TUSNOM%TYPE,
        NTUGORDRE               LKTUPTACTPG.TUGORDRE%TYPE,
        NTUGFLAGDEFAUT   IN     LKTUPTACTPG.TUGFLAGDEFAUT%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO LKTUPTACTPG (TPGCODE,
                                 TACCODE,
                                 TUPCODE,
                                 TUSNOM,
                                 TUGORDRE,
                                 TUGFLAGDEFAUT)
             VALUES (STPGCODE,
                     STACCODE,
                     STUPCODE,
                     STUSNOM,
                     NTUGORDRE,
                     NTUGFLAGDEFAUT);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TABLES_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_PREUSERPARAMORFI_ANALYTICAL;

    -- For Prefernce on Internal Tables Screen
    PROCEDURE U_PREPARAMORFI_VALUES (
        NTTGORDRE               LKTTPTACTPG.TTGORDRE%TYPE,
        NTTGFLAGDEFAUT   IN     LKTTPTACTPG.TTGFLAGDEFAUT%TYPE,
        STTPCODE         IN     LKTTPTACTPG.TTPCODE%TYPE,
        STTRNOM          IN     LKTTPTACTPG.TTRNOM%TYPE,
        STACCODE         IN     LKTTPTACTPG.TACCODE%TYPE,
        STPGCODE         IN     LKTTPTACTPG.TPGCODE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LKTTPTACTPG
           SET TTGORDRE = NTTGORDRE, TTGFLAGDEFAUT = NTTGFLAGDEFAUT
         WHERE     TTPCODE = STTPCODE
               AND TTRNOM = STTRNOM
               AND TACCODE = STACCODE
               AND TPGCODE = STPGCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_PREPARAMORFI_VALUES;

    PROCEDURE I_PREPARAMORFI_VALUES (
        STPGCODE         IN     LKTTPTACTPG.TPGCODE%TYPE,
        STACCODE         IN     LKTTPTACTPG.TACCODE%TYPE,
        STTPCODE         IN     LKTTPTACTPG.TTPCODE%TYPE,
        STTRNOM          IN     LKTTPTACTPG.TTRNOM%TYPE,
        NTTGORDRE               LKTTPTACTPG.TTGORDRE%TYPE,
        NTTGFLAGDEFAUT   IN     LKTTPTACTPG.TTGFLAGDEFAUT%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO LKTTPTACTPG (TPGCODE,
                                 TACCODE,
                                 TTPCODE,
                                 TTRNOM,
                                 TTGORDRE,
                                 TTGFLAGDEFAUT)
             VALUES (STPGCODE,
                     STACCODE,
                     STTPCODE,
                     STTRNOM,
                     NTTGORDRE,
                     NTTGFLAGDEFAUT);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TABLES_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_PREPARAMORFI_VALUES;

    PROCEDURE D_PREPARAMORFI_VALUES (
        STPGCODE      IN     LKTTPTACTPG.TPGCODE%TYPE,
        STACCODE      IN     LKTTPTACTPG.TACCODE%TYPE,
        STTPCODE      IN     LKTTPTACTPG.TTPCODE%TYPE,
        STTRNOM       IN     LKTTPTACTPG.TTRNOM%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LKTTPTACTPG
              WHERE     TPGCODE = STPGCODE
                    AND TACCODE = STACCODE
                    AND TTPCODE = STTPCODE
                    AND TTRNOM = STTRNOM;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_PREPARAMORFI_VALUES;

    PROCEDURE I_UTICOORDONNEE (
        SUTICODE        IN     UTICOORDONNEE.UTICODE%TYPE,
        SUCOORDRE       IN     UTICOORDONNEE.UCOORDRE%TYPE,
        SUCOTYPE        IN     UTICOORDONNEE.UCOTYPE%TYPE,
        SUCOREFERENCE   IN     UTICOORDONNEE.UCOREFERENCE%TYPE,
        SUCODOMAIN      IN     UTICOORDONNEE.UCODOMAIN%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO UTICOORDONNEE (UTICODE,
                                   UCOORDRE,
                                   UCOTYPE,
                                   UCOREFERENCE,
                                   UCODOMAIN)
             VALUES (SUTICODE,
                     SUCOORDRE,
                     SUCOTYPE,
                     SUCOREFERENCE,
                     SUCODOMAIN);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_UTICOORDONNEE;

    PROCEDURE D_UTILISATEUR (SUTICODE      IN     UTILISATEUR.UTICODE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            SELECT ROWID
              INTO SROWID
              FROM UTILISATEUR
             WHERE UTICODE = SUTICODE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('UTILISATEUR',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM UTILISATEUR
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTILISATEUR;

    PROCEDURE D_UTICOORDONNEE (
        SUTICODE      IN     UTICOORDONNEE.UTICODE%TYPE,
        SUCOORDRE     IN     UTICOORDONNEE.UCOORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM UTICOORDONNEE
              WHERE UTICODE = SUTICODE AND UCOORDRE = SUCOORDRE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
    END D_UTICOORDONNEE;

    PROCEDURE U_UTICOORDONNEE (
        SUTICODE        IN     UTICOORDONNEE.UTICODE%TYPE,
        SUCOTYPE        IN     UTICOORDONNEE.UCOTYPE%TYPE,
        SUCOREFERENCE   IN     UTICOORDONNEE.UCOREFERENCE%TYPE,
        SUCOORDRE       IN     UTICOORDONNEE.UCOORDRE%TYPE,
        SUCODOMAIN      IN     UTICOORDONNEE.UCODOMAIN%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE UTICOORDONNEE
               SET UCOTYPE = SUCOTYPE,
                   UCOREFERENCE = SUCOREFERENCE,
                   UCODOMAIN = SUCODOMAIN
             WHERE UTICODE = SUTICODE AND UCOORDRE = SUCOORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_UTICOORDONNEE;

    PROCEDURE I_TPARAGRAPHECTL (
        STPCCODE        IN     TPARAGRAPHECTL.TPCCODE%TYPE,
        STPCFLAGOBLIG   IN     TPARAGRAPHECTL.TPCFLAGOBLIG%TYPE,
        SCODEDEST       IN     TPARAGRAPHECTL.TPCDEST%TYPE,
        SLANGUE         IN     LANTPARAGRAPHECTL.LANCODE%TYPE,
        STPCLIBELLE     IN     LANTPARAGRAPHECTL.TPCLIBELLE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TPARAGRAPHECTL (TPCCODE, TPCFLAGOBLIG, TPCDEST)
                 VALUES (CONCAT ('U_', STPCCODE), STPCFLAGOBLIG, SCODEDEST);

            INSERT INTO LANTPARAGRAPHECTL (TPCCODE,
                                           LANCODE,
                                           TPCLIBELLE,
                                           TPCDEST)
                 VALUES (CONCAT ('U_', STPCCODE),
                         SLANGUE,
                         STPCLIBELLE,
                         SCODEDEST);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RUL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_RUL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RUL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RUL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TPARAGRAPHECTL;

    PROCEDURE U_TPARAGRAPHECTL (
        COLPARAFLAG      IN     TPARAGRAPHECTL.TPCFLAGOBLIG%TYPE,
        STPCCODE         IN     TPARAGRAPHECTL.TPCCODE%TYPE,
        COLPARALIBELLE   IN     LANTPARAGRAPHECTL.TPCLIBELLE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            UPDATE TPARAGRAPHECTL
               SET TPCFLAGOBLIG = COLPARAFLAG
             WHERE TPCCODE = CONCAT ('U_', STPCCODE);

            UPDATE LANTPARAGRAPHECTL
               SET TPCLIBELLE = COLPARALIBELLE
             WHERE TPCCODE = CONCAT ('U_', STPCCODE) AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TPARAGRAPHECTL;

    PROCEDURE I_TPCTACCONTROLE (
        STTCCODE        IN     TPCTACCONTROLE.TTCCODE%TYPE,
        STPCCODE        IN     TPCTACCONTROLE.TPCCODE%TYPE,
        SACTIVITE       IN     TPCTACCONTROLE.TACCODE%TYPE,
        NMSGID          IN     TPCTACCONTROLE.MSGID%TYPE,
        SCODEDEST       IN     TPCTACCONTROLE.TPCDEST%TYPE,
        COLCTLLIBELLE   IN     LANTPCTACCONTROLE.TTCLIBELLE%TYPE,
        --SGUGECODE IN UTILISATEUR.UGECODE.%TYPE,
        COLMEMO         IN     LANTPCTACCONTROLE.TTCMEMO%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        DECLARE
            SUGECODE   UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
        BEGIN
            INSERT INTO TPCTACCONTROLE (TTCCODE,
                                        TPCCODE,
                                        TACCODE,
                                        MSGID,
                                        TPCDEST,
                                        UGECODE)
                 VALUES (CONCAT ('U_', STTCCODE),
                         CONCAT ('U_', STPCCODE),
                         SACTIVITE,
                         3162,
                         SCODEDEST,
                         SUGECODE);

            INSERT INTO LANTPCTACCONTROLE (TTCCODE,
                                           TPCCODE,
                                           TACCODE,
                                           LANCODE,
                                           TTCLIBELLE,
                                           TTCMEMO,
                                           TPCDEST)
                 VALUES (CONCAT ('U_', STTCCODE),
                         CONCAT ('U_', STPCCODE),
                         SACTIVITE,
                         SLANGUE,
                         COLCTLLIBELLE,
                         COLMEMO,
                         SCODEDEST);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TPCTACCONTROLE;

    PROCEDURE U_TPCTACCONTROLE (
        STTCCODE        IN     TPCTACCONTROLE.TTCCODE%TYPE,
        STPCCODE        IN     TPCTACCONTROLE.TPCCODE%TYPE,
        SACTIVITE       IN     TPCTACCONTROLE.TACCODE%TYPE,
        NMSGID          IN     TPCTACCONTROLE.MSGID%TYPE,
        SCODEDEST       IN     TPCTACCONTROLE.TPCDEST%TYPE,
        COLCTLLIBELLE   IN     LANTPCTACCONTROLE.TTCLIBELLE%TYPE,
        COLMEMO         IN     LANTPCTACCONTROLE.TTCMEMO%TYPE,
        STTCLIBELLE     IN     LANTPCTACCONTROLE.TTCLIBELLE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            UPDATE TPCTACCONTROLE
               SET MSGID = 3162
             WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                   AND TTCCODE = CONCAT ('U_', STTCCODE)
                   AND TACCODE = SACTIVITE;

            UPDATE LANTPCTACCONTROLE
               SET TTCLIBELLE = STTCLIBELLE, TTCMEMO = COLMEMO
             WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                   AND TTCCODE = CONCAT ('U_', STTCCODE)
                   AND TACCODE = SACTIVITE
                   AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TPCTACCONTROLE;

    PROCEDURE D_TPCTACCONTROLE (
        STTCCODE        IN     TPCTACCONTROLE.TTCCODE%TYPE,
        STPCCODE        IN     TPCTACCONTROLE.TPCCODE%TYPE,
        SACTIVITE       IN     TPCTACCONTROLE.TACCODE%TYPE,
        NMSGID          IN     TPCTACCONTROLE.MSGID%TYPE,
        SWCODEDEST      IN     TPCTACCONTROLE.TPCDEST%TYPE,
        COLCTLLIBELLE   IN     LANTPCTACCONTROLE.TTCLIBELLE%TYPE,
        COLMEMO         IN     LANTPCTACCONTROLE.TTCMEMO%TYPE,
        STCLIBELLE      IN     LANTPCTACCONTROLE.TTCLIBELLE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LKPHATTC
              WHERE     TTCCODE = CONCAT ('U_', STTCCODE)
                    AND TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM LKTTCTEV
              WHERE     TTCCODE = CONCAT ('U_', STTCCODE)
                    AND TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM LANTPCTACCONTROLE
              WHERE     TTCCODE = CONCAT ('U_', STTCCODE)
                    AND TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TACCODE = SACTIVITE
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM TPCTACCONTROLE
              WHERE     TTCCODE = CONCAT ('U_', STTCCODE)
                    AND TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TACCODE = SACTIVITE
                    AND TPCDEST = SWCODEDEST;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
    END D_TPCTACCONTROLE;

    PROCEDURE D_TPARAGRAPHECTL (
        SWCODEDEST    IN     TPARAGRAPHECTL.TPCDEST%TYPE,
        STPCCODE      IN     TPARAGRAPHECTL.TPCCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        --AkshiK SELECT RCTMSGDATA, RCTMSG
        DELETE FROM RCTMSGDATA
              WHERE RCTEVTID IN
                        (SELECT RCTEVTID
                           FROM RCTMSG
                          WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                                AND TPCDEST = SWCODEDEST);

        DELETE FROM RCTMSG
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM LKPHATTC
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM LKTTCTEV
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM LANTPCTACCONTROLE
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM TPCTACCONTROLE
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM LANTPARAGRAPHECTL
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        DELETE FROM TPARAGRAPHECTL
              WHERE     TPCCODE = CONCAT ('U_', STPCCODE)
                    AND TPCDEST = SWCODEDEST;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
    END D_TPARAGRAPHECTL;

    PROCEDURE D_UTILISATEUR (
        SUTICODE      IN     UTILISATEUR.UTICODE%TYPE,
        SUTINOM       IN     UTILISATEUR.UTINOM%TYPE,
        SUTIPRENOM    IN     UTILISATEUR.UTIPRENOM%TYPE,
        SUTITELECOM   IN     UTILISATEUR.UTITELECOM%TYPE,
        SGROCODE      IN     UTILISATEUR.GROCODE%TYPE,
        SUGECODE      IN     UTILISATEUR.UGECODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE UTILISATEUR
               SET UTINOM = SUTINOM,
                   UTIPRENOM = SUTIPRENOM,
                   UTITELECOM = SUTITELECOM,
                   GROCODE = SGROCODE,
                   UTIFLAGINACTIF = 1,
                   UGECODE = SUGECODE
             WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_UTILISATEUR;

    PROCEDURE U_LKTTCTEV (
        NSEVERITY              IN     LKTTCTEV.TCEFLAGUSER%TYPE,
        SWEVPARA               IN     LKTTCTEV.TPCCODE%TYPE,
        SWENTITEMAITREEVTCTL   IN     LKTTCTEV.TEVDEST%TYPE,
        COLCONTROLE            IN     LKTTCTEV.TTCCODE%TYPE,
        SWMYEV                 IN     LKTTCTEV.TMFFONCTION%TYPE,
        COLCODEACTIV           IN     LKTTCTEV.TACCODE%TYPE,
        COLTPGCODE             IN     LKTTCTEV.TPGCODE%TYPE,
        NTSTID                 IN     LKTTCTEV.TSTID%TYPE,
        NROLLBACKFLAG          IN     LKTTCTEV.TCEFLAGUSERROLLBACK%TYPE,
        NRETURNCODE            IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKTTCTEV
               SET TCEFLAGUSER = NSEVERITY,
                   TSTID = NTSTID,
                   TCEFLAGUSERROLLBACK = NROLLBACKFLAG
             WHERE     TPCCODE = SWEVPARA
                   AND TEVDEST = SWENTITEMAITREEVTCTL
                   AND TPCDEST = SWENTITEMAITREEVTCTL
                   AND TTCCODE = COLCONTROLE
                   AND TMFFONCTION = SWMYEV
                   AND TACCODE = COLCODEACTIV
                   AND TPGCODE = COLTPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKTTCTEV;

    PROCEDURE I_TEVFOR (STEFTYPELIEN   IN     TEVFOR.TEFTYPELIEN%TYPE,
                        STEVDEST       IN     TEVFOR.TEVDEST%TYPE,
                        STEVCODE       IN     TEVFOR.TMFFONCTION%TYPE,
                        STMOMODULE     IN     TEVFOR.TMOMODULE%TYPE,
                        STACCODE       IN     TEVFOR.TACCODE%TYPE,
                        SFORID         IN     TEVFOR.FORID%TYPE,
                        STPGCODE       IN     TEVFOR.TPGCODE%TYPE,
                        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TEVFOR (TEVDEST,
                                TMOMODULE,
                                TMFFONCTION,
                                FORID,
                                TEFTYPELIEN,
                                TACCODE,
                                TPGCODE)
                 VALUES (STEVDEST,
                         STMOMODULE,
                         STEVCODE,
                         SFORID,
                         STEFTYPELIEN,
                         STACCODE,
                         STPGCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_LTP_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_LTP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_LTP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_LTP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TEVFOR;

    PROCEDURE U_TEVENEMENT (
        STEVFLAGSYNCHRO             IN     TEVENEMENT.TEVFLAGSYNCHRO%TYPE,
        STEVFLAGUSER                IN     TEVENEMENT.TEVFLAGUSER%TYPE,
        STEVORDRE                   IN     TEVENEMENT.TEVORDRE%TYPE,
        SPIMCODE                    IN     TEVENEMENT.PIMCODE%TYPE,
        STEVFLAGCONTACT             IN     TEVENEMENT.TEVFLAGCONTACT%TYPE,
        STEVFLAGCONTACTUSERCHOICE   IN     TEVENEMENT.TEVFLAGCONTACTUSERCHOICE%TYPE,
        STEVFLAG4EYES               IN     TEVENEMENT.TEVFLAG4EYES%TYPE,
        STEVDEST                    IN     TEVENEMENT.TEVDEST%TYPE,
        STEVCODE                    IN     TEVENEMENT.TMFFONCTION%TYPE,
        STMOMODULE                  IN     TEVENEMENT.TMOMODULE%TYPE,
        STACCODE                    IN     TEVENEMENT.TACCODE%TYPE,
        STEVLIBELLE                 IN     LANTEVENEMENT.TEVLIBELLE%TYPE,
        SLANCODE                    IN     LANGUE.LANCODE%TYPE,
        NRETURNCODE                 IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TEVENEMENT
               SET TEVFLAGSYNCHRO = STEVFLAGSYNCHRO,
                   TEVFLAGUSER = STEVFLAGUSER,
                   TEVORDRE = STEVORDRE,
                   PIMCODE = SPIMCODE,
                   TEVFLAGCONTACT = STEVFLAGCONTACT,
                   TEVFLAGCONTACTUSERCHOICE = STEVFLAGCONTACTUSERCHOICE,
                   TEVFLAG4EYES = STEVFLAG4EYES
             WHERE     TEVDEST = STEVDEST
                   AND TMFFONCTION = STEVCODE
                   AND TMOMODULE = STMOMODULE
                   AND TACCODE = STACCODE;

            UPDATE LANTEVENEMENT
               SET TEVLIBELLE = STEVLIBELLE
             WHERE     TEVDEST = STEVDEST
                   AND TMFFONCTION = STEVCODE
                   AND TMOMODULE = STMOMODULE
                   AND TACCODE = STACCODE
                   AND LANCODE = SLANCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TEVENEMENT;

    PROCEDURE D_TEVFOR (STEVDEST      IN     TEVFOR.TEVDEST%TYPE,
                        STEVCODE      IN     TEVFOR.TMFFONCTION%TYPE,
                        STMOMODULE    IN     TEVFOR.TMOMODULE%TYPE,
                        STACCODE      IN     TEVFOR.TACCODE%TYPE,
                        SFORID        IN     TEVFOR.FORID%TYPE,
                        STPGCODE      IN     TEVFOR.TPGCODE%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM TEVFOR
              WHERE     TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STEVCODE
                    AND TACCODE = STACCODE
                    AND FORID = SFORID
                    AND TPGCODE = STPGCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_TEVFOR;

    PROCEDURE U_TEVFOR (STEFTYPELIEN   IN     TEVFOR.TEFTYPELIEN%TYPE,
                        STEVDEST       IN     TEVFOR.TEVDEST%TYPE,
                        STEVCODE       IN     TEVFOR.TMFFONCTION%TYPE,
                        STMOMODULE     IN     TEVFOR.TMOMODULE%TYPE,
                        STACCODE       IN     TEVFOR.TACCODE%TYPE,
                        SFORID         IN     TEVFOR.FORID%TYPE,
                        STPGCODE       IN     TEVFOR.TPGCODE%TYPE,
                        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TEVFOR
               SET TEFTYPELIEN = STEFTYPELIEN
             WHERE     TEVDEST = STEVDEST
                   AND TMOMODULE = STMOMODULE
                   AND TMFFONCTION = STEVCODE
                   AND TACCODE = STACCODE
                   AND FORID = SFORID
                   AND TPGCODE = STPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TEVFOR;

    PROCEDURE D_TEVENEMENT (STEVDEST      IN     TEVENEMENT.TEVDEST%TYPE,
                            STEVCODE      IN     TEVENEMENT.TMFFONCTION%TYPE,
                            STMOMODULE    IN     TEVENEMENT.TMOMODULE%TYPE,
                            STACCODE      IN     TEVENEMENT.TACCODE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM TEVFOR
              WHERE     TEVDEST = STEVDEST
                    AND TMFFONCTION = STEVCODE
                    AND TMOMODULE = STMOMODULE
                    AND TACCODE = STACCODE;

        DELETE FROM LANTEVENEMENT
              WHERE     TEVDEST = STEVDEST
                    AND TMFFONCTION = STEVCODE
                    AND TMOMODULE = STMOMODULE
                    AND TACCODE = STACCODE;

        DELETE FROM LKTTCTEV
              WHERE     TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STEVCODE
                    AND TACCODE = STACCODE;

        DELETE FROM TEVTSG
              WHERE     TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STEVCODE
                    AND TACCODE = STACCODE;

        DELETE FROM LKTPGTACTEVPHA
              WHERE     TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STEVCODE
                    AND TACCODE = STACCODE;

        DELETE FROM TEVPHA
              WHERE     TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STEVCODE
                    AND TACCODE = STACCODE;

        DELETE FROM TEVENEMENT
              WHERE     TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STEVCODE
                    AND TACCODE = STACCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_TEVENEMENT;

    PROCEDURE U_CATEGORY (
        SCJUCODE             LANCATJURIDIQUE.CJUCODE%TYPE,
        SCJULIBELLE          LANCATJURIDIQUE.CJULIBELLE%TYPE,
        SLANGUE              LANCATJURIDIQUE.LANCODE%TYPE,
        SCJUPAYS             LANCATJURIDIQUE.PAYCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANCATJURIDIQUE
             WHERE CJUCODE = SCJUCODE;

            IF NCOUNT = 0
            THEN
                INSERT INTO LANCATJURIDIQUE (CJUCODE,
                                             CJULIBELLE,
                                             LANCODE,
                                             PAYCODE)
                     VALUES (SCJUCODE,
                             SCJULIBELLE,
                             SLANGUE,
                             SCJUPAYS);
            ELSE
                UPDATE LANCATJURIDIQUE
                   SET CJULIBELLE = SCJULIBELLE
                 WHERE     CJUCODE = SCJUCODE
                       AND LANCODE = SLANGUE
                       AND PAYCODE = SCJUPAYS;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_CATEGORY;

    PROCEDURE I_LKTPGTACTEVPHA (
        STPGCODE       IN     LKTPGTACTEVPHA.TPGCODE%TYPE,
        STEVDEST       IN     LKTPGTACTEVPHA.TEVDEST%TYPE,
        STACCODE       IN     LKTPGTACTEVPHA.TACCODE%TYPE,
        STMOMODULE     IN     LKTPGTACTEVPHA.TMOMODULE%TYPE,
        STMFFONCTION   IN     LKTPGTACTEVPHA.TMFFONCTION%TYPE,
        SPHACODE       IN     LKTPGTACTEVPHA.PHACODE%TYPE,
        SPHADEST       IN     LKTPGTACTEVPHA.PHADEST%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTPGTACTEVPHA (TPGCODE,
                                        TEVDEST,
                                        TACCODE,
                                        TMOMODULE,
                                        TMFFONCTION,
                                        PHACODE,
                                        PHADEST)
                 VALUES (STPGCODE,
                         STEVDEST,
                         STACCODE,
                         STMOMODULE,
                         STMFFONCTION,
                         SPHACODE,
                         SPHADEST);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_LTP_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_LTP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_LTP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_LTP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTPGTACTEVPHA;

    PROCEDURE D_LKTPGTACTEVPHA (
        STPGCODE       IN     LKTPGTACTEVPHA.TPGCODE%TYPE,
        STEVDEST       IN     LKTPGTACTEVPHA.TEVDEST%TYPE,
        STACCODE       IN     LKTPGTACTEVPHA.TACCODE%TYPE,
        STMOMODULE     IN     LKTPGTACTEVPHA.TMOMODULE%TYPE,
        STMFFONCTION   IN     LKTPGTACTEVPHA.TMFFONCTION%TYPE,
        SPHACODE       IN     LKTPGTACTEVPHA.PHACODE%TYPE,
        SPHADEST       IN     LKTPGTACTEVPHA.PHADEST%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LKTPGTACTEVPHA
              WHERE     TACCODE = STACCODE
                    AND TMFFONCTION = STMFFONCTION
                    AND PHACODE = SPHACODE
                    AND PHADEST = SPHADEST
                    AND TPGCODE = STPGCODE
                    AND TEVDEST = STEVDEST
                    AND TMOMODULE = STMOMODULE;

        NRETURNCODE := 0;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_LKTPGTACTEVPHA;

    PROCEDURE I_PAYS (
        SPAYCODE                   IN     PAYS.PAYCODE%TYPE,
        NPAYFLAGREGION             IN     PAYS.PAYFLAGREGION%TYPE,
        SDEVCODE                   IN     PAYS.DEVCODE%TYPE,
        SPAYTEL                    IN     PAYS.PAYTEL%TYPE,
        SPAYFORMATPOST             IN     PAYS.PAYFORMATPOST%TYPE,
        NPAYNBCARIBAN              IN     PAYS.PAYNBCARIBAN%TYPE,
        NPAYFLAGBANQUE             IN     PAYS.PAYFLAGBANQUE%TYPE,
        SPAYFORMATBANQUE           IN     PAYS.PAYFORMATBANQUE%TYPE,
        NPAYFLAGGUICHET            IN     PAYS.PAYFLAGGUICHET%TYPE,
        SPAYFORMATGUICHET          IN     PAYS.PAYFORMATGUICHET%TYPE,
        SPAYFORMATCOMPTE           IN     PAYS.PAYFORMATCOMPTE%TYPE,
        NPAYFLAGCLERIB             IN     PAYS.PAYFLAGCLERIB%TYPE,
        SPAYFORMATCLERIB           IN     PAYS.PAYFORMATCLERIB%TYPE,
        NPAYFLAGSIRET              IN     PAYS.PAYFLAGSIRET%TYPE,
        SPAYFORMATSIRET            IN     PAYS.PAYFORMATSIRET%TYPE,
        SPAYREGLEIBAN              IN     PAYS.PAYREGLEIBAN%TYPE,
        SPAYLIBELLE                IN     LANPAYS.PAYLIBELLE%TYPE,
        SLANGUE                    IN     LANGUE.LANCODE%TYPE,
        NPAYFLAGADDRESSFILTERING   IN     PAYS.PAYFLAGADDRESSFILTERING%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
            SROWID   ROWID;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM PAYS
             WHERE PAYCODE = SPAYCODE;

            IF NCOUNT = 0
            THEN
                INSERT INTO PAYS (PAYCODE,
                                  PAYFLAGREGION,
                                  DEVCODE,
                                  PAYTEL,
                                  PAYFORMATPOST,
                                  PAYNBCARIBAN,
                                  PAYFLAGBANQUE,
                                  PAYFORMATBANQUE,
                                  PAYFLAGGUICHET,
                                  PAYFORMATGUICHET,
                                  PAYFORMATCOMPTE,
                                  PAYFLAGCLERIB,
                                  PAYFORMATCLERIB,
                                  PAYFLAGSIRET,
                                  PAYFORMATSIRET,
                                  PAYREGLEIBAN,
                                  PAYFLAGADDRESSFILTERING)
                     VALUES (SPAYCODE,
                             NPAYFLAGREGION,
                             SDEVCODE,
                             SPAYTEL,
                             SPAYFORMATPOST,
                             NPAYNBCARIBAN,
                             NPAYFLAGBANQUE,
                             SPAYFORMATBANQUE,
                             NPAYFLAGGUICHET,
                             SPAYFORMATGUICHET,
                             SPAYFORMATCOMPTE,
                             NPAYFLAGCLERIB,
                             SPAYFORMATCLERIB,
                             NPAYFLAGSIRET,
                             SPAYFORMATSIRET,
                             SPAYREGLEIBAN,
                             NPAYFLAGADDRESSFILTERING);

                INSERT INTO LANPAYS (PAYCODE, PAYLIBELLE, LANCODE)
                     VALUES (SPAYCODE, SPAYLIBELLE, SLANGUE);
            ELSE
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM LANPAYS
                 WHERE PAYCODE = SPAYCODE AND LANCODE = SLANGUE;

                IF NCOUNT = 0
                THEN
                    INSERT INTO LANPAYS (PAYCODE, PAYLIBELLE, LANCODE)
                         VALUES (SPAYCODE, SPAYLIBELLE, SLANGUE);
                END IF;
            END IF;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM PAYS
                 WHERE PAYCODE = SPAYCODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('PAYS',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_PAYS;

    PROCEDURE I_PAYREGION (SPAYCODE      IN     PAYREGION.PAYCODE%TYPE,
                           SPRECODE      IN     PAYREGION.PRECODE%TYPE,
                           SPRETYPE      IN     PAYREGION.PRETYPE%TYPE,
                           SPRELIBELLE   IN     LANPAYREGION.PRELIBELLE%TYPE,
                           SLANGUE       IN     LANGUE.LANCODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM PAYREGION
             WHERE     PAYCODE = SPAYCODE
                   AND PRECODE = SPRECODE
                   AND PRETYPE = 'ADMINISTRATIF';

            IF NCOUNT = 0
            THEN
                INSERT INTO PAYREGION (PAYCODE, PRECODE, PRETYPE)
                     VALUES (SPAYCODE, SPRECODE, 'ADMINISTRATIF');

                INSERT INTO LANPAYREGION (PAYCODE,
                                          PRELIBELLE,
                                          LANCODE,
                                          PRECODE,
                                          PRETYPE)
                     VALUES (SPAYCODE,
                             SPRELIBELLE,
                             SLANGUE,
                             SPRECODE,
                             'ADMINISTRATIF');
            ELSE
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM LANPAYREGION
                 WHERE PAYCODE = SPAYCODE AND LANCODE = SLANGUE;

                IF NCOUNT = 0
                THEN
                    INSERT INTO LANPAYREGION (PAYCODE,
                                              PRELIBELLE,
                                              LANCODE,
                                              PRECODE,
                                              PRETYPE)
                         VALUES (SPAYCODE,
                                 SPRELIBELLE,
                                 SLANGUE,
                                 SPRECODE,
                                 'ADMINISTRATIF');
                END IF;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_PAYREGION;

    PROCEDURE U_PAYS (
        SPAYCODE                   IN     PAYS.PAYCODE%TYPE,
        NPAYFLAGREGION             IN     PAYS.PAYFLAGREGION%TYPE,
        SDEVCODE                   IN     PAYS.DEVCODE%TYPE,
        SPAYTEL                    IN     PAYS.PAYTEL%TYPE,
        SPAYFORMATPOST             IN     PAYS.PAYFORMATPOST%TYPE,
        NPAYNBCARIBAN              IN     PAYS.PAYNBCARIBAN%TYPE,
        NPAYFLAGBANQUE             IN     PAYS.PAYFLAGBANQUE%TYPE,
        SPAYFORMATBANQUE           IN     PAYS.PAYFORMATBANQUE%TYPE,
        NPAYFLAGGUICHET            IN     PAYS.PAYFLAGGUICHET%TYPE,
        SPAYFORMATGUICHET          IN     PAYS.PAYFORMATGUICHET%TYPE,
        SPAYFORMATCOMPTE           IN     PAYS.PAYFORMATCOMPTE%TYPE,
        NPAYFLAGCLERIB             IN     PAYS.PAYFLAGCLERIB%TYPE,
        SPAYFORMATCLERIB           IN     PAYS.PAYFORMATCLERIB%TYPE,
        NPAYFLAGSIRET              IN     PAYS.PAYFLAGSIRET%TYPE,
        SPAYFORMATSIRET            IN     PAYS.PAYFORMATSIRET%TYPE,
        SPAYREGLEIBAN              IN     PAYS.PAYREGLEIBAN%TYPE,
        SPAYLIBELLE                IN     LANPAYS.PAYLIBELLE%TYPE,
        SLANGUE                    IN     LANGUE.LANCODE%TYPE,
        NPAYFLAGADDRESSFILTERING   IN     PAYS.PAYFLAGADDRESSFILTERING%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
            SROWID   ROWID;
        BEGIN
            UPDATE PAYS
               SET PAYFLAGREGION = NPAYFLAGREGION,
                   DEVCODE = SDEVCODE,
                   PAYTEL = SPAYTEL,
                   PAYFORMATPOST = SPAYFORMATPOST,
                   PAYNBCARIBAN = NPAYNBCARIBAN,
                   PAYFLAGBANQUE = NPAYFLAGBANQUE,
                   PAYFORMATBANQUE = SPAYFORMATBANQUE,
                   PAYFLAGGUICHET = NPAYFLAGGUICHET,
                   PAYFORMATGUICHET = SPAYFORMATGUICHET,
                   PAYFORMATCOMPTE = SPAYFORMATCOMPTE,
                   PAYFLAGCLERIB = NPAYFLAGCLERIB,
                   PAYFORMATCLERIB = SPAYFORMATCLERIB,
                   PAYFLAGSIRET = NPAYFLAGSIRET,
                   PAYFORMATSIRET = SPAYFORMATSIRET,
                   PAYREGLEIBAN = SPAYREGLEIBAN,
                   PAYFLAGADDRESSFILTERING = NPAYFLAGADDRESSFILTERING
             WHERE PAYCODE = SPAYCODE;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANPAYS
             WHERE PAYCODE = SPAYCODE AND LANCODE = SLANGUE;

            IF NCOUNT = 0
            THEN
                INSERT INTO LANPAYS (PAYCODE, PAYLIBELLE, LANCODE)
                     VALUES (SPAYCODE, SPAYLIBELLE, SLANGUE);
            ELSE
                UPDATE LANPAYS
                   SET PAYLIBELLE = SPAYLIBELLE
                 WHERE PAYCODE = SPAYCODE AND LANCODE = SLANGUE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM PAYS
                 WHERE PAYCODE = SPAYCODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('PAYS',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PAYS;

    PROCEDURE U_PAYREGION (SPAYCODE      IN     PAYREGION.PAYCODE%TYPE,
                           SPRECODE      IN     PAYREGION.PRECODE%TYPE,
                           SPRETYPE      IN     PAYREGION.PRETYPE%TYPE,
                           SPRELIBELLE   IN     LANPAYREGION.PRELIBELLE%TYPE,
                           SLANGUE       IN     LANGUE.LANCODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANPAYREGION
             WHERE     PAYCODE = SPAYCODE
                   AND LANCODE = SLANGUE
                   AND PRECODE = SPRECODE
                   AND PRETYPE = 'ADMINISTRATIF';

            IF NCOUNT = 0
            THEN
                INSERT INTO LANPAYREGION (PAYCODE,
                                          PRELIBELLE,
                                          LANCODE,
                                          PRECODE,
                                          PRETYPE)
                     VALUES (SPAYCODE,
                             SPRELIBELLE,
                             SLANGUE,
                             SPRECODE,
                             'ADMINISTRATIF');
            ELSE
                UPDATE LANPAYREGION
                   SET PRELIBELLE = SPRELIBELLE
                 WHERE     PAYCODE = SPAYCODE
                       AND LANCODE = SLANGUE
                       AND PRECODE = SPRECODE
                       AND PRETYPE = 'ADMINISTRATIF';
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_ROL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_ROL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PAYREGION;

    PROCEDURE D_PAYS (SPAYCODE PAYS.PAYCODE%TYPE, NRETURNCODE IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            NRETURNCODE := 0;

            SELECT ROWID
              INTO SROWID
              FROM PAYS
             WHERE PAYCODE = SPAYCODE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('PAYS', SROWID, NRETURNCODE);

            -- Suppression des regions du pays
            DELETE FROM PAYREGDEPT
                  WHERE PAYCODE = SPAYCODE;

            DELETE FROM LANPAYREGION
                  WHERE PAYCODE = SPAYCODE;

            DELETE FROM PAYREGION
                  WHERE PAYCODE = SPAYCODE;

            -- Suppression du pays
            DELETE FROM LANPAYS
                  WHERE PAYCODE = SPAYCODE;

            DELETE FROM PAYS
                  WHERE PAYCODE = SPAYCODE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_PAY_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_PAYS;

    PROCEDURE D_PAYREGION (SPAYCODE             PAYREGION.PAYCODE%TYPE,
                           SPRECODE             PAYREGION.PRECODE%TYPE,
                           SPRETYPE             PAYREGION.PRETYPE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM PAYREGDEPT
                  WHERE     PAYCODE = SPAYCODE
                        AND PRECODE = SPRECODE
                        AND PRETYPE = SPRETYPE;

            DELETE FROM LANPAYREGION
                  WHERE     PAYCODE = SPAYCODE
                        AND PRECODE = SPRECODE
                        AND PRETYPE = SPRETYPE;

            DELETE FROM PAYREGION
                  WHERE     PAYCODE = SPAYCODE
                        AND PRECODE = SPRECODE
                        AND PRETYPE = SPRETYPE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_PRE_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_PAYREGION;

    PROCEDURE I_LKTPGTACPHAJAL (
        STPGJAL                      LKTPGTACPHAJAL.TPGCODE%TYPE,
        SACTJAL                      LKTPGTACPHAJAL.TACCODE%TYPE,
        SJALCODE                     LKTPGTACPHAJAL.JALCODE%TYPE,
        NJALORDRE                    LKTPGTACPHAJAL.TPJORDRE%TYPE,
        SENTITEMAITREJALPHA          LKTPGTACPHAJAL.PHADEST%TYPE,
        SPHAJAL                      LKTPGTACPHAJAL.PHACODE%TYPE,
        NTPJFLAGDEFAULT              LKTPGTACPHAJAL.TPJFLAGDEFAULT%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTPGTACPHAJAL (TPGCODE,
                                        TACCODE,
                                        JALCODE,
                                        TPJORDRE,
                                        PHADEST,
                                        PHACODE,
                                        TPJFLAGDEFAULT)
                 VALUES (STPGJAL,
                         SACTJAL,
                         SJALCODE,
                         NJALORDRE,
                         SENTITEMAITREJALPHA,
                         SPHAJAL,
                         NTPJFLAGDEFAULT);

            NRETURNCODE := 0;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_IMP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTPGTACPHAJAL;

    PROCEDURE D_LKTPGTACPHAJAL (
        SACTJAL                      LKTPGTACPHAJAL.TACCODE%TYPE,
        SJALCODE                     LKTPGTACPHAJAL.JALCODE%TYPE,
        SPHAJAL                      LKTPGTACPHAJAL.PHACODE%TYPE,
        SENTITEMAITREJALPHA          LKTPGTACPHAJAL.PHADEST%TYPE,
        STPGJAL                      LKTPGTACPHAJAL.TPGCODE%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTPGTACPHAJAL
                  WHERE     TACCODE = SACTJAL
                        AND JALCODE = SJALCODE
                        AND PHACODE = SPHAJAL
                        AND PHADEST = SENTITEMAITREJALPHA
                        AND TPGCODE = STPGJAL;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_IMP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_LKTPGTACPHAJAL;

    PROCEDURE U_LKTPGTACPHAJAL (
        NJALORDRE                    LKTPGTACPHAJAL.TPJORDRE%TYPE,
        SACTJAL                      LKTPGTACPHAJAL.TACCODE%TYPE,
        SJALCODE                     LKTPGTACPHAJAL.JALCODE%TYPE,
        SPHAJAL                      LKTPGTACPHAJAL.PHACODE%TYPE,
        SENTITEMAITREJALPHA          LKTPGTACPHAJAL.PHADEST%TYPE,
        STPGJAL                      LKTPGTACPHAJAL.TPGCODE%TYPE,
        NTPJFLAGDEFAULT              LKTPGTACPHAJAL.TPJFLAGDEFAULT%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKTPGTACPHAJAL
               SET TPJORDRE = NJALORDRE, TPJFLAGDEFAULT = NTPJFLAGDEFAULT
             WHERE     TACCODE = SACTJAL
                   AND JALCODE = SJALCODE
                   AND PHACODE = SPHAJAL
                   AND PHADEST = SENTITEMAITREJALPHA
                   AND TPGCODE = STPGJAL;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_IMP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_LKTPGTACPHAJAL;

    PROCEDURE U_LANNAF (SNAFCODE             LANNAF.NAFCODE%TYPE,
                        SNAFLIBELLE          LANNAF.NAFLIBELLE%TYPE,
                        SPPAYCODE            LANNAF.NAFCODE%TYPE,
                        SLANCODE      IN     LANGUE.LANCODE%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
        COUNTNUM   NUMBER;
    BEGIN
        SELECT COUNT (*)
          INTO COUNTNUM
          FROM LANNAF
         WHERE NAFCODE = SNAFCODE AND LANCODE = SLANCODE;

        IF COUNTNUM = 0
        THEN
            INSERT INTO LANNAF (NAFCODE,
                                NAFLIBELLE,
                                LANCODE,
                                PAYCODE)
                 VALUES (SNAFCODE,
                         SNAFLIBELLE,
                         SLANCODE,
                         SPPAYCODE);
        ELSE
            UPDATE LANNAF
               SET NAFLIBELLE = SNAFLIBELLE
             WHERE     NAFCODE = SNAFCODE
                   AND LANCODE = SLANCODE
                   AND PAYCODE = SPPAYCODE;
        END IF;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_LANNAF;

    PROCEDURE I_ALLOCATIONTYPE (NRUBID               LKTPGTACRUB.RUBID%TYPE,
                                STACCODE             LKTPGTACRUB.TACCODE%TYPE,
                                STPGCODE             LKTPGTACRUB.TPGCODE%TYPE,
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTPGTACRUB (RUBID, TACCODE, TPGCODE)
                 VALUES (NRUBID, STACCODE, STPGCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_ALLOCATIONTYPE;

    PROCEDURE D_ALLOCATIONTYPE (NRUBID               LKTPGTACRUB.RUBID%TYPE,
                                STACCODE             LKTPGTACRUB.TACCODE%TYPE,
                                STPGCODE             LKTPGTACRUB.TPGCODE%TYPE,
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTPGTACRUB
                  WHERE     TPGCODE = STPGCODE
                        AND TACCODE = STACCODE
                        AND RUBID = NRUBID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_ALLOCATIONTYPE;

    PROCEDURE I_LKAMOLOIDEFAUT (
        SWACTIVITE           IN     LKAMOLOIDEFAUT.TACCODE%TYPE,
        COLNAP               IN     LKAMOLOIDEFAUT.NAPCODE%TYPE,
        COLLOI               IN     LKAMOLOIDEFAUT.TLFCODE%TYPE,
        SWPROFIL             IN     LKAMOLOIDEFAUT.TPGCODE%TYPE,
        SWREGIMEFISC         IN     LKAMOLOIDEFAUT.TRFCODE%TYPE,
        NDUREEAN             IN     LKAMOLOIDEFAUT.ALDDUREEAN%TYPE,
        NDUREEMOIS           IN     LKAMOLOIDEFAUT.ALDDUREEMOIS%TYPE,
        NDUREEANOCCASION     IN     LKAMOLOIDEFAUT.ALDUSEDYEARDURATION%TYPE,
        NDUREEMOISOCCASION   IN     LKAMOLOIDEFAUT.ALDUSEDMONTHDURATION%TYPE,
        SWPAYCODE            IN     LKAMOLOIDEFAUT.PAYCODE%TYPE,
        COLCONTEXTECODE      IN     LKAMOLOIDEFAUT.TUNCONTEXTE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO LKAMOLOIDEFAUT (TACCODE,
                                    NAPCODE,
                                    TLFCODE,
                                    TPGCODE,
                                    TRFCODE,
                                    ALDDUREEAN,
                                    ALDDUREEMOIS,
                                    ALDUSEDYEARDURATION,
                                    ALDUSEDMONTHDURATION,
                                    PAYCODE,
                                    TUNCONTEXTE)
             VALUES (SWACTIVITE,
                     COLNAP,
                     COLLOI,
                     SWPROFIL,
                     SWREGIMEFISC,
                     NDUREEAN,
                     NDUREEMOIS,
                     NDUREEANOCCASION,
                     NDUREEMOISOCCASION,
                     SWPAYCODE,
                     COLCONTEXTECODE);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_LKAMOLOIDEFAUT;

    PROCEDURE D_LKAMOLOIDEFAUT (
        SWACTIVITE        IN     LKAMOLOIDEFAUT.TACCODE%TYPE,
        COLNAP            IN     LKAMOLOIDEFAUT.NAPCODE%TYPE,
        COLLOI            IN     LKAMOLOIDEFAUT.TLFCODE%TYPE,
        SWPROFIL          IN     LKAMOLOIDEFAUT.TPGCODE%TYPE,
        SWREGIMEFISC      IN     LKAMOLOIDEFAUT.TRFCODE%TYPE,
        --nDureeAn IN LKAMOLOIDEFAUT.ALDDUREEAN%TYPE,
        --  nDureeMois IN LKAMOLOIDEFAUT.ALDDUREEMOIS%TYPE,
        SWPAYCODE         IN     LKAMOLOIDEFAUT.PAYCODE%TYPE,
        COLCONTEXTECODE   IN     LKAMOLOIDEFAUT.TUNCONTEXTE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LKAMOLOIDEFAUT
              WHERE     TACCODE = SWACTIVITE
                    AND TRFCODE = SWREGIMEFISC
                    AND TLFCODE = COLLOI
                    AND NAPCODE = COLNAP
                    AND TPGCODE = SWPROFIL
                    AND PAYCODE = SWPAYCODE
                    AND TUNCONTEXTE = COLCONTEXTECODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_LKAMOLOIDEFAUT;

    PROCEDURE U_LKAMOLOIDEFAUT (
        SWACTIVITE           IN     LKAMOLOIDEFAUT.TACCODE%TYPE,
        COLNAP               IN     LKAMOLOIDEFAUT.NAPCODE%TYPE,
        COLLOI               IN     LKAMOLOIDEFAUT.TLFCODE%TYPE,
        SWPROFIL             IN     LKAMOLOIDEFAUT.TPGCODE%TYPE,
        SWREGIMEFISC         IN     LKAMOLOIDEFAUT.TRFCODE%TYPE,
        NDUREEAN             IN     LKAMOLOIDEFAUT.ALDDUREEAN%TYPE,
        NDUREEMOIS           IN     LKAMOLOIDEFAUT.ALDDUREEMOIS%TYPE,
        NDUREEANOCCASION     IN     LKAMOLOIDEFAUT.ALDUSEDYEARDURATION%TYPE,
        NDUREEMOISOCCASION   IN     LKAMOLOIDEFAUT.ALDUSEDMONTHDURATION%TYPE,
        SWPAYCODE            IN     LKAMOLOIDEFAUT.PAYCODE%TYPE,
        COLCONTEXTECODE      IN     LKAMOLOIDEFAUT.TUNCONTEXTE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LKAMOLOIDEFAUT
           SET ALDDUREEAN = NDUREEAN,
               ALDDUREEMOIS = NDUREEMOIS,
               ALDUSEDYEARDURATION = NDUREEANOCCASION,
               ALDUSEDMONTHDURATION = NDUREEMOISOCCASION
         WHERE     TACCODE = SWACTIVITE
               AND NAPCODE = COLNAP
               AND TLFCODE = COLLOI
               AND TPGCODE = SWPROFIL
               AND TRFCODE = SWREGIMEFISC
               AND PAYCODE = SWPAYCODE
               AND TUNCONTEXTE = COLCONTEXTECODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_LKAMOLOIDEFAUT;

    PROCEDURE I_TREATTRIBUTE (
        STRECODE        IN     TREATTRIBUTE.TRECODE%TYPE,
        STATATTRIBUTE   IN     TREATTRIBUTE.TATATTRIBUTE%TYPE,
        STATNAME        IN     LANTREATTRIBUTE.TATNAME%TYPE,
        -- sLangue     IN LANGUE.LANCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
        SLANGUE   LANTRELATION.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            INSERT INTO TREATTRIBUTE (TRECODE, TATATTRIBUTE)
                 VALUES (STRECODE, STATATTRIBUTE);

            INSERT INTO LANTREATTRIBUTE (LANCODE,
                                         TRECODE,
                                         TATATTRIBUTE,
                                         TATNAME)
                 VALUES (SLANGUE,
                         STRECODE,
                         STATATTRIBUTE,
                         STATNAME);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RDE_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_RDE_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RDE_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RDE_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TREATTRIBUTE;

    PROCEDURE U_TREATTRIBUTE (
        STRECODE        IN     TREATTRIBUTE.TRECODE%TYPE,
        STATATTRIBUTE   IN     TREATTRIBUTE.TATATTRIBUTE%TYPE,
        STATNAME        IN     LANTREATTRIBUTE.TATNAME%TYPE,
        -- sLangue     IN LANGUE.LANCODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
        SLANGUE   LANTRELATION.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            UPDATE TREATTRIBUTE
               SET TATATTRIBUTE = STATATTRIBUTE
             WHERE TRECODE = STRECODE AND TATATTRIBUTE = STRECODE;

            UPDATE LANTREATTRIBUTE
               SET TATNAME = STATNAME
             WHERE     TRECODE = STRECODE
                   AND LANCODE = SLANGUE
                   AND TATATTRIBUTE = STATATTRIBUTE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        -- EXCEPTION
        -- WHEN ERR_PARENT_NOT_FOUND THEN
        -- nReturnCode := ERR_PARENT_RDE_FOUND_CONST;
        -- WHEN DUP_VAL_ON_INDEX THEN
        --  nReturnCode := ERR_DUP_RDE_INDEX_CONST;
        -- WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --    nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN OTHERS THEN
        -- nReturnCode := -1 * SQLCODE;
        END;
    END U_TREATTRIBUTE;

    PROCEDURE I_TRELATION (
        STRECODE            IN     TRELATION.TRECODE%TYPE,
        STREFLAGORFI        IN     TRELATION.TREFLAGORFI%TYPE,
        STREFLAGQP          IN     TRELATION.TREFLAGQP%TYPE,
        STREFLAGPROPRIETE   IN     TRELATION.TREFLAGPROPRIETE%TYPE,
        -- SLANGUE IN LANTRELATION.LANCODE %TYPE,
        STRELIBELLEASC      IN     LANTRELATION.TRELIBELLEASC%TYPE,
        STRELIBELLEDESC     IN     LANTRELATION.TRELIBELLEDESC%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
        SLANGUE   LANTRELATION.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            INSERT INTO TRELATION (TRECODE,
                                   TREFLAGORFI,
                                   TREFLAGQP,
                                   TREFLAGPROPRIETE)
                 VALUES (STRECODE,
                         STREFLAGORFI,
                         STREFLAGQP,
                         STREFLAGPROPRIETE);

            INSERT INTO LANTRELATION (LANCODE,
                                      TRECODE,
                                      TRELIBELLEASC,
                                      TRELIBELLEDESC)
                 VALUES (SLANGUE,
                         STRECODE,
                         STRELIBELLEASC,
                         STRELIBELLEDESC);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        -- EXCEPTION
        -- WHEN ERR_PARENT_NOT_FOUND THEN
        -- nReturnCode := ERR_PARENT_RDE_FOUND_CONST;
        -- WHEN DUP_VAL_ON_INDEX THEN
        --  nReturnCode := ERR_DUP_RDE_INDEX_CONST;
        -- WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --    nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN OTHERS THEN
        -- nReturnCode := -1 * SQLCODE;
        END;
    END I_TRELATION;

    PROCEDURE D_TRELATION (STRECODE      IN     TRELATION.TRECODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LANTREPRODETAIL
              WHERE TRECODE = STRECODE;

        DELETE FROM TREPRODETAIL
              WHERE TRECODE = STRECODE;

        DELETE FROM LANTREATTRIBUTE
              WHERE TRECODE = STRECODE;

        DELETE FROM TREATTRIBUTE
              WHERE TRECODE = STRECODE;

        DELETE FROM LANTRELATION
              WHERE TRECODE = STRECODE;

        DELETE FROM TRELATION
              WHERE TRECODE = STRECODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_TRELATION;

    PROCEDURE U_TRELATION (
        STRECODE            IN     TRELATION.TRECODE%TYPE,
        STREFLAGORFI        IN     TRELATION.TREFLAGORFI%TYPE,
        STREFLAGQP          IN     TRELATION.TREFLAGQP%TYPE,
        STREFLAGPROPRIETE   IN     TRELATION.TREFLAGPROPRIETE%TYPE,
        STRELIBELLEASC      IN     LANTRELATION.TRELIBELLEASC%TYPE,
        STRELIBELLEDESC     IN     LANTRELATION.TRELIBELLEDESC%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
        SLANGUE   LANTRELATION.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            UPDATE TRELATION
               SET TREFLAGORFI = STREFLAGORFI,
                   TREFLAGQP = STREFLAGQP,
                   TREFLAGPROPRIETE = STREFLAGPROPRIETE
             WHERE TRECODE = STRECODE;

            UPDATE LANTRELATION
               SET TRELIBELLEASC = STRELIBELLEASC,
                   TRELIBELLEDESC = STRELIBELLEDESC
             WHERE TRECODE = STRECODE AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        -- EXCEPTION
        -- WHEN ERR_PARENT_NOT_FOUND THEN
        -- nReturnCode := ERR_PARENT_RDE_FOUND_CONST;
        -- WHEN DUP_VAL_ON_INDEX THEN
        --  nReturnCode := ERR_DUP_RDE_INDEX_CONST;
        -- WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --    nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN OTHERS THEN
        -- nReturnCode := -1 * SQLCODE;
        END;
    END U_TRELATION;

    PROCEDURE D_TREATTRIBUTE (
        STRECODE        IN     TREPRODETAIL.TRECODE%TYPE,
        STATATTRIBUTE   IN     TREPRODETAIL.TATATTRIBUTE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LANTREPRODETAIL
              WHERE TRECODE = STRECODE AND TATATTRIBUTE = STATATTRIBUTE;

        DELETE FROM TREPRODETAIL
              WHERE TRECODE = STRECODE AND TATATTRIBUTE = STATATTRIBUTE;

        DELETE FROM LANTREATTRIBUTE
              WHERE TRECODE = STRECODE AND TATATTRIBUTE = STATATTRIBUTE;

        DELETE FROM TREATTRIBUTE
              WHERE TRECODE = STRECODE AND TATATTRIBUTE = STATATTRIBUTE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_TREATTRIBUTE;

    PROCEDURE I_TREPRODETAIL (
        STRECODE        IN     TREPRODETAIL.TRECODE%TYPE,
        STATATTRIBUTE   IN     TREPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE       IN     TREPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TREPRODETAIL (TRECODE, TATATTRIBUTE, TDEVALUE)
                 VALUES (STRECODE, STATATTRIBUTE, STDEVALUE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        -- EXCEPTION
        -- WHEN ERR_PARENT_NOT_FOUND THEN
        -- nReturnCode := ERR_PARENT_RDE_FOUND_CONST;
        -- WHEN DUP_VAL_ON_INDEX THEN
        --  nReturnCode := ERR_DUP_RDE_INDEX_CONST;
        -- WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --    nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN OTHERS THEN
        -- nReturnCode := -1 * SQLCODE;
        END;
    END I_TREPRODETAIL;

    PROCEDURE U_TREPRODETAIL (
        STRECODE        IN     TREPRODETAIL.TRECODE%TYPE,
        STATATTRIBUTE   IN     TREPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE       IN     TREPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
        SLANGUE   LANTRELATION.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            UPDATE TREPRODETAIL
               SET TDEVALUE = STDEVALUE
             WHERE     TRECODE = STRECODE
                   AND TATATTRIBUTE = STATATTRIBUTE
                   AND TDEVALUE = STDEVALUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        -- EXCEPTION
        -- WHEN ERR_PARENT_NOT_FOUND THEN
        -- nReturnCode := ERR_PARENT_RDE_FOUND_CONST;
        -- WHEN DUP_VAL_ON_INDEX THEN
        --  nReturnCode := ERR_DUP_RDE_INDEX_CONST;
        -- WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --    nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_RDE_KEY_CONST;
        --  WHEN OTHERS THEN
        -- nReturnCode := -1 * SQLCODE;
        END;
    END U_TREPRODETAIL;

    PROCEDURE D_TREPRODETAIL (
        STRECODE        IN     TREPRODETAIL.TRECODE%TYPE,
        STATATTRIBUTE   IN     TREPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE       IN     TREPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LANTREPRODETAIL
              WHERE     TRECODE = STRECODE
                    AND TATATTRIBUTE = STATATTRIBUTE
                    AND TDEVALUE = STDEVALUE;

        DELETE FROM TREPRODETAIL
              WHERE     TRECODE = STRECODE
                    AND TATATTRIBUTE = STATATTRIBUTE
                    AND TDEVALUE = STDEVALUE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_CHILD_FOUND
        THEN
            NRETURNCODE := ERR_BUD_CHILD_FOUND_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_TREPRODETAIL;

    PROCEDURE U_PHASETABLE (SPHALIBELLE          LANPHASE.PHALIBELLE%TYPE,
                            SPHACODE      IN     PHASE.PHACODE%TYPE,
                            SPHADEST      IN     PHASE.PHADEST%TYPE,
                            SLANCODE             LANGUE.LANCODE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LANPHASE
           SET PHALIBELLE = SPHALIBELLE
         WHERE     PHACODE = SPHACODE
               AND PHADEST = SPHADEST
               AND LANCODE = SLANCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_PHASETABLE;

    PROCEDURE I_STEPTABLE (
        SJALCODE                 JALON.JALCODE%TYPE,
        NJALFLAGINTERNE          JALON.JALFLAGINTERNE%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO JALON (JALCODE, JALFLAGINTERNE)
             VALUES (SJALCODE, NJALFLAGINTERNE);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_STEPTABLE;

    PROCEDURE I_LANSTEPTABLE (SJALCODE             LANJALON.JALCODE%TYPE,
                              SLANCODE             LANGUE.LANCODE%TYPE,
                              SJALLIBELLE          LANJALON.JALLIBELLE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO JALON (JALCODE)
             VALUES (SJALCODE);

        INSERT INTO LANJALON (JALCODE, LANCODE, JALLIBELLE)
             VALUES (SJALCODE, SLANCODE, SJALLIBELLE);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_LANSTEPTABLE;

    PROCEDURE U_STEPTABLE (SJALLIBELLE          LANJALON.JALLIBELLE%TYPE,
                           SJALCODE             LANJALON.JALCODE%TYPE,
                           SLANCODE             LANGUE.LANCODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LANJALON
           SET JALLIBELLE = SJALLIBELLE
         WHERE JALCODE = SJALCODE AND LANCODE = SLANCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NAP_FOUND_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_NAP_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_NAP_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_STEPTABLE;

    PROCEDURE D_STEPTABLE (NJALCODE             JALON.JALCODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LANJALON
              WHERE JALCODE = NJALCODE;

        DELETE FROM LKTPGTACPHAJAL
              WHERE JALCODE = NJALCODE;

        DELETE FROM PHAJAL
              WHERE JALCODE = NJALCODE;

        DELETE FROM JALON
              WHERE JALCODE = NJALCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NAP_FOUND_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_NAP_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_NAP_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_STEPTABLE;

    -- control per phase
    PROCEDURE U_PHACTL_TBLSTATCONTROLE (
        NSEVERITY              IN     VARCHAR2 --tblStatControle.colUser.GetCode() TTPCODE
                                              ,
        SWPARA                 IN     VARCHAR2                 --Paraghra list
                                              ,
        SWENTITEMAITREPHACTL   IN     VARCHAR2                  --target combo
                                              ,
        COLCONTROLE            IN     VARCHAR2 --:dlgPhaCtl.tblStatControle.colControle TTCCODE
                                              ,
        SWPHACTL               IN     VARCHAR2                   --phase combo
                                              ,
        COLCODEACTIV           IN     VARCHAR2 --dlgPhaCtl.tblStatControle.colCodeActiv TACCODE
                                              ,
        SWPROFIL               IN     VARCHAR2                  --Profil combo
                                              ,
        NRETURNCODE            IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LKPHATTC
               SET PTCFLAGUSER = NSEVERITY
             WHERE     TPCCODE = SWPARA
                   AND TPCDEST = SWENTITEMAITREPHACTL
                   AND TTCCODE = COLCONTROLE
                   AND PHACODE = SWPHACTL
                   AND TACCODE = COLCODEACTIV
                   AND TPGCODE = SWPROFIL;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PHACTL_TBLSTATCONTROLE;

    -- standard table nace , langue tab
    -- Insert in nace table
    PROCEDURE I_NACE (SNACCODE             NACE.NACCODE%TYPE,
                      SNACLIB              LANNACE.NACLIBELLE%TYPE,
                      SGLANGUE             LANNACE.LANCODE%TYPE,
                      NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM NACE
             WHERE NACCODE = SNACCODE;

            IF NCOUNT = 0
            THEN
                INSERT INTO NACE (NACCODE)
                     VALUES (SNACCODE);

                INSERT INTO LANNACE (NACCODE, NACLIBELLE, LANCODE)
                     VALUES (SNACCODE, SNACLIB, SGLANGUE);
            ELSE
                INSERT INTO LANNACE (NACCODE, NACLIBELLE, LANCODE)
                     VALUES (SNACCODE, SNACLIB, SGLANGUE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_NACE;

    -- update in nace table
    PROCEDURE U_NACE (SNACCODE             NACE.NACCODE%TYPE,
                      SNACLIB              LANNACE.NACLIBELLE%TYPE,
                      SGLANGUE             LANNACE.LANCODE%TYPE,
                      NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANNACE
             WHERE NACCODE = SNACCODE AND LANCODE = SGLANGUE;

            IF NCOUNT = 0
            THEN
                INSERT INTO LANNACE (NACCODE, NACLIBELLE, LANCODE)
                     VALUES (SNACCODE, SNACLIB, SGLANGUE);
            ELSE
                UPDATE LANNACE
                   SET NACLIBELLE = SNACLIB
                 WHERE NACCODE = SNACCODE AND LANCODE = SGLANGUE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_NACE;

    PROCEDURE I_GESFORMALITE (
        SACT                     IN     VARCHAR2,  --business type combo value
        NFORID                   IN OUT FORMALITE.FORID%TYPE,
        SFORCODE                 IN     FORMALITE.FORCODE%TYPE,
        NFORMDELAIEMIS           IN     FORMALITE.FORDELAIEMIS%TYPE,
        BFORMDOCEMIS             IN     FORMALITE.FORFLAGDOCEMIS%TYPE,
        NFORMREPONSE             IN     FORMALITE.FORFLAGREPONSE%TYPE,
        NFORMDELAIREP            IN     FORMALITE.FORDELAIREP%TYPE,
        BFORMDOCRAPPEL           IN     FORMALITE.FORFLAGFORRAPPEL%TYPE,
        BFORMOBLIG               IN     FORMALITE.FORFLAGOBLIG%TYPE,
        SFORMTYPEDATE            IN     FORMALITE.FORTYPEDATE%TYPE,
        SDEST                    IN     VARCHAR2,         --target combo value
        SFORMMODEDECLENCH        IN     FORMALITE.FORMODELANCEMENT%TYPE,
        NFORMRAPPEL              IN     FORMALITE.FORIDRAPPEL%TYPE,
        SUGECODE                 IN     VARCHAR2,             --user container
        NFORFLAGRECURRENT        IN     FORMALITE.FORFLAGRECURRENT%TYPE,
        SFORPERIODE              IN     FORMALITE.FORPERIODE%TYPE,
        NFORMULTIPLE             IN     FORMALITE.FORMULTIPLE%TYPE,
        NFORJOUR                 IN     FORMALITE.FORJOUR%TYPE,
        NFORMOIS                 IN     FORMALITE.FORMOIS%TYPE,
        NFORDELAIREACTIVATION    IN     FORMALITE.FORDELAIREACTIVATION%TYPE,
        SLANGUE                  IN     VARCHAR2,             --user container
        SFORMLIBELLE             IN     VARCHAR2, --combo DLGGESFORMALITE_CMBACTFORM display value
        SFORPRIORITY             IN     FORMALITE.FORPRIORITY%TYPE,
        SFORPEREMIS              IN     FORMALITE.FORPEREMIS%TYPE,
        SFORPERACT               IN     FORMALITE.FORPERACT%TYPE,
        SFORPERREP               IN     FORMALITE.FORPERREP%TYPE,
        SFORPERREPONSE           IN     FORMALITE.FORPERREPONSE%TYPE,
        SFORTYPE                 IN     FORMALITE.FORTYPE%TYPE,
        SFORMESSAGETYPE          IN     FORMALITE.FORTYPEMSG%TYPE,
        SFORMESSAGETEMPLATE      IN     FORMALITE.ANMID%TYPE,
        SFORMESSAGETELECOMTYPE   IN     FORMALITE.FORTELTYPE%TYPE,
        SFORFLAGREMINDER         IN     FORMALITE.FORFLAGREMINDER%TYPE,
        SFORREMMETHOD            IN     FORMALITE.FORREMMETHOD%TYPE,
        SFORREMPERIODBEFORE      IN     FORMALITE.FORREMPERIODBEFORE%TYPE,
        SFORREMMULTIPLEBEFORE    IN     FORMALITE.FORREMMULTIPLEBEFORE%TYPE,
        SFORREMPERIODAFTER       IN     FORMALITE.FORREMPERIODAFTER%TYPE,
        SFORREMMULTIPLEAFTER     IN     FORMALITE.FORREMMULTIPLEAFTER%TYPE,
        SFORDTFREQUENCYTIME      IN     FORMALITE.FORDTFREQUENCYTIME%TYPE,
        SFORPROCRUN              IN     FORMALITE.FORPROCRUN%TYPE,
        SFORMESSAGE              IN     FORMALITE.FORMESSAGE%TYPE,
        SCALID                   IN     FORMALITE.CALID%TYPE,
        SRECURRENCETYPE          IN     VARCHAR2,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            SELECT SEQ_FORID.NEXTVAL INTO NFORID FROM DUAL;

            INSERT INTO FORMALITE (TACCODE,
                                   FORID,
                                   FORCODE,
                                   FORDELAIEMIS,
                                   FORFLAGDOCEMIS,
                                   FORFLAGREPONSE,
                                   FORDELAIREP,
                                   FORFLAGFORRAPPEL,
                                   FORFLAGOBLIG,
                                   FORTYPEDATE,
                                   FORDEST,
                                   FORMODELANCEMENT,
                                   FORIDRAPPEL,
                                   UGECODE,
                                   FORFLAGRECURRENT,
                                   FORPERIODE,
                                   FORMULTIPLE,
                                   FORJOUR,
                                   FORMOIS,
                                   FORDELAIREACTIVATION,
                                   FORPRIORITY,
                                   FORPEREMIS,
                                   FORPERACT,
                                   FORPERREP,
                                   FORPERREPONSE,
                                   FORTYPE,
                                   FORTYPEMSG,
                                   ANMID,
                                   FORTELTYPE,
                                   FORFLAGREMINDER,
                                   FORREMMETHOD,
                                   FORREMPERIODBEFORE,
                                   FORREMMULTIPLEBEFORE,
                                   FORREMPERIODAFTER,
                                   FORREMMULTIPLEAFTER,
                                   FORDTFREQUENCYTIME,
                                   FORPROCRUN,
                                   FORMESSAGE,
                                   CALID,
                                   FORTYPERECURRENCE)
                 VALUES (SACT,
                         NFORID,
                         SFORCODE,
                         NFORMDELAIEMIS,
                         BFORMDOCEMIS,
                         NFORMREPONSE,
                         NFORMDELAIREP,
                         BFORMDOCRAPPEL,
                         BFORMOBLIG,
                         SFORMTYPEDATE,
                         SDEST,
                         SFORMMODEDECLENCH,
                         NFORMRAPPEL,
                         SUGECODE,
                         NFORFLAGRECURRENT,
                         SFORPERIODE,
                         NFORMULTIPLE,
                         NFORJOUR,
                         NFORMOIS,
                         NFORDELAIREACTIVATION,
                         SFORPRIORITY,
                         SFORPEREMIS,
                         SFORPERACT,
                         SFORPERREP,
                         SFORPERREPONSE,
                         SFORTYPE,
                         SFORMESSAGETYPE,
                         SFORMESSAGETEMPLATE,
                         SFORMESSAGETELECOMTYPE,
                         SFORFLAGREMINDER,
                         SFORREMMETHOD,
                         SFORREMPERIODBEFORE,
                         SFORREMMULTIPLEBEFORE,
                         SFORREMPERIODAFTER,
                         SFORREMMULTIPLEAFTER,
                         SFORDTFREQUENCYTIME,
                         SFORPROCRUN,
                         SFORMESSAGE,
                         SCALID,
                         SRECURRENCETYPE);

            INSERT INTO LANFORMALITE (FORID, FORLIBELLE, LANCODE)
                 VALUES (NFORID, SFORMLIBELLE, SLANGUE);

            NRETURNCODE := 0;

            /*  BEGIN
            INSERT INTO LKTSMFOR
            ( TSMSECTGESTION, TSMMETIER, FORID )
            SELECT DISTINCT A.TSMSECTGESTION, A.TSMMETIER, nMaxForId
            FROM UTITSM A
            WHERE NOT EXISTS ( SELECT 1
            FROM LKTSMFOR B
            WHERE B.FORID = nMaxForId AND B.TSMSECTGESTION = A.TSMSECTGESTION AND B.TSMMETIER = A.TSMMETIER );
            EXCEPTION
            WHEN OTHERS THEN
            NULL;
            END;*/
            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TABLES_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TABLES_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_GESFORMALITE;

    -- update Task management
    PROCEDURE U_GESFORMALITE (
        NFORMDELAIEMIS           IN     FORMALITE.FORDELAIEMIS%TYPE,
        BFORMDOCEMIS             IN     FORMALITE.FORFLAGDOCEMIS%TYPE,
        NFORMREPONSE             IN     FORMALITE.FORFLAGREPONSE%TYPE,
        NFORMDELAIREP            IN     FORMALITE.FORDELAIREP%TYPE,
        BFORMDOCRAPPEL           IN     FORMALITE.FORFLAGFORRAPPEL%TYPE,
        BFORMOBLIG               IN     FORMALITE.FORFLAGOBLIG%TYPE,
        SFORMTYPEDATE            IN     FORMALITE.FORTYPEDATE%TYPE,
        SFORMMODEDECLENCH        IN     FORMALITE.FORMODELANCEMENT%TYPE,
        NFORMRAPPEL              IN     FORMALITE.FORIDRAPPEL%TYPE,
        NFORFLAGRECURRENT        IN     FORMALITE.FORFLAGRECURRENT%TYPE,
        SFORPERIODE              IN     FORMALITE.FORPERIODE%TYPE,
        NFORMULTIPLE             IN     FORMALITE.FORMULTIPLE%TYPE,
        NFORJOUR                 IN     FORMALITE.FORJOUR%TYPE,
        NFORMOIS                 IN     FORMALITE.FORMOIS%TYPE,
        NFORDELAIREACTIVATION    IN     FORMALITE.FORDELAIREACTIVATION%TYPE,
        NFORID                   IN     FORMALITE.FORID%TYPE,
        SFORMLIBELLE             IN     VARCHAR2, --combo DLGGESFORMALITE_CMBACTFORM display value
        SLANGUE                  IN     VARCHAR2,             --user container
        SFORPRIORITY             IN     FORMALITE.FORPRIORITY%TYPE,
        SFORPEREMIS              IN     FORMALITE.FORPEREMIS%TYPE,
        SFORPERACT               IN     FORMALITE.FORPERACT%TYPE,
        SFORPERREP               IN     FORMALITE.FORPERREP%TYPE,
        SFORPERREPONSE           IN     FORMALITE.FORPERREPONSE%TYPE,
        SFORTYPE                 IN     FORMALITE.FORTYPE%TYPE,
        SFORMESSAGETYPE          IN     FORMALITE.FORTYPEMSG%TYPE,
        SFORMESSAGETEMPLATE      IN     FORMALITE.ANMID%TYPE,
        SFORMESSAGETELECOMTYPE   IN     FORMALITE.FORTELTYPE%TYPE,
        SFORFLAGREMINDER         IN     FORMALITE.FORFLAGREMINDER%TYPE,
        SFORREMMETHOD            IN     FORMALITE.FORREMMETHOD%TYPE,
        SFORREMPERIODBEFORE      IN     FORMALITE.FORREMPERIODBEFORE%TYPE,
        SFORREMMULTIPLEBEFORE    IN     FORMALITE.FORREMMULTIPLEBEFORE%TYPE,
        SFORREMPERIODAFTER       IN     FORMALITE.FORREMPERIODAFTER%TYPE,
        SFORREMMULTIPLEAFTER     IN     FORMALITE.FORREMMULTIPLEAFTER%TYPE,
        SFORDTFREQUENCYTIME      IN     FORMALITE.FORDTFREQUENCYTIME%TYPE,
        SFORPROCRUN              IN     FORMALITE.FORPROCRUN%TYPE,
        SFORMESSAGE              IN     FORMALITE.FORMESSAGE%TYPE,
        SCALID                   IN     FORMALITE.CALID%TYPE,
        SRECURRENCETYPE          IN     VARCHAR2,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        UPDATE FORMALITE
           SET FORDELAIEMIS = NFORMDELAIEMIS,
               FORFLAGDOCEMIS = BFORMDOCEMIS,
               FORFLAGREPONSE = NFORMREPONSE,
               FORDELAIREP = NFORMDELAIREP,
               FORFLAGFORRAPPEL = BFORMDOCRAPPEL,
               FORFLAGOBLIG = BFORMOBLIG,
               FORTYPEDATE = SFORMTYPEDATE,
               FORMODELANCEMENT = SFORMMODEDECLENCH,
               FORIDRAPPEL = NFORMRAPPEL,
               FORFLAGRECURRENT = NFORFLAGRECURRENT,
               FORPERIODE = SFORPERIODE,
               FORMULTIPLE = NFORMULTIPLE,
               FORJOUR = NFORJOUR,
               FORMOIS = NFORMOIS,
               FORDELAIREACTIVATION = NFORDELAIREACTIVATION,
               FORPRIORITY = SFORPRIORITY,
               FORPEREMIS = SFORPEREMIS,
               FORPERACT = SFORPERACT,
               FORPERREP = SFORPERREP,
               FORPERREPONSE = SFORPERREPONSE,
               FORTYPE = SFORTYPE,
               FORTYPEMSG = SFORMESSAGETYPE,
               ANMID = SFORMESSAGETEMPLATE,
               FORTELTYPE = SFORMESSAGETELECOMTYPE,
               FORFLAGREMINDER = SFORFLAGREMINDER,
               FORREMMETHOD = SFORREMMETHOD,
               FORREMPERIODBEFORE = SFORREMPERIODBEFORE,
               FORREMMULTIPLEBEFORE = SFORREMMULTIPLEBEFORE,
               FORREMPERIODAFTER = SFORREMPERIODAFTER,
               FORREMMULTIPLEAFTER = SFORREMMULTIPLEAFTER,
               FORDTFREQUENCYTIME = SFORDTFREQUENCYTIME,
               FORPROCRUN = SFORPROCRUN,
               FORMESSAGE = SFORMESSAGE,
               CALID = SCALID,
               FORTYPERECURRENCE = SRECURRENCETYPE
         WHERE FORID = NFORID;

        UPDATE LANFORMALITE
           SET FORLIBELLE = SFORMLIBELLE
         WHERE FORID = NFORID AND LANCODE = SLANGUE;

        NRETURNCODE := 0;
    END U_GESFORMALITE;

    -- delete task management
    PROCEDURE D_GESFORMALITE (NFORID        IN     FORMALITE.FORID%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LANFORMALITE
              WHERE FORID = NFORID;

        DELETE FROM L1FORMALITE
              WHERE FORID = NFORID;

        DELETE FROM L1FORMALITE
              WHERE FORIDLIEE = NFORID;

        DELETE FROM FORMALITE
              WHERE FORID = NFORID;

        DELETE FROM FORDESTINATION
              WHERE FORID = NFORID;

        DELETE FROM LKFDERUL
              WHERE FORID = NFORID;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TABLES_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_GESFORMALITE;

    PROCEDURE I_L1FORMALITE (NFORID        IN     L1FORMALITE.FORID%TYPE,
                             NFORIDLIEE    IN     L1FORMALITE.FORIDLIEE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO L1FORMALITE (FORID, FORIDLIEE)
             VALUES (NFORID, NFORIDLIEE);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TABLES_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_L1FORMALITE;

    PROCEDURE D_L1FORMALITE (NFORID        IN     L1FORMALITE.FORID%TYPE,
                             NFORIDLIEE    IN     L1FORMALITE.FORIDLIEE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM L1FORMALITE
              WHERE FORID = NFORID AND FORIDLIEE = NFORIDLIEE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_TABLES_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_TABLES_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_L1FORMALITE;

    PROCEDURE I_LKTSMFOR (
        STSMSECTGESTION          LKTSMFOR.TSMSECTGESTION%TYPE,
        STSMMETIER               LKTSMFOR.TSMMETIER%TYPE,
        NFORID                   LKTSMFOR.FORID%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTSMFOR (TSMSECTGESTION, TSMMETIER, FORID)
                 VALUES (STSMSECTGESTION, STSMMETIER, NFORID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_TFO_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TFO_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TFO_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TFO_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTSMFOR;

    PROCEDURE D_LKTSMFOR (
        STSMSECTGESTION          LKTSMFOR.TSMSECTGESTION%TYPE,
        STSMMETIER               LKTSMFOR.TSMMETIER%TYPE,
        NFORID                   LKTSMFOR.FORID%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTSMFOR
                  WHERE     TSMSECTGESTION = STSMSECTGESTION
                        AND TSMMETIER = STSMMETIER
                        AND FORID = NFORID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TFO_FOUND_CONST;
        END;
    END D_LKTSMFOR;

    PROCEDURE I_LKFORRUL (NFORID                LKFORRUL.FORID%TYPE,
                          NRULID                LKFORRUL.RULID%TYPE,
                          NFRUPRIORITY          LKFORRUL.FRUPRIORITY%TYPE,
                          NFRULINKTYPE          LKFORRUL.FRULINKTYPE%TYPE,
                          NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            N_CNT   NUMBER;
        BEGIN
            SELECT COUNT (*)
              INTO N_CNT
              FROM LKFORRUL
             WHERE FORID = NFORID AND RULID = NRULID;

            IF N_CNT > 0
            THEN
                UPDATE LKFORRUL
                   SET FRULINKTYPE = NFRULINKTYPE, FRUPRIORITY = NFRUPRIORITY
                 WHERE FORID = NFORID AND RULID = NRULID;
            ELSE
                INSERT INTO LKFORRUL (FORID,
                                      RULID,
                                      FRUPRIORITY,
                                      FRULINKTYPE)
                     VALUES (NFORID,
                             NRULID,
                             NFRUPRIORITY,
                             NFRULINKTYPE);

                NRETURNCODE := 0;
            END IF;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_TFO_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TFO_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TFO_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TFO_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKFORRUL;

    PROCEDURE D_LKFORRUL (NFORID               LKFORRUL.FORID%TYPE,
                          NRULID               LKFORRUL.RULID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKFORRUL
                  WHERE FORID = NFORID AND RULID = NRULID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TFO_FOUND_CONST;
        END;
    END D_LKFORRUL;

    PROCEDURE U_NAP (
        SNAPCODE                     NAP.NAPCODE%TYPE,
        SNAPLIBELLE                  LANNAP.NAPLIBELLE%TYPE,
        NNAPTXSAUPOUDRAGE            NAP.NAPTXSAUPOUDRAGE%TYPE, -- CV-07062004 Modif de base
        NNAPMTDEDUCTIBLECAP          NAP.NAPMTDEDUCTIBLECAP%TYPE,
        SDEVCODE                     NAP.DEVCODE%TYPE,
        SLANGUE                      LANGUE.LANCODE%TYPE,
        SPAYCODE                     NAP.PAYCODE%TYPE, --LG 14/09/04 modif de base
        SNAPTYPE                     NAP.NAPTYPE%TYPE,   --CFS 43115 20/7/2010
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            UPDATE NAP
               SET NAPTXSAUPOUDRAGE = NNAPTXSAUPOUDRAGE,
                   NAPTYPE = SNAPTYPE,
                   NAPMTDEDUCTIBLECAP = NNAPMTDEDUCTIBLECAP,
                   DEVCODE = SDEVCODE
             WHERE NAPCODE = SNAPCODE AND PAYCODE = SPAYCODE;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANNAP
             WHERE     NAPCODE = SNAPCODE
                   AND PAYCODE = SPAYCODE
                   AND LANCODE = SLANGUE;

            IF NCOUNT != 0
            THEN
                UPDATE LANNAP
                   SET NAPLIBELLE = SNAPLIBELLE
                 WHERE     NAPCODE = SNAPCODE
                       AND PAYCODE = SPAYCODE
                       AND LANCODE = SLANGUE;
            ELSE
                INSERT INTO LANNAP (NAPCODE,
                                    PAYCODE,
                                    NAPLIBELLE,
                                    LANCODE)
                     VALUES (SNAPCODE,
                             SPAYCODE,
                             SNAPLIBELLE,
                             SLANGUE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NAP_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_NAP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_NAP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_NAP;

    PROCEDURE D_LKGROTACAGE (SWGROUPE      IN     LKGROTACAGE.GROCODE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKGROTACAGE
                  WHERE GROCODE = SWGROUPE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TABLES_CONST;
        END;
    END D_LKGROTACAGE;

    PROCEDURE I_LKGROTACAGE (SGROCODE             LKGROTACAGE.GROCODE%TYPE,
                             NACTID               LKGROTACAGE.ACTID%TYPE,
                             STACCODE             LKGROTACAGE.TACCODE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKGROTACAGE (GROCODE, ACTID, TACCODE)
                 VALUES (SGROCODE, NACTID, STACCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TABLES_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TABLES_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKGROTACAGE;

    PROCEDURE I_BUSSINESSTYPE (NACTID               TACACTGESTION.ACTID%TYPE,
                               STACCODE             TACACTGESTION.TACCODE%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TACACTGESTION (ACTID, TACCODE)
                 VALUES (NACTID, STACCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_BUSSINESSTYPE;

    PROCEDURE D_BUSSINESSTYPE (NACTID               TACACTGESTION.ACTID%TYPE,
                               STACCODE             TACACTGESTION.TACCODE%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKGROTACAGE
                  WHERE ACTID = NACTID AND TACCODE = STACCODE;

            DELETE FROM TACACTGESTION
                  WHERE ACTID = NACTID AND TACCODE = STACCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_BUSSINESSTYPE;

    PROCEDURE I_TEVPHA (SMTEVDEST     IN     TEVPHA.TEVDEST%TYPE,
                        SMTMOMODULE   IN     TEVPHA.TMOMODULE%TYPE,
                        SMTEVCODE     IN     TEVPHA.TMFFONCTION%TYPE,
                        SMTACCODE     IN     TEVPHA.TACCODE%TYPE,
                        SMPHACODE     IN     TEVPHA.PHACODE%TYPE,
                        SMPHADEST     IN     TEVPHA.PHADEST%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO TEVPHA (TEVDEST,
                            TMOMODULE,
                            TMFFONCTION,
                            TACCODE,
                            PHACODE,
                            PHADEST)
             VALUES (SMTEVDEST,
                     SMTMOMODULE,
                     SMTEVCODE,
                     SMTACCODE,
                     SMPHACODE,
                     SMPHADEST);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_TEVPHA;

    PROCEDURE D_TEVPHA (SMTEVDEST     IN     TEVPHA.TEVDEST%TYPE,
                        SMTMOMODULE   IN     TEVPHA.TMOMODULE%TYPE,
                        SMTEVCODE     IN     TEVPHA.TMFFONCTION%TYPE,
                        SMTACCODE     IN     TEVPHA.TACCODE%TYPE,
                        SMPHACODE     IN     TEVPHA.PHACODE%TYPE,
                        SMPHADEST     IN     TEVPHA.PHADEST%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM TEVPHA
              WHERE     TEVDEST = SMTEVDEST
                    AND TMOMODULE = SMTMOMODULE
                    AND TMFFONCTION = SMTEVCODE
                    AND TACCODE = SMTACCODE
                    AND PHACODE = SMPHACODE
                    AND PHADEST = SMPHADEST;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_REL_KEY_CONST;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END D_TEVPHA;

    PROCEDURE I_LKTUSTTR (STUPCODE             LKTUSTTR.TUPCODE%TYPE,
                          STTPCODE             LKTUSTTR.TTPCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTUSTTR (TUSNOM,
                                  TUPCODE,
                                  TTRNOM,
                                  TTPCODE)
                 VALUES ('SINNATURE',
                         STUPCODE,
                         'ASSURNATURE',
                         STTPCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTUSTTR;

    PROCEDURE D_LKTUSTTR (STUPCODE             LKTUSTTR.TUPCODE%TYPE,
                          STTPCODE             LKTUSTTR.TTPCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTUSTTR
                  WHERE     TUSNOM = 'SINNATURE'
                        AND TTRNOM = 'ASSURNATURE'
                        AND TUPCODE = STUPCODE
                        AND TTPCODE = STTPCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_LKTUSTTR;

    -- Insert and delete for pref on tasks
    PROCEDURE INSERT_FORFICHE (NFORID               FORFICHE.FORID%TYPE, -- from TO
                               SWPROFIL             LKTPGTACPHAJAL.TPGCODE%TYPE, -- List Selection as String
                               SWRF                 FORFICHE.FFICODERF%TYPE, -- as String Business logic
                               NDOCID               FORFICHE.DOCID%TYPE, -- from TO off issued doc combo
                               NDE                  FORFICHE.FFIDELAIEMIS%TYPE, -- from TO
                               SDESTCODE            TTRPARAM.TTPCODE%TYPE, --Combo destination as String
                               SPHACODE             PHASE.PHACODE%TYPE, -- as String Combo
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO FORFICHE (FORID,
                                  TPGCODE,
                                  FFICODERF,
                                  DOCID,
                                  FFIDELAIEMIS,
                                  PHADEST,
                                  PHACODE)
                 VALUES (NFORID,
                         SWPROFIL,
                         SWRF,
                         NDOCID,
                         NDE,
                         SDESTCODE,
                         SPHACODE);

            NRETURNCODE := 0;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_IMP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END INSERT_FORFICHE;

    PROCEDURE DELETE_FORFICHE (NFORID               FORFICHE.FORID%TYPE, -- from TO
                               SWRF                 FORFICHE.FFICODERF%TYPE, -- send as String
                               SWPROFIL             LKTPGTACPHAJAL.TPGCODE%TYPE, -- as String as List selected value
                               SDESTCODE            TTRPARAM.TTPCODE%TYPE, --  as String from dest combo
                               SPHACODE             PHASE.PHACODE%TYPE, -- as String
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM FORFICHE
                  WHERE     FORID = NFORID
                        AND FFICODERF = SWRF
                        AND TPGCODE = SWPROFIL
                        AND PHADEST = SDESTCODE
                        AND PHACODE = SPHACODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_IMP_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_IMP_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END DELETE_FORFICHE;

    PROCEDURE I_JALPERSTATUPDATE (
        SWENTITEMAITREJALPERSTAT   IN     PHAJAL.PHADEST%TYPE,
        SWSTATCODE                 IN     PHAJAL.PHACODE%TYPE,
        COLJAL                     IN     PHAJAL.JALCODE%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO PHAJAL (PHACODE, JALCODE, PHADEST)
                 VALUES (SWSTATCODE, COLJAL, SWENTITEMAITREJALPERSTAT);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TABLES_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TABLES_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_JALPERSTATUPDATE;

    PROCEDURE D_JALPERSTATUPDATE (
        SWENTITEMAITREJALPERSTAT   IN     PHAJAL.PHADEST%TYPE,
        SWSTATCODE                 IN     PHAJAL.PHACODE%TYPE,
        COLJAL                     IN     PHAJAL.JALCODE%TYPE,
        NRETURNCODE                IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTPGTACPHAJAL
                  WHERE     PHACODE = SWSTATCODE
                        AND JALCODE = COLJAL
                        AND PHADEST = SWENTITEMAITREJALPERSTAT;

            DELETE FROM PHAJAL
                  WHERE     PHACODE = SWSTATCODE
                        AND JALCODE = COLJAL
                        AND PHADEST = SWENTITEMAITREJALPERSTAT;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TABLES_CONST;
        END;
    END D_JALPERSTATUPDATE;

    PROCEDURE D_LKTSMFOR_ALL (NFORID               LKTSMFOR.FORID%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTSMFOR
                  WHERE FORID = NFORID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TFO_FOUND_CONST;
        END;
    END D_LKTSMFOR_ALL;

    PROCEDURE I_LKRELRUL (NACTID               LKRELRUL.ACTID%TYPE,
                          STACCODE             LKRELRUL.TACCODE%TYPE,
                          SROLCODE             LKRELRUL.ROLCODE%TYPE,
                          NRELORDRE            LKRELRUL.RELORDRE%TYPE,
                          NRULID               LKRELRUL.RULID%TYPE,
                          SRELCODE             LKRELRUL.RELCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKRELRUL (ACTID,
                                  TACCODE,
                                  ROLCODE,
                                  RELORDRE,
                                  RULID,
                                  RELCODE)
                 VALUES (NACTID,
                         STACCODE,
                         SROLCODE,
                         NRELORDRE,
                         NRULID,
                         SRELCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_RUL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_RUL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RUL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_RUL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKRELRUL;

    PROCEDURE D_LKRELRUL (NACTID               LKRELRUL.ACTID%TYPE,
                          STACCODE             LKRELRUL.TACCODE%TYPE,
                          SROLCODE             LKRELRUL.ROLCODE%TYPE,
                          NRELORDRE            LKRELRUL.RELORDRE%TYPE,
                          NRULID               LKRELRUL.RULID%TYPE,
                          SRELCODE             LKRELRUL.RELCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKRELRUL
                  WHERE     ACTID = NACTID
                        AND TACCODE = STACCODE
                        AND ROLCODE = SROLCODE
                        AND RELORDRE = NRELORDRE
                        AND RULID = NRULID
                        AND RELCODE = SRELCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_RUL_FOUND_CONST;
        END;
    END D_LKRELRUL;

    PROCEDURE D_RELANCE (NACTID               RELANCE.ACTID%TYPE,
                         STACCODE             RELANCE.TACCODE%TYPE,
                         SROLCODE             RELANCE.ROLCODE%TYPE,
                         NRELORDRE            RELANCE.RELORDRE%TYPE,
                         SRELCODE             RELANCE.RELCODE%TYPE,
                         NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKRELRUL
                  WHERE     ACTID = NACTID
                        AND TACCODE = STACCODE
                        AND ROLCODE = SROLCODE
                        AND RELORDRE = NRELORDRE
                        AND RELCODE = SRELCODE;

            DELETE FROM LKRELFOR
                  WHERE     ACTID = NACTID
                        AND TACCODE = STACCODE
                        AND ROLCODE = SROLCODE
                        AND RELORDRE = NRELORDRE
                        AND RELCODE = SRELCODE;

            DELETE FROM RELANCE
                  WHERE     ACTID = NACTID
                        AND TACCODE = STACCODE
                        AND ROLCODE = SROLCODE
                        AND RELORDRE = NRELORDRE
                        AND RELCODE = SRELCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_REL_FOUND_CONST;
        END;
    END D_RELANCE;

    PROCEDURE I_PLANCOMPTABLE (
        NPCOID                   PLANCOMPTABLE.PCOID%TYPE,
        NACTID            IN     NUMBER,                           --from tree
        SCODECOMPTA       IN     VARCHAR,                          --from tree
        SPCOLIBELLE              PLANCOMPTABLE.PCOLIBELLE%TYPE,
        SPCOCOMPTE               PLANCOMPTABLE.PCOCOMPTE%TYPE,
        SPCOCLASSE               PLANCOMPTABLE.PCOCLASSE%TYPE,
        NPCOFLAGAGREGE           PLANCOMPTABLE.PCOFLAGAGREGE%TYPE,
        NPCOSAPACCOUNT           PLANCOMPTABLE.PCOSAPACCOUNT%TYPE,
        NPCOSAPLABEL             PLANCOMPTABLE.PCOSAPLABEL%TYPE,
        NPCOSAPTAX               PLANCOMPTABLE.PCOSAPTAX%TYPE,
        NPCOSAPFSTGROUP          PLANCOMPTABLE.PCOSAPFSTGROUP%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            MAXPCOID   PLANCOMPTABLE.PCOID%TYPE;
            SROWID     ROWID;
        BEGIN
            --SELECT MAX(PCOID) INTO maxPcoId
            --FROM PLANCOMPTABLE;
            --maxPcoId := maxPcoId + 1.0;
            SELECT SEQ_PCOID.NEXTVAL INTO MAXPCOID FROM DUAL;

            INSERT INTO PLANCOMPTABLE (PCOID,
                                       ACTID,
                                       PCOCOMPTA,
                                       PCOLIBELLE,
                                       PCOCOMPTE,
                                       PCOCLASSE,
                                       PCOFLAGAGREGE,
                                       PCOSAPACCOUNT,
                                       PCOSAPLABEL,
                                       PCOSAPTAX,
                                       PCOSAPFSTGROUP)
                 VALUES (MAXPCOID,
                         NACTID,
                         SCODECOMPTA,
                         SPCOLIBELLE,
                         SPCOCOMPTE,
                         SPCOCLASSE,
                         NPCOFLAGAGREGE,
                         NPCOSAPACCOUNT,
                         NPCOSAPLABEL,
                         NPCOSAPTAX,
                         NPCOSAPFSTGROUP);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM PLANCOMPTABLE
                 WHERE PCOID = MAXPCOID;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('PLANCOMPTABLE',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REC_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_PLANCOMPTABLE;

    -- update plancomptable
    PROCEDURE U_PLANCOMPTABLE (
        NPCOID                    PLANCOMPTABLE.PCOID%TYPE,
        SPCOLIBELLE               PLANCOMPTABLE.PCOLIBELLE%TYPE,
        SPCOCOMPTE                PLANCOMPTABLE.PCOCOMPTE%TYPE,
        SPCOCLASSE                PLANCOMPTABLE.PCOCLASSE%TYPE,
        NPCOFLAGAGREGE            PLANCOMPTABLE.PCOFLAGAGREGE%TYPE,
        SPCOBVTYPE                PLANCOMPTABLE.PCOBVTYPE%TYPE,
        NPCOFLAGBVIFRS            PLANCOMPTABLE.PCOFLAGBVIFRS%TYPE,
        NPCOFLAGBVGAAP            PLANCOMPTABLE.PCOFLAGBVGAAP%TYPE,
        NPCOFLAGGBVTAX            PLANCOMPTABLE.PCOFLAGBVTAX%TYPE,
        NPCOFLAGGBVSTAT           PLANCOMPTABLE.PCOFLAGBVSTAT%TYPE,
        NPCOFLAGBVCONTRA          PLANCOMPTABLE.PCOFLAGBVCONTRA%TYPE,
        NPCOSAPACCOUNT            PLANCOMPTABLE.PCOSAPACCOUNT%TYPE,
        NPCOSAPLABEL              PLANCOMPTABLE.PCOSAPLABEL%TYPE,
        NPCOSAPTAX                PLANCOMPTABLE.PCOSAPTAX%TYPE,
        NPCOSAPFSTGROUP           PLANCOMPTABLE.PCOSAPFSTGROUP%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            UPDATE PLANCOMPTABLE
               SET PCOLIBELLE = SPCOLIBELLE,
                   PCOFLAGAGREGE = NPCOFLAGAGREGE,
                   PCOCOMPTE = SPCOCOMPTE,
                   PCOCLASSE = SPCOCLASSE,
                   PCOBVTYPE = SPCOBVTYPE,
                   PCOFLAGBVIFRS = NPCOFLAGBVIFRS,
                   PCOFLAGBVGAAP = NPCOFLAGBVGAAP,
                   PCOFLAGBVTAX = NPCOFLAGGBVTAX,
                   PCOFLAGBVSTAT = NPCOFLAGGBVSTAT,
                   PCOFLAGBVCONTRA = NPCOFLAGBVCONTRA,
                   PCOSAPACCOUNT = NPCOSAPACCOUNT,
                   PCOSAPLABEL = NPCOSAPLABEL,
                   PCOSAPTAX = NPCOSAPTAX,
                   PCOSAPFSTGROUP = NPCOSAPFSTGROUP
             WHERE PCOID = NPCOID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM PLANCOMPTABLE
                 WHERE PCOID = NPCOID;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('PLANCOMPTABLE',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REC_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PLANCOMPTABLE;

    -- delete plancomptable
    PROCEDURE D_PLANCOMPTABLE (NPCOID               PLANCOMPTABLE.PCOID%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            NRETURNCODE := 0;

            SELECT ROWID
              INTO SROWID
              FROM PLANCOMPTABLE
             WHERE PCOID = NPCOID;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('PLANCOMPTABLE',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM PLANCOMPTABLE
                  WHERE PCOID = NPCOID;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_REC_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_PLANCOMPTABLE;

    -- Insert CROLIGDETAIL table
    PROCEDURE I_CROLIGDETAIL (
        STLDCHAMP               CROLIGDETAIL.TLDCHAMP%TYPE,
        NACTID           IN     NUMBER,
        SCJOCOMPTA       IN     VARCHAR,
        STCRCODE         IN     VARCHAR,
        NTCLORDRE        IN     NUMBER,
        NCLIORDRE        IN     NUMBER,
        NCLDORDRE               CROLIGDETAIL.CLDORDRE%TYPE,
        NCLDLONGUEUR            CROLIGDETAIL.CLDLONGUEUR%TYPE,
        SCLDCONVERSION          CROLIGDETAIL.CLDCONVERSION%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            INSERT INTO CROLIGDETAIL (TLDCHAMP,
                                      ACTID,
                                      CJOCOMPTA,
                                      TCRCODE,
                                      TCLORDRE,
                                      CLIORDRE,
                                      CLDORDRE,
                                      CLDLONGUEUR,
                                      CLDCONVERSION)
                 VALUES (STLDCHAMP,
                         NACTID,
                         SCJOCOMPTA,
                         STCRCODE,
                         NTCLORDRE,
                         NCLIORDRE,
                         NCLDORDRE,
                         NCLDLONGUEUR,
                         SCLDCONVERSION);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM CROLIGDETAIL
                 WHERE     TLDCHAMP = STLDCHAMP
                       AND ACTID = NACTID
                       AND CJOCOMPTA = SCJOCOMPTA
                       AND TCRCODE = STCRCODE
                       AND CLDORDRE = NCLDORDRE
                       AND TCLORDRE = NTCLORDRE
                       AND CLIORDRE = NCLIORDRE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('CROLIGDETAIL',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        -- EXCEPTION
        --  WHEN ERR_PARENT_NOT_FOUND THEN
        --        nReturnCode := ERR_PARENT_CLD_FOUND_CONST;
        --   WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_CLD_KEY_CONST;
        -- WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --      nReturnCode := ERR_NULL_CLD_KEY_CONST;
        --  WHEN OTHERS THEN
        --       nReturnCode := -1 * SQLCODE;
        END;
    END I_CROLIGDETAIL;

    --update CROLIGDETAIL table
    PROCEDURE U_CROLIGDETAIL (
        STLDCHAMP               CROLIGDETAIL.TLDCHAMP%TYPE,
        NACTID           IN     NUMBER,
        SCJOCOMPTA       IN     VARCHAR,
        STCRCODE         IN     VARCHAR,
        NTCLORDRE        IN     NUMBER,
        NCLIORDRE        IN     NUMBER,
        NCLDORDRE               CROLIGDETAIL.CLDORDRE%TYPE,
        NCLDLONGUEUR            CROLIGDETAIL.CLDLONGUEUR%TYPE,
        SCLDCONVERSION          CROLIGDETAIL.CLDCONVERSION%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            UPDATE CROLIGDETAIL
               SET CLDLONGUEUR = NCLDLONGUEUR, CLDCONVERSION = SCLDCONVERSION
             WHERE     TLDCHAMP = STLDCHAMP
                   AND ACTID = NACTID
                   AND CJOCOMPTA = SCJOCOMPTA
                   AND TCRCODE = STCRCODE
                   AND CLDORDRE = NCLDORDRE
                   AND TCLORDRE = NTCLORDRE
                   AND CLIORDRE = NCLIORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM CROLIGDETAIL
                 WHERE     TLDCHAMP = STLDCHAMP
                       AND ACTID = NACTID
                       AND CJOCOMPTA = SCJOCOMPTA
                       AND TCRCODE = STCRCODE
                       AND CLDORDRE = NCLDORDRE
                       AND TCLORDRE = NTCLORDRE
                       AND CLIORDRE = NCLIORDRE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('CROLIGDETAIL',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        -- EXCEPTION
        --  WHEN ERR_PARENT_NOT_FOUND THEN
        --       nReturnCode := ERR_PARENT_CLD_FOUND_CONST;
        --  WHEN ERR_I_NULL_MANDATORY_KEY THEN
        --       nReturnCode := ERR_NULL_CLD_KEY_CONST;
        --WHEN ERR_U_NULL_MANDATORY_KEY THEN
        --      nReturnCode := ERR_NULL_CLD_KEY_CONST;
        -- WHEN OTHERS THEN
        --       nReturnCode := -1 * SQLCODE;
        END;
    END U_CROLIGDETAIL;

    --delete CROLIGDETAIL table
    PROCEDURE D_CROLIGDETAIL (STLDCHAMP            CROLIGDETAIL.TLDCHAMP%TYPE,
                              NACTID        IN     NUMBER,
                              SCJOCOMPTA    IN     VARCHAR,
                              STCRCODE      IN     VARCHAR,
                              NTCLORDRE     IN     NUMBER,
                              NCLIORDRE     IN     NUMBER,
                              NCLDORDRE            CROLIGDETAIL.CLDORDRE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            SELECT ROWID
              INTO SROWID
              FROM CROLIGDETAIL
             WHERE     TLDCHAMP = STLDCHAMP
                   AND ACTID = NACTID
                   AND CJOCOMPTA = SCJOCOMPTA
                   AND TCRCODE = STCRCODE
                   AND CLDORDRE = NCLDORDRE
                   AND TCLORDRE = NTCLORDRE
                   AND CLIORDRE = NCLIORDRE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('CROLIGDETAIL',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM CROLIGDETAIL
                  WHERE     TLDCHAMP = STLDCHAMP
                        AND ACTID = NACTID
                        AND CJOCOMPTA = SCJOCOMPTA
                        AND TCRCODE = STCRCODE
                        AND TCLORDRE = NTCLORDRE
                        AND CLIORDRE = NCLIORDRE
                        AND CLDORDRE = NCLDORDRE;

            NRETURNCODE := 0;
        --   IF SQL%ROWCOUNT=0 THEN
        --     nReturnCode := ERR_NO_ROWS_CONST;
        --    END IF;
        -- EXCEPTION
        --    WHEN ERR_CHILD_FOUND THEN
        --     nReturnCode := ERR_CHILD_CLD_FOUND_CONST;
        END;
    END D_CROLIGDETAIL;

    --------------------added for updown logic start migrated on 12th june--------
    PROCEDURE D_CROLIGDETAILUPDOWN (
        STLDCHAMP            CROLIGDETAIL.TLDCHAMP%TYPE,
        NACTID        IN     NUMBER,
        SCJOCOMPTA    IN     VARCHAR,
        STCRCODE      IN     VARCHAR,
        NTCLORDRE     IN     NUMBER,
        NCLIORDRE     IN     NUMBER,
        NCLDORDRE            CROLIGDETAIL.CLDORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM CROLIGDETAIL
                  WHERE     ACTID = NACTID
                        AND CJOCOMPTA = SCJOCOMPTA
                        AND TCRCODE = STCRCODE
                        AND TCLORDRE = NTCLORDRE
                        AND CLIORDRE = NCLIORDRE;

            NRETURNCODE := 0;
        --   IF SQL%ROWCOUNT=0 THEN
        --     nReturnCode := ERR_NO_ROWS_CONST;
        --    END IF;
        -- EXCEPTION
        --    WHEN ERR_CHILD_FOUND THEN
        --     nReturnCode := ERR_CHILD_CLD_FOUND_CONST;
        END;
    END D_CROLIGDETAILUPDOWN;

    --------------------added for updown logic end--------
    -- CROLIGCONLIGNE fro split screen
    PROCEDURE I_CROLIGCONLIGNEFORSPLITOR (
        NACTID               CROLIGCONLIGNE.ACTID%TYPE,
        SCJOCOMPTA           CROLIGCONLIGNE.CJOCOMPTA%TYPE,
        STCRCODE             CROLIGCONLIGNE.TCRCODE%TYPE,
        NTCLORDRE            CROLIGCONLIGNE.TCLORDRE%TYPE,
        NCLIORDRE            CROLIGCONLIGNE.CLIORDRE%TYPE,
        SCLCID               CROLIGCONLIGNE.CLCID%TYPE,
        NCCLORDRE            CROLIGCONLIGNE.CCLORDRE%TYPE,
        STLDCHAMP            CROLIGCONLIGNE.TLDCHAMP%TYPE,
        STLDCHAMP2           CROLIGCONLIGNE.TLDCHAMP2%TYPE,
        SCCLLIEN             CROLIGCONLIGNE.CCLLIEN%TYPE,
        SCCLOPER             CROLIGCONLIGNE.CCLOPER%TYPE,
        SCCLVALEUR           CROLIGCONLIGNE.CCLVALEUR%TYPE,
        DTCCLDTDEB           DATE,
        DTCCLDTFIN           DATE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            MAXCCLORDRE   CROLIGCONLIGNE.CCLORDRE%TYPE;
            NCOUNT        NUMBER := 0;
        BEGIN
            SELECT MAX (CCLORDRE) INTO MAXCCLORDRE FROM CROLIGCONLIGNE;

            IF (MAXCCLORDRE IS NULL)
            THEN
                MAXCCLORDRE := 1;
            ELSE
                MAXCCLORDRE := MAXCCLORDRE + 1;
            END IF;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM CROLIGCONDITION
             WHERE     TCRCODE = STCRCODE
                   AND TCLORDRE = NTCLORDRE
                   AND ACTID = NACTID
                   AND CJOCOMPTA = SCJOCOMPTA
                   AND TCRCODE = STCRCODE
                   AND CLIORDRE = NCLIORDRE
                   AND CLCID = SCLCID;

            IF (NCOUNT = 0)
            THEN
                INSERT INTO CROLIGCONDITION (ACTID,
                                             CJOCOMPTA,
                                             TCRCODE,
                                             TCLORDRE,
                                             CLIORDRE,
                                             CLCID,
                                             CLCJOURNAL,
                                             CLCDTDEB,
                                             CLCDTFIN,
                                             CLCFLAGGENERIQUE,
                                             PCOID)
                     VALUES (NACTID,
                             SCJOCOMPTA,
                             STCRCODE,
                             NTCLORDRE,
                             NCLIORDRE,
                             SCLCID,
                             NULL,
                             DTCCLDTDEB,
                             DTCCLDTFIN,
                             1,
                             NULL);
            END IF;

            INSERT INTO CROLIGCONLIGNE (ACTID,
                                        CJOCOMPTA,
                                        TCRCODE,
                                        TCLORDRE,
                                        CLIORDRE,
                                        CLCID,
                                        CCLORDRE,
                                        TLDCHAMP,
                                        TLDCHAMP2,
                                        CCLLIEN,
                                        CCLOPER,
                                        CCLVALEUR,
                                        CCLDTDEB,
                                        CCLDTFIN)
                 VALUES (NACTID,
                         SCJOCOMPTA,
                         STCRCODE,
                         NTCLORDRE,
                         NCLIORDRE,
                         SCLCID,
                         MAXCCLORDRE,
                         STLDCHAMP,
                         STLDCHAMP2,
                         SCCLLIEN,
                         SCCLOPER,
                         SCCLVALEUR,
                         DTCCLDTDEB,
                         DTCCLDTFIN);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CCL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_CCL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_CROLIGCONLIGNEFORSPLITOR;

    PROCEDURE I_TCRO (STCRCODE             TCRO.TCRCODE%TYPE,
                      STCRLIBELLE          LANTCRO.TCRLIBELLE%TYPE,
                      NRETURNCODE   IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            INSERT INTO TCRO (TCRCODE)
                 VALUES (STCRCODE);

            INSERT INTO LANTCRO (LANCODE, TCRCODE, TCRLIBELLE)
                 VALUES (SLANGUE, STCRCODE, STCRLIBELLE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_TCR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TCR_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCR_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCR_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TCRO;

    PROCEDURE U_TCRO (STCRCODE             TCRO.TCRCODE%TYPE,
                      STCRLIBELLE          LANTCRO.TCRLIBELLE%TYPE,
                      NRETURNCODE   IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            UPDATE LANTCRO
               SET TCRLIBELLE = STCRLIBELLE
             WHERE TCRCODE = STCRCODE AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_TCR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TCR_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCR_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCR_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TCRO;

    PROCEDURE D_TCRO (STCRCODE             TCRO.TCRCODE%TYPE,
                      SLANCODE      IN     LANGUE.LANCODE%TYPE,
                      NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM CROLIGCONLIGNE
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM CROLIGCONDITION
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM CROLIGAFFECTATION
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM CROLIGDETAIL
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM LANTCROLIGDETAIL
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM TCROLIGDETAIL
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM CROLIGNE
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM LANTCROLIGNE
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM TCROLIGNE
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM CROJOURNAL
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM LANTCRO
                  WHERE TCRCODE = STCRCODE;

            DELETE FROM TCRO
                  WHERE TCRCODE = STCRCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TCR_FOUND_CONST;
        END;
    END D_TCRO;

    PROCEDURE I_TCROLIGNE (STCRCODE             TCROLIGNE.TCRCODE%TYPE,
                           NTCLORDRE            TCROLIGNE.TCLORDRE%TYPE,
                           STCLSOURCE           TCROLIGNE.TCLSOURCE%TYPE,
                           STCLLIBELLE          LANTCROLIGNE.TCLLIBELLE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            INSERT INTO TCROLIGNE (TCRCODE, TCLORDRE, TCLSOURCE)
                 VALUES (STCRCODE, NTCLORDRE, STCLSOURCE);

            INSERT INTO LANTCROLIGNE (TCLLIBELLE,
                                      TCRCODE,
                                      TCLORDRE,
                                      LANCODE)
                 VALUES (STCLLIBELLE,
                         STCRCODE,
                         NTCLORDRE,
                         SLANGUE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_TCL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TCL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_TCROLIGNE;

    PROCEDURE U_TCROLIGNE (STCRCODE             TCROLIGNE.TCRCODE%TYPE,
                           NTCLORDRE            TCROLIGNE.TCLORDRE%TYPE,
                           STCLSOURCE           TCROLIGNE.TCLSOURCE%TYPE,
                           STCLLIBELLE          LANTCROLIGNE.TCLLIBELLE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LANTCROLIGNE
               SET TCLLIBELLE = STCLLIBELLE
             WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            UPDATE TCROLIGNE
               SET TCLSOURCE = STCLSOURCE
             WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_TCL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TCL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TCL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_TCROLIGNE;

    PROCEDURE D_TCROLIGNE (STCRCODE             TCROLIGNE.TCRCODE%TYPE,
                           NTCLORDRE            TCROLIGNE.TCLORDRE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM CROLIGCONLIGNE
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM CROLIGCONDITION
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM CROLIGAFFECTATION
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM CROLIGDETAIL
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM CROLIGNE
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM LANTCROLIGDETAIL
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM TCROLIGDETAIL
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM LANTCROLIGNE
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            DELETE FROM TCROLIGNE
                  WHERE TCRCODE = STCRCODE AND TCLORDRE = NTCLORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_TCL_FOUND_CONST;
        END;
    END D_TCROLIGNE;

    PROCEDURE D_CRITERECRO (SCCRCODE             CRITERECRO.CCRCODE%TYPE,
                            SUGECODE             UNITEGESTION.UGECODE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            NRETURNCODE := 0;

            SELECT ROWID
              INTO SROWID
              FROM CRITERECRO
             WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('CRITERECRO',
                                              SROWID,
                                              NRETURNCODE);
            NRETURNCODE := 0;

            SELECT ROWID
              INTO SROWID
              FROM LANCRITERECRO
             WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('LANCRITERECRO',
                                              SROWID,
                                              NRETURNCODE);

            DELETE CCHIMPUTATION
             WHERE     CCRCODE = SCCRCODE
                   AND CCHCHAMP IN
                           (SELECT CCHCHAMP
                              FROM CCRCHAMP
                             WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE)
                   AND UGECODE = SUGECODE;

            DELETE FROM CCRCHAMP
                  WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

            DELETE FROM LANCRITERECRO
                  WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

            DELETE FROM CRITERECRO
                  WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_CCR_FOUND_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_CRITERECRO;

    PROCEDURE I_CRITERECRO (
        SCCRCODE             CRITERECRO.CCRCODE%TYPE,
        SCCRLIBELLE          LANCRITERECRO.CCRLIBELLE%TYPE,
        --   sLangue LANGUE.LANCODE%TYPE,
        --   sUgeCode UNITEGESTION.UGECODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        DECLARE
            SUGECODE   UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
            SROWID     ROWID;
        BEGIN
            INSERT INTO CRITERECRO (CCRCODE, UGECODE)
                 VALUES (SCCRCODE, SUGECODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM CRITERECRO
                 WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('CRITERECRO',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;

            INSERT INTO LANCRITERECRO (CCRCODE,
                                       CCRLIBELLE,
                                       LANCODE,
                                       UGECODE)
                 VALUES (SCCRCODE,
                         SCCRLIBELLE,
                         SLANGUE,
                         SUGECODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM LANCRITERECRO
                 WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('LANCRITERECRO',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CCR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_CCR_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCR_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCR_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_CRITERECRO;

    PROCEDURE U_CRITERECRO (
        SCCRCODE             CRITERECRO.CCRCODE%TYPE,
        SCCRLIBELLE          LANCRITERECRO.CCRLIBELLE%TYPE,
        SLANGUE              LANGUE.LANCODE%TYPE,
        SUGECODE             UNITEGESTION.UGECODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
        NCOUNT   NUMBER;
    BEGIN
        DECLARE
            SROWID     ROWID;
            SUGECODE   UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
        BEGIN
            SELECT COUNT (1)
              INTO NCOUNT
              FROM LANCRITERECRO
             WHERE     CCRCODE = SCCRCODE
                   AND UGECODE = SUGECODE
                   AND LANCODE = SLANGUE;

            IF NCOUNT = 1
            THEN
                UPDATE LANCRITERECRO
                   SET CCRLIBELLE = SCCRLIBELLE
                 WHERE     CCRCODE = SCCRCODE
                       AND UGECODE = SUGECODE
                       AND LANCODE = SLANGUE;
            ELSE
                INSERT INTO LANCRITERECRO (CCRCODE,
                                           UGECODE,
                                           LANCODE,
                                           CCRLIBELLE)
                     VALUES (SCCRCODE,
                             SUGECODE,
                             SLANGUE,
                             SCCRLIBELLE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM LANCRITERECRO
                 WHERE CCRCODE = SCCRCODE AND UGECODE = SUGECODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('LANCRITERECRO',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CCR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_CCR_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCR_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCR_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_CRITERECRO;

    PROCEDURE D_CCRCHAMP (SCCRCODE             CCRCHAMP.CCRCODE%TYPE,
                          SCCHCHAMP            CCRCHAMP.CCHCHAMP%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SUGECODE   UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
            SROWID     ROWID;
        BEGIN
            NRETURNCODE := 0;

            SELECT ROWID
              INTO SROWID
              FROM CCRCHAMP
             WHERE     CCRCODE = SCCRCODE
                   AND CCHCHAMP = SCCHCHAMP
                   AND UGECODE = SUGECODE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('CCRCHAMP',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM CCHIMPUTATION
                  WHERE     CCRCODE = SCCRCODE
                        AND CCHCHAMP = SCCHCHAMP
                        AND UGECODE = SUGECODE;

            DELETE FROM CCRCHAMP
                  WHERE     CCRCODE = SCCRCODE
                        AND CCHCHAMP = SCCHCHAMP
                        AND UGECODE = SUGECODE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_CCH_FOUND_CONST;
        END;
    END D_CCRCHAMP;

    PROCEDURE I_CCRCHAMP (SCCRCODE             CCRCHAMP.CCRCODE%TYPE,
                          SCCHCHAMP            CCRCHAMP.CCHCHAMP%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID     ROWID;
            SUGECODE   UTILISATEUR.UGECODE%TYPE := F_GETCURRENTUGECODE;
        BEGIN
            INSERT INTO CCRCHAMP (CCRCODE, CCHCHAMP, UGECODE)
                 VALUES (SCCRCODE, SCCHCHAMP, SUGECODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM CCRCHAMP
                 WHERE     CCRCODE = SCCRCODE
                       AND CCHCHAMP = SCCHCHAMP
                       AND UGECODE = SUGECODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('CCRCHAMP',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_CCH_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_CCH_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCH_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_CCH_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_CCRCHAMP;

    --================= End Proc migrated on 05/June/2009=========
    PROCEDURE U_UTILISATEUR_SOCIETE (
        SUTICODE            IN     UTILISATEUR.UTICODE%TYPE,
        SUTILDAPREFERENCE   IN     UTILISATEUR.UTILDAPREFERENCE%TYPE,
        SUTILDAPGUID        IN     UTILISATEUR.UTILDAPGUID%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE UTILISATEUR
               SET UTILDAPREFERENCE = SUTILDAPREFERENCE,
                   UTILDAPGUID = SUTILDAPGUID
             WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_UTILISATEUR_SOCIETE;

    PROCEDURE I_FORDESTINATION (
        NFORID                           FORDESTINATION.FORID%TYPE,
        NFDEORDRE                        FORDESTINATION.FDEORDRE%TYPE,
        STPGCODE                         FORDESTINATION.TPGCODE%TYPE,
        SFDEULYSENDER                    FORDESTINATION.FDEULYSENDER%TYPE,
        SFDEUTICODESENDER                FORDESTINATION.FDEUTICODESENDER%TYPE,
        SFDEGROCODESENDER                FORDESTINATION.FDEGROCODESENDER%TYPE,
        SFDESECTGESTIONSENDER            FORDESTINATION.FDESECTGESTIONSENDER%TYPE,
        SFDEMETIERSENDER                 FORDESTINATION.FDEMETIERSENDER%TYPE,
        SFDEULYRECEIVER                  FORDESTINATION.FDEULYRECEIVER%TYPE,
        SFDEUTICODERECEIVER              FORDESTINATION.FDEUTICODERECEIVER%TYPE,
        SFDEGROCODERECEIVER              FORDESTINATION.FDEGROCODERECEIVER%TYPE,
        SFDESECTGESTIONRECEIVER          FORDESTINATION.FDESECTGESTIONRECEIVER%TYPE,
        SFDEMETIERRECEIVER               FORDESTINATION.FDEMETIERRECEIVER%TYPE,
        SFDEACTION                       FORDESTINATION.FDEACTION%TYPE,
        SFDEPRIORITY                     FORDESTINATION.FDEPRIORITY%TYPE,
        NRETURNCODE               IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO FORDESTINATION (FORID,
                                        FDEORDRE,
                                        TPGCODE,
                                        FDEULYSENDER,
                                        FDEUTICODESENDER,
                                        FDEGROCODESENDER,
                                        FDESECTGESTIONSENDER,
                                        FDEMETIERSENDER,
                                        FDEULYRECEIVER,
                                        FDEUTICODERECEIVER,
                                        FDEGROCODERECEIVER,
                                        FDESECTGESTIONRECEIVER,
                                        FDEMETIERRECEIVER,
                                        FDEACTION,
                                        FDEPRIORITY)
                 VALUES (NFORID,
                         NFDEORDRE,
                         STPGCODE,
                         SFDEULYSENDER,
                         SFDEUTICODESENDER,
                         SFDEGROCODESENDER,
                         SFDESECTGESTIONSENDER,
                         SFDEMETIERSENDER,
                         SFDEULYRECEIVER,
                         SFDEUTICODERECEIVER,
                         SFDEGROCODERECEIVER,
                         SFDESECTGESTIONRECEIVER,
                         SFDEMETIERRECEIVER,
                         SFDEACTION,
                         SFDEPRIORITY);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_FORDESTINATION;

    --update procedure for FORDESTINATION table
    PROCEDURE U_FORDESTINATION (
        NFORID                           FORDESTINATION.FORID%TYPE,
        NFDEORDRE                        FORDESTINATION.FDEORDRE%TYPE,
        STPGCODE                         FORDESTINATION.TPGCODE%TYPE,
        SFDEULYSENDER                    FORDESTINATION.FDEULYSENDER%TYPE,
        SFDEUTICODESENDER                FORDESTINATION.FDEUTICODESENDER%TYPE,
        SFDEGROCODESENDER                FORDESTINATION.FDEGROCODESENDER%TYPE,
        SFDESECTGESTIONSENDER            FORDESTINATION.FDESECTGESTIONSENDER%TYPE,
        SFDEMETIERSENDER                 FORDESTINATION.FDEMETIERSENDER%TYPE,
        SFDEULYRECEIVER                  FORDESTINATION.FDEULYRECEIVER%TYPE,
        SFDEUTICODERECEIVER              FORDESTINATION.FDEUTICODERECEIVER%TYPE,
        SFDEGROCODERECEIVER              FORDESTINATION.FDEGROCODERECEIVER%TYPE,
        SFDESECTGESTIONRECEIVER          FORDESTINATION.FDESECTGESTIONRECEIVER%TYPE,
        SFDEMETIERRECEIVER               FORDESTINATION.FDEMETIERRECEIVER%TYPE,
        SFDEACTION                       FORDESTINATION.FDEACTION%TYPE,
        SFDEPRIORITY                     FORDESTINATION.FDEPRIORITY%TYPE,
        NRETURNCODE               IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE FORDESTINATION
               SET FDEULYSENDER = SFDEULYSENDER,
                   FDEUTICODESENDER = SFDEUTICODESENDER,
                   FDEGROCODESENDER = SFDEGROCODESENDER,
                   FDESECTGESTIONSENDER = SFDESECTGESTIONSENDER,
                   FDEMETIERSENDER = SFDEMETIERSENDER,
                   FDEULYRECEIVER = SFDEULYRECEIVER,
                   FDEUTICODERECEIVER = SFDEUTICODERECEIVER,
                   FDEGROCODERECEIVER = SFDEGROCODERECEIVER,
                   FDESECTGESTIONRECEIVER = SFDESECTGESTIONRECEIVER,
                   FDEMETIERRECEIVER = SFDEMETIERRECEIVER,
                   FDEACTION = SFDEACTION,
                   FDEPRIORITY = SFDEPRIORITY
             WHERE FORID = NFORID AND FDEORDRE = NFDEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_FORDESTINATION;

    --Delete procedure for FORDESTINATION table
    PROCEDURE D_FORDESTINATION (
        NFORID               FORDESTINATION.FORID%TYPE,
        NFDEORDRE            FORDESTINATION.FDEORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            --Delte the related rules
            DELETE FROM LKFDERUL
                  WHERE FORID = NFORID AND FDEORDRE = NFDEORDRE;

            --Delete the parent id
            DELETE FROM FORDESTINATION
                  WHERE FORID = NFORID AND FDEORDRE = NFDEORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_FORDESTINATION;

    PROCEDURE I_LKFDERUL (NFORID               LKFDERUL.FORID%TYPE,
                          NFDEORDRE            LKFDERUL.FDEORDRE%TYPE,
                          NRULID               LKFDERUL.RULID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKFDERUL (FORID, FDEORDRE, RULID)
                 VALUES (NFORID, NFDEORDRE, NRULID);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKFDERUL;

    PROCEDURE P_DUPLICATE_UTILISATEUR (
        P_UTICODESRC        UTILISATEUR.UTICODE%TYPE,
        P_UTICODEDEST       UTILISATEUR.UTICODE%TYPE,
        N_RETURN        OUT NUMBER)
    AS
        CURSOR C_CONFIGURATIONKEY (
            UTICODESRC   IN CONFIGURATIONKEY.UTICODE%TYPE)
        IS
            SELECT CKEID,
                   PHACODE,
                   PHADEST,
                   UTICODE,
                   GROCODE,
                   TPGCODE,
                   UGECODE,
                   JALCODE,
                   TACCODE,
                   TBTCODE,
                   TBNCODE,
                   ACTID,
                   CKETYPE,
                   CKENAME,
                   CKECONTEXT,
                   CKEWEIGHT,
                   PAYCODE,
                   NAPCODE,
                   CKEACTTYPE
              FROM CONFIGURATIONKEY
             WHERE UTICODE = P_UTICODESRC;

        N_COUNT   NUMBER := 0;
    BEGIN
        N_RETURN := 0;

        IF P_UTICODESRC IS NULL
        THEN
            N_RETURN := 19592;
        ELSIF P_UTICODEDEST IS NULL
        THEN
            N_RETURN := 19593;
        ELSE
            BEGIN
                BEGIN
                    INSERT INTO UTITSM
                        (SELECT P_UTICODEDEST,
                                TSMSECTGESTION,
                                TSMMETIER,
                                TSMFLAGSUPERVISEUR,
                                TSMFLAGDEFAUT,
                                TSMPARTNAME,
                                TSMCOUNGR,
                                TSMCOUNEGE,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL,
                                NULL
                           FROM UTITSM
                          WHERE UTICODE = P_UTICODESRC);
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        N_RETURN := 19594;
                END;

                IF N_RETURN = 0
                THEN
                    BEGIN
                        INSERT INTO LKUTITMFDROIT
                            (SELECT P_UTICODEDEST,
                                    TMOMODULE,
                                    TMFFONCTION,
                                    UFDCREER,
                                    UFDMODIFIER,
                                    UFDSUPPRIMER,
                                    UFDVOIR,
                                    DEVCODE,
                                    UFDMTPLAFOND,
                                    UFDDTLIMIT
                               FROM LKUTITMFDROIT
                              WHERE UTICODE = P_UTICODESRC);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            N_RETURN := 19595;
                    END;
                END IF;

                IF N_RETURN = 0
                THEN
                    BEGIN
                        INSERT INTO LKUTITMFACGDROIT
                            (SELECT ACTID,
                                    P_UTICODEDEST,
                                    TMOMODULE,
                                    TMFFONCTION,
                                    UADCREER,
                                    UADSUPPRIMER,
                                    UADVOIR,
                                    UADMODIFIER,
                                    DEVCODE,
                                    UADMTPLAFOND,
                                    UADDTLIMIT
                               FROM LKUTITMFACGDROIT
                              WHERE UTICODE = P_UTICODESRC);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            N_RETURN := 19596;
                    END;
                END IF;

                IF N_RETURN = 0
                THEN
                    BEGIN
                        FOR CUR IN C_CONFIGURATIONKEY (P_UTICODESRC)
                        LOOP
                            SELECT SEQ_CKEID.NEXTVAL INTO N_COUNT FROM DUAL;

                            INSERT INTO CONFIGURATIONKEY (CKEID,
                                                          PHACODE,
                                                          PHADEST,
                                                          UTICODE,
                                                          GROCODE,
                                                          TPGCODE,
                                                          UGECODE,
                                                          JALCODE,
                                                          TACCODE,
                                                          TBTCODE,
                                                          TBNCODE,
                                                          ACTID,
                                                          CKETYPE,
                                                          CKENAME,
                                                          CKECONTEXT,
                                                          CKEWEIGHT,
                                                          PAYCODE,
                                                          NAPCODE,
                                                          CKEACTTYPE)
                                 VALUES (N_COUNT,
                                         CUR.PHACODE,
                                         CUR.PHADEST,
                                         P_UTICODEDEST,
                                         CUR.GROCODE,
                                         CUR.TPGCODE,
                                         CUR.UGECODE,
                                         CUR.JALCODE,
                                         CUR.TACCODE,
                                         CUR.TBTCODE,
                                         CUR.TBNCODE,
                                         CUR.ACTID,
                                         CUR.CKETYPE,
                                         CUR.CKENAME,
                                         CUR.CKECONTEXT,
                                         CUR.CKEWEIGHT,
                                         CUR.PAYCODE,
                                         CUR.NAPCODE,
                                         CUR.CKEACTTYPE);
                        END LOOP;
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            N_RETURN := 19597;
                    END;
                END IF;

                IF N_RETURN = 0
                THEN
                    BEGIN
                        INSERT INTO UTIUSERLINK
                            (SELECT P_UTICODEDEST,
                                    UTICODELINKED,
                                    ULITYPE,
                                    ULIORDRE,
                                    ULIDTBEG,
                                    ULIDTEND,
                                    ULIMETIER,
                                    ULISECTGEST,
                                    ULISALESNETWORK,
                                    TPGCODE
                               FROM UTIUSERLINK
                              WHERE UTICODE = P_UTICODESRC);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            N_RETURN := 19598;
                    END;
                END IF;

                IF N_RETURN = 0
                THEN
                    BEGIN
                        INSERT INTO UTIGCOPREFERENCE
                            (SELECT P_UTICODEDEST,
                                    GRTCODE,
                                    GCOCODE,
                                    UGPCOLUMNINDEX,
                                    UGPFLAGHIDDEN
                               FROM UTIGCOPREFERENCE
                              WHERE UTICODE = P_UTICODESRC);
                    EXCEPTION
                        WHEN OTHERS
                        THEN
                            N_RETURN := 19599;
                    END;
                END IF;
            END;
       -----------FILTREPARAMPROFIL--------------------

        INSERT INTO FILTREPARAMPROFIL(TPGCODE, FPPTYPE, FPPNOM, FPPCODE, FPPFLAGDEFAUT) 
        SELECT TPGCODE, FPPTYPE, FPPNOM, P_UTICODEDEST, FPPFLAGDEFAUT FROM filtreparamprofil WHERE fppcode=P_UTICODESRC;

        -----------RELATIONVALEURPROFIL-------------------

        INSERT INTO RELATIONVALEURPROFIL (RECCODE, TPGCODE, REVMERECODE, REVFILLECODE, REVFLAGDEFAUT)
        SELECT RECCODE, TPGCODE, P_UTICODEDEST, REVFILLECODE, REVFLAGDEFAUT FROM relationvaleurprofil WHERE REVMERECODE=P_UTICODESRC;

        INSERT INTO relationvaleurprofil (RECCODE, TPGCODE, REVMERECODE, REVFILLECODE, REVFLAGDEFAUT)
        SELECT RECCODE, TPGCODE, REVMERECODE, P_UTICODEDEST, REVFLAGDEFAUT FROM relationvaleurprofil WHERE REVFILLECODE=P_UTICODESRC;
            
        -----------LKUTIARO-------------------
        INSERT INTO LKUTIARO(SELECT ACTID, P_UTICODEDEST, ROLCODE,DEFAULTBRANCH FROM LKUTIARO WHERE UTICODE = P_UTICODESRC ) ;
        
        -----------UTIPREFERENCE-------------------
        Insert into UTIPREFERENCE (UTICODE,UPRCODE,UPRSTRINGVALUE,UPRDATEVALUE,UPRNUMERICVALUE,UPRBOOLEANVALUE) 
        SELECT P_UTICODEDEST,UPRCODE,UPRSTRINGVALUE,UPRDATEVALUE,UPRNUMERICVALUE,UPRBOOLEANVALUE FROM UTIPREFERENCE WHERE UTICODE=P_UTICODESRC;
        
        END IF;
    END P_DUPLICATE_UTILISATEUR;

    PROCEDURE D_LKFDERUL (NFORID               LKFDERUL.FORID%TYPE,
                          NFDEORDRE            LKFDERUL.FDEORDRE%TYPE,
                          NRULID               LKFDERUL.RULID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            --Delte the related rules
            DELETE FROM LKFDERUL
                  WHERE     FORID = NFORID
                        AND FDEORDRE = NFDEORDRE
                        AND RULID = NRULID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NULL;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_LKFDERUL;

    PROCEDURE U_PLANCOMPTABLEACCOUNT (
        NPCOID                       PLANCOMPTABLE.PCOID%TYPE,
        SPCOLIBELLE                  PLANCOMPTABLE.PCOLIBELLE%TYPE,
        SPCOCLASSE                   PLANCOMPTABLE.PCOCLASSE%TYPE,
        NPCOFLAGINACTIVE             PLANCOMPTABLE.PCOFLAGINACTIVE%TYPE,
        DTPCODTSTART                 PLANCOMPTABLE.PCODTSTART%TYPE,
        DTPCODTEND                   PLANCOMPTABLE.PCODTEND%TYPE,
        NPCOFLAGBALANCE              PLANCOMPTABLE.PCOFLAGBALANCE%TYPE,
        NPCOFLAGCONTRACT             PLANCOMPTABLE.PCOFLAGCONTRACT%TYPE,
        NPCOFLAGACTOR                PLANCOMPTABLE.PCOFLAGACTOR%TYPE,
        NPCOFLAGCOUNTERPART          PLANCOMPTABLE.PCOFLAGCOUNTERPART%TYPE,
        NPCOFLAGMANAGEMENT           PLANCOMPTABLE.PCOFLAGMANAGEMENT%TYPE,
        SPCOTYPECOUNTERPART          PLANCOMPTABLE.PCOTYPECOUNTERPART%TYPE,
        SPCOTYPEMANAGEMENT           PLANCOMPTABLE.PCOTYPEMANAGEMENT%TYPE,
        NPCONBDAYMATURITY            PLANCOMPTABLE.PCONBDAYMATURITY%TYPE,
        SPCOSECTGESTION              PLANCOMPTABLE.PCOSECTGESTION%TYPE,
        SPCOTYPE                     PLANCOMPTABLE.PCOTYPE%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE PLANCOMPTABLE
               SET PCOLIBELLE = SPCOLIBELLE,
                   PCOCLASSE = SPCOCLASSE,
                   PCOFLAGINACTIVE = NPCOFLAGINACTIVE,
                   PCODTSTART = DTPCODTSTART,
                   PCODTEND = DTPCODTEND,
                   PCOFLAGBALANCE = NPCOFLAGBALANCE,
                   PCOFLAGCONTRACT = NPCOFLAGCONTRACT,
                   PCOFLAGACTOR = NPCOFLAGACTOR,
                   PCOFLAGCOUNTERPART = NPCOFLAGCOUNTERPART,
                   PCOFLAGMANAGEMENT = NPCOFLAGMANAGEMENT,
                   PCOTYPECOUNTERPART = SPCOTYPECOUNTERPART,
                   PCOTYPEMANAGEMENT = SPCOTYPEMANAGEMENT,
                   PCONBDAYMATURITY = NPCONBDAYMATURITY,
                   PCOSECTGESTION = SPCOSECTGESTION,
                   PCOTYPE = SPCOTYPE
             WHERE PCOID = NPCOID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REC_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PLANCOMPTABLEACCOUNT;

    PROCEDURE I_CDDRUL_ACCOUNTDETAIL (
        NWQUID               PLANCOMPTABLE.PCOID%TYPE,
        NRULID               RULE.RULID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCSEID      CUSDEFDATA.CSEID%TYPE;
            NCDDORDRE   CUSDEFDATA.CDDORDRE%TYPE;
        BEGIN
            BEGIN
                BEGIN
                    SELECT CSEID
                      INTO NCSEID
                      FROM CUSTOMSETTING
                     WHERE     CSETYPE = 'TABLE'
                           AND CSETABLE = 'PLANCOMPTABLE'
                           AND CSEENTITY = 'ACCOUNT';
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        SELECT SEQ_CSEID.NEXTVAL INTO NCSEID FROM DUAL;

                        -------------------
                        -- CUSTOMSETTING
                        -------------------
                        INSERT INTO CUSTOMSETTING (CSEID,
                                                   CSETYPE,
                                                   CSETABLE,
                                                   CSEFILTER,
                                                   CSEENTITY,
                                                   CSEFUNCTION)
                             VALUES (NCSEID,
                                     'TABLE',
                                     'PLANCOMPTABLE',
                                     NULL,
                                     'ACCOUNT',
                                     NULL);

                        ----------------------
                        -- LANCUSTOMSETTING
                        ----------------------
                        INSERT INTO LANCUSTOMSETTING (CSEID,
                                                      LANCODE,
                                                      CSELABEL)
                             VALUES (NCSEID, 'EN', 'Account Details process');

                        INSERT INTO LANCUSTOMSETTING (CSEID,
                                                      LANCODE,
                                                      CSELABEL)
                             VALUES (NCSEID, 'FR', 'Account Details process');

                        -------------------
                        -- CUSDEFINITION
                        -------------------
                        INSERT INTO CUSDEFINITION (CSEID,
                                                   CDEORDRE,
                                                   CDECODE,
                                                   CDECODETYPE,
                                                   CDETABLETOSEARCH)
                             VALUES (NCSEID,
                                     1,
                                     'PCOID',
                                     'INTEGER',
                                     NULL);
                END;

                BEGIN
                    SELECT CDDORDRE
                      INTO NCDDORDRE
                      FROM CUSDEFDATA
                     WHERE     CSEID = NCSEID
                           AND CDEORDRE = 1
                           AND CDDNUMERICVALUE = NWQUID;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        SELECT NVL (MAX (CDDORDRE), 0)
                          INTO NCDDORDRE
                          FROM CUSDEFDATA
                         WHERE CSEID = NCSEID AND CDEORDRE = 1;

                        NCDDORDRE := NCDDORDRE + 1;

                        INSERT INTO CUSDEFDATA (CSEID,
                                                CDEORDRE,
                                                CDDORDRE,
                                                CDDSTRINGVALUE,
                                                CDDNUMERICVALUE,
                                                CDDDATEVALUE,
                                                CDDBOOLEANVALUE)
                             VALUES (NCSEID,
                                     1,
                                     NCDDORDRE,
                                     NULL,
                                     NWQUID,
                                     NULL,
                                     NULL);
                END;

                INSERT INTO CDDRUL (CSEID,
                                    CDEORDRE,
                                    CDDORDRE,
                                    RULID)
                     VALUES (NCSEID,
                             1,
                             NCDDORDRE,
                             NRULID);
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_RUL_CONST;
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END I_CDDRUL_ACCOUNTDETAIL;

    PROCEDURE D_CDDRUL_ACCOUNTDETAIL (
        NWQUID               PLANCOMPTABLE.PCOID%TYPE,
        NRULID               RULE.RULID%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCSEID      CUSDEFDATA.CSEID%TYPE;
            NCDDORDRE   CUSDEFDATA.CDDORDRE%TYPE;
            NCOUNT      NUMBER;
        BEGIN
            BEGIN
                SELECT CSEID
                  INTO NCSEID
                  FROM CUSTOMSETTING
                 WHERE     CSETYPE = 'TABLE'
                       AND CSETABLE = 'PLANCOMPTABLE'
                       AND CSEENTITY = 'ACCOUNT';

                SELECT CDDORDRE
                  INTO NCDDORDRE
                  FROM CUSDEFDATA
                 WHERE     CSEID = NCSEID
                       AND CDEORDRE = 1
                       AND CDDNUMERICVALUE = NWQUID;

                DELETE FROM CDDRUL
                      WHERE     CSEID = NCSEID
                            AND CDDORDRE = NCDDORDRE
                            AND RULID = NRULID;

                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM CDDRUL
                 WHERE CSEID = NCSEID AND CDDORDRE = NCDDORDRE;

                IF NCOUNT = 0
                THEN
                    DELETE CUSDEFDATA
                     WHERE     CSEID = NCSEID
                           AND CDEORDRE = 1
                           AND CDDNUMERICVALUE = NWQUID;
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END D_CDDRUL_ACCOUNTDETAIL;

    PROCEDURE I_CDDRUL_ROLEDETAIL (SROLCODE             ROLE.ROLCODE%TYPE,
                                   NRULID               RULE.RULID%TYPE,
                                   NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCSEID      CUSDEFDATA.CSEID%TYPE;
            NCDDORDRE   CUSDEFDATA.CDDORDRE%TYPE;
        BEGIN
            BEGIN
                BEGIN
                    SELECT CSEID
                      INTO NCSEID
                      FROM CUSTOMSETTING
                     WHERE     CSETYPE = 'TABLE'
                           AND CSETABLE = 'ROLE'
                           AND CSEENTITY = 'ACTEUR';
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        SELECT SEQ_CSEID.NEXTVAL INTO NCSEID FROM DUAL;

                        -------------------
                        -- CUSTOMSETTING
                        -------------------
                        INSERT INTO CUSTOMSETTING (CSEID,
                                                   CSETYPE,
                                                   CSETABLE,
                                                   CSEFILTER,
                                                   CSEENTITY,
                                                   CSEFUNCTION)
                             VALUES (NCSEID,
                                     'TABLE',
                                     'ROLE',
                                     NULL,
                                     'ACTEUR',
                                     NULL);

                        ----------------------
                        -- LANCUSTOMSETTING
                        ----------------------
                        INSERT INTO LANCUSTOMSETTING (CSEID,
                                                      LANCODE,
                                                      CSELABEL)
                             VALUES (NCSEID, 'EN', 'Role details process');

                        INSERT INTO LANCUSTOMSETTING (CSEID,
                                                      LANCODE,
                                                      CSELABEL)
                             VALUES (NCSEID, 'FR', 'Role details process');

                        -------------------
                        -- CUSDEFINITION
                        -------------------
                        INSERT INTO CUSDEFINITION (CSEID,
                                                   CDEORDRE,
                                                   CDECODE,
                                                   CDECODETYPE,
                                                   CDETABLETOSEARCH)
                             VALUES (NCSEID,
                                     1,
                                     'ROLCODE',
                                     'STRING',
                                     NULL);
                END;

                BEGIN
                    SELECT CDDORDRE
                      INTO NCDDORDRE
                      FROM CUSDEFDATA
                     WHERE     CSEID = NCSEID
                           AND CDEORDRE = 1
                           AND CDDSTRINGVALUE = SROLCODE;
                EXCEPTION
                    WHEN OTHERS
                    THEN
                        SELECT NVL (MAX (CDDORDRE), 0)
                          INTO NCDDORDRE
                          FROM CUSDEFDATA
                         WHERE CSEID = NCSEID AND CDEORDRE = 1;

                        NCDDORDRE := NCDDORDRE + 1;

                        INSERT INTO CUSDEFDATA (CSEID,
                                                CDEORDRE,
                                                CDDORDRE,
                                                CDDSTRINGVALUE,
                                                CDDNUMERICVALUE,
                                                CDDDATEVALUE,
                                                CDDBOOLEANVALUE)
                             VALUES (NCSEID,
                                     1,
                                     NCDDORDRE,
                                     SROLCODE,
                                     NULL,
                                     NULL,
                                     NULL);
                END;

                INSERT INTO CDDRUL (CSEID,
                                    CDEORDRE,
                                    CDDORDRE,
                                    RULID)
                     VALUES (NCSEID,
                             1,
                             NCDDORDRE,
                             NRULID);
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_RUL_CONST;
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END I_CDDRUL_ROLEDETAIL;

    PROCEDURE D_CDDRUL_ROLEDETAIL (SROLCODE             ROLE.ROLCODE%TYPE,
                                   NRULID               RULE.RULID%TYPE,
                                   NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCSEID      CUSDEFDATA.CSEID%TYPE;
            NCDDORDRE   CUSDEFDATA.CDDORDRE%TYPE;
            NCOUNT      NUMBER;
        BEGIN
            BEGIN
                SELECT CSEID
                  INTO NCSEID
                  FROM CUSTOMSETTING
                 WHERE     CSETYPE = 'TABLE'
                       AND CSETABLE = 'ROLE'
                       AND CSEENTITY = 'ACTEUR';

                SELECT CDDORDRE
                  INTO NCDDORDRE
                  FROM CUSDEFDATA
                 WHERE     CSEID = NCSEID
                       AND CDEORDRE = 1
                       AND CDDSTRINGVALUE = SROLCODE;

                DELETE FROM CDDRUL
                      WHERE     CSEID = NCSEID
                            AND CDDORDRE = NCDDORDRE
                            AND RULID = NRULID;

                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM CDDRUL
                 WHERE CSEID = NCSEID AND CDDORDRE = NCDDORDRE;

                IF NCOUNT = 0
                THEN
                    DELETE CUSDEFDATA
                     WHERE     CSEID = NCSEID
                           AND CDEORDRE = 1
                           AND CDDSTRINGVALUE = SROLCODE;
                END IF;
            EXCEPTION
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END D_CDDRUL_ROLEDETAIL;

    PROCEDURE TPISTABAUDIT_CUSTOMCHAR (
        STTATABLE            TPISTABAUDIT.TTATABLE%TYPE,
        SUSERNAME            TPISTABAUDIT.USERNAME%TYPE,
        NPCOID               PLANCOMPTABLE.PCOID%TYPE,
        SPRIMARYKEY          TPISTABAUDDATA.TPDCOLONNE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NTTAID   TPISTABAUDIT.TTAID%TYPE;
            SROWID   ROWID;
        BEGIN
            SELECT SEQ_TTAID.NEXTVAL INTO NTTAID FROM DUAL;

            INSERT INTO TPISTABAUDIT (TTAID,
                                      TTATABLE,
                                      TTADTMAJ,
                                      USERNAME)
                 VALUES (NTTAID,
                         STTATABLE,
                         SYSDATE,
                         SUSERNAME);

            IF SQL%ROWCOUNT <> 0
            THEN
                SELECT ROWID
                  INTO SROWID
                  FROM TPISTABAUDIT
                 WHERE TTAID = NTTAID;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('TPISTABAUDIT',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;

            INSERT INTO TPISTABAUDDATA (TTAID,
                                        TPDCOLONNE,
                                        TPDANCDATANUMBER,
                                        TPDNOUDATANUMBER)
                 VALUES (NTTAID,
                         SPRIMARYKEY,
                         NPCOID,
                         NPCOID);

            IF SQL%ROWCOUNT <> 0
            THEN
                SELECT ROWID
                  INTO SROWID
                  FROM TPISTABAUDDATA
                 WHERE TTAID = NTTAID AND TPDCOLONNE = SPRIMARYKEY;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('TPISTABAUDDATA',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RUL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END TPISTABAUDIT_CUSTOMCHAR;

    PROCEDURE TPISTABAUDDATA_CUSTOMCHAR (
        STPDCOLONNE                TPISTABAUDDATA.TPDCOLONNE%TYPE,
        STPDANCDATASTRING          TPISTABAUDDATA.TPDANCDATASTRING%TYPE,
        STPDNOUDATASTRING          TPISTABAUDDATA.TPDNOUDATASTRING%TYPE,
        DTPDANCDATADATE            TPISTABAUDDATA.TPDANCDATADATE%TYPE,
        DTPDNOUDATADATE            TPISTABAUDDATA.TPDNOUDATADATE%TYPE,
        NTPDANCDATANUMBER          TPISTABAUDDATA.TPDANCDATANUMBER%TYPE,
        NTPDNOUDATANUMBER          TPISTABAUDDATA.TPDNOUDATANUMBER%TYPE,
        NRETURNCODE         IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NTTAID   TPISTABAUDIT.TTAID%TYPE;
        BEGIN
            SELECT SEQ_TTAID.CURRVAL INTO NTTAID FROM DUAL;

            INSERT INTO TPISTABAUDDATA (TTAID,
                                        TPDCOLONNE,
                                        TPDANCDATASTRING,
                                        TPDNOUDATASTRING,
                                        TPDANCDATADATE,
                                        TPDNOUDATADATE,
                                        TPDANCDATANUMBER,
                                        TPDNOUDATANUMBER)
                 VALUES (NTTAID,
                         STPDCOLONNE,
                         STPDANCDATASTRING,
                         STPDNOUDATASTRING,
                         DTPDANCDATADATE,
                         DTPDNOUDATADATE,
                         NTPDANCDATANUMBER,
                         NTPDNOUDATANUMBER);
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_RUL_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END TPISTABAUDDATA_CUSTOMCHAR;

    PROCEDURE U_TOPTPGPARAM (STOPTABLE        TOPTPGPARAM.TOPTABLE%TYPE,
                             STTPPARAM        TOPTPGPARAM.TTPPARAM%TYPE,
                             NTTPLOGIQUE      TOPTPGPARAM.TTPLOGIQUE%TYPE,
                             DTTTPDATE        TOPTPGPARAM.TTPDATE%TYPE,
                             NTTPNOMBRE       TOPTPGPARAM.TTPNOMBRE%TYPE,
                             STTPTEXTE        TOPTPGPARAM.TTPTEXTE%TYPE,
                             STPGCODE         TOPTPGPARAM.TPGCODE%TYPE,
                             STTPDPTCODE      TOPTPGPARAM.TTPDPTCODE%TYPE,
                             STTPHIERARCHY    TOPTPGPARAM.TTPHIERARCHY%TYPE)
    AS
    BEGIN
        UPDATE TOPTPGPARAM
           SET TTPLOGIQUE = NTTPLOGIQUE,
               TTPDATE = DTTTPDATE,
               TTPNOMBRE = NTTPNOMBRE,
               TTPTEXTE = STTPTEXTE,
               TTPDPTCODE = STTPDPTCODE,
               TTPHIERARCHY = STTPHIERARCHY
         WHERE     TOPTABLE = STOPTABLE
               AND TTPPARAM = STTPPARAM
               AND TPGCODE = STPGCODE;

        IF (STTPHIERARCHY = 'IH')
        THEN
            UPDATE TOPTPGPARAM
               SET TTPLOGIQUE = NTTPLOGIQUE,
                   TTPDATE = DTTTPDATE,
                   TTPNOMBRE = NTTPNOMBRE,
                   TTPTEXTE = STTPTEXTE,
                   TTPDPTCODE = STTPDPTCODE,
                   TTPHIERARCHY = STTPHIERARCHY
             WHERE     TOPTABLE = STOPTABLE
                   AND TTPPARAM = STTPPARAM
                   AND TPGCODE IN (    SELECT DISTINCT TPGCODE
                                         FROM TPROFILGESTION
                                        WHERE TPGCODEPARENT IS NOT NULL
                                   START WITH TPGCODEPARENT = STPGCODE
                                   CONNECT BY PRIOR TPGCODE = TPGCODEPARENT);
        END IF;

        IF (STTPHIERARCHY = 'NA')
        THEN
            UPDATE TOPTPGPARAM
               SET TTPHIERARCHY = STTPHIERARCHY
             WHERE     TOPTABLE = STOPTABLE
                   AND TTPPARAM = STTPPARAM
                   AND TPGCODE IN (    SELECT DISTINCT TPGCODE
                                         FROM TPROFILGESTION
                                        WHERE TPGCODEPARENT IS NOT NULL
                                   START WITH TPGCODEPARENT = STPGCODE
                                   CONNECT BY PRIOR TPGCODE = TPGCODEPARENT);
        END IF;
    END U_TOPTPGPARAM;

    PROCEDURE REVERSECRO (NCROIDREEL           AUDITECRITURE.CROIDREEL%TYPE,
                          SAECTCRCODE          AUDITECRITURE.AECTCRCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCROIDREDO      CRO.CROID%TYPE;
            NCROID          CRO.CROID%TYPE;
            NCROIDREDOCUR   CRO.CROID%TYPE;

            CURSOR C1
            IS
                SELECT DISTINCT B.CROIDREEL
                  FROM AUDITECRITURE A, AUDITECRITURE B
                 WHERE     A.CROIDREEL = NCROIDREEL
                       AND A.AECTCRCODE = SAECTCRCODE
                       AND A.CROID = B.CROID
                       AND B.AECTCRCODE = A.AECTCRCODE;
        BEGIN
            NRETURNCODE := 0;

            BEGIN
                SELECT SEQ_CROID.NEXTVAL INTO NCROIDREDO FROM DUAL;

                SELECT MAX (CROID)
                  INTO NCROID
                  FROM AUDITECRITURE
                 WHERE CROIDREEL = NCROIDREEL AND AECTCRCODE = SAECTCRCODE;

                FOR C1R IN C1
                LOOP
                    IF C1R.CROIDREEL = NCROID
                    THEN
                        NCROIDREDOCUR := NCROIDREDO;
                    ELSE
                        SELECT SEQ_CROID.NEXTVAL INTO NCROIDREDOCUR FROM DUAL;
                    END IF;

                    INSERT INTO CRO (CROID,
                                     ACTID,
                                     TCRCODE,
                                     CRODTTRAIT,
                                     CRODTCOMPTABLE,
                                     CRODTEXPLOIT,
                                     CROCOMMENTBLOCAGE)
                        SELECT NCROIDREDOCUR,
                               ACTID,
                               TCRCODE,
                               CRODTTRAIT,
                               CRODTCOMPTABLE,
                               CRODTEXPLOIT,
                               'Replaced by croid:' || C1R.CROIDREEL
                          FROM CRO
                         WHERE CROID = C1R.CROIDREEL;

                    UPDATE AUDITECRITURE
                       SET CROIDREEL = NCROIDREDOCUR
                     WHERE     CROIDREEL = C1R.CROIDREEL
                           AND AECTCRCODE = SAECTCRCODE;

                    UPDATE CRO
                       SET CRODTEXPLOIT = NULL,
                           CRODTCOMPTABLE = TRUNC (SYSDATE)
                     WHERE CROID = C1R.CROIDREEL;
                END LOOP;

                INSERT INTO CRO (CROID,
                                 ACTID,
                                 TCRCODE,
                                 CRODTTRAIT,
                                 CRODTCOMPTABLE,
                                 CROIDEXTOURNE)
                    SELECT SEQ_CROID.NEXTVAL,
                           ACTID,
                           'EXTOURN',
                           SYSDATE,
                           TRUNC (SYSDATE),
                           NCROIDREDO
                      FROM CRO
                     WHERE CROID = NCROID;

                UPDATE AUDITECRITURE
                   SET CROID = NCROIDREDO
                 WHERE CROID = NCROID;
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
                WHEN ERR_I_NULL_MANDATORY_KEY
                THEN
                    NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
                WHEN ERR_U_NULL_MANDATORY_KEY
                THEN
                    NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
                WHEN OTHERS
                THEN
                    NRETURNCODE := -1 * SQLCODE;
            END;
        END;
    END REVERSECRO;

    PROCEDURE I_L1FORMALITE (
        NFORID                L1FORMALITE.FORID%TYPE,
        NFORIDLIEE            L1FORMALITE.FORIDLIEE%TYPE,
        SFO1TYPELINK          L1FORMALITE.FO1TYPELINK%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO L1FORMALITE (FORID, FORIDLIEE, FO1TYPELINK)
                 VALUES (NFORID, NFORIDLIEE, SFO1TYPELINK);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END I_L1FORMALITE;

    PROCEDURE U_L1FORMALITE (
        NFORID                L1FORMALITE.FORID%TYPE,
        NFORIDLIEE            L1FORMALITE.FORIDLIEE%TYPE,
        SFO1TYPELINK          L1FORMALITE.FO1TYPELINK%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE L1FORMALITE
               SET FORIDLIEE = NFORIDLIEE, FO1TYPELINK = SFO1TYPELINK
             WHERE FORID = NFORID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END U_L1FORMALITE;

    PROCEDURE D_L1FORMALITE (
        NFORID                L1FORMALITE.FORID%TYPE,
        NFORIDLIEE            L1FORMALITE.FORIDLIEE%TYPE,
        SFO1TYPELINK          L1FORMALITE.FO1TYPELINK%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM L1FORMALITE
                  WHERE     FORID = NFORID
                        AND FORIDLIEE = NFORIDLIEE
                        AND FO1TYPELINK = SFO1TYPELINK;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END D_L1FORMALITE;

    PROCEDURE I_APPROVALPROCESS (
        SALICODE             APPROVALLINE.ALICODE%TYPE,
        SUTICODE             APPROVALLINE.UTICODE%TYPE,
        STACCODE             APPROVALLINE.TACCODE%TYPE,
        STPGCODE             APPROVALLINE.TPGCODE%TYPE,
        SDPTCODE             APPROVALLINE.DPTCODE%TYPE,
        STSMMETIER           APPROVALLINE.TSMMETIER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO APPROVALLINE (ALICODE,
                                      UTICODE,
                                      ALIDTCREAT,
                                      TACCODE,
                                      TPGCODE,
                                      DPTCODE,
                                      TSMMETIER)
                 VALUES (SALICODE,
                         SUTICODE,
                         TRUNC (SYSDATE),
                         STACCODE,
                         STPGCODE,
                         SDPTCODE,
                         STSMMETIER);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_APPROVALPROCESS;

    PROCEDURE I_RULE_LINE (SALICODE             LKALIRUL.ALICODE%TYPE,
                           NRULID               LKALIRUL.RULID%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            IF NRULID IS NULL
            THEN
                DELETE FROM LKALIRUL
                      WHERE ALICODE = SALICODE;
            ELSE
                DELETE FROM LKALIRUL
                      WHERE ALICODE = SALICODE AND RULID = NRULID;

                INSERT INTO LKALIRUL (ALICODE, RULID)
                     VALUES (SALICODE, NRULID);

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_RULE_LINE;

    PROCEDURE I_RULE_STEP (SALICODE             LKASTRUL.ALICODE%TYPE,
                           NASTORDER            LKASTRUL.ASTORDER%TYPE,
                           NRULID               LKASTRUL.RULID%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            IF NRULID IS NULL
            THEN
                DELETE FROM LKASTRUL
                      WHERE ALICODE = SALICODE AND ASTORDER = NASTORDER;
            ELSE
                DELETE FROM LKASTRUL
                      WHERE     ALICODE = SALICODE
                            AND ASTORDER = NASTORDER
                            AND RULID = NRULID;

                INSERT INTO LKASTRUL (ALICODE, ASTORDER, RULID)
                     VALUES (SALICODE, NASTORDER, NRULID);

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_RULE_STEP;

    PROCEDURE U_APPROVALPROCESS (
        SALICODE             APPROVALLINE.ALICODE%TYPE,
        SUTICODE             APPROVALLINE.UTICODE%TYPE,
        STACCODE             APPROVALLINE.TACCODE%TYPE,
        STPGCODE             APPROVALLINE.TPGCODE%TYPE,
        SDPTCODE             APPROVALLINE.DPTCODE%TYPE,
        STSMMETIER           APPROVALLINE.TSMMETIER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE APPROVALLINE
               SET UTICODE = SUTICODE,
                   ALIDTCREAT = TRUNC (SYSDATE),
                   TACCODE = STACCODE,
                   TPGCODE = STPGCODE,
                   DPTCODE = SDPTCODE,
                   TSMMETIER = STSMMETIER
             WHERE ALICODE = SALICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_APPROVALPROCESS;

    PROCEDURE D_APPROVALPROCESS (SALICODE             APPROVALLINE.ALICODE%TYPE,
                                 NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            NRETURNCODE := 0;

            SELECT COUNT (*)
              INTO NCOUNT
              FROM ALISTEP
             WHERE ALICODE = SALICODE;

            WHILE NCOUNT > 0
            LOOP
                D_APPROVALPROCESSSTEP (SALICODE, NCOUNT, NRETURNCODE);
                NCOUNT := NCOUNT - 1;
            END LOOP;

            DELETE FROM APPROVALLINE
                  WHERE ALICODE = SALICODE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_APPROVALPROCESS;

    PROCEDURE I_APPROVALPROCESSSTEP (
        SALICODE                      ALISTEP.ALICODE%TYPE,
        NASTORDER                     ALISTEP.ASTORDER%TYPE,
        NASTORDERPARENT               ALISTEP.ASTORDERPARENT%TYPE,
        SUTICODE                      ALISTEP.UTICODE%TYPE,
        SDPTCODE                      ALISTEP.DPTCODE%TYPE,
        SASTPOSITION                  ALISTEP.ASTPOSITION%TYPE,
        NFORID                        ALISTEP.FORID%TYPE,
        SASTLEADER                    ALISTEP.ASTLEADER%TYPE,
        SASTPROCRUN                   ALISTEP.ASTPROCRUN%TYPE,
        SASTPROCREJECTREASON          ALISTEP.ASTPROCREJECTREASON%TYPE,
        NRETURNCODE            IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO ALISTEP (ALICODE,
                                 ASTORDER,
                                 ASTORDERPARENT,
                                 UTICODE,
                                 DPTCODE,
                                 ASTPOSITION,
                                 ASTPROCRUN,
                                 FORID,
                                 ASTLEADER,
                                 ASTPROCREJECTREASON)
                 VALUES (SALICODE,
                         NASTORDER,
                         NASTORDERPARENT,
                         SUTICODE,
                         SDPTCODE,
                         SASTPOSITION,
                         SASTPROCRUN,
                         NFORID,
                         SASTLEADER,
                         SASTPROCREJECTREASON);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_APPROVALPROCESSSTEP;

    PROCEDURE D_APPROVALPROCESSSTEP (
        SALICODE             ALISTEP.ALICODE%TYPE,
        NASTORDER            ALISTEP.ASTORDER%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM ALISTEP
                  WHERE ALICODE = SALICODE AND ASTORDER = NASTORDER;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_APPROVALPROCESSSTEP;

    PROCEDURE U_APPROVALPROCESSSTEP (
        SALICODE                      ALISTEP.ALICODE%TYPE,
        NASTORDER                     ALISTEP.ASTORDER%TYPE,
        NASTORDERPARENT               ALISTEP.ASTORDERPARENT%TYPE,
        SUTICODE                      ALISTEP.UTICODE%TYPE,
        SDPTCODE                      ALISTEP.DPTCODE%TYPE,
        SASTPOSITION                  ALISTEP.ASTPOSITION%TYPE,
        NFORID                        ALISTEP.FORID%TYPE,
        SASTLEADER                    ALISTEP.ASTLEADER%TYPE,
        SASTPROCRUN                   ALISTEP.ASTPROCRUN%TYPE,
        SASTPROCREJECTREASON          ALISTEP.ASTPROCREJECTREASON%TYPE,
        NRETURNCODE            IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE ALISTEP
               SET UTICODE = SUTICODE,
                   DPTCODE = SDPTCODE,
                   ASTPOSITION = SASTPOSITION,
                   FORID = NFORID,
                   ASTPROCRUN = SASTPROCRUN,
                   ASTLEADER = SASTLEADER,
                   ASTPROCREJECTREASON = SASTPROCREJECTREASON
             WHERE ALICODE = SALICODE AND ASTORDER = NASTORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_APPROVALPROCESSSTEP;

    PROCEDURE U_PHASEALICODE (STMOMODULE            TEVPHA.TMOMODULE%TYPE,
                              STMFFONCTION          TEVPHA.TMFFONCTION%TYPE,
                              STACCODE              TEVPHA.TACCODE%TYPE,
                              STEVDEST              TEVPHA.TEVDEST%TYPE,
                              SPHACODE              VARCHAR2,
                              SPHADEST              TEVPHA.PHADEST%TYPE,
                              SALICODE              TEVPHA.ALICODE%TYPE,
                              NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SAPHASELIST   STRING_ARRAY;
        BEGIN
            SAPHASELIST := F_CONVERT_TO_TBL_SARRAY (SPHACODE);

            FOR NINDEX IN 1 .. SAPHASELIST.COUNT
            LOOP
                UPDATE TEVPHA
                   SET ALICODE = SALICODE
                 WHERE     TMOMODULE = STMOMODULE
                       AND TMFFONCTION = STMFFONCTION
                       AND TACCODE = STACCODE
                       AND TEVDEST = STEVDEST
                       AND PHADEST = SPHADEST
                       AND PHACODE = SAPHASELIST (NINDEX);
            END LOOP;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PHASEALICODE;

    PROCEDURE I_DEPARTMENT (
        SDPTCODE         IN     DEPARTMENT.DPTCODE%TYPE,
        SDPTCODEPARENT   IN     DEPARTMENT.DPTCODEPARENT%TYPE,
        SDPTTYPE         IN     DEPARTMENT.DPTTYPE%TYPE,
        SDPTSTATUS       IN     DEPARTMENT.DPTSTATUS%TYPE,
        NACTID           IN     DEPARTMENT.ACTID%TYPE,
        SDPTGROUP        IN     DEPARTMENT.DPTGROUP%TYPE,
        SDPTSIZE         IN     DEPARTMENT.DPTSIZE%TYPE,
        SDPTPOST         IN     DEPARTMENT.DPTPOST%TYPE,
        DDPTDTSTART      IN     DEPARTMENT.DPTDTSTART%TYPE,
        DDPTDTEND        IN     DEPARTMENT.DPTDTEND%TYPE,
        SUTICODE         IN     UTITSM.UTICODE%TYPE,
        STSMMETIER       IN     UTITSM.TSMMETIER%TYPE,
        SUTICODELINKED   IN     UTIUSERLINK.UTICODELINKED%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
            SROWID   ROWID;
        BEGIN
            INSERT INTO DEPARTMENT (DPTCODE,
                                    DPTCODEPARENT,
                                    DPTTYPE,
                                    DPTSTATUS,
                                    ACTID,
                                    DPTGROUP,
                                    DPTSIZE,
                                    DPTPOST,
                                    DPTDTSTART,
                                    DPTDTEND)
                 VALUES (SDPTCODE,
                         SDPTCODEPARENT,
                         SDPTTYPE,
                         SDPTSTATUS,
                         NACTID,
                         SDPTGROUP,
                         SDPTSIZE,
                         SDPTPOST,
                         DDPTDTSTART,
                         DDPTDTEND);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;

            IF SQL%ROWCOUNT <> 0
            THEN
                SELECT ROWID
                  INTO SROWID
                  FROM DEPARTMENT
                 WHERE DPTCODE = SDPTCODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DEPARTMENT',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;

            IF SUTICODELINKED IS NOT NULL
            THEN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM UTITSM
                 WHERE     TSMSECTGESTION = SDPTCODE
                       AND UTICODE = SUTICODE
                       AND TSMMETIER = STSMMETIER;

                IF NCOUNT != 0
                THEN
                    PA_UPDATEPILOTAGE.I_UTIUSERLINK (SUTICODE,
                                                     SUTICODELINKED,
                                                     SDPTCODE,
                                                     STSMMETIER,
                                                     'MANAGER',
                                                     NRETURNCODE);
                ELSE
                    PA_UPDATEPILOTAGE.I_UTITSM (SUTICODE,
                                                SDPTCODE,
                                                STSMMETIER,
                                                0,
                                                0,
                                                NULL,
                                                NULL,
                                                NULL,
                                                SUTICODELINKED,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NRETURNCODE);
                END IF;
            END IF;

            IF DDPTDTEND IS NOT NULL
            THEN
                UPDATE DEPARTMENT
                   SET DPTSTATUS = '99'
                 WHERE DPTCODE = SDPTCODE;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_DEPARTMENT;

    PROCEDURE U_DEPARTMENT (
        SDPTCODE         IN     DEPARTMENT.DPTCODE%TYPE,
        SDPTCODEPARENT   IN     DEPARTMENT.DPTCODEPARENT%TYPE,
        SDPTTYPE         IN     DEPARTMENT.DPTTYPE%TYPE,
        SDPTSTATUS       IN     DEPARTMENT.DPTSTATUS%TYPE,
        NACTID           IN     DEPARTMENT.ACTID%TYPE,
        SDPTGROUP        IN     DEPARTMENT.DPTGROUP%TYPE,
        SDPTSIZE         IN     DEPARTMENT.DPTSIZE%TYPE,
        SDPTPOST         IN     DEPARTMENT.DPTPOST%TYPE,
        DDPTDTSTART      IN     DEPARTMENT.DPTDTSTART%TYPE,
        DDPTDTEND        IN     DEPARTMENT.DPTDTEND%TYPE,
        SUTICODE         IN     UTITSM.UTICODE%TYPE,
        STSMMETIER       IN     UTITSM.TSMMETIER%TYPE,
        SUTICODELINKED   IN     UTIUSERLINK.UTICODELINKED%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
            SROWID   ROWID;
        BEGIN
            UPDATE DEPARTMENT
               SET DPTCODEPARENT = SDPTCODEPARENT,
                   DPTTYPE = SDPTTYPE,
                   DPTSTATUS = SDPTSTATUS,
                   ACTID = NACTID,
                   DPTGROUP = SDPTGROUP,
                   DPTSIZE = SDPTSIZE,
                   DPTPOST = SDPTPOST,
                   DPTDTSTART = DDPTDTSTART,
                   DPTDTEND = DDPTDTEND
             WHERE DPTCODE = SDPTCODE;

            IF SQL%ROWCOUNT <> 0
            THEN
                SELECT ROWID
                  INTO SROWID
                  FROM DEPARTMENT
                 WHERE DPTCODE = SDPTCODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DEPARTMENT',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;

            IF STSMMETIER IS NULL
            THEN
                UPDATE UTIUSERLINK
                   SET ULIDTEND = SYSDATE
                 WHERE     ULISECTGEST = SDPTCODE
                       AND ULITYPE = 'MANAGER'
                       AND UTICODE = SUTICODE
                       AND ULIDTEND IS NULL;
            END IF;

            IF SUTICODELINKED IS NOT NULL
            THEN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM UTITSM
                 WHERE     TSMSECTGESTION = SDPTCODE
                       AND UTICODE = SUTICODE
                       AND TSMMETIER = STSMMETIER;

                IF NCOUNT != 0
                THEN
                    PA_UPDATEPILOTAGE.U_UTITSM (SUTICODE,
                                                SDPTCODE,
                                                STSMMETIER,
                                                0,
                                                0,
                                                NULL,
                                                NULL,
                                                NULL,
                                                SUTICODELINKED,
                                                1,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NRETURNCODE);
                ELSE
                    PA_UPDATEPILOTAGE.I_UTITSM (SUTICODE,
                                                SDPTCODE,
                                                STSMMETIER,
                                                0,
                                                0,
                                                NULL,
                                                NULL,
                                                NULL,
                                                SUTICODELINKED,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NULL,
                                                NRETURNCODE);
                END IF;
            ELSE
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM UTIUSERLINK
                 WHERE     UTICODE = SUTICODE
                       AND ULITYPE = 'MANAGER'
                       AND ULISECTGEST = SDPTCODE
                       AND ULIMETIER = STSMMETIER;

                IF NCOUNT != 0
                THEN
                    PA_UPDATEPILOTAGE.U_UTIUSERLINK (SUTICODE,
                                                     SUTICODELINKED,
                                                     SDPTCODE,
                                                     STSMMETIER,
                                                     'MANAGER',
                                                     1,
                                                     NRETURNCODE);
                END IF;
            END IF;

            IF DDPTDTEND IS NOT NULL
            THEN
                UPDATE DEPARTMENT
                   SET DPTSTATUS = '99'
                 WHERE DPTCODE = SDPTCODE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_DEPARTMENT;

    PROCEDURE D_DEPARTMENT (SDPTCODE      IN     DEPARTMENT.DPTCODE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            SELECT ROWID
              INTO SROWID
              FROM DEPARTMENT
             WHERE DPTCODE = SDPTCODE;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('DEPARTMENT',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM DEPARTMENT
                  WHERE DPTCODE = SDPTCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END D_DEPARTMENT;

    PROCEDURE I_LANDEPARTMENT (
        SDPTCODE      IN     LANDEPARTMENT.DPTCODE%TYPE,
        SLANCODE      IN     LANDEPARTMENT.LANCODE%TYPE,
        SDPTLABEL     IN     LANDEPARTMENT.DPTLABEL%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LANDEPARTMENT (DPTCODE, LANCODE, DPTLABEL)
                 VALUES (SDPTCODE, SLANCODE, SDPTLABEL);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LANDEPARTMENT;

    PROCEDURE U_LANDEPARTMENT (
        SDPTCODE      IN     LANDEPARTMENT.DPTCODE%TYPE,
        SLANCODE      IN     LANDEPARTMENT.LANCODE%TYPE,
        SDPTLABEL     IN     LANDEPARTMENT.DPTLABEL%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE LANDEPARTMENT
               SET DPTLABEL = SDPTLABEL
             WHERE DPTCODE = SDPTCODE AND LANCODE = SLANCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END U_LANDEPARTMENT;

    PROCEDURE D_LANDEPARTMENT (SDPTCODE      IN     LANDEPARTMENT.DPTCODE%TYPE,
                               SLANCODE      IN     LANDEPARTMENT.LANCODE%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LANDEPARTMENT
                  WHERE DPTCODE = SDPTCODE AND LANCODE = SLANCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_LANDEPARTMENT;

    PROCEDURE I_LKTPGTACTCI (
        STCIID           IN     LKTPGTACTCI.TCIID%TYPE,
        STACCODE         IN     LKTPGTACTCI.TACCODE%TYPE,
        STAGCODE         IN     LKTPGTACTCI.TPGCODE%TYPE,
        STTIORDRE        IN     LKTPGTACTCI.TTIORDRE%TYPE,
        ATTIFLAGDEFAUT   IN     LKTPGTACTCI.TTIFLAGDEFAUT%TYPE,
        STTIDTSTART      IN     LKTPGTACTCI.TTIDTSTART%TYPE,
        STTIDTEND        IN     LKTPGTACTCI.TTIDTEND%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO LKTPGTACTCI (TCIID,
                                 TACCODE,
                                 TPGCODE,
                                 TTIORDRE,
                                 TTIFLAGDEFAUT,
                                 TTIDTSTART,
                                 TTIDTEND)
             VALUES (STCIID,
                     STACCODE,
                     STAGCODE,
                     STTIORDRE,
                     ATTIFLAGDEFAUT,
                     STTIDTSTART,
                     STTIDTEND);

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END I_LKTPGTACTCI;

    PROCEDURE U_LKTPGTACTCI (
        STCIID           IN     LKTPGTACTCI.TCIID%TYPE,
        STACCODE         IN     LKTPGTACTCI.TACCODE%TYPE,
        STAGCODE         IN     LKTPGTACTCI.TPGCODE%TYPE,
        STTIORDRE        IN     LKTPGTACTCI.TTIORDRE%TYPE,
        ATTIFLAGDEFAUT   IN     LKTPGTACTCI.TTIFLAGDEFAUT%TYPE,
        STTIDTEND        IN     LKTPGTACTCI.TTIDTEND%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LKTPGTACTCI
           SET TTIORDRE = STTIORDRE,
               TTIFLAGDEFAUT = ATTIFLAGDEFAUT,
               TTIDTEND = STTIDTEND
         WHERE TCIID = STCIID AND TACCODE = STACCODE AND TPGCODE = STAGCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_APP;
        WHEN ERR_I_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_LKTPGTACTCI;

    PROCEDURE D_LKTPGTACTCI (STCIID        IN     LKTPGTACTCI.TCIID%TYPE,
                             STACCODE      IN     LKTPGTACTCI.TACCODE%TYPE,
                             STAGCODE      IN     LKTPGTACTCI.TPGCODE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            NRETURNCODE := 0;

            DELETE FROM LKTPGTACTCI
                  WHERE     TCIID = STCIID
                        AND TACCODE = STACCODE
                        AND TPGCODE = STAGCODE;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_LKTPGTACTCI;

    PROCEDURE I_UTIACTDEFAULT (
        SUTICODE           IN     UTIACTDEFAULT.UTICODE%TYPE,
        SUADORDRE          IN     UTIACTDEFAULT.UADORDRE%TYPE,
        STPGCODE           IN     UTIACTDEFAULT.TPGCODE%TYPE,
        SUADSALESNETWORK   IN     UTIACTDEFAULT.UADSALESNETWORK%TYPE,
        SACTID             IN     UTIACTDEFAULT.ACTID%TYPE,
        SROLCODE           IN     UTIACTDEFAULT.ROLCODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
        SLANGUE   LANDOCUMENT.LANCODE%TYPE := PA_GLOBAL_DECLARE.SGLANGUE;
    BEGIN
        BEGIN
            INSERT INTO UTIACTDEFAULT (UTICODE,
                                       UADORDRE,
                                       TPGCODE,
                                       UADSALESNETWORK,
                                       ACTID,
                                       ROLCODE)
                 VALUES (SUTICODE,
                         SUADORDRE,
                         STPGCODE,
                         SUADSALESNETWORK,
                         SACTID,
                         SROLCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_UTIACTDEFAULT;

    PROCEDURE I_MAXLTV (P_NAPCODE       NAPLTV.NAPCODE%TYPE,
                        P_PAYCODE       NAPLTV.PAYCODE%TYPE,
                        P_NLTDTSTART    NAPLTV.NLTDTSTART%TYPE,
                        P_NLTDTEND      NAPLTV.NLTDTEND%TYPE,
                        P_NLTPCTLTV     NAPLTV.NLTPCTLTV%TYPE,
                        P_NLTORDER      NAPLTV.NLTORDER%TYPE)
    AS
    BEGIN
        INSERT INTO NAPLTV (NAPCODE,
                            PAYCODE,
                            NLTDTSTART,
                            NLTDTEND,
                            NLTPCTLTV,
                            NLTORDER)
             VALUES (P_NAPCODE,
                     P_PAYCODE,
                     P_NLTDTSTART,
                     P_NLTDTEND,
                     P_NLTPCTLTV,
                     P_NLTORDER);
    END I_MAXLTV;

    PROCEDURE D_MAXLTV (P_NAPCODE     NAPLTV.NAPCODE%TYPE,
                        P_PAYCODE     NAPLTV.PAYCODE%TYPE,
                        P_NLTORDER    NAPLTV.NLTORDER%TYPE)
    AS
    BEGIN
        DELETE NAPLTV
         WHERE     NAPCODE = P_NAPCODE
               AND PAYCODE = P_PAYCODE
               AND NLTORDER = P_NLTORDER;
    END D_MAXLTV;

    PROCEDURE U_MAXLTV (P_NAPCODE       NAPLTV.NAPCODE%TYPE,
                        P_PAYCODE       NAPLTV.PAYCODE%TYPE,
                        P_NLTDTSTART    NAPLTV.NLTDTSTART%TYPE,
                        P_NLTDTEND      NAPLTV.NLTDTEND%TYPE,
                        P_NLTPCTLTV     NAPLTV.NLTPCTLTV%TYPE,
                        P_NLTORDER      NAPLTV.NLTORDER%TYPE)
    AS
    BEGIN
        UPDATE NAPLTV
           SET NLTDTEND = P_NLTDTEND,
               NLTDTSTART = P_NLTDTSTART,
               NLTPCTLTV = P_NLTPCTLTV
         WHERE     NAPCODE = P_NAPCODE
               AND PAYCODE = P_PAYCODE
               AND NLTORDER = P_NLTORDER;
    END U_MAXLTV;

    PROCEDURE D_UTILISATEUR_WS (SUTICODE      IN     UTILISATEUR.UTICODE%TYPE,
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            D_L1UTILISATEUR_WS (SUTICODE, NRETURNCODE);

            IF NRETURNCODE = 0
            THEN
                D_UTICOORDONNEE_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTIGCOPREFERENCE_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTIPREFERENCE_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTIPWDHISTORY_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTIRECENTENTITY_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTISCRTEM_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTIUSERLINK_WS (SUTICODE, NRETURNCODE);
            END IF;

            IF NRETURNCODE = 0
            THEN
                D_UTIPRINTRESOURCE_WS (SUTICODE, NRETURNCODE);
            END IF;

            DELETE FROM UTILISATEUR
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTILISATEUR_WS;

    PROCEDURE D_L1UTILISATEUR_WS (
        SUTICODE      IN     L1UTILISATEUR.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM L1UTILISATEUR
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_L1UTILISATEUR_WS;

    PROCEDURE D_UTICOORDONNEE_WS (
        SUTICODE      IN     UTICOORDONNEE.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTICOORDONNEE
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTICOORDONNEE_WS;

    PROCEDURE D_UTIGCOPREFERENCE_WS (
        SUTICODE      IN     UTIGCOPREFERENCE.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIGCOPREFERENCE
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIGCOPREFERENCE_WS;

    PROCEDURE D_UTIPREFERENCE_WS (
        SUTICODE      IN     UTIPREFERENCE.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIPREFERENCE
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIPREFERENCE_WS;

    PROCEDURE D_UTIPWDHISTORY_WS (
        SUTICODE      IN     UTIPWDHISTORY.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIPWDHISTORY
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIPWDHISTORY_WS;

    PROCEDURE D_UTIRECENTENTITY_WS (
        SUTICODE      IN     UTIRECENTENTITY.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIRECENTENTITY
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIRECENTENTITY_WS;

    PROCEDURE D_UTISCRTEM_WS (SUTICODE      IN     UTISCRTEM.UTICODE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTISCRTEM
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTISCRTEM_WS;

    PROCEDURE D_UTIUSERLINK_WS (SUTICODE      IN     UTIUSERLINK.UTICODE%TYPE,
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIUSERLINK
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIUSERLINK_WS;

    PROCEDURE D_UTIPRINTRESOURCE_WS (
        SUTICODE      IN     UTIPRINTRESOURCE.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIPRINTRESOURCE
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIPRINTRESOURCE_WS;

    PROCEDURE D_UTIACTDEFAULT (
        SUTICODE      IN     UTIACTDEFAULT.UTICODE%TYPE,
        NUADORDRE     IN     UTIACTDEFAULT.UADORDRE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTIACTDEFAULT
                  WHERE UTICODE = SUTICODE AND UADORDRE = NUADORDRE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTIACTDEFAULT;

    PROCEDURE U_UTIACTDEFAULT (
        SUTICODE           IN     UTIACTDEFAULT.UTICODE%TYPE,
        SUADORDRE          IN     UTIACTDEFAULT.UADORDRE%TYPE,
        STPGCODE           IN     UTIACTDEFAULT.TPGCODE%TYPE,
        SUADSALESNETWORK   IN     UTIACTDEFAULT.UADSALESNETWORK%TYPE,
        SACTID             IN     UTIACTDEFAULT.ACTID%TYPE,
        SROLCODE           IN     UTIACTDEFAULT.ROLCODE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE UTIACTDEFAULT
               SET TPGCODE = STPGCODE,
                   UADSALESNETWORK = SUADSALESNETWORK,
                   ACTID = SACTID,
                   ROLCODE = SROLCODE
             WHERE UTICODE = SUTICODE AND UADORDRE = SUADORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_REL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_REL_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_REL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_UTIACTDEFAULT;

    PROCEDURE I_GRADE (SDPTCODE             DPTGRADE.DPTCODE%TYPE,
                       SGRADTSTART          DPTGRADE.DGRDTSTART%TYPE,
                       SGRACODE             DPTGRADE.DGRCODE%TYPE,
                       SGRADTEND            DPTGRADE.DGRDTEND%TYPE,
                       NGRANBCC             DPTGRADE.DGRNBCC%TYPE,
                       NGRAORDER            DPTGRADE.DGRORDER%TYPE,
                       NGRAPCTCC            DPTGRADE.DGRPCTCC%TYPE,
                       NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            U_GRADEHISTORY (SDPTCODE,
                            SGRADTSTART,
                            SGRACODE,
                            NRETURNCODE);

            BEGIN
                INSERT INTO DPTGRADE (DPTCODE,
                                      DGRDTSTART,
                                      DGRCODE,
                                      DGRDTEND,
                                      DGRNBCC,
                                      DGRORDER,
                                      DGRPCTCC)
                     VALUES (SDPTCODE,
                             SGRADTSTART,
                             SGRACODE,
                             SGRADTEND,
                             NGRANBCC,
                             NGRAORDER,
                             NGRAPCTCC);

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                ELSE
                    SELECT ROWID
                      INTO SROWID
                      FROM DPTGRADE
                     WHERE DPTCODE = SDPTCODE AND DGRORDER = NGRAORDER;

                    PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DPTGRADE',
                                                          SROWID,
                                                          NRETURNCODE);
                END IF;
            END;
        END;
    END I_GRADE;

    PROCEDURE I_TCHOFFCRITERIA (STWCID               TCHOFFCRITERIA.TWCID%TYPE,
                                NYEAR                NUMBER,
                                SMONTH               VARCHAR2,
                                STARGET              VARCHAR2,
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO TCHOFFCRITERIA (TCCID,
                                        TWCID,
                                        TCCYEAR,
                                        TCCMONTHCODE,
                                        TCCTARGET,
                                        RULID,
                                        TCCFLAGSELECTED,
                                        TCCDATANUMBER,
                                        TCCDATASTRING,
                                        TCCDATADATE)
                SELECT (SELECT NVL (MAX (TCCID), 0) + 1
                          FROM TCHOFFCRITERIA),
                       STWCID,
                       NYEAR,
                       SMONTH,
                       STARGET,
                       TWORUL.RULID,
                       0,
                       0,
                       NULL,
                       NULL
                  FROM TWORUL
                 WHERE     TWCID = STWCID
                       AND TWORUL.RULID NOT IN
                               (SELECT RULID FROM TCHOFFCRITERIA);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END I_TCHOFFCRITERIA;

    PROCEDURE U_GRADE (SDPTCODE             DPTGRADE.DPTCODE%TYPE,
                       SGRADTSTART          DPTGRADE.DGRDTSTART%TYPE,
                       SGRACODE             DPTGRADE.DGRCODE%TYPE,
                       SGRADTEND            DPTGRADE.DGRDTEND%TYPE,
                       NGRANBCC             DPTGRADE.DGRNBCC%TYPE,
                       NGRAORDER            DPTGRADE.DGRORDER%TYPE,
                       NGRAPCTCC            DPTGRADE.DGRPCTCC%TYPE,
                       NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            U_GRADEHISTORY (SDPTCODE,
                            SGRADTSTART,
                            SGRACODE,
                            NRETURNCODE);

            BEGIN
                UPDATE DPTGRADE
                   SET DGRDTSTART = SGRADTSTART,
                       DGRCODE = SGRACODE,
                       DGRDTEND = SGRADTEND,
                       DGRNBCC = NGRANBCC,
                       DGRPCTCC = NGRAPCTCC
                 WHERE DPTCODE = SDPTCODE AND DGRORDER = NGRAORDER;

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                ELSE
                    SELECT ROWID
                      INTO SROWID
                      FROM DPTGRADE
                     WHERE DPTCODE = SDPTCODE AND DGRORDER = NGRAORDER;

                    PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DPTGRADE',
                                                          SROWID,
                                                          NRETURNCODE);
                END IF;
            END;
        END;
    END U_GRADE;

    PROCEDURE U_GRADEHISTORY (SDPTCODE             DPTGRADE.DPTCODE%TYPE,
                              SGRADTSTART          DPTGRADE.DGRDTSTART%TYPE,
                              SGRACODE             DPTGRADE.DGRCODE%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            ORDRE    NUMBER;
            SROWID   ROWID;
        BEGIN
            SELECT MAX (DGRORDER)
              INTO ORDRE
              FROM DPTGRADE
             WHERE DGRCODE = SGRACODE;

            UPDATE DPTGRADE
               SET DGRDTEND = SGRADTSTART - 1
             WHERE DGRORDER = ORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM DPTGRADE
                 WHERE DGRORDER = ORDRE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DPTGRADE',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        END;
    END U_GRADEHISTORY;

    PROCEDURE D_GRADE (SDPTCODE             DPTGRADE.DPTCODE%TYPE,
                       NGRAORDER            DPTGRADE.DGRORDER%TYPE,
                       NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            SELECT ROWID
              INTO SROWID
              FROM DPTGRADE
             WHERE DPTCODE = SDPTCODE AND DGRORDER = NGRAORDER;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('DPTGRADE',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM DPTGRADE
                  WHERE DPTCODE = SDPTCODE AND DGRORDER = NGRAORDER;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END D_GRADE;

    PROCEDURE U_GRADEHISTORYAFTER (SDPTCODE             DPTGRADE.DPTCODE%TYPE,
                                   SGRACODE             DPTGRADE.DGRCODE%TYPE,
                                   NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            ORDRE   NUMBER;
        BEGIN
            SELECT MAX (DGRORDER)
              INTO ORDRE
              FROM DPTGRADE
             WHERE DGRCODE = SGRACODE;

            UPDATE DPTGRADE
               SET DGRDTEND = NULL
             WHERE DGRCODE = SGRACODE AND DGRORDER = ORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END U_GRADEHISTORYAFTER;

    PROCEDURE I_COLLECTORCAP (
        SUTICODE                 UTICCAGENT.UTICODE%TYPE,
        SGRACODE                 UTICCAGENT.UCAGRADE%TYPE,
        SUCADTSTART              UTICCAGENT.UCADTSTART%TYPE,
        NUCAALLOCN               UTICCAGENT.UCAALLOCN%TYPE,
        SDPTCODEMG               UTICCAGENT.DPTCODEMG%TYPE,
        SDPTCODECC               UTICCAGENT.DPTCODECC%TYPE,
        NWQUID                   UTICCAGENT.WQUID%TYPE,
        NUCAALLOCR               UTICCAGENT.UCAALLOCR%TYPE,
        NUCAEXISTALLOCN          UTICCAGENT.UCAEXISTALLOCN%TYPE,
        NUCAEXISTALLOCR          UTICCAGENT.UCAEXISTALLOCR%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            ORDRE           NUMBER;
            NACTIDGESTION   NUMBER;
            SROWID          ROWID;
            DUCADTEND       UTICCAGENT.UCADTEND%TYPE;
        BEGIN
            SELECT MAX (UCAORDER)
              INTO ORDRE
              FROM UTICCAGENT
             WHERE UTICODE = SUTICODE;

            SELECT LAST_DAY (SUCADTSTART) INTO DUCADTEND FROM DUAL;

            IF ORDRE IS NOT NULL
            THEN
                U_COLLCAPHISTORY (SUTICODE, SUCADTSTART, NRETURNCODE);

                INSERT INTO UTICCAGENT (UTICODE,
                                        UCAGRADE,
                                        UCADTSTART,
                                        UCAALLOCN,
                                        UCAORDER,
                                        DPTCODEMG,
                                        DPTCODECC,
                                        WQUID,
                                        UCAALLOCR,
                                        UCAEXISTALLOCN,
                                        UCAEXISTALLOCR,
                                        UCADTEND)
                     VALUES (SUTICODE,
                             SGRACODE,
                             SUCADTSTART,
                             NUCAALLOCN,
                             ORDRE + 1,
                             SDPTCODEMG,
                             SDPTCODECC,
                             NWQUID,
                             NUCAALLOCR,
                             NUCAEXISTALLOCN,
                             NUCAEXISTALLOCR,
                             DUCADTEND);

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                ELSE
                    SELECT ROWID
                      INTO SROWID
                      FROM UTICCAGENT
                     WHERE UCAORDER = ORDRE + 1 AND UTICODE = SUTICODE;

                    PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('UTICCAGENT',
                                                          SROWID,
                                                          NRETURNCODE);
                END IF;
            ELSE
                INSERT INTO UTICCAGENT (UTICODE,
                                        UCAGRADE,
                                        UCADTSTART,
                                        UCAALLOCN,
                                        UCAORDER,
                                        DPTCODEMG,
                                        DPTCODECC,
                                        WQUID,
                                        UCAALLOCR,
                                        UCAEXISTALLOCN,
                                        UCAEXISTALLOCR,
                                        UCADTEND)
                     VALUES (SUTICODE,
                             SGRACODE,
                             SUCADTSTART,
                             NUCAALLOCN,
                             1,
                             SDPTCODEMG,
                             SDPTCODECC,
                             NWQUID,
                             NUCAALLOCR,
                             NUCAEXISTALLOCN,
                             NUCAEXISTALLOCR,
                             DUCADTEND);

                NRETURNCODE := 0;

                IF SQL%ROWCOUNT = 0
                THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                ELSE
                    SELECT ROWID
                      INTO SROWID
                      FROM UTICCAGENT
                     WHERE UCAORDER = 1 AND UTICODE = SUTICODE;

                    PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('UTICCAGENT',
                                                          SROWID,
                                                          NRETURNCODE);
                END IF;
            END IF;
        END;
    END I_COLLECTORCAP;

    PROCEDURE U_COLLECTORCAP (
        SUTICODE                 UTICCAGENT.UTICODE%TYPE,
        SGRACODE                 UTICCAGENT.UCAGRADE%TYPE,
        SUCADTSTART              UTICCAGENT.UCADTSTART%TYPE,
        NUCAALLOCN               UTICCAGENT.UCAALLOCN%TYPE,
        NUCAORDER                UTICCAGENT.UCAORDER%TYPE,
        SDPTCODEMG               UTICCAGENT.DPTCODEMG%TYPE,
        SDPTCODECC               UTICCAGENT.DPTCODECC%TYPE,
        NWQUID                   UTICCAGENT.WQUID%TYPE,
        NUCAALLOCR               UTICCAGENT.UCAALLOCR%TYPE,
        NUCAEXISTALLOCN          UTICCAGENT.UCAEXISTALLOCN%TYPE,
        NUCAEXISTALLOCR          UTICCAGENT.UCAEXISTALLOCR%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            UPDATE UTICCAGENT
               SET UCAGRADE = SGRACODE,
                   UCADTSTART = SUCADTSTART,
                   UCAALLOCN = NUCAALLOCN,
                   DPTCODEMG = SDPTCODEMG,
                   DPTCODECC = SDPTCODECC,
                   WQUID = NWQUID,
                   UCAALLOCR = NUCAALLOCR,
                   UCAEXISTALLOCN = NUCAEXISTALLOCN,
                   UCAEXISTALLOCR = NUCAEXISTALLOCR
             WHERE UCAORDER = NUCAORDER AND UTICODE = SUTICODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM UTICCAGENT
                 WHERE UCAORDER = NUCAORDER AND UTICODE = SUTICODE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('UTICCAGENT',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        END;
    END U_COLLECTORCAP;

    PROCEDURE U_COLLCAPHISTORY (
        SUTICODE             UTICCAGENT.UTICODE%TYPE,
        SUCADTSTART          UTICCAGENT.UCADTSTART%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            ORDRE    NUMBER;
            SROWID   ROWID;
        BEGIN
            SELECT MAX (UCAORDER)
              INTO ORDRE
              FROM UTICCAGENT
             WHERE UTICODE = SUTICODE;

            UPDATE UTICCAGENT
               SET UCADTEND = SUCADTSTART - 1
             WHERE UTICODE = SUTICODE AND UCAORDER = ORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            ELSE
                SELECT ROWID
                  INTO SROWID
                  FROM UTICCAGENT
                 WHERE UTICODE = SUTICODE AND UCAORDER = ORDRE;

                PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('UTICCAGENT',
                                                      SROWID,
                                                      NRETURNCODE);
            END IF;
        END;
    END U_COLLCAPHISTORY;

    PROCEDURE D_COLLECTORCAP (SUTICODE             UTICCAGENT.UTICODE%TYPE,
                              NUCAORDER            UTICCAGENT.UCAORDER%TYPE,
                              NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            SROWID   ROWID;
        BEGIN
            SELECT ROWID
              INTO SROWID
              FROM UTICCAGENT
             WHERE UTICODE = SUTICODE AND UCAORDER = NUCAORDER;

            PA_AUDITTABLE.P_AUDIT_RECORD_DEL ('UTICCAGENT',
                                              SROWID,
                                              NRETURNCODE);

            DELETE FROM UTICCAGENT
                  WHERE UTICODE = SUTICODE AND UCAORDER = NUCAORDER;

            --U_COLLCAPHISTORYAFTER(sUticode,nReturnCode);
            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END D_COLLECTORCAP;

    PROCEDURE U_COLLCAPHISTORYAFTER (
        SUTICODE             UTICCAGENT.UTICODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            ORDRE   NUMBER;
        BEGIN
            SELECT MAX (UCAORDER)
              INTO ORDRE
              FROM UTICCAGENT
             WHERE UTICODE = SUTICODE;

            UPDATE UTICCAGENT
               SET UCADTEND = NULL
             WHERE UTICODE = SUTICODE AND UCAORDER = ORDRE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END U_COLLCAPHISTORYAFTER;

    PROCEDURE D_UTITSM_WS (SUTICODE      IN     UTITSM.UTICODE%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
        BEGIN
            DELETE FROM UTITSM
                  WHERE UTICODE = SUTICODE;

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := ERR_USER_INVALIDATION_CONST;
        END;
    END D_UTITSM_WS;

    PROCEDURE P_COPY_DPTPAYREG (
        SDPTCODE         IN     DPTPAYREG.DPTCODE%TYPE,
        NDPRORDER        IN     DPTPAYREG.DPRORDER%TYPE,
        SPAYCODE         IN     DPTPAYREG.PAYCODE%TYPE,
        SPRECODE         IN     DPTPAYREG.PRECODE%TYPE,
        SPRETYPE         IN     DPTPAYREG.PRETYPE%TYPE,
        SDPTCODEPOST     IN     DPTPAYREG.DPTCODEPOST%TYPE,
        NACTIDCOURT      IN     DPTPAYREG.ACTIDCOURT%TYPE,
        SDPRATTRIBUTE    IN     DPTPAYREG.DPRATTRIBUTE%TYPE,
        DTNEWSTARTDATE   IN     DATE,
        DTDPRDTEND       IN     DPTPAYREG.DPRDTEND%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT      NUMBER;
            DDPRDTEND   DPTPAYREG.DPRDTEND%TYPE;
        BEGIN
            BEGIN
                SELECT LAST_DAY (DTNEWSTARTDATE) INTO DDPRDTEND FROM DUAL;

                /*IF sPAYCODE IS NULL AND sPRECODE IS NULL AND sPRETYPE IS NULL THEN
                SELECT COUNT(*) INTO nCount FROM DPTPAYREG WHERE DPTCODE = sDPTCODE AND DPRDTBEG = dtnewStartDate;
                ELSIF sPAYCODE IS NOT NULL AND sPRECODE IS NULL AND sPRETYPE IS NULL THEN
                SELECT COUNT(*) INTO nCount FROM DPTPAYREG WHERE DPTCODE = sDPTCODE AND DPRDTBEG = dtnewStartDate AND PAYCODE = sPAYCODE;
                ELSIF sPAYCODE IS NOT NULL AND sPRECODE IS NOT NULL AND sPRETYPE IS NULL THEN
                SELECT COUNT(*) INTO nCount FROM DPTPAYREG WHERE DPTCODE = sDPTCODE AND DPRDTBEG = dtnewStartDate AND PAYCODE = sPAYCODE AND PRECODE = sPreCode;
                ELSE
                SELECT COUNT(*) INTO nCount FROM DPTPAYREG WHERE DPTCODE = sDPTCODE AND DPRDTBEG = dtnewStartDate AND PAYCODE = sPAYCODE AND PRECODE = sPreCode AND PRETYPE = sPRETYPE;
                END IF;
                IF nCount > 0 THEN
                RAISE DUP_VAL_ON_INDEX;
                END IF; */
                INSERT INTO DPTPAYREG (DPTCODE,
                                       DPRORDER,
                                       PAYCODE,
                                       PRECODE,
                                       PRETYPE,
                                       DPTCODEPOST,
                                       ACTIDCOURT,
                                       DPRATTRIBUTE,
                                       DPRDTBEG,
                                       DPRDTEND)
                     VALUES (SDPTCODE,
                             (SELECT NVL (MAX (DPRORDER), 0) + 1
                                FROM DPTPAYREG
                               WHERE DPTCODE = SDPTCODE),
                             SPAYCODE,
                             SPRECODE,
                             SPRETYPE,
                             SDPTCODEPOST,
                             NACTIDCOURT,
                             SDPRATTRIBUTE,
                             DTNEWSTARTDATE,
                             DDPRDTEND);

                NRETURNCODE := 0;
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CCCP;
                WHEN OTHERS
                THEN
                    NRETURNCODE := SQLCODE * (-1);
            END;
        END;
    END P_COPY_DPTPAYREG;

    PROCEDURE P_COPY_UTIPAYREG (
        SUTICODE         IN     UTIPAYREG.UTICODE%TYPE,
        NUPRORDER        IN     UTIPAYREG.UPRORDER%TYPE,
        SPAYCODE         IN     UTIPAYREG.PAYCODE%TYPE,
        SPRECODE         IN     UTIPAYREG.PRECODE%TYPE,
        SPRETYPE         IN OUT UTIPAYREG.PRETYPE%TYPE,
        DTNEWSTARTDATE   IN     DATE,
        DTUPRDTEND       IN     UTIPAYREG.UPRDTEND%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER;
        BEGIN
            BEGIN
                IF DTUPRDTEND IS NULL
                THEN
                    IF     SPAYCODE IS NOT NULL
                       AND SPRECODE IS NOT NULL
                       AND SPRETYPE IS NULL
                    THEN
                        SELECT MAX (PRETYPE)
                          INTO SPRETYPE
                          FROM PAYREGION A
                         WHERE A.PAYCODE = SPAYCODE AND A.PRECODE = SPRECODE;
                    END IF;

                    IF     SPAYCODE IS NULL
                       AND SPRECODE IS NULL
                       AND SPRETYPE IS NULL
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM UTIPAYREG
                         WHERE     UTICODE = SUTICODE
                               AND UPRDTBEG = DTNEWSTARTDATE;
                    ELSIF     SPAYCODE IS NOT NULL
                          AND SPRECODE IS NULL
                          AND SPRETYPE IS NULL
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM UTIPAYREG
                         WHERE     UTICODE = SUTICODE
                               AND UPRDTBEG = DTNEWSTARTDATE
                               AND PAYCODE = SPAYCODE;
                    ELSIF     SPAYCODE IS NOT NULL
                          AND SPRECODE IS NOT NULL
                          AND SPRETYPE IS NULL
                    THEN
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM UTIPAYREG
                         WHERE     UTICODE = SUTICODE
                               AND UPRDTBEG = DTNEWSTARTDATE
                               AND PAYCODE = SPAYCODE
                               AND PRECODE = SPRECODE;
                    ELSE
                        SELECT COUNT (*)
                          INTO NCOUNT
                          FROM UTIPAYREG
                         WHERE     UTICODE = SUTICODE
                               AND UPRDTBEG = DTNEWSTARTDATE
                               AND PAYCODE = SPAYCODE
                               AND PRECODE = SPRECODE
                               AND PRETYPE = SPRETYPE;
                    END IF;

                    IF NCOUNT > 0
                    THEN
                        RAISE DUP_VAL_ON_INDEX;
                    END IF;

                    INSERT INTO UTIPAYREG (UTICODE,
                                           UPRORDER,
                                           PAYCODE,
                                           PRECODE,
                                           PRETYPE,
                                           UPRDTBEG)
                         VALUES (SUTICODE,
                                 NUPRORDER + 1,
                                 SPAYCODE,
                                 SPRECODE,
                                 SPRETYPE,
                                 DTNEWSTARTDATE);

                    UPDATE UTIPAYREG
                       SET UPRDTEND = DTNEWSTARTDATE - 1
                     WHERE UTICODE = SUTICODE AND UPRORDER = NUPRORDER;
                END IF;

                NRETURNCODE := 0;
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CCCP;
                WHEN OTHERS
                THEN
                    NRETURNCODE := SQLCODE * (-1);
            END;
        END;
    END P_COPY_UTIPAYREG;

    PROCEDURE P_COPY_UTICCAGENT (
        SUTICODE         IN     UTILISATEUR.UTICODE%TYPE,
        NUCAORDER        IN     UTICCAGENT.UCAORDER%TYPE,
        SDPTCODEMG       IN     UTICCAGENT.DPTCODEMG%TYPE,
        SUCAGRADE        IN     UTICCAGENT.UCAGRADE%TYPE,
        DTNEWSTARTDATE   IN     DATE,
        NUCAALLOCN       IN     UTICCAGENT.UCAALLOCN%TYPE,
        SDTPCODECC       IN     UTICCAGENT.DPTCODECC%TYPE,
        NWQUID           IN     UTICCAGENT.WQUID%TYPE,
        NUCAALLOCR       IN     UTICCAGENT.UCAALLOCR%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NUCAORDERMAX    NUMBER;
            NACTIDGESTION   NUMBER;
            DUCADTEND       UTICCAGENT.UCADTEND%TYPE;
            NCOUNT          NUMBER;
        BEGIN
            BEGIN
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM UTICCAGENT
                 WHERE UTICODE = SUTICODE AND UCADTSTART = DTNEWSTARTDATE;

                SELECT LAST_DAY (DTNEWSTARTDATE) INTO DUCADTEND FROM DUAL;

                IF NCOUNT > 0
                THEN
                    RAISE DUP_VAL_ON_INDEX;
                END IF;

                SELECT NVL (MAX (UCAORDER), 0)
                  INTO NUCAORDERMAX
                  FROM UTICCAGENT
                 WHERE UTICODE = SUTICODE;

                INSERT INTO UTICCAGENT (UTICODE,
                                        UCAORDER,
                                        DPTCODEMG,
                                        UCAGRADE,
                                        UCADTSTART,
                                        UCAALLOCN,
                                        DPTCODECC,
                                        WQUID,
                                        UCAALLOCR,
                                        UCADTEND)
                     VALUES (SUTICODE,
                             NUCAORDERMAX + 1,
                             SDPTCODEMG,
                             SUCAGRADE,
                             DTNEWSTARTDATE,
                             NUCAALLOCN,
                             SDTPCODECC,
                             NWQUID,
                             NUCAALLOCR,
                             DUCADTEND);

                NRETURNCODE := 0;
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CCCP;
                WHEN OTHERS
                THEN
                    NRETURNCODE := SQLCODE * (-1);
            END;
        END;
    END P_COPY_UTICCAGENT;

    PROCEDURE U_UTITSMMATURITY (
        STSMSECTGESTION              UTITSMMATURITY.TSMSECTGESTION%TYPE,
        SUTICODE                     UTITSMMATURITY.UTICODE%TYPE,
        STSMMETIER                   UTITSMMATURITY.TSMMETIER%TYPE,
        NUTMORDER                    UTITSMMATURITY.UTMORDER%TYPE,
        NUTMMONTH                    UTITSMMATURITY.UTMMONTH%TYPE,
        NUTMYEAR                     UTITSMMATURITY.UTMYEAR%TYPE,
        NUTMINDCAPRATIO              UTITSMMATURITY.UTMINDCAPRATIO%TYPE,
        NUTMCORPCAPRATIO             UTITSMMATURITY.UTMCORPCAPRATIO%TYPE,
        NUTMINDNONCAPRATIO           UTITSMMATURITY.UTMINDNONCAPRATIO%TYPE,
        NUTMCORPNONCAPRATIO          UTITSMMATURITY.UTMCORPNONCAPRATIO%TYPE,
        NUTMINDIMPRATIO              UTITSMMATURITY.UTMINDIMPRATIO%TYPE,
        NUTMCORPIMPRATIO             UTITSMMATURITY.UTMCORPIMPRATIO%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE UTITSMMATURITY
               SET UTMMONTH = NUTMMONTH,
                   UTMYEAR = NUTMYEAR,
                   UTMINDCAPRATIO = NUTMINDCAPRATIO,
                   UTMCORPCAPRATIO = NUTMCORPCAPRATIO,
                   UTMINDNONCAPRATIO = NUTMINDNONCAPRATIO,
                   UTMCORPNONCAPRATIO = NUTMCORPNONCAPRATIO,
                   UTMINDIMPRATIO = NUTMINDIMPRATIO,
                   UTMCORPIMPRATIO = NUTMCORPIMPRATIO
             WHERE     TSMSECTGESTION = STSMSECTGESTION
                   AND UTICODE = SUTICODE
                   AND TSMMETIER = STSMMETIER
                   AND UTMORDER = NUTMORDER;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := SQLCODE * (-1);
        END;
    END U_UTITSMMATURITY;

    PROCEDURE P_UTITSMMATURITY (
        SDPTCODE              UTITSMMATURITY.TSMSECTGESTION%TYPE,
        STSMPARTNAME          UTITSM.TSMPARTNAME%TYPE,
        NRETURNCODE    IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            --GET ALL THE USERS OF
            CURSOR C1
            IS
                SELECT DISTINCT UTICODE
                  FROM UTITSM
                 WHERE     TSMSECTGESTION = SDPTCODE
                       AND TSMDTEND IS NULL
                       AND TO_CHAR (TSMDTSTART, 'mm') <=
                           TO_CHAR (SYSDATE, 'mm')
                       AND TO_CHAR (TSMDTSTART, 'yyyy') <=
                           TO_CHAR (SYSDATE, 'yyyy');

            NCOUNT       NUMBER;
            STSMMETIER   UTITSM.TSMMETIER%TYPE;
        BEGIN
            NRETURNCODE := 0;

            FOR C1R IN C1
            LOOP
                SELECT COUNT (*)
                  INTO NCOUNT
                  FROM UTITSM
                 WHERE UTICODE = C1R.UTICODE AND TSMDTEND IS NULL;

                IF NCOUNT = 0
                THEN
                    DELETE UTITSMMATURITY
                     WHERE     TSMSECTGESTION = SDPTCODE
                           AND UTICODE = C1R.UTICODE;
                ELSE
                    SELECT TSMMETIER
                      INTO STSMMETIER
                      FROM UTITSM
                     WHERE     UTICODE = C1R.UTICODE
                           AND TSMDTEND IS NULL
                           AND ROWNUM = 1;

                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM UTITSMMATURITY
                     WHERE     UTICODE = C1R.UTICODE
                           AND TSMSECTGESTION = SDPTCODE
                           AND TSMMETIER = STSMMETIER;

                    IF NCOUNT = 0
                    THEN
                        INSERT INTO UTITSMMATURITY (TSMSECTGESTION,
                                                    UTICODE,
                                                    TSMMETIER,
                                                    UTMMONTH,
                                                    UTMYEAR,
                                                    UTMORDER)
                             VALUES (SDPTCODE,
                                     C1R.UTICODE,
                                     STSMMETIER,
                                     TO_CHAR (SYSDATE, 'mm'),
                                     TO_CHAR (SYSDATE, 'yyyy'),
                                     1);
                    END IF;
                END IF;
            END LOOP;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END P_UTITSMMATURITY;

    PROCEDURE I_UTITSMMATURITY (
        SUTICODE                     UTITSMMATURITY.UTICODE%TYPE,
        STSMSECTGESTION              UTITSMMATURITY.TSMSECTGESTION%TYPE,
        STSMMETIER                   UTITSMMATURITY.TSMMETIER%TYPE,
        --   nUtmorder                 UTITSMMATURITY.UTMORDER%TYPE,
        NUTMMONTH                    UTITSMMATURITY.UTMMONTH%TYPE,
        NUTMYEAR                     UTITSMMATURITY.UTMYEAR%TYPE,
        NUTMINDCAPRATIO              UTITSMMATURITY.UTMINDCAPRATIO%TYPE,
        NUTMCORPCAPRATIO             UTITSMMATURITY.UTMCORPCAPRATIO%TYPE,
        NUTMINDNONCAPRATIO           UTITSMMATURITY.UTMINDNONCAPRATIO%TYPE,
        NUTMCORPNONCAPRATIO          UTITSMMATURITY.UTMCORPNONCAPRATIO%TYPE,
        NUTMINDIMPRATIO              UTITSMMATURITY.UTMINDIMPRATIO%TYPE,
        NUTMCORPIMPRATIO             UTITSMMATURITY.UTMCORPIMPRATIO%TYPE,
        NUTMINDCAPCOUNT              UTITSMMATURITY.UTMINDCAPCOUNT%TYPE,
        NUTMCORPCAPCOUNT             UTITSMMATURITY.UTMCORPCAPCOUNT%TYPE,
        NUTMINDNONCAPCOUNT           UTITSMMATURITY.UTMINDNONCAPCOUNT%TYPE,
        NUTMCORPNONCAPCOUNT          UTITSMMATURITY.UTMCORPNONCAPCOUNT%TYPE,
        NUTMINDIMPCOUNT              UTITSMMATURITY.UTMINDIMPCOUNT%TYPE,
        NUTMCORPIMPCOUNT             UTITSMMATURITY.UTMCORPIMPCOUNT%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NORDERE   NUMBER;
        BEGIN
            SELECT NVL (MAX (UTMORDER), 0) + 1
              INTO NORDERE
              FROM UTITSMMATURITY
             WHERE     UTICODE = SUTICODE
                   AND TSMSECTGESTION = STSMSECTGESTION
                   AND TSMMETIER = STSMMETIER;

            NORDERE := NORDERE + 1;

            INSERT INTO UTITSMMATURITY (UTICODE,
                                        TSMSECTGESTION,
                                        TSMMETIER,
                                        UTMMONTH,
                                        UTMYEAR,
                                        UTMINDCAPRATIO,
                                        UTMCORPCAPRATIO,
                                        UTMINDNONCAPRATIO,
                                        UTMCORPNONCAPRATIO,
                                        UTMINDIMPRATIO,
                                        UTMCORPIMPRATIO,
                                        UTMINDCAPCOUNT,
                                        UTMCORPCAPCOUNT,
                                        UTMINDNONCAPCOUNT,
                                        UTMCORPNONCAPCOUNT,
                                        UTMINDIMPCOUNT,
                                        UTMCORPIMPCOUNT,
                                        UTMORDER)
                 VALUES (SUTICODE,
                         STSMSECTGESTION,
                         STSMMETIER,
                         NUTMMONTH,
                         NUTMYEAR,
                         NUTMINDCAPRATIO,
                         NUTMCORPCAPRATIO,
                         NUTMINDNONCAPRATIO,
                         NUTMCORPNONCAPRATIO,
                         NUTMINDIMPRATIO,
                         NUTMCORPIMPRATIO,
                         NUTMINDCAPCOUNT,
                         NUTMCORPCAPCOUNT,
                         NUTMINDNONCAPCOUNT,
                         NUTMCORPNONCAPCOUNT,
                         NUTMINDIMPCOUNT,
                         NUTMCORPIMPCOUNT,
                         NORDERE);
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := SQLCODE * (-1);
        END;
    END I_UTITSMMATURITY;

    PROCEDURE P_COPY_DPTGRADE (
        SDPTCODE         IN     DPTGRADE.DPTCODE%TYPE,
        SDGRCODE         IN     DPTGRADE.DGRCODE%TYPE,
        NDGRORDER        IN     DPTGRADE.DGRORDER%TYPE,
        DTDGRDTSTART     IN     DPTGRADE.DGRDTSTART%TYPE,
        DTDGRDTEND       IN     DPTGRADE.DGRDTEND%TYPE,
        NDGRPCTCC        IN     DPTGRADE.DGRPCTCC%TYPE,
        NDGRNBCC         IN     DPTGRADE.DGRNBCC%TYPE,
        DTNEWSTARTDATE   IN     DATE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NDGRORDERMAX   NUMBER;
            NCOUNT         NUMBER;
            SROWID         ROWID;
        BEGIN
            BEGIN
                IF DTDGRDTEND IS NULL
                THEN
                    SELECT COUNT (*)
                      INTO NCOUNT
                      FROM DPTGRADE
                     WHERE DPTCODE = SDPTCODE AND DGRDTSTART = DTNEWSTARTDATE;

                    IF NCOUNT > 0
                    THEN
                        RAISE DUP_VAL_ON_INDEX;
                    END IF;

                    SELECT NVL (MAX (DGRORDER), 0)
                      INTO NDGRORDERMAX
                      FROM DPTGRADE
                     WHERE DPTCODE = SDPTCODE;

                    INSERT INTO DPTGRADE (DPTCODE,
                                          DGRCODE,
                                          DGRORDER,
                                          DGRDTSTART,
                                          DGRPCTCC,
                                          DGRNBCC)
                         VALUES (SDPTCODE,
                                 SDGRCODE,
                                 NDGRORDERMAX + 1,
                                 DTNEWSTARTDATE,
                                 NDGRPCTCC,
                                 NDGRNBCC);

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT <> 0
                    THEN
                        SELECT ROWID
                          INTO SROWID
                          FROM DPTGRADE
                         WHERE     DPTCODE = SDPTCODE
                               AND DGRORDER = NDGRORDERMAX + 1;

                        PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DPTGRADE',
                                                              SROWID,
                                                              NRETURNCODE);
                    END IF;

                    UPDATE DPTGRADE
                       SET DGRDTEND = DTNEWSTARTDATE - 1
                     WHERE     DPTCODE = SDPTCODE
                           AND DGRCODE = SDGRCODE
                           AND DGRORDER = NDGRORDER
                           AND DGRDTEND IS NULL;

                    NRETURNCODE := 0;

                    IF SQL%ROWCOUNT <> 0
                    THEN
                        SELECT ROWID
                          INTO SROWID
                          FROM DPTGRADE
                         WHERE     DPTCODE = SDPTCODE
                               AND DGRCODE = SDGRCODE
                               AND DGRORDER = NDGRORDER
                               AND DGRDTEND IS NULL;

                        PA_AUDITTABLE.P_AUDIT_RECORD_UPD_INS ('DPTGRADE',
                                                              SROWID,
                                                              NRETURNCODE);
                    END IF;
                END IF;

                NRETURNCODE := 0;
            EXCEPTION
                WHEN DUP_VAL_ON_INDEX
                THEN
                    NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CCCP;
                WHEN OTHERS
                THEN
                    NRETURNCODE := SQLCODE * (-1);
            END;
        END;
    END P_COPY_DPTGRADE;

    PROCEDURE S_ALISTEP_ON_CODE (SALICODE           ALISTEP.ALICODE%TYPE,
                                 PC_RETURN   IN OUT T_CURSOR)
    AS
    BEGIN
        OPEN PC_RETURN FOR SELECT *
                             FROM ALISTEP
                            WHERE ALICODE = SALICODE;
    END S_ALISTEP_ON_CODE;

    PROCEDURE I_TCHOFFCRITERIA (
        STWCID                    TCHOFFCRITERIA.TWCID%TYPE,
        NTCCYEAR                  TCHOFFCRITERIA.TCCYEAR%TYPE,
        NTCCMONTHCODE             TCHOFFCRITERIA.TCCMONTHCODE%TYPE,
        STCCTARGET                TCHOFFCRITERIA.TCCTARGET%TYPE,
        SRULID                    TCHOFFCRITERIA.RULID%TYPE,
        STCCFLAGSELECTED          TCHOFFCRITERIA.TCCFLAGSELECTED%TYPE,
        NTCCDATANUMBER            TCHOFFCRITERIA.TCCDATANUMBER%TYPE,
        STCCDATASTRING            TCHOFFCRITERIA.TCCDATASTRING%TYPE,
        STCCDATADATE              TCHOFFCRITERIA.TCCDATADATE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM TCHOFFCRITERIA
                  WHERE TWCID = STWCID AND RULID = SRULID;

            INSERT INTO TCHOFFCRITERIA (TCCID,
                                        TWCID,
                                        TCCYEAR,
                                        TCCMONTHCODE,
                                        TCCTARGET,
                                        RULID,
                                        TCCFLAGSELECTED,
                                        TCCDATANUMBER,
                                        TCCDATASTRING,
                                        TCCDATADATE)
                 VALUES ((SELECT NVL (MAX (TCCID), 0) + 1
                            FROM TCHOFFCRITERIA),
                         STWCID,
                         NTCCYEAR,
                         NTCCMONTHCODE,
                         STCCTARGET,
                         SRULID,
                         STCCFLAGSELECTED,
                         NTCCDATANUMBER,
                         STCCDATASTRING,
                         STCCDATADATE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END I_TCHOFFCRITERIA;

    PROCEDURE U_TCHOFFCRITERIA (
        NTCCID                    TCHOFFCRITERIA.TCCID%TYPE,
        STWCID                    TCHOFFCRITERIA.TWCID%TYPE,
        NTCCYEAR                  TCHOFFCRITERIA.TCCYEAR%TYPE,
        NTCCMONTHCODE             TCHOFFCRITERIA.TCCMONTHCODE%TYPE,
        STCCTARGET                TCHOFFCRITERIA.TCCTARGET%TYPE,
        SRULID                    TCHOFFCRITERIA.RULID%TYPE,
        STCCFLAGSELECTED          TCHOFFCRITERIA.TCCFLAGSELECTED%TYPE,
        NTCCDATANUMBER            TCHOFFCRITERIA.TCCDATANUMBER%TYPE,
        STCCDATASTRING            TCHOFFCRITERIA.TCCDATASTRING%TYPE,
        STCCDATADATE              TCHOFFCRITERIA.TCCDATADATE%TYPE,
        NRETURNCODE        IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TCHOFFCRITERIA
               SET TCCFLAGSELECTED = STCCFLAGSELECTED,
                   TCCDATANUMBER = NTCCDATANUMBER,
                   TCCDATASTRING = STCCDATASTRING,
                   TCCDATADATE = STCCDATADATE
             WHERE TCCID = NTCCID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END U_TCHOFFCRITERIA;

    PROCEDURE I_TEVCOMPATIBILITY (
        STCOCOMPTYPE             IN     TEVCOMPATIBILITY.TCOCOMPTYPE%TYPE,
        STEVDEST                 IN     TEVCOMPATIBILITY.TEVDEST%TYPE,
        STACCODE                 IN     TEVCOMPATIBILITY.TACCODE%TYPE,
        STMOMODULE               IN     TEVCOMPATIBILITY.TMOMODULE%TYPE,
        STMFFONCTION             IN     TEVCOMPATIBILITY.TMFFONCTION%TYPE,
        STEVDESTCOMPATIBLE       IN     TEVCOMPATIBILITY.TEVDESTCOMPATIBLE%TYPE,
        STACCODECOMPATIBLE       IN     TEVCOMPATIBILITY.TACCODECOMPATIBLE%TYPE,
        STMOMODULECOMPATIBLE     IN     TEVCOMPATIBILITY.TMOMODULECOMPATIBLE%TYPE,
        STMFFONCTIONCOMPATIBLE   IN     TEVCOMPATIBILITY.TMFFONCTIONCOMPATIBLE%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NMAXORDER   NUMBER := 1;
        BEGIN
            SELECT NVL (MAX (TCOORDER), 0) + 1
              INTO NMAXORDER
              FROM TEVCOMPATIBILITY
             WHERE     TEVDEST = STEVDEST
                   AND TACCODE = STACCODE
                   AND TMOMODULE = STMOMODULE
                   AND TMFFONCTION = STMFFONCTION;

            INSERT INTO TEVCOMPATIBILITY (TCOCOMPTYPE,
                                          TEVDEST,
                                          TACCODE,
                                          TMOMODULE,
                                          TMFFONCTION,
                                          TEVDESTCOMPATIBLE,
                                          TACCODECOMPATIBLE,
                                          TMOMODULECOMPATIBLE,
                                          TMFFONCTIONCOMPATIBLE,
                                          TCOORDER)
                 VALUES (STCOCOMPTYPE,
                         STEVDEST,
                         STACCODE,
                         STMOMODULE,
                         STMFFONCTION,
                         STEVDESTCOMPATIBLE,
                         STACCODECOMPATIBLE,
                         STMOMODULECOMPATIBLE,
                         STMFFONCTIONCOMPATIBLE,
                         NMAXORDER);
        END;
    END I_TEVCOMPATIBILITY;

    PROCEDURE D_TEVCOMPATIBILITY (
        STCOCOMPTYPE             IN     TEVCOMPATIBILITY.TCOCOMPTYPE%TYPE,
        STEVDEST                 IN     TEVCOMPATIBILITY.TEVDEST%TYPE,
        STACCODE                 IN     TEVCOMPATIBILITY.TACCODE%TYPE,
        STMOMODULE               IN     TEVCOMPATIBILITY.TMOMODULE%TYPE,
        STMFFONCTION             IN     TEVCOMPATIBILITY.TMFFONCTION%TYPE,
        STEVDESTCOMPATIBLE       IN     TEVCOMPATIBILITY.TEVDESTCOMPATIBLE%TYPE,
        STACCODECOMPATIBLE       IN     TEVCOMPATIBILITY.TACCODECOMPATIBLE%TYPE,
        STMOMODULECOMPATIBLE     IN     TEVCOMPATIBILITY.TMOMODULECOMPATIBLE%TYPE,
        STMFFONCTIONCOMPATIBLE   IN     TEVCOMPATIBILITY.TMFFONCTIONCOMPATIBLE%TYPE,
        NTCOORDER                IN     TEVCOMPATIBILITY.TCOORDER%TYPE,
        NRETURNCODE              IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM TEVCOMPATIBILITY
              WHERE     TCOCOMPTYPE = STCOCOMPTYPE
                    AND TEVDEST = STEVDEST
                    AND TACCODE = STACCODE
                    AND TMOMODULE = STMOMODULE
                    AND TMFFONCTION = STMFFONCTION
                    AND TEVDESTCOMPATIBLE = STEVDESTCOMPATIBLE
                    AND TACCODECOMPATIBLE = STACCODECOMPATIBLE
                    AND TMOMODULECOMPATIBLE = STMOMODULECOMPATIBLE
                    AND TMFFONCTIONCOMPATIBLE = STMFFONCTIONCOMPATIBLE
                    AND TCOORDER = NTCOORDER;
    END D_TEVCOMPATIBILITY;

    PROCEDURE D_TCHOFFCRITERIA (NTCCID               TCHOFFCRITERIA.TCCID%TYPE,
                                SRULID               TCHOFFCRITERIA.RULID%TYPE,
                                NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM TCHOFFCRITERIA
                  WHERE TCCID = NTCCID AND RULID = SRULID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END;
    END D_TCHOFFCRITERIA;

    PROCEDURE CHECKCONTROL (STPCCODE      IN     LKPHATTC.TPCCODE%TYPE,
                            STPCDEST      IN     LKPHATTC.TPCDEST%TYPE,
                            STTCCODE      IN     LKPHATTC.TTCCODE%TYPE,
                            SPHACODE      IN     LKPHATTC.PHACODE%TYPE,
                            STACCODE      IN     LKPHATTC.TACCODE%TYPE,
                            STPGCODE      IN     LKPHATTC.TPGCODE%TYPE,
                            NRETURNCODE   IN OUT NUMBER)
    AS
        NCOUNT   NUMBER;
    BEGIN
        SELECT COUNT (*)
          INTO NCOUNT
          FROM LKPHATTC
         WHERE     TPCCODE = STPCCODE
               AND TPCDEST = STPCDEST
               AND TTCCODE = STTCCODE
               AND PHACODE = SPHACODE
               AND PHADEST = STPCDEST
               AND TACCODE = STACCODE
               AND TPGCODE = STPGCODE;

        IF NCOUNT > 0
        THEN
            NRETURNCODE := ERR_CONTROL_PRESENT_CONST;
        ELSE
            NRETURNCODE := 0;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := ERR_CONTROL_PRESENT_CONST;
    END CHECKCONTROL;

    PROCEDURE I_STEPS (
        STPCCODE         IN     LKPHAJALTTC.TPCCODE%TYPE,
        STPCDEST         IN     LKPHAJALTTC.TPCDEST%TYPE,
        STACCODE         IN     LKPHAJALTTC.TACCODE%TYPE,
        STTCCODE         IN     LKPHAJALTTC.TTCCODE%TYPE,
        SPHACODE         IN     LKPHAJALTTC.PHACODE%TYPE,
        SJALCODE         IN     LKPHAJALTTC.JALCODE%TYPE,
        STPGCODE         IN     LKPHAJALTTC.TPGCODE%TYPE,
        SPJTFLAGACTIF    IN     LKPHAJALTTC.PJTFLAGACTIF%TYPE,
        SPJTFLAGDEFAUT   IN     LKPHAJALTTC.PJTFLAGDEFAUT%TYPE,
        SPJTFLAGUSER     IN     LKPHAJALTTC.PJTFLAGUSER%TYPE,
        SALICODE         IN     LKPHAJALTTC.ALICODE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO LKPHAJALTTC (TPCCODE,
                                 TPCDEST,
                                 TACCODE,
                                 TTCCODE,
                                 PHACODE,
                                 PHADEST,
                                 JALCODE,
                                 TPGCODE,
                                 PJTFLAGACTIF,
                                 PJTFLAGDEFAUT,
                                 PJTFLAGUSER,
                                 ALICODE)
             VALUES (STPCCODE,
                     STPCDEST,
                     STACCODE,
                     STTCCODE,
                     SPHACODE,
                     STPCDEST,
                     SJALCODE,
                     STPGCODE,
                     SPJTFLAGACTIF,
                     SPJTFLAGDEFAUT,
                     SPJTFLAGUSER,
                     SALICODE);

        NRETURNCODE := 0;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CCCP;
        WHEN OTHERS
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
    END I_STEPS;

    PROCEDURE I_PHASE (STPCCODE         IN     LKPHATTC.TPCCODE%TYPE,
                       STPCDEST         IN     LKPHATTC.TPCDEST%TYPE,
                       STACCODE         IN     LKPHATTC.TACCODE%TYPE,
                       STTCCODE         IN     LKPHATTC.TTCCODE%TYPE,
                       SPHACODE         IN     LKPHATTC.PHACODE%TYPE,
                       STPGCODE         IN     LKPHATTC.TPGCODE%TYPE,
                       SPTCFLAGACTIF    IN     LKPHATTC.PTCFLAGACTIF%TYPE,
                       SPTCFLAGDEFAUT   IN     LKPHATTC.PTCFLAGDEFAUT%TYPE,
                       SPTCFLAGUSER     IN     LKPHATTC.PTCFLAGUSER%TYPE,
                       SALICODE         IN     LKPHATTC.ALICODE%TYPE,
                       NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO LKPHATTC (TPCCODE,
                              TPCDEST,
                              TACCODE,
                              TTCCODE,
                              PHACODE,
                              PHADEST,
                              TPGCODE,
                              PTCFLAGACTIF,
                              PTCFLAGDEFAUT,
                              PTCFLAGUSER,
                              ALICODE)
             VALUES (STPCCODE,
                     STPCDEST,
                     STACCODE,
                     STTCCODE,
                     SPHACODE,
                     STPCDEST,
                     STPGCODE,
                     SPTCFLAGACTIF,
                     SPTCFLAGDEFAUT,
                     SPTCFLAGUSER,
                     SALICODE);

        NRETURNCODE := 0;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX
        THEN
            NRETURNCODE := ERR_DUP_VAL_ON_INDEX_CCCP;
        WHEN OTHERS
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
    END I_PHASE;

    PROCEDURE D_COVENANT (NCOVID               COVENANT.COVID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE COVFOR
             WHERE COVID = NCOVID;

            DELETE LKCOVTACTPG
             WHERE COVID = NCOVID;

            DELETE LANCOVENANT
             WHERE COVID = NCOVID;

            DELETE LKCOVRUL
             WHERE COVID = NCOVID;

            DELETE COVENANT
             WHERE COVID = NCOVID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_COV_FOUND_CONST;
        END;
    END D_COVENANT;

    PROCEDURE I_COVENANT (
        NCOVID                  IN OUT COVENANT.COVID%TYPE,
        SLANGUE                        LANGUE.LANCODE%TYPE,
        SCOVDESCRIPTION                LANCOVENANT.COVDESCRIPTION%TYPE,
        SCOVLONGDESCRIPTION            LANCOVENANT.COVLONGDESCRIPTION%TYPE,
        NCOVIDMASTER                   COVENANT.COVIDMASTER%TYPE,
        SCOVCONTROLEFREQUENCY          COVENANT.COVCONTROLFREQUENCY%TYPE,
        NCOVFLAGGROUPING               COVENANT.COVFLAGGROUPING%TYPE,
        SCOVTYPE                       COVENANT.COVTYPE%TYPE,
        SCOVDEST                       COVENANT.COVDEST%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            SELECT SEQ_COVID.NEXTVAL INTO NCOVID FROM DUAL;

            INSERT INTO COVENANT (COVID,
                                  COVIDMASTER,
                                  COVCONTROLFREQUENCY,
                                  COVFLAGGROUPING,
                                  COVTYPE,
                                  COVDEST)
                 VALUES (NCOVID,
                         NCOVIDMASTER,
                         SCOVCONTROLEFREQUENCY,
                         NCOVFLAGGROUPING,
                         SCOVTYPE,
                         SCOVDEST);

            INSERT INTO LANCOVENANT (COVID,
                                     LANCODE,
                                     COVDESCRIPTION,
                                     COVLONGDESCRIPTION)
                 VALUES (NCOVID,
                         SLANGUE,
                         SCOVDESCRIPTION,
                         SCOVLONGDESCRIPTION);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_COV_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_COV_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COV_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COV_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_COVENANT;

    PROCEDURE U_COVENANT (
        NCOVID                         COVENANT.COVID%TYPE,
        SLANGUE                        LANGUE.LANCODE%TYPE,
        SCOVDESCRIPTION                LANCOVENANT.COVDESCRIPTION%TYPE,
        SCOVLONGDESCRIPTION            LANCOVENANT.COVLONGDESCRIPTION%TYPE,
        NCOVIDMASTER                   COVENANT.COVIDMASTER%TYPE,
        SCOVCONTROLEFREQUENCY          COVENANT.COVCONTROLFREQUENCY%TYPE,
        NCOVFLAGGROUPING               COVENANT.COVFLAGGROUPING%TYPE,
        SCOVTYPE                       COVENANT.COVTYPE%TYPE,
        SCOVDEST                       COVENANT.COVDEST%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE COVENANT
               SET COVIDMASTER = NCOVIDMASTER,
                   COVCONTROLFREQUENCY = SCOVCONTROLEFREQUENCY,
                   COVFLAGGROUPING = NCOVFLAGGROUPING,
                   COVTYPE = SCOVTYPE,
                   COVDEST = SCOVDEST
             WHERE COVID = NCOVID;

            UPDATE LANCOVENANT
               SET COVDESCRIPTION = SCOVDESCRIPTION,
                   COVLONGDESCRIPTION = SCOVLONGDESCRIPTION
             WHERE COVID = NCOVID AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_COV_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_COV_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COV_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COV_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_COVENANT;

    PROCEDURE I_LKCOVTACTPG (NCOVID               LKCOVTACTPG.COVID%TYPE,
                             STACCODE             LKCOVTACTPG.TACCODE%TYPE,
                             STPGCODE             LKCOVTACTPG.TPGCODE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKCOVTACTPG (COVID, TACCODE, TPGCODE)
                 VALUES (NCOVID, STACCODE, STPGCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_COV_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_COV_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COV_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COV_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKCOVTACTPG;

    PROCEDURE D_LKCOVTACTPG (NCOVID               COVENANT.COVID%TYPE,
                             STACCODE             COVFOR.TACCODE%TYPE,
                             STPGCODE             COVFOR.TPGCODE%TYPE,
                             NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE COVFOR
             WHERE     COVID = NCOVID
                   AND TACCODE = STACCODE
                   AND TPGCODE = STPGCODE;

            DELETE LKCOVTACTPG
             WHERE     COVID = NCOVID
                   AND TACCODE = STACCODE
                   AND TPGCODE = STPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_COV_FOUND_CONST;
        END;
    END D_LKCOVTACTPG;

    PROCEDURE U_COVFOR (
        NCOVID                       COVENANT.COVID%TYPE,
        NCFOORDRE                    COVFOR.CFOORDRE%TYPE,
        STACCODE                     COVFOR.TACCODE%TYPE,
        STPGCODE                     COVFOR.TPGCODE%TYPE,
        NFORID                       COVFOR.FORID%TYPE,
        SCFOTYPELIEN                 COVFOR.CFOTYPELIEN%TYPE,
        SCFORESULTINGSTATUS          COVFOR.CFORESULTINGSTATUS%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE COVFOR
               SET CFOTYPELIEN = SCFOTYPELIEN,
                   CFORESULTINGSTATUS = SCFORESULTINGSTATUS
             WHERE     COVID = NCOVID
                   AND FORID = NFORID
                   AND CFOORDRE = NCFOORDRE
                   AND TACCODE = STACCODE
                   AND TPGCODE = STPGCODE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_COVFOR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_COVFOR_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COVFOR_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COVFOR_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_COVFOR;

    PROCEDURE I_COVFOR (
        NCOVID                       COVENANT.COVID%TYPE,
        NCFOORDRE                    COVFOR.CFOORDRE%TYPE,
        STACCODE                     COVFOR.TACCODE%TYPE,
        STPGCODE                     COVFOR.TPGCODE%TYPE,
        NFORID                       COVFOR.FORID%TYPE,
        SCFOTYPELIEN                 COVFOR.CFOTYPELIEN%TYPE,
        SCFORESULTINGSTATUS          COVFOR.CFORESULTINGSTATUS%TYPE,
        NRETURNCODE           IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO COVFOR (COVID,
                                FORID,
                                CFOORDRE,
                                TACCODE,
                                TPGCODE,
                                CFOTYPELIEN,
                                CFORESULTINGSTATUS)
                 VALUES (NCOVID,
                         NFORID,
                         NCFOORDRE,
                         STACCODE,
                         STPGCODE,
                         SCFOTYPELIEN,
                         SCFORESULTINGSTATUS);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_COVFOR_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_COVFOR_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COVFOR_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_COVFOR_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_COVFOR;

    PROCEDURE D_COVFOR (NCOVID               COVENANT.COVID%TYPE,
                        NCFOORDRE            COVFOR.CFOORDRE%TYPE,
                        STACCODE             COVFOR.TACCODE%TYPE,
                        STPGCODE             COVFOR.TPGCODE%TYPE,
                        NFORID               COVFOR.FORID%TYPE,
                        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE COVFOR
             WHERE     COVID = NCOVID
                   AND TACCODE = STACCODE
                   AND CFOORDRE = NCFOORDRE
                   AND TPGCODE = STPGCODE
                   AND FORID = NFORID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_CHILD_FOUND
            THEN
                NRETURNCODE := ERR_CHILD_COVFOR_FOUND_CONST;
        END;
    END D_COVFOR;

    PROCEDURE D_STEPS (STPCCODE      IN     LKPHAJALTTC.TPCCODE%TYPE,
                       STPCDEST      IN     LKPHAJALTTC.TPCDEST%TYPE,
                       STACCODE      IN     LKPHAJALTTC.TACCODE%TYPE,
                       STTCCODE      IN     LKPHAJALTTC.TTCCODE%TYPE,
                       SPHACODE      IN     LKPHAJALTTC.PHACODE%TYPE,
                       SJALCODE      IN     LKPHAJALTTC.JALCODE%TYPE,
                       STPGCODE      IN     LKPHAJALTTC.TPGCODE%TYPE,
                       NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DELETE FROM LKPHAJALTTC
              WHERE     TPCCODE = STPCCODE
                    AND TPCDEST = STPCDEST
                    AND TACCODE = STACCODE
                    AND TTCCODE = STTCCODE
                    AND PHACODE = SPHACODE
                    AND JALCODE = SJALCODE
                    AND TPGCODE = STPGCODE;

        NRETURNCODE := 0;

        IF SQL%ROWCOUNT = 0
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
        WHEN OTHERS
        THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
    END D_STEPS;

    PROCEDURE U_STEPS (
        STPCCODE         IN     LKPHAJALTTC.TPCCODE%TYPE,
        STPCDEST         IN     LKPHAJALTTC.TPCDEST%TYPE,
        STACCODE         IN     LKPHAJALTTC.TACCODE%TYPE,
        STTCCODE         IN     LKPHAJALTTC.TTCCODE%TYPE,
        SPHACODE         IN     LKPHAJALTTC.PHACODE%TYPE,
        SJALCODE         IN     LKPHAJALTTC.JALCODE%TYPE,
        STPGCODE         IN     LKPHAJALTTC.TPGCODE%TYPE,
        SPJTFLAGACTIF    IN     LKPHAJALTTC.PJTFLAGACTIF%TYPE,
        SPJTFLAGDEFAUT   IN     LKPHAJALTTC.PJTFLAGDEFAUT%TYPE,
        SPJTFLAGUSER     IN     LKPHAJALTTC.PJTFLAGUSER%TYPE,
        SALICODE         IN     LKPHAJALTTC.ALICODE%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        UPDATE LKPHAJALTTC
           SET TPCCODE = STPCCODE,
               TPCDEST = STPCDEST,
               TACCODE = STACCODE,
               TTCCODE = STTCCODE,
               PHACODE = SPHACODE,
               JALCODE = SJALCODE,
               TPGCODE = STPGCODE,
               PJTFLAGACTIF = SPJTFLAGACTIF,
               PJTFLAGDEFAUT = SPJTFLAGDEFAUT,
               PJTFLAGUSER = SPJTFLAGUSER,
               ALICODE = SALICODE
         WHERE     TPCCODE = STPCCODE
               AND TPCDEST = STPCDEST
               AND TACCODE = STACCODE
               AND TTCCODE = STTCCODE
               AND PHACODE = SPHACODE
               AND JALCODE = SJALCODE
               AND TPGCODE = STPGCODE;

        NRETURNCODE := 0;
    EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND
        THEN
            NRETURNCODE := ERR_PARENT_NOT_FOUND_APP;
        WHEN ERR_U_NULL_MANDATORY_KEY
        THEN
            NRETURNCODE := ERR_NULL_MANDATORY_KEY_APP;
        WHEN OTHERS
        THEN
            NRETURNCODE := -1 * SQLCODE;
    END U_STEPS;

    PROCEDURE P_CREATE_UTILISATEUR (
        P_UTICODESRC             UTILISATEUR.UTICODE%TYPE,
        P_UTICODEDEST            UTILISATEUR.UTICODE%TYPE,
        P_UTINOMDEST             UTILISATEUR.UTINOM%TYPE,
        P_UTIPRENOMDEST          UTILISATEUR.UTIPRENOM%TYPE,
        NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO UTILISATEUR (UTICODE,
                                     UGECODE,
                                     GROCODE,
                                     UTINOM,
                                     UTIPRENOM,
                                     UTIFLAGPASSWORD,
                                     UTIPWD,
                                     UTIWHODUNNIT,
                                     UTIDTUPD,
                                     UTIPWDDTCHGD,
                                     UTIFLAGPERMANENT,
                                     UTILOCKED,
                                     UTIATTEMPTS)
                SELECT P_UTICODEDEST,
                       UGECODE,
                       GROCODE,
                       P_UTINOMDEST,
                       P_UTIPRENOMDEST,
                       1,
                       LOWER (MD5 (P_UTICODEDEST || P_UTICODEDEST)),
                       P_UTICODEDEST,
                       SYSDATE,
                       SYSDATE,
                       1,
                       'N',
                       0
                  FROM UTILISATEUR
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO UTIPREFERENCE (UTICODE,
                                       UPRCODE,
                                       UPRSTRINGVALUE,
                                       UPRDATEVALUE,
                                       UPRNUMERICVALUE,
                                       UPRBOOLEANVALUE)
                SELECT P_UTICODEDEST,
                       UPRCODE,
                       UPRSTRINGVALUE,
                       UPRDATEVALUE,
                       UPRNUMERICVALUE,
                       UPRBOOLEANVALUE
                  FROM UTIPREFERENCE
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO UTIACTDEFAULT (UTICODE,
                                       UADORDRE,
                                       TPGCODE,
                                       UADSALESNETWORK,
                                       ACTID,
                                       ROLCODE,
                                       UADDTSTART,
                                       UADDTEND,
                                       UADLINKTYPE,
                                       UDAFLAGINVESTIGATION,
                                       UTICODEREGISTEREDBY,
                                       UDADTREGISTEREDON)
                SELECT P_UTICODEDEST,
                       UADORDRE,
                       TPGCODE,
                       UADSALESNETWORK,
                       ACTID,
                       ROLCODE,
                       UADDTSTART,
                       UADDTEND,
                       UADLINKTYPE,
                       UDAFLAGINVESTIGATION,
                       UTICODEREGISTEREDBY,
                       UDADTREGISTEREDON
                  FROM UTIACTDEFAULT
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO CONFIGURATIONKEY (CKEID,
                                          TPGCODE,
                                          UGECODE,
                                          JALCODE,
                                          UTICODE,
                                          PHACODE,
                                          PHADEST,
                                          GROCODE,
                                          TACCODE,
                                          ACTID,
                                          CKETYPE,
                                          CKECONTEXT,
                                          CKENAME,
                                          CKEWEIGHT,
                                          TBTCODE,
                                          TBNCODE,
                                          PAYCODE,
                                          NAPCODE,
                                          CKEENTTYPE,
                                          CKEROLCODEEXTERNE,
                                          CKETCTCODE,
                                          CKEUSERPOSITION,
                                          FORID,
                                          CKECCATYPE,
                                          CKEDEALTYPE,
                                          TGACODE,
                                          CKETGATYPE,
                                          TWCID,
                                          CKEACTTYPE,
                                          TPGCODEQUOTE)
                SELECT SEQ_CKEID.NEXTVAL,
                       TPGCODE,
                       UGECODE,
                       JALCODE,
                       P_UTICODEDEST,
                       PHACODE,
                       PHADEST,
                       GROCODE,
                       TACCODE,
                       ACTID,
                       CKETYPE,
                       CKECONTEXT,
                       CKENAME,
                       CKEWEIGHT,
                       TBTCODE,
                       TBNCODE,
                       PAYCODE,
                       NAPCODE,
                       CKEENTTYPE,
                       CKEROLCODEEXTERNE,
                       CKETCTCODE,
                       CKEUSERPOSITION,
                       FORID,
                       CKECCATYPE,
                       CKEDEALTYPE,
                       TGACODE,
                       CKETGATYPE,
                       TWCID,
                       CKEACTTYPE,
                       TPGCODEQUOTE
                  FROM CONFIGURATIONKEY
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        NRETURNCODE := 0;
    EXCEPTION
        WHEN OTHERS
        THEN
            NULL;
    END P_CREATE_UTILISATEUR;

    PROCEDURE P_CREATE_UTILISATEUR_SECGEST (
        P_UTICODESRC           UTILISATEUR.UTICODE%TYPE,
        P_UTICODEDEST          UTILISATEUR.UTICODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        INSERT INTO UTITSM (UTICODE,
                            TSMSECTGESTION,
                            TSMMETIER,
                            TSMFLAGDEFAUT)
            (SELECT P_UTICODEDEST,
                    TSMSECTGESTION,
                    TSMMETIER,
                    TSMFLAGDEFAUT
               FROM UTITSM
              WHERE UTICODE = P_UTICODESRC);

        BEGIN
            INSERT INTO UTIPREFERENCE (UTICODE,
                                       UPRCODE,
                                       UPRSTRINGVALUE,
                                       UPRDATEVALUE,
                                       UPRNUMERICVALUE,
                                       UPRBOOLEANVALUE)
                SELECT P_UTICODEDEST,
                       UPRCODE,
                       UPRSTRINGVALUE,
                       UPRDATEVALUE,
                       UPRNUMERICVALUE,
                       UPRBOOLEANVALUE
                  FROM UTIPREFERENCE
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO UTIACTDEFAULT (UTICODE,
                                       UADORDRE,
                                       TPGCODE,
                                       UADSALESNETWORK,
                                       ACTID,
                                       ROLCODE,
                                       UADDTSTART,
                                       UADDTEND,
                                       UADLINKTYPE,
                                       UDAFLAGINVESTIGATION,
                                       UTICODEREGISTEREDBY,
                                       UDADTREGISTEREDON)
                SELECT P_UTICODEDEST,
                       UADORDRE,
                       TPGCODE,
                       UADSALESNETWORK,
                       ACTID,
                       ROLCODE,
                       UADDTSTART,
                       UADDTEND,
                       UADLINKTYPE,
                       UDAFLAGINVESTIGATION,
                       UTICODEREGISTEREDBY,
                       UDADTREGISTEREDON
                  FROM UTIACTDEFAULT
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO CONFIGURATIONKEY (CKEID,
                                          TPGCODE,
                                          UGECODE,
                                          JALCODE,
                                          UTICODE,
                                          PHACODE,
                                          PHADEST,
                                          GROCODE,
                                          TACCODE,
                                          ACTID,
                                          CKETYPE,
                                          CKECONTEXT,
                                          CKENAME,
                                          CKEWEIGHT,
                                          TBTCODE,
                                          TBNCODE,
                                          PAYCODE,
                                          NAPCODE,
                                          CKEENTTYPE,
                                          CKEROLCODEEXTERNE,
                                          CKETCTCODE,
                                          CKEUSERPOSITION,
                                          FORID,
                                          CKECCATYPE,
                                          CKEDEALTYPE,
                                          TGACODE,
                                          CKETGATYPE,
                                          TWCID,
                                          CKEACTTYPE,
                                          TPGCODEQUOTE)
                SELECT SEQ_CKEID.NEXTVAL,
                       TPGCODE,
                       UGECODE,
                       JALCODE,
                       P_UTICODEDEST,
                       PHACODE,
                       PHADEST,
                       GROCODE,
                       TACCODE,
                       ACTID,
                       CKETYPE,
                       CKECONTEXT,
                       CKENAME,
                       CKEWEIGHT,
                       TBTCODE,
                       TBNCODE,
                       PAYCODE,
                       NAPCODE,
                       CKEENTTYPE,
                       CKEROLCODEEXTERNE,
                       CKETCTCODE,
                       CKEUSERPOSITION,
                       FORID,
                       CKECCATYPE,
                       CKEDEALTYPE,
                       TGACODE,
                       CKETGATYPE,
                       TWCID,
                       CKEACTTYPE,
                       TPGCODEQUOTE
                  FROM CONFIGURATIONKEY
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        NRETURNCODE := 0;
    EXCEPTION
        WHEN OTHERS
        THEN
            NULL;
    END P_CREATE_UTILISATEUR_SECGEST;

    PROCEDURE P_CREATE_UTILISATEUR_DROITSPEC (
        P_UTICODESRC           UTILISATEUR.UTICODE%TYPE,
        P_UTICODEDEST          UTILISATEUR.UTICODE%TYPE,
        NRETURNCODE     IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKUTITMFDROIT (UTICODE,
                                       TMOMODULE,
                                       TMFFONCTION,
                                       UFDCREER,
                                       UFDMODIFIER,
                                       UFDSUPPRIMER,
                                       UFDVOIR)
                (SELECT P_UTICODEDEST,
                        TMOMODULE,
                        TMFFONCTION,
                        UFDCREER,
                        UFDMODIFIER,
                        UFDSUPPRIMER,
                        UFDVOIR
                   FROM LKUTITMFDROIT
                  WHERE UTICODE = P_UTICODESRC);
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO LKUTITMFACGDROIT (ACTID,
                                          UTICODE,
                                          TMOMODULE,
                                          TMFFONCTION,
                                          UADCREER,
                                          UADSUPPRIMER,
                                          UADVOIR,
                                          UADMODIFIER)
                (SELECT ACTID,
                        P_UTICODEDEST,
                        TMOMODULE,
                        TMFFONCTION,
                        UADCREER,
                        UADSUPPRIMER,
                        UADVOIR,
                        UADMODIFIER
                   FROM LKUTITMFACGDROIT
                  WHERE UTICODE = P_UTICODESRC);
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO UTIPREFERENCE (UTICODE,
                                       UPRCODE,
                                       UPRSTRINGVALUE,
                                       UPRDATEVALUE,
                                       UPRNUMERICVALUE,
                                       UPRBOOLEANVALUE)
                SELECT P_UTICODEDEST,
                       UPRCODE,
                       UPRSTRINGVALUE,
                       UPRDATEVALUE,
                       UPRNUMERICVALUE,
                       UPRBOOLEANVALUE
                  FROM UTIPREFERENCE
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO UTIACTDEFAULT (UTICODE,
                                       UADORDRE,
                                       TPGCODE,
                                       UADSALESNETWORK,
                                       ACTID,
                                       ROLCODE,
                                       UADDTSTART,
                                       UADDTEND,
                                       UADLINKTYPE,
                                       UDAFLAGINVESTIGATION,
                                       UTICODEREGISTEREDBY,
                                       UDADTREGISTEREDON)
                SELECT P_UTICODEDEST,
                       UADORDRE,
                       TPGCODE,
                       UADSALESNETWORK,
                       ACTID,
                       ROLCODE,
                       UADDTSTART,
                       UADDTEND,
                       UADLINKTYPE,
                       UDAFLAGINVESTIGATION,
                       UTICODEREGISTEREDBY,
                       UDADTREGISTEREDON
                  FROM UTIACTDEFAULT
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;

        BEGIN
            INSERT INTO CONFIGURATIONKEY (CKEID,
                                          TPGCODE,
                                          UGECODE,
                                          JALCODE,
                                          UTICODE,
                                          PHACODE,
                                          PHADEST,
                                          GROCODE,
                                          TACCODE,
                                          ACTID,
                                          CKETYPE,
                                          CKECONTEXT,
                                          CKENAME,
                                          CKEWEIGHT,
                                          TBTCODE,
                                          TBNCODE,
                                          PAYCODE,
                                          NAPCODE,
                                          CKEENTTYPE,
                                          CKEROLCODEEXTERNE,
                                          CKETCTCODE,
                                          CKEUSERPOSITION,
                                          FORID,
                                          CKECCATYPE,
                                          CKEDEALTYPE,
                                          TGACODE,
                                          CKETGATYPE,
                                          TWCID,
                                          CKEACTTYPE,
                                          TPGCODEQUOTE)
                SELECT SEQ_CKEID.NEXTVAL,
                       TPGCODE,
                       UGECODE,
                       JALCODE,
                       P_UTICODEDEST,
                       PHACODE,
                       PHADEST,
                       GROCODE,
                       TACCODE,
                       ACTID,
                       CKETYPE,
                       CKECONTEXT,
                       CKENAME,
                       CKEWEIGHT,
                       TBTCODE,
                       TBNCODE,
                       PAYCODE,
                       NAPCODE,
                       CKEENTTYPE,
                       CKEROLCODEEXTERNE,
                       CKETCTCODE,
                       CKEUSERPOSITION,
                       FORID,
                       CKECCATYPE,
                       CKEDEALTYPE,
                       TGACODE,
                       CKETGATYPE,
                       TWCID,
                       CKEACTTYPE,
                       TPGCODEQUOTE
                  FROM CONFIGURATIONKEY
                 WHERE UTICODE = P_UTICODESRC;
        EXCEPTION
            WHEN OTHERS
            THEN
                NULL;
        END;
    END P_CREATE_UTILISATEUR_DROITSPEC;

    FUNCTION F_UTICODE_EXISTE (P_TUICODE UTILISATEUR.UTICODE%TYPE)
        RETURN NUMBER
    AS
        NEXISTS   NUMBER;
    BEGIN
        SELECT COUNT (*)
          INTO NEXISTS
          FROM UTILISATEUR
         WHERE UTICODE = P_TUICODE;

        RETURN NEXISTS;
    END F_UTICODE_EXISTE;

    PROCEDURE P_MUTATION_UTILISATEUR (
        P_RETURN        OUT VARCHAR2,
        P_UTICODESRC        UTILISATEUR.UTICODE%TYPE,
        P_UTICODEDEST       UTILISATEUR.UTICODE%TYPE)
    AS
        NEXISTS                       NUMBER;
        BCOPIED                       NUMBER := 0;
        NFLAGEFFECTUE                 NUMBER := 0;
        NFLAGINACTIF                  NUMBER := 0;
        NFLAGPWDVIDE                  NUMBER := 0;
        SLISTESUPPRIMEERREUR          VARCHAR2 (4000) := '';
        SLISTEAJOUTERREUR             VARCHAR2 (4000) := '';
        SLISTESECTNONSUPPRIME         VARCHAR2 (4000) := '';
        SLISTESECTNONSUPPRIMEPREFIX   VARCHAR2 (400) := '';
    BEGIN
        P_RETURN := '';

        IF P_UTICODESRC IS NULL
        THEN
            P_RETURN := 'Il faut saisir un utilisateur Source.';
            RETURN;
        END IF;

        IF P_UTICODEDEST IS NULL
        THEN
            P_RETURN := 'Il faut saisir le code pour l''utilisateur Cible.';
            RETURN;
        END IF;

        IF P_UTICODESRC = P_UTICODEDEST
        THEN
            P_RETURN :=
                'L''Utilisateur Cible est le m??me que l''Utilisateur Source.';
            RETURN;
        END IF;

        NEXISTS := F_UTICODE_EXISTE (P_UTICODESRC);

        IF NEXISTS = 0
        THEN
            P_RETURN := P_UTICODESRC || ' n''existe pas.';
            RETURN;
        END IF;

        NEXISTS := F_UTICODE_EXISTE (P_UTICODEDEST);

        IF NEXISTS = 0
        THEN
            P_RETURN := P_UTICODEDEST || ' n''existe pas.';
            RETURN;
        END IF;

        SELECT COUNT (*)
          INTO NFLAGINACTIF
          FROM UTILISATEUR
         WHERE UTICODE = P_UTICODESRC AND NVL (UTIFLAGINACTIF, 0) = 1;

        IF NFLAGINACTIF = 1
        THEN
            P_RETURN := P_UTICODESRC || ' est verrouill??';
            RETURN;
        END IF;

        SELECT COUNT (*)
          INTO NFLAGINACTIF
          FROM UTILISATEUR
         WHERE UTICODE = P_UTICODEDEST AND NVL (UTIFLAGINACTIF, 0) = 1;

        IF NFLAGINACTIF = 1
        THEN
            P_RETURN := P_UTICODEDEST || ' est verrouill??';
            RETURN;
        END IF;

        SELECT COUNT (*)
          INTO NFLAGINACTIF
          FROM UTILISATEUR UTI1, UTILISATEUR UTI2
         WHERE     UTI1.UTICODE = P_UTICODESRC
               AND UTI2.UTICODE = P_UTICODEDEST
               AND UTI1.UGECODE = UTI2.UGECODE;

        IF NFLAGINACTIF = 0
        THEN
            P_RETURN :=
                   P_UTICODESRC
                || ' et '
                || P_UTICODEDEST
                || ' n''ont pas la m??me unit?? de gestion.';
            RETURN;
        END IF;

        BEGIN
            UPDATE UTILISATEUR
               SET GROCODE =
                       (SELECT UTI.GROCODE
                          FROM UTILISATEUR UTI
                         WHERE UTI.UTICODE = P_UTICODESRC)
             WHERE UTICODE = P_UTICODEDEST;

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                P_RETURN :=
                       'Probl??me de la mutation de groupe (table UTILISATEUR) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        SELECT COUNT (*)
          INTO NFLAGPWDVIDE
          FROM UTILISATEUR
         WHERE UTICODE = P_UTICODEDEST AND UTIPWD IS NULL;

        BEGIN
            INSERT INTO UTITSM (UTICODE,
                                TSMSECTGESTION,
                                TSMMETIER,
                                TSMFLAGSUPERVISEUR,
                                TSMFLAGDEFAUT)
                SELECT P_UTICODEDEST,
                       U0.TSMSECTGESTION,
                       U0.TSMMETIER,
                       '',
                       U0.TSMFLAGDEFAUT
                  FROM UTITSM U0
                 WHERE     U0.UTICODE = P_UTICODESRC
                       AND NOT EXISTS
                               (SELECT 1
                                  FROM UTITSM U1
                                 WHERE     U1.UTICODE = P_UTICODEDEST
                                       AND U1.TSMSECTGESTION =
                                           U0.TSMSECTGESTION
                                       AND U1.TSMMETIER = U0.TSMMETIER);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR := SLISTEAJOUTERREUR || ' UTITSM, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de l''ajout de secteur gestion  (table UTITSM) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        SLISTESECTNONSUPPRIMEPREFIX :=
            'Le(s) secteur(s) de gestion/m??tier(s) non supprim??(s) :??';

        IF     SLISTESECTNONSUPPRIME IS NOT NULL
           AND LENGTH (SLISTESECTNONSUPPRIME) > 0
        THEN
            SLISTESECTNONSUPPRIME :=
                SUBSTR (SLISTESECTNONSUPPRIMEPREFIX || SLISTESECTNONSUPPRIME,
                        0,
                        4000);
        END IF;

        BEGIN
            DELETE FILTREPARAMPROFIL
             WHERE FPPCODE = P_UTICODEDEST;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR :=
                    SLISTESUPPRIMEERREUR || ' FILTREPARAMPROFIL, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression de filtrage par profil  (table FILTREPARAMPROFIL) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE FILTREPARAMETRE
             WHERE FIPCODE = P_UTICODEDEST;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR :=
                    SLISTESUPPRIMEERREUR || ' FILTREPARAMETRE, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression de filtrage global  (table FILTREPARAMETRE) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE FILTREPARAMETRE
             WHERE FIPCODE = P_UTICODEDEST;
        EXCEPTION
            WHEN OTHERS
            THEN
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression de filtrage global  (table FILTREPARAMETRE) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE RELATIONVALEURPROFIL
             WHERE REVMERECODE = P_UTICODEDEST;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR :=
                    SLISTESUPPRIMEERREUR || ' RELATIONVALEURPROFIL, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression des relations   (table RELATIONVALEURPROFIL) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE UTIACTDEFAULT
             WHERE UTICODE = P_UTICODEDEST;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR :=
                    SLISTESUPPRIMEERREUR || ' UTIACTDEFAULT, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression des param??tres V4 (table UTIACTDEFAULT) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE LKUTIARO
             WHERE UTICODE = P_UTICODEDEST;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR := SLISTESUPPRIMEERREUR || ' LKUTIARO, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression des param??tres V4 (table LKUTIARO) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            INSERT INTO RELATIONVALEURPROFIL
                (SELECT RECCODE,
                        TPGCODE,
                        P_UTICODEDEST,
                        REVFILLECODE,
                        REVFLAGDEFAUT
                   FROM RELATIONVALEURPROFIL
                  WHERE REVMERECODE = P_UTICODESRC);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR :=
                    SLISTEAJOUTERREUR || ' RELATIONVALEURPROFIL, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de l''ajaout des relations dans ANDROMEDE (table RELATIONVALEURPROFIL) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            INSERT INTO FILTREPARAMETRE
                (SELECT FIPTYPE,
                        FIPNOM,
                        P_UTICODEDEST,
                        UGECODE
                   FROM FILTREPARAMETRE
                  WHERE FIPCODE = P_UTICODESRC);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR :=
                    SLISTEAJOUTERREUR || ' FILTREPARAMETRE, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de l''ajaout de filtrage gloabl dans ANDROMEDE (table FILTREPARAMETRE) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            INSERT INTO FILTREPARAMPROFIL
                (SELECT TPGCODE,
                        FPPTYPE,
                        FPPNOM,
                        P_UTICODEDEST,
                        FPPFLAGDEFAUT
                   FROM FILTREPARAMPROFIL
                  WHERE FPPCODE = P_UTICODESRC);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR :=
                    SLISTEAJOUTERREUR || ' FILTREPARAMPROFIL, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de l''ajaout filtrage par profil dans ANDROMEDE (table FILTREPARAMPROFIL) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            INSERT INTO UTIACTDEFAULT (UTICODE,
                                       UADORDRE,
                                       TPGCODE,
                                       UADSALESNETWORK,
                                       ACTID,
                                       ROLCODE)
                (SELECT P_UTICODEDEST,
                        UADORDRE,
                        TPGCODE,
                        UADSALESNETWORK,
                        ACTID,
                        ROLCODE
                   FROM UTIACTDEFAULT
                  WHERE UTICODE = P_UTICODESRC);

            BCOPIED := 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR := SLISTEAJOUTERREUR || ' UTIACTDEFAULT, ';
                P_RETURN :=
                       'Probl??me de l''ajout de param??tre pour la V4 ??(table UTIACTDEFAULT) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
                ROLLBACK;
                RETURN;
        END;

        BEGIN
            INSERT INTO LKUTIARO
                (SELECT ACTID, P_UTICODEDEST, ROLCODE,DEFAULTBRANCH
                   FROM LKUTIARO
                  WHERE UTICODE = P_UTICODESRC);

            BCOPIED := 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR := SLISTEAJOUTERREUR || ' LKUTIARO, ';
                P_RETURN :=
                       'Probl??me de param??tre pour la V4 ??(table LKUTIARO) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
                ROLLBACK;
                RETURN;
        END;

        BEGIN
            INSERT INTO LKUTITMFDROIT (UTICODE,
                                       TMOMODULE,
                                       TMFFONCTION,
                                       UFDCREER,
                                       UFDMODIFIER,
                                       UFDSUPPRIMER,
                                       UFDVOIR)
                SELECT P_UTICODEDEST,
                       TMOMODULE,
                       TMFFONCTION,
                       UFDCREER,
                       UFDMODIFIER,
                       UFDSUPPRIMER,
                       UFDVOIR
                  FROM LKUTITMFDROIT U0
                 WHERE     U0.UTICODE = P_UTICODESRC
                       AND NOT EXISTS
                               (SELECT 1
                                  FROM LKUTITMFDROIT U1
                                 WHERE     U1.UTICODE = P_UTICODEDEST
                                       AND U1.TMOMODULE = U0.TMOMODULE
                                       AND U1.TMFFONCTION = U0.TMFFONCTION);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR := SLISTEAJOUTERREUR || ' LKUTITMFDROIT, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de l''ajout de droits sp??cifiques  (table LKUTITMFDROIT) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE LKUTITMFDROIT U0
             WHERE     UTICODE = P_UTICODEDEST
                   AND NOT EXISTS
                           (SELECT 1
                              FROM LKUTITMFDROIT U1
                             WHERE     U1.UTICODE = P_UTICODESRC
                                   AND U1.TMOMODULE = U0.TMOMODULE
                                   AND U1.TMFFONCTION = U0.TMFFONCTION);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR :=
                    SLISTESUPPRIMEERREUR || ' LKUTITMFDROIT,';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression de droits sp??cifiques  (table LKUTITMFDROIT) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            INSERT INTO LKUTITMFACGDROIT (ACTID,
                                          UTICODE,
                                          TMOMODULE,
                                          TMFFONCTION,
                                          UADCREER,
                                          UADSUPPRIMER,
                                          UADVOIR,
                                          UADMODIFIER)
                SELECT ACTID,
                       P_UTICODEDEST,
                       TMOMODULE,
                       TMFFONCTION,
                       UADCREER,
                       UADSUPPRIMER,
                       UADVOIR,
                       UADMODIFIER
                  FROM LKUTITMFACGDROIT U0
                 WHERE     U0.UTICODE = P_UTICODESRC
                       AND NOT EXISTS
                               (SELECT 1
                                  FROM LKUTITMFACGDROIT U1
                                 WHERE     U1.UTICODE = P_UTICODEDEST
                                       AND U1.ACTID = U0.ACTID
                                       AND U1.TMOMODULE = U0.TMOMODULE
                                       AND U1.TMFFONCTION = U0.TMFFONCTION);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTEAJOUTERREUR :=
                    SLISTEAJOUTERREUR || ' LKUTITMFACGDROIT, ';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de l''ajout de droits sp??cifiques par soci??t?? (table LKUTITMFACGDROIT) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        BEGIN
            DELETE LKUTITMFACGDROIT U0
             WHERE     UTICODE = P_UTICODEDEST
                   AND NOT EXISTS
                           (SELECT 1
                              FROM LKUTITMFACGDROIT U1
                             WHERE     U1.UTICODE = P_UTICODESRC
                                   AND U1.ACTID = U0.ACTID
                                   AND U1.TMOMODULE = U0.TMOMODULE
                                   AND U1.TMFFONCTION = U0.TMFFONCTION);

            NFLAGEFFECTUE := NFLAGEFFECTUE + 1;
        EXCEPTION
            WHEN OTHERS
            THEN
                SLISTESUPPRIMEERREUR :=
                    SLISTESUPPRIMEERREUR || ' LKUTITMFACGDROIT,';
                P_RETURN :=
                       P_RETURN
                    || '??Probl??me de la suppression de droits sp??cifiques  (table LKUTITMFACGDROIT) pour '
                    || P_UTICODEDEST
                    || ' : ??'
                    || SUBSTR (SQLERRM, 0, 400);
        END;

        IF LENGTH (SLISTESECTNONSUPPRIME) > 0
        THEN
            P_RETURN := SLISTESECTNONSUPPRIME;
            P_RETURN := SUBSTR (P_RETURN, 1, LENGTH (P_RETURN) - 2); --il y a un espace ?? la fin
            P_RETURN := P_RETURN || '??';
        END IF;

        IF NFLAGEFFECTUE > 1
        THEN
            COMMIT;
            P_RETURN := P_RETURN || '??La mutation est effectu??e.';
        ELSE
            ROLLBACK;
            P_RETURN := P_RETURN || ' ??La mutation n''est pas effectu??e.';
        END IF;
    END P_MUTATION_UTILISATEUR;

    FUNCTION F_DELETE_FROM_TABLE (P_TABLENAME      VARCHAR2,
                                  P_COLNAME        VARCHAR2,
                                  P_GROCODEDEST    GROUPE.GROCODE%TYPE,
                                  P_CLAUSE         VARCHAR2)
        RETURN VARCHAR2
    AS
        SCOMMANDE   VARCHAR2 (2000);
        P_RETURN    VARCHAR2 (2000);
    BEGIN
        SCOMMANDE :=
               'DELETE FROM '
            || P_TABLENAME
            || ' WHERE '
            || P_COLNAME
            || ' = '''
            || P_GROCODEDEST
            || '''';

        IF P_CLAUSE IS NOT NULL
        THEN
            SCOMMANDE := SCOMMANDE || ' ' || P_CLAUSE;
        END IF;

        BEGIN
            EXECUTE IMMEDIATE SCOMMANDE;
        EXCEPTION
            WHEN OTHERS
            THEN
                P_RETURN :=
                       'Probl??me de copie lors de la supresison de la table '
                    || P_TABLENAME
                    || ' pour le groupe destinataire :'
                    || SUBSTR (SQLERRM, 0, 400);
                ROLLBACK;
        END;

        RETURN P_RETURN;
    END F_DELETE_FROM_TABLE;

    PROCEDURE P_COPIE_GROUPE (P_RETURN        OUT VARCHAR2,
                              P_GROCODESRC        GROUPE.GROCODE%TYPE,
                              P_GROCODEDEST       GROUPE.GROCODE%TYPE,
                              P_FLAGNORAZ         NUMBER)
    AS
        NEXISTS           NUMBER;
        NFLAGCOPIE        NUMBER := 1;
        SGROLIBELLESRC    GROUPE.GROINTITULE%TYPE;
        SGROLIBELLEDEST   GROUPE.GROINTITULE%TYPE;
        SRETURN           VARCHAR2 (2000);
    BEGIN
        IF P_GROCODESRC IS NULL
        THEN
            P_RETURN := 'Merci de s??lectionner le groupe Source.';
            RETURN;
        END IF;

        IF P_GROCODEDEST IS NULL
        THEN
            P_RETURN := 'Merci de s??lectionner le groupe Cible.';
            RETURN;
        END IF;

        IF P_GROCODEDEST = P_GROCODESRC
        THEN
            P_RETURN := 'Le groupe Cible est le m??me que le groupe Source.';
            RETURN;
        END IF;

        SELECT MAX (GROINTITULE)
          INTO SGROLIBELLESRC
          FROM GROUPE
         WHERE GROCODE = P_GROCODESRC;

        SELECT MAX (GROINTITULE)
          INTO SGROLIBELLEDEST
          FROM GROUPE
         WHERE GROCODE = P_GROCODEDEST;

        -- ---------------------------------------------------
        -- HABILITATION DES GROUPES SUR MODULE, FONCTION, EVENEMENT
        -- INITIALISATION AVEC DROIT DU GROUPE 'EXPLOIT'  (LKGROTMFDROIT)
        -- ---------------------------------------------------
        -- ACCES GROUPE AUX STE ET ACTIVITE
        -- INITIALISATION AVEC ACCES DU GROUPE 'EXPLOIT'  (LKGROTACAGE)
        -- ---------------------------------------------------
        IF P_FLAGNORAZ = 1
        THEN
            SELECT COUNT (*)
              INTO NEXISTS
              FROM LKGROTMFDROIT
             WHERE GROCODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (LKGROTMFDROIT)';
                RETURN;
            END IF;

            SELECT COUNT (*)
              INTO NEXISTS
              FROM LKGROTACAGE
             WHERE GROCODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (LKGROTACAGE)';
                RETURN;
            END IF;

            SELECT COUNT (*)
              INTO NEXISTS
              FROM FILTREPARAMPROFIL
             WHERE FPPNOM = 'GROUPE' AND FPPCODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (FILTREPARAMPROFIL : GROUPE)';
                RETURN;
            END IF;

            SELECT COUNT (*)
              INTO NEXISTS
              FROM RELATIONVALEURPROFIL
             WHERE RECCODE = 'USERGRPDECI' AND REVMERECODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (RELATIONVALEURPROFIL : USERGRPDECI)';
                RETURN;
            END IF;

            SELECT COUNT (*)
              INTO NEXISTS
              FROM RELATIONVALEURPROFIL
             WHERE RECCODE = 'GROVERSDEFAULT' AND REVMERECODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (RELATIONVALEURPROFIL : GROVERSDEFAULT)';
                RETURN;
            END IF;

            SELECT COUNT (*)
              INTO NEXISTS
              FROM RELATIONVALEURPROFIL
             WHERE RECCODE = 'GROUPEAPPFLU' AND REVMERECODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (RELATIONVALEURPROFIL : GROUPEAPPFLU)';
                RETURN;
            END IF;

            SELECT COUNT (*)
              INTO NEXISTS
              FROM RELATIONVALEURPROFIL
             WHERE RECCODE = 'GROUPETAUXAV' AND REVMERECODE = P_GROCODEDEST;

            IF NEXISTS > 0
            THEN
                NFLAGCOPIE := 0;
            END IF;

            IF NFLAGCOPIE = 0
            THEN
                P_RETURN :=
                       'Aucun param??tre n''a ??t?? copi?? pour le groupe '
                    || P_GROCODEDEST
                    || ' dont le param??trage existe d??j?? (RELATIONVALEURPROFIL : GROUPETAUXAV)';
                RETURN;
            END IF;
        END IF;

        IF NFLAGCOPIE = 1
        THEN
            P_RETURN :=
                F_DELETE_FROM_TABLE ('LKGROTMFDROIT',
                                     'GROCODE',
                                     P_GROCODEDEST,
                                     NULL);

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;

            P_RETURN :=
                F_DELETE_FROM_TABLE ('LKGROTACAGE',
                                     'GROCODE',
                                     P_GROCODEDEST,
                                     NULL);

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;

            P_RETURN :=
                F_DELETE_FROM_TABLE ('FILTREPARAMPROFIL',
                                     'FPPCODE',
                                     P_GROCODEDEST,
                                     ' AND FPPNOM=''GROUPE''');

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;

            P_RETURN :=
                F_DELETE_FROM_TABLE (
                    'RELATIONVALEURPROFIL',
                    'REVMERECODE',
                    P_GROCODEDEST,
                    ' OR REVFILLECODE =''' || P_GROCODEDEST || '''');

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;

            BEGIN
                DELETE FROM LKCKEGRE
                      WHERE CKEID IN (SELECT CKEID
                                        FROM CONFIGURATIONKEY
                                       WHERE GROCODE = P_GROCODEDEST);
            EXCEPTION
                WHEN OTHERS
                THEN
                    ROLLBACK;
                    P_RETURN :=
                        ' Erreur lors de la suppression de LKCKEGRE pour le groupe de destination';
                    RETURN;
            END;

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;

            P_RETURN :=
                F_DELETE_FROM_TABLE ('CONFIGURATIONKEY',
                                     'GROCODE',
                                     P_GROCODEDEST,
                                     NULL);

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;

            BEGIN
                INSERT INTO LKGROTMFDROIT (TMOMODULE,
                                           TMFFONCTION,
                                           GROCODE,
                                           GFDCREER,
                                           GFDMODIFIER,
                                           GFDSUPPRIMER,
                                           GFDVOIR)
                    (SELECT DISTINCT TMOMODULE,
                                     TMFFONCTION,
                                     P_GROCODEDEST,
                                     GFDCREER,
                                     GFDMODIFIER,
                                     GFDSUPPRIMER,
                                     GFDVOIR
                       FROM LKGROTMFDROIT
                      WHERE GROCODE = P_GROCODESRC);
            EXCEPTION
                WHEN OTHERS
                THEN
                    P_RETURN :=
                           'Probl??me de copie lors de l''insertion dans la tbale LKGROTMFDROIT pour le groupe destinataire :'
                        || SUBSTR (SQLERRM, 0, 400);
                    ROLLBACK;
                    RETURN;
            END;

            BEGIN
                INSERT INTO LKGROTACAGE
                    (SELECT DISTINCT ACTID, TACCODE, P_GROCODEDEST
                       FROM LKGROTACAGE
                      WHERE GROCODE = P_GROCODESRC);
            EXCEPTION
                WHEN OTHERS
                THEN
                    P_RETURN :=
                           'Probl??me de copie lors de l''insertion dans la tbale LKGROTACAGE pour le groupe destinataire :'
                        || SUBSTR (SQLERRM, 0, 400);
                    ROLLBACK;
                    RETURN;
            END;

            BEGIN
                INSERT INTO FILTREPARAMPROFIL
                    (SELECT DISTINCT TPGCODE,
                                     FPPTYPE,
                                     FPPNOM,
                                     P_GROCODEDEST FPPCODE,
                                     FPPFLAGDEFAUT
                       FROM FILTREPARAMPROFIL
                      WHERE FPPNOM = 'GROUPE' AND FPPCODE = P_GROCODESRC);
            EXCEPTION
                WHEN OTHERS
                THEN
                    P_RETURN :=
                           'Probl??me de copie lors de l''insertion dans la tbale FILTREPARAMPROFIL pour le groupe destinataire :'
                        || SUBSTR (SQLERRM, 0, 400);
                    ROLLBACK;
                    RETURN;
            END;

            BEGIN
                INSERT INTO RELATIONVALEURPROFIL
                    (SELECT DISTINCT RECCODE,
                                     TPGCODE,
                                     P_GROCODEDEST REVMERECODE,
                                     REVFILLECODE,
                                     REVFLAGDEFAUT
                       FROM RELATIONVALEURPROFIL
                      WHERE REVMERECODE = P_GROCODESRC);
            EXCEPTION
                WHEN OTHERS
                THEN
                    P_RETURN :=
                           'Probl??me de copie lors de l''insertion dans la tbale RELATIONVALEURPROFIL pour le groupe destinataire :'
                        || SUBSTR (SQLERRM, 0, 400);
                    ROLLBACK;
                    RETURN;
            END;

            BEGIN
                INSERT INTO RELATIONVALEURPROFIL
                    (SELECT DISTINCT RECCODE,
                                     TPGCODE,
                                     REVMERECODE,
                                     P_GROCODEDEST REVFILLECODE,
                                     REVFLAGDEFAUT
                       FROM RELATIONVALEURPROFIL
                      WHERE REVFILLECODE = P_GROCODESRC);
            EXCEPTION
                WHEN OTHERS
                THEN
                    P_RETURN :=
                           'Probl??me de copie lors de l''insertion dans la tbale RELATIONVALEURPROFIL pour le groupe destinataire :'
                        || SUBSTR (SQLERRM, 0, 400);
                    ROLLBACK;
                    RETURN;
            END;

            IF P_RETURN IS NOT NULL
            THEN
                RETURN;
            END IF;
        END IF;

        COMMIT;

        IF P_FLAGNORAZ = 1
        THEN
            P_RETURN :=
                   'La recopie du groupe ?? '
                || P_GROCODESRC
                || ' - '
                || SGROLIBELLESRC
                || ' ?? vers le ?? '
                || P_GROCODEDEST
                || ' - '
                || SGROLIBELLEDEST
                || ' ?? est effectu??e.';
        ELSE
            P_RETURN :=
                   'La recopie du groupe ?? '
                || P_GROCODESRC
                || ' - '
                || SGROLIBELLESRC
                || ' ?? vers le ?? '
                || P_GROCODEDEST
                || ' - '
                || SGROLIBELLEDEST
                || ' ?? est effectu??e. ??Les droits existants du groupe destinataire ont ??t?? au pr??alable effac??s.';
        END IF;
    END P_COPIE_GROUPE;

    PROCEDURE I_LKTPGACA (STPGCODE             LKTPGACA.TPGCODE%TYPE,
                          SACACODE             LKTPGACA.ACACODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTPGACA (TPGCODE, ACACODE)
                 VALUES (STPGCODE, SACACODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTPGACA;

    PROCEDURE I_LKTPGNAP (STPGCODE             LKTPGNAP.TPGCODE%TYPE,
                          SNAPCODE             LKTPGNAP.NAPCODE%TYPE,
                          SPAYCODE             LKTPGNAP.PAYCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTPGNAP (TPGCODE, NAPCODE, PAYCODE)
                 VALUES (STPGCODE, SNAPCODE, SPAYCODE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTPGNAP;

    PROCEDURE D_TNOMENCBUDGET (NTNBID        IN     TNOMENCBUDGET.TNBID%TYPE,
                               NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LANTNOMENCBUDGET
                  WHERE TNBID = NTNBID;

            DELETE FROM LKTNETNB
                  WHERE TNBID = NTNBID;

            DELETE FROM LKTNBRUB
                  WHERE TNBID = NTNBID;

            DELETE FROM LKTNBORG
                  WHERE TNBID = NTNBID;

            DELETE FROM TNOMENCBUDGET
                  WHERE TNBID = NTNBID;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END D_TNOMENCBUDGET;

    PROCEDURE D_LKTNBORG (NTNBID        IN     LKTNBORG.TNBID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTNBORG
                  WHERE TNBID = NTNBID;

            nReturnCode := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END D_LKTNBORG;

    PROCEDURE D_LKTNETNB (NTNBID        IN     LKTNETNB.TNBID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTNETNB
                  WHERE TNBID = NTNBID;

            nReturnCode := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END D_LKTNETNB;

    PROCEDURE I_TNOMENCBUDGET (
        NTNBID               IN OUT TNOMENCBUDGET.TNBID%TYPE,
        SLANGUE              IN     LANGUE.LANCODE%TYPE,
        STESCODEPOSTE        IN     TNOMENCBUDGET.TESCODEPOSTE%TYPE,
        STESCODESOUSPOSTE    IN     TNOMENCBUDGET.TESCODESOUSPOSTE%TYPE,
        STNBAFFECTATION      IN     TNOMENCBUDGET.TNBAFFECTATION%TYPE,
        NTNBSOURCETYPE       IN     TNOMENCBUDGET.TNBSOURCETYPE%TYPE,
        NTNBFLAGUPDATEABLE   IN     TNOMENCBUDGET.TNBFLAGUPDATEABLE%TYPE,
        NTNBMTMIN            IN     TNOMENCBUDGET.TNBMTMIN%TYPE,
        NTNBMTMAX            IN     TNOMENCBUDGET.TNBMTMAX%TYPE,
        SDEVCODE             IN     TNOMENCBUDGET.DEVCODE%TYPE,
        STNBNIVEAUDETAIL     IN     TNOMENCBUDGET.TNBNIVEAUDETAIL%TYPE,
        STNBUNITEDETAIL      IN     TNOMENCBUDGET.TNBUNITEDETAIL%TYPE,
        NTNBFLAGMASTER       IN     TNOMENCBUDGET.TNBFLAGMASTER%TYPE,
        NTNBIDMASTER         IN     TNOMENCBUDGET.TNBIDMASTER%TYPE,
        STNBTYPEVAR          IN     TNOMENCBUDGET.TNBTYPEVAR%TYPE,
        NTNBVARDEFAULTPC     IN     TNOMENCBUDGET.TNBVARDEFAULTPC%TYPE,
        SINDCODE             IN     TNOMENCBUDGET.INDCODE%TYPE,
        STNBLIBELLE          IN     LANTNOMENCBUDGET.TNBLIBELLE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            SELECT SEQ_TNBID.NEXTVAL INTO NTNBID FROM DUAL;

            INSERT INTO TNOMENCBUDGET (TNBID,
                                       TESCODEPOSTE,
                                       TESCODESOUSPOSTE,
                                       TNBAFFECTATION,
                                       TNBSOURCETYPE,
                                       TNBFLAGUPDATEABLE,
                                       TNBMTMIN,
                                       TNBMTMAX,
                                       DEVCODE,
                                       TNBNIVEAUDETAIL,
                                       TNBUNITEDETAIL,
                                       TNBFLAGMASTER,
                                       TNBIDMASTER,
                                       TNBTYPEVAR,
                                       TNBVARDEFAULTPC,
                                       INDCODE)
                 VALUES (NTNBID,
                         STESCODEPOSTE,
                         STESCODESOUSPOSTE,
                         STNBAFFECTATION,
                         NTNBSOURCETYPE,
                         NTNBFLAGUPDATEABLE,
                         NTNBMTMIN,
                         NTNBMTMAX,
                         SDEVCODE,
                         STNBNIVEAUDETAIL,
                         STNBUNITEDETAIL,
                         NTNBFLAGMASTER,
                         NTNBIDMASTER,
                         STNBTYPEVAR,
                         NTNBVARDEFAULTPC,
                         SINDCODE);

            INSERT INTO LANTNOMENCBUDGET (TNBID, LANCODE, TNBLIBELLE)
                 VALUES (NTNBID, SLANGUE, STNBLIBELLE);

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END I_TNOMENCBUDGET;

    PROCEDURE I_LKTNBORG (NTNBID        IN     LKTNBORG.TNBID%TYPE,
                          SORGCODE      IN     LKTNBORG.ORGCODE%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTNBORG (TNBID, ORGCODE)
                 VALUES (NTNBID, SORGCODE);

            nReturnCode := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END I_LKTNBORG;

    PROCEDURE I_LKTNETNB (NTNBID        IN     LKTNETNB.TNBID%TYPE,
                          NTNEID        IN     LKTNETNB.TNEID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTNETNB (TNBID, TNEID)
                 VALUES (NTNBID, NTNEID);

            nReturnCode := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_LKTNETNB;

    PROCEDURE I_LKTNBRUB (NTNBID        IN     LKTNBRUB.TNBID%TYPE,
                          NRUBID        IN     LKTNBRUB.RUBID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO LKTNBRUB (TNBID, RUBID)
                 VALUES (NTNBID, NRUBID);

            nReturnCode := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END I_LKTNBRUB;

    PROCEDURE U_TNOMENCBUDGET (
        NTNBID               IN     TNOMENCBUDGET.TNBID%TYPE,
        SLANGUE              IN     LANGUE.LANCODE%TYPE,
        STESCODEPOSTE        IN     TNOMENCBUDGET.TESCODEPOSTE%TYPE,
        STESCODESOUSPOSTE    IN     TNOMENCBUDGET.TESCODESOUSPOSTE%TYPE,
        NTNBSOURCETYPE       IN     TNOMENCBUDGET.TNBSOURCETYPE%TYPE,
        NTNBFLAGUPDATEABLE   IN     TNOMENCBUDGET.TNBFLAGUPDATEABLE%TYPE,
        NTNBMTMIN            IN     TNOMENCBUDGET.TNBMTMIN%TYPE,
        NTNBMTMAX            IN     TNOMENCBUDGET.TNBMTMAX%TYPE,
        SDEVCODE             IN     TNOMENCBUDGET.DEVCODE%TYPE,
        STNBNIVEAUDETAIL     IN     TNOMENCBUDGET.TNBNIVEAUDETAIL%TYPE,
        STNBUNITEDETAIL      IN     TNOMENCBUDGET.TNBUNITEDETAIL%TYPE,
        NTNBFLAGMASTER       IN     TNOMENCBUDGET.TNBFLAGMASTER%TYPE,
        NTNBIDMASTER         IN     TNOMENCBUDGET.TNBIDMASTER%TYPE,
        STNBTYPEVAR          IN     TNOMENCBUDGET.TNBTYPEVAR%TYPE,
        NTNBVARDEFAULTPC     IN     TNOMENCBUDGET.TNBVARDEFAULTPC%TYPE,
        SINDCODE             IN     TNOMENCBUDGET.INDCODE%TYPE,
        STNBLIBELLE          IN     LANTNOMENCBUDGET.TNBLIBELLE%TYPE,
        NRETURNCODE          IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE TNOMENCBUDGET
               SET TESCODEPOSTE = STESCODEPOSTE,
                   TESCODESOUSPOSTE = STESCODESOUSPOSTE,
                   TNBSOURCETYPE = NTNBSOURCETYPE,
                   TNBFLAGUPDATEABLE = NTNBFLAGUPDATEABLE,
                   TNBMTMIN = NTNBMTMIN,
                   TNBMTMAX = NTNBMTMAX,
                   DEVCODE = SDEVCODE,
                   TNBNIVEAUDETAIL = STNBNIVEAUDETAIL,
                   TNBUNITEDETAIL = STNBUNITEDETAIL,
                   TNBFLAGMASTER = NTNBFLAGMASTER,
                   TNBIDMASTER = NTNBIDMASTER,
                   TNBTYPEVAR = STNBTYPEVAR,
                   TNBVARDEFAULTPC = NTNBVARDEFAULTPC,
                   INDCODE = SINDCODE
             WHERE TNBID = NTNBID;

            UPDATE LANTNOMENCBUDGET
               SET TNBLIBELLE = STNBLIBELLE
             WHERE TNBID = NTNBID AND LANCODE = SLANGUE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END U_TNOMENCBUDGET;

    PROCEDURE D_LKTNBRUB (NTNBID        IN     LKTNBRUB.TNBID%TYPE,
                          NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM LKTNBRUB
                  WHERE TNBID = NTNBID;

            nReturnCode := 0;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_TNB_PARENT_NOT_FOUND_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_CHILD_FOUND_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_TNB_NULL_KEY_CONST;
            WHEN OTHERS
            THEN
                nReturnCode := -1 * SQLCODE;
        END;
    END D_LKTNBRUB;

    PROCEDURE D_PAYACTORIDFORMAT (
        SPAYCODE             PAYACTORIDFORMAT.PAYCODE%TYPE,
        SPIFTYPE             PAYACTORIDFORMAT.PIFTYPE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM PAYACTORIDFORMAT
                  WHERE PAYCODE = SPAYCODE AND PIFTYPE = SPIFTYPE;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_PFITYPE;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_PAYACTORIDFORMAT;

    PROCEDURE I_PAYACTORIDFORMAT (
        SPAYCODE             PAYACTORIDFORMAT.PAYCODE%TYPE,
        SPIFTYPE             PAYACTORIDFORMAT.PIFTYPE%TYPE,
        SPIFFORMAT           PAYACTORIDFORMAT.PIFFORMAT%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            INSERT INTO PAYACTORIDFORMAT (PAYCODE, PIFTYPE, PIFFORMAT)
                 VALUES (SPAYCODE, SPIFTYPE, SPIFFORMAT);

            NRETURNCODE := 0;
        EXCEPTION
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_PFITYPE;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_PAPF;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_PAYACTORIDFORMAT;

    PROCEDURE U_PAYACTORIDFORMAT (
        SPAYCODE             PAYACTORIDFORMAT.PAYCODE%TYPE,
        SPIFTYPE             PAYACTORIDFORMAT.PIFTYPE%TYPE,
        SPIFFORMAT           PAYACTORIDFORMAT.PIFFORMAT%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            UPDATE PAYACTORIDFORMAT
               SET PIFFORMAT = SPIFFORMAT
             WHERE PAYCODE = SPAYCODE AND PIFTYPE = SPIFTYPE;
        EXCEPTION
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_MANDATORY_KEY_PFITYPE;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_VAL_ON_INDEX_PAPF;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PAYACTORIDFORMAT;

    PROCEDURE S_PHAJALDPTCMB (SCMBNAME           VARCHAR2,
                              SLANGUE            LANGUE.LANCODE%TYPE,
                              PC_RETURN   IN OUT T_CURSOR)
    AS
    BEGIN
        IF SCMBNAME = 'DEPARTMENT'
        THEN
            OPEN PC_RETURN FOR
                SELECT DPT.DPTCODE AS CODE, DPTLABEL AS DISPLAYVALUE
                  FROM DEPARTMENT DPT, LANDEPARTMENT LDP
                 WHERE     DPT.DPTDTEND IS NULL
                       AND LDP.DPTCODE = DPT.DPTCODE
                       AND LDP.LANCODE = SLANGUE;
        END IF;

        IF SCMBNAME = 'DESTINATION'
        THEN
            OPEN PC_RETURN FOR
                SELECT TTPCODE AS CODE, TTPLIBELLE AS DISPLAYVALUE
                  FROM LANTTRPARAM
                 WHERE TTRNOM = 'PHADESTTARGET' AND LANCODE = SLANGUE;
        END IF;

        IF SCMBNAME = 'PHASE'
        THEN
            OPEN PC_RETURN FOR
                SELECT PHA.PHACODE AS CODE, LPH.PHALIBELLE AS DISPLAYVALUE
                  FROM PHASE PHA, LANPHASE LPH
                 WHERE     PHA.PHADEST IN (SELECT TTPCODE
                                             FROM TTRPARAM
                                            WHERE TTRNOM = 'PHADESTTARGET')
                       AND LPH.PHACODE = PHA.PHACODE
                       AND LPH.PHADEST = PHA.PHADEST
                       AND LPH.LANCODE = SLANGUE;
        END IF;

        IF SCMBNAME = 'RULE'
        THEN
            OPEN PC_RETURN FOR
                SELECT RUL.RULID AS CODEINTEGER, LRU.RULLABEL AS DISPLAYVALUE
                  FROM RULE RUL, LANRULE LRU
                 WHERE     RUL.RULSTATUS = 'ACTIVE'
                       AND LRU.RULID = RUL.RULID
                       AND LRU.LANCODE = SLANGUE;
        END IF;
    END S_PHAJALDPTCMB;

    PROCEDURE I_PHAJALDPT (
        SPHADEST         IN     PHAJALDPT.PHADEST%TYPE,
        SPHACODE         IN     PHAJALDPT.PHACODE%TYPE,
        SJALCODE         IN     PHAJALDPT.JALCODE%TYPE,
        SDPTCODE         IN     PHAJALDPT.DPTCODE%TYPE,
        SPHADESTTARGET   IN     PHAJALDPT.PHADESTTARGET%TYPE,
        SPHACODETARGET   IN     PHAJALDPT.PHACODETARGET%TYPE,
        NRULID           IN     PHAJALDPT.RULID%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NPJDORDER   NUMBER;
        BEGIN
            SELECT NVL (MAX (PJDORDER), 0) + 1
              INTO NPJDORDER
              FROM PHAJALDPT
             WHERE     PHADEST = SPHADEST
                   AND PHACODE = SPHACODE
                   AND JALCODE = SJALCODE;

            IF SDPTCODE IS NOT NULL
            THEN
                INSERT INTO PHAJALDPT (PHADEST,
                                       PHACODE,
                                       JALCODE,
                                       PJDORDER,
                                       DPTCODE,
                                       PHADESTTARGET,
                                       PHACODETARGET,
                                       RULID)
                     VALUES (SPHADEST,
                             SPHACODE,
                             SJALCODE,
                             NPJDORDER,
                             SDPTCODE,
                             SPHADESTTARGET,
                             SPHACODETARGET,
                             NRULID);
            ELSE
                NRETURNCODE := ERR_NULL_DEPARTMENT_CODE;
            END IF;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_PHAJALDPT;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_PHAJALDPT;

    PROCEDURE D_PHAJALDPT (SPHADEST      IN     PHAJALDPT.PHADEST%TYPE,
                           SPHACODE      IN     PHAJALDPT.PHACODE%TYPE,
                           SJALCODE      IN     PHAJALDPT.JALCODE%TYPE,
                           NPJDORDER     IN     PHAJALDPT.PJDORDER%TYPE,
                           NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            DELETE FROM PHAJALDPT
                  WHERE     PHADEST = SPHADEST
                        AND PHACODE = SPHACODE
                        AND JALCODE = SJALCODE
                        AND PJDORDER = NPJDORDER;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_PHAJALDPT;

    PROCEDURE U_PHAJALDPT (
        SPHADEST         IN     PHAJALDPT.PHADEST%TYPE,
        SPHACODE         IN     PHAJALDPT.PHACODE%TYPE,
        SJALCODE         IN     PHAJALDPT.JALCODE%TYPE,
        NPJDORDER        IN     PHAJALDPT.PJDORDER%TYPE,
        SDPTCODE         IN     PHAJALDPT.DPTCODE%TYPE,
        SPHADESTTARGET   IN     PHAJALDPT.PHADESTTARGET%TYPE,
        SPHACODETARGET   IN     PHAJALDPT.PHACODETARGET%TYPE,
        NRULID           IN     PHAJALDPT.RULID%TYPE,
        NRETURNCODE      IN OUT NUMBER)
    AS
    BEGIN
        BEGIN
            IF SDPTCODE IS NOT NULL
            THEN
                UPDATE PHAJALDPT
                   SET DPTCODE = SDPTCODE,
                       PHADESTTARGET = SPHADESTTARGET,
                       PHACODETARGET = SPHACODETARGET,
                       RULID = NRULID
                 WHERE     PHADEST = SPHADEST
                       AND PHACODE = SPHACODE
                       AND JALCODE = SJALCODE
                       AND PJDORDER = NPJDORDER;
            ELSE
                NRETURNCODE := ERR_NULL_DEPARTMENT_CODE;
            END IF;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_PHAJALDPT;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END U_PHAJALDPT;

    PROCEDURE I_NAF (S_NAFCODE                LANNAF.NAFCODE%TYPE,
                     S_PAYCODE                LANNAF.PAYCODE%TYPE,
                     S_NAFCODEPARENT          NAF.NAFCODEPARENT%TYPE,
                     S_LANCODE                LANNAF.LANCODE%TYPE,
                     S_NAFLIBELLE             LANNAF.NAFLIBELLE%TYPE,
                     NRETURNCODE       IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM NAF
             WHERE NAFCODE = S_NAFCODE AND PAYCODE = S_PAYCODE;

            IF NCOUNT = 0
            THEN
                INSERT INTO NAF (NAFCODE, PAYCODE, NAFCODEPARENT)
                     VALUES (S_NAFCODE, S_PAYCODE, S_NAFCODEPARENT);

                INSERT INTO LANNAF (NAFCODE,
                                    PAYCODE,
                                    LANCODE,
                                    NAFLIBELLE)
                     VALUES (S_NAFCODE,
                             S_PAYCODE,
                             S_LANCODE,
                             S_NAFLIBELLE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_NAF;

    PROCEDURE D_NAF (S_NAFCODE            LANNAF.NAFCODE%TYPE,
                     S_PAYCODE            LANNAF.PAYCODE%TYPE,
                     S_LANCODE            LANNAF.LANCODE%TYPE,
                     NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANNAF
             WHERE     NAFCODE = S_NAFCODE
                   AND PAYCODE = S_PAYCODE
                   AND LANCODE = S_LANCODE;

            IF NCOUNT > 0
            THEN
                DELETE FROM LANNAF
                      WHERE     NAFCODE = S_NAFCODE
                            AND PAYCODE = S_PAYCODE
                            AND LANCODE = S_LANCODE;

                DELETE FROM NAF
                      WHERE NAFCODE = S_NAFCODE AND PAYCODE = S_PAYCODE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_NAF;

    PROCEDURE I_CATJURIDIQUE (
        S_CJUCODE            CATJURIDIQUE.CJUCODE%TYPE,
        S_PAYCODE            CATJURIDIQUE.PAYCODE%TYPE,
        S_CJUTYPE            CATJURIDIQUE.CJUTYPE%TYPE,
        S_LANCODE            LANCATJURIDIQUE.LANCODE%TYPE,
        S_CJULIB             LANCATJURIDIQUE.CJULIBELLE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM CATJURIDIQUE
             WHERE PAYCODE = S_PAYCODE AND CJUCODE = S_CJUCODE;

            IF NCOUNT = 0
            THEN
                INSERT INTO CATJURIDIQUE (CJUCODE, PAYCODE, CJUTYPE)
                     VALUES (S_CJUCODE, S_PAYCODE, S_CJUTYPE);

                INSERT INTO LANCATJURIDIQUE (CJUCODE,
                                             LANCODE,
                                             CJULIBELLE,
                                             PAYCODE)
                     VALUES (S_CJUCODE,
                             S_LANCODE,
                             S_CJULIB,
                             S_PAYCODE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_CATJURIDIQUE;

    PROCEDURE D_CATJURIDIQUE (
        S_CJUCODE            CATJURIDIQUE.CJUCODE%TYPE,
        S_PAYCODE            CATJURIDIQUE.PAYCODE%TYPE,
        S_LANCODE            LANCATJURIDIQUE.LANCODE%TYPE,
        NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANCATJURIDIQUE
             WHERE     PAYCODE = S_PAYCODE
                   AND CJUCODE = S_CJUCODE
                   AND LANCODE = S_LANCODE;

            IF NCOUNT > 0
            THEN
                DELETE FROM LANCATJURIDIQUE
                      WHERE     PAYCODE = S_PAYCODE
                            AND CJUCODE = S_CJUCODE
                            AND LANCODE = S_LANCODE;

                DELETE FROM CATJURIDIQUE
                      WHERE PAYCODE = S_PAYCODE AND CJUCODE = S_CJUCODE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_CATJURIDIQUE;

    PROCEDURE I_NAP (
        S_NAPCODE                      NAP.NAPCODE%TYPE,
        S_PAYCODE                      NAP.PAYCODE%TYPE,
        N_NAPTXSAUPOUDRAGE             NAP.NAPTXSAUPOUDRAGE%TYPE,
        N_NAPFLAGREGISTRATION          NAP.NAPFLAGREGISTRATION%TYPE,
        S_NAPTYPE                      NAP.NAPTYPE%TYPE,
        N_NAPMTDEDUCTIBLECAP           NAP.NAPMTDEDUCTIBLECAP%TYPE,
        S_DEVCODE                      NAP.DEVCODE%TYPE,
        S_LANCODE                      LANNAP.LANCODE%TYPE,
        S_NAPLIBELLE                   LANNAP.NAPLIBELLE%TYPE,
        NRETURNCODE             IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM NAP
             WHERE NAPCODE = S_NAPCODE AND PAYCODE = S_PAYCODE;

            IF NCOUNT = 0
            THEN
                INSERT INTO NAP (NAPCODE,
                                 PAYCODE,
                                 NAPTXSAUPOUDRAGE,
                                 NAPFLAGREGISTRATION,
                                 NAPTYPE,
                                 NAPMTDEDUCTIBLECAP,
                                 DEVCODE)
                     VALUES (S_NAPCODE,
                             S_PAYCODE,
                             N_NAPTXSAUPOUDRAGE,
                             N_NAPFLAGREGISTRATION,
                             S_NAPTYPE,
                             N_NAPMTDEDUCTIBLECAP,
                             S_DEVCODE);

                INSERT INTO LANNAP (NAPCODE,
                                    PAYCODE,
                                    LANCODE,
                                    NAPLIBELLE)
                     VALUES (S_NAPCODE,
                             S_PAYCODE,
                             S_LANCODE,
                             S_NAPLIBELLE);
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END I_NAP;

    PROCEDURE D_NAP (S_NAPCODE            NAP.NAPCODE%TYPE,
                     S_PAYCODE            NAP.PAYCODE%TYPE,
                     S_LANCODE            LANNAP.LANCODE%TYPE,
                     NRETURNCODE   IN OUT NUMBER)
    AS
    BEGIN
        DECLARE
            NCOUNT   NUMBER := 0;
        BEGIN
            SELECT COUNT (*)
              INTO NCOUNT
              FROM LANNAP
             WHERE     NAPCODE = S_NAPCODE
                   AND PAYCODE = S_PAYCODE
                   AND LANCODE = S_LANCODE;

            IF NCOUNT > 0
            THEN
                DELETE FROM NAPLTV
                      WHERE NAPCODE = S_NAPCODE AND PAYCODE = S_PAYCODE;

                DELETE FROM LANNAP
                      WHERE     NAPCODE = S_NAPCODE
                            AND PAYCODE = S_PAYCODE
                            AND LANCODE = S_LANCODE;

                DELETE FROM NAP
                      WHERE NAPCODE = S_NAPCODE AND PAYCODE = S_PAYCODE;
            END IF;

            NRETURNCODE := 0;

            IF SQL%ROWCOUNT = 0
            THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
            WHEN ERR_PARENT_NOT_FOUND
            THEN
                NRETURNCODE := ERR_PARENT_ROL_FOUND_CONST;
            WHEN DUP_VAL_ON_INDEX
            THEN
                NRETURNCODE := ERR_DUP_TBT_INDEX_CONST;
            WHEN ERR_I_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN ERR_U_NULL_MANDATORY_KEY
            THEN
                NRETURNCODE := ERR_NULL_TBT_KEY_CONST;
            WHEN OTHERS
            THEN
                NRETURNCODE := -1 * SQLCODE;
        END;
    END D_NAP;
END PAV4_UPDATEPARGEN;
