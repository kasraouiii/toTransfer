create or replace PACKAGE BODY PA_UPDATEACTEUR
AS
    -- Declaration des exceptions a trapper
    ERR_CHILD_FOUND          EXCEPTION;
    ERR_PARENT_NOT_FOUND     EXCEPTION;
    ERR_I_NULL_MANDATORY_KEY EXCEPTION;
    ERR_U_NULL_MANDATORY_KEY EXCEPTION;
    -- Association des exceptions avec les erreurs ORACLE
    PRAGMA EXCEPTION_INIT(ERR_PARENT_NOT_FOUND, - 2291) ;
    PRAGMA EXCEPTION_INIT(ERR_CHILD_FOUND, - 2292) ;
    PRAGMA EXCEPTION_INIT(ERR_I_NULL_MANDATORY_KEY, - 1400) ;
    PRAGMA EXCEPTION_INIT(ERR_U_NULL_MANDATORY_KEY, - 1407) ;
    -- Declaration des constantes de codes retours a renvoyer
    ERR_CHILD_FOUND_CONST        CONSTANT INTEGER := 1045;
    ERR_PARENT_NOT_FOUND_CONST   CONSTANT INTEGER := 1044;
    ERR_DUP_VAL_ON_INDEX_CONST   CONSTANT INTEGER := 1046;
    ERR_NULL_MANDATORY_KEY_CONST CONSTANT INTEGER := 1055;
    ERR_NO_ROWS_CONST            CONSTANT INTEGER := 1;
    ERR_VAL_CORRESP_NULL_CONST   CONSTANT INTEGER := 1056;
    ERR_VAL_ROLE_NULL_CONST      CONSTANT INTEGER := 1057;
    ERR_VAL_STAT_NULL_CONST      CONSTANT INTEGER := 1058;
    ERR_VAL_TELECOM_NULL_CONST   CONSTANT INTEGER := 1059;
    ERR_VAL_BAFI_NULL_CONST      CONSTANT INTEGER := 1060;
    ERR_VAL_RELAT_NULL_CONST     CONSTANT INTEGER := 1061;
    ERR_VAL_ADR_NULL_CONST       CONSTANT INTEGER := 1501;
    ERR_VAL_ACT_NULL_CONST       CONSTANT INTEGER := 1502;
    ERR_VAL_RIB_NULL_CONST       CONSTANT INTEGER := 1503;
    ERR_VAL_AAD_NULL_CONST       CONSTANT INTEGER := 1504;
    ERR_VAL_APH_NULL_CONST       CONSTANT INTEGER := 1505;
    ERR_VAL_ARE_NULL_CONST       CONSTANT INTEGER := 1506;
    ERR_VAL_AGE_NULL_CONST       CONSTANT INTEGER := 1507;
    ERR_VAL_BGU_NULL_CONST       CONSTANT INTEGER := 1508;
    ERR_VAL_AGM_NULL_CONST       CONSTANT INTEGER := 1509;
    ERR_VAL_APE_NULL_CONST       CONSTANT INTEGER := 1510;
    ERR_VAL_AAA_NULL_CONST       CONSTANT INTEGER := 1511;
    ERR_VAL_AEX_NULL_CONST       CONSTANT INTEGER := 1512;
    ERR_VAL_APR_NULL_CONST       CONSTANT INTEGER := 1513;
    ERR_VAL_APJ_NULL_CONST       CONSTANT INTEGER := 1514;
    ERR_VAL_APM_NULL_CONST       CONSTANT INTEGER := 1515;
    ERR_VAL_ARI_NULL_CONST       CONSTANT INTEGER := 1704;
    ERR_VAL_RIN_NULL_CONST       CONSTANT INTEGER := 1705;
    ERR_VAL_LAT_NULL_CONST       CONSTANT INTEGER := 1706;
    ERR_VAL_ADM_NULL_CONST       CONSTANT INTEGER := 1408;
    ERR_VAL_RAT_NULL_CONST       CONSTANT INTEGER := 2250;
    ERR_VAL_ADU_NULL_CONST       CONSTANT INTEGER := 5432;
    -- LG 20/09/2002 FSA
    ERR_VAL_DMA_NULL_CONST      CONSTANT INTEGER := 6457;
    ERR_VAL_CPO_NULL_CONST      CONSTANT INTEGER := 6462;
    ERR_VAL_APG_NULL_CONST      CONSTANT INTEGER := 6463;
    ERR_VAL_APP_NULL_CONST      CONSTANT INTEGER := 6464;
    ERR_VAL_APA_NULL_CONST      CONSTANT INTEGER := 6465;
    ERR_DUP_VAL_ON_TELCOR_CONST CONSTANT INTEGER := 1062;
    ERR_DUP_VAL_ON_ACTEUR_CONST CONSTANT INTEGER := 1063;
    ERR_DUP_VAL_ON_ADR_CONST    CONSTANT INTEGER := 1065;
    ERR_DUP_VAL_ON_ACO_CONST    CONSTANT INTEGER := 1517;
    ERR_DUP_VAL_ON_APH_CONST    CONSTANT INTEGER := 1518;
    ERR_DUP_VAL_ON_ARE_CONST    CONSTANT INTEGER := 1519;
    ERR_DUP_VAL_ON_RIB_CONST    CONSTANT INTEGER := 1520;
    ERR_DUP_VAL_ON_RIN_CONST    CONSTANT INTEGER := 1521;
    ERR_DUP_VAL_ON_ARO_CONST    CONSTANT INTEGER := 1522;
    ERR_DUP_VAL_ON_AST_CONST    CONSTANT INTEGER := 1523;
    ERR_DUP_VAL_ON_ATE_CONST    CONSTANT INTEGER := 1524;
    ERR_DUP_VAL_ON_ACT_CONST    CONSTANT INTEGER := 1525;
    ERR_DUP_VAL_ON_AAD_CONST    CONSTANT INTEGER := 1526;
    ERR_DUP_VAL_ON_APA_CONST    CONSTANT INTEGER := 1527;
    ERR_DUP_VAL_ON_AGE_CONST    CONSTANT INTEGER := 1528;
    ERR_DUP_VAL_ON_BGU_CONST    CONSTANT INTEGER := 1529;
    ERR_DUP_VAL_ON_ATA_CONST    CONSTANT INTEGER := 1530;
    ERR_DUP_VAL_ON_ADM_CONST    CONSTANT INTEGER := 1531;
    ERR_DUP_VAL_ON_AGM_CONST    CONSTANT INTEGER := 1532;
    ERR_DUP_VAL_ON_APE_CONST    CONSTANT INTEGER := 1533;
    ERR_DUP_VAL_ON_ARI_CONST    CONSTANT INTEGER := 1534;
    ERR_DUP_VAL_ON_AAA_CONST    CONSTANT INTEGER := 1535;
    ERR_DUP_VAL_ON_AEX_CONST    CONSTANT INTEGER := 1536;
    ERR_DUP_VAL_ON_APR_CONST    CONSTANT INTEGER := 1537;
    ERR_DUP_VAL_ON_APJ_CONST    CONSTANT INTEGER := 1538;
    ERR_DUP_VAL_ON_APM_CONST    CONSTANT INTEGER := 1539;
    ERR_DUP_VAL_ON_RAT_CONST    CONSTANT INTEGER := 2251;
    ERR_DUP_VAL_ON_CPO_CONST    CONSTANT INTEGER := 4121;
    ERR_DUP_VAL_ON_ADU_CONST    CONSTANT INTEGER := 5433;
    --LG FSA 20/09/2002
    ERR_DUP_VAL_ON_DMA_CONST  CONSTANT INTEGER := 6467;
    ERR_DUP_VAL_ON_APG_CONST  CONSTANT INTEGER := 6472;
    ERR_DUP_VAL_ON_APP_CONST  CONSTANT INTEGER := 6473;
    ERR_DUP_VAL_ON_APD_CONST  CONSTANT INTEGER := 6474;
    ERR_CHILD_ADR_FOUND_CONST CONSTANT INTEGER := 1685;
    ERR_CHILD_ACT_FOUND_CONST CONSTANT INTEGER := 1686;
    ERR_CHILD_AAD_FOUND_CONST CONSTANT INTEGER := 1687;
    ERR_CHILD_ACO_FOUND_CONST CONSTANT INTEGER := 1688;
    ERR_CHILD_ARE_FOUND_CONST CONSTANT INTEGER := 1689;
    ERR_CHILD_RIN_FOUND_CONST CONSTANT INTEGER := 1690;
    ERR_CHILD_ARI_FOUND_CONST CONSTANT INTEGER := 1691;
    ERR_CHILD_ARO_FOUND_CONST CONSTANT INTEGER := 1692;
    ERR_CHILD_AST_FOUND_CONST CONSTANT INTEGER := 1693;
    ERR_CHILD_ATE_FOUND_CONST CONSTANT INTEGER := 1694;
    ERR_CHILD_ADM_FOUND_CONST CONSTANT INTEGER := 1695;
    ERR_CHILD_AGM_FOUND_CONST CONSTANT INTEGER := 1696;
    ERR_CHILD_APE_FOUND_CONST CONSTANT INTEGER := 1697;
    ERR_CHILD_AAA_FOUND_CONST CONSTANT INTEGER := 1698;
    ERR_CHILD_AEX_FOUND_CONST CONSTANT INTEGER := 1699;
    ERR_CHILD_APR_FOUND_CONST CONSTANT INTEGER := 1700;
    ERR_CHILD_APJ_FOUND_CONST CONSTANT INTEGER := 1701;
    ERR_CHILD_APM_FOUND_CONST CONSTANT INTEGER := 1702;
    ERR_CHILD_APH_FOUND_CONST CONSTANT INTEGER := 1703;
    ERR_CHILD_RAT_FOUND_CONST CONSTANT INTEGER := 2252;
    ERR_CHILD_AAG_FOUND_CONST CONSTANT INTEGER := 2671;
    ERR_CHILD_ADU_FOUND_CONST CONSTANT INTEGER := 5434;
    -- LG 19192002 FSA
    ERR_CHILD_ATC_FOUND_CONST  CONSTANT INTEGER := 6402;
    ERR_CHILD_ATB_FOUND_CONST  CONSTANT INTEGER := 6403;
    ERR_CHILD_AAR_FOUND_CONST  CONSTANT INTEGER := 6404;
    ERR_CHILD_CPO_FOUND_CONST  CONSTANT INTEGER := 6405;
    ERR_CHILD_AAF_FOUND_CONST  CONSTANT INTEGER := 6406;
    ERR_CHILD_APG_FOUND_CONST  CONSTANT INTEGER := 6407;
    ERR_CHILD_APP_FOUND_CONST  CONSTANT INTEGER := 6408;
    ERR_CHILD_APA_FOUND_CONST  CONSTANT INTEGER := 6409;
    ERR_PARENT_ADR_FOUND_CONST CONSTANT INTEGER := 6410;
    ERR_PARENT_ACT_FOUND_CONST CONSTANT INTEGER := 6411;
    ERR_PARENT_AAD_FOUND_CONST CONSTANT INTEGER := 6412;
    ERR_PARENT_ACA_FOUND_CONST CONSTANT INTEGER := 6413;
    ERR_PARENT_DMA_FOUND_CONST CONSTANT INTEGER := 6414;
    ERR_PARENT_ACO_FOUND_CONST CONSTANT INTEGER := 6417;
    ERR_PARENT_ARA_FOUND_CONST CONSTANT INTEGER := 6418;
    ERR_PARENT_APH_FOUND_CONST CONSTANT INTEGER := 6419;
    ERR_PARENT_ARE_FOUND_CONST CONSTANT INTEGER := 6420;
    ERR_PARENT_RIB_FOUND_CONST CONSTANT INTEGER := 6421;
    ERR_PARENT_ARI_FOUND_CONST CONSTANT INTEGER := 6422;
    ERR_PARENT_ATD_FOUND_CONST CONSTANT INTEGER := 6423;
    ERR_PARENT_RIN_FOUND_CONST CONSTANT INTEGER := 6424;
    ERR_PARENT_ARO_FOUND_CONST CONSTANT INTEGER := 6425;
    ERR_PARENT_AST_FOUND_CONST CONSTANT INTEGER := 6426;
    ERR_PARENT_ATE_FOUND_CONST CONSTANT INTEGER := 6427;
    ERR_PARENT_ATC_FOUND_CONST CONSTANT INTEGER := 6428;
    ERR_PARENT_APA_FOUND_CONST CONSTANT INTEGER := 6429;
    ERR_PARENT_AGE_FOUND_CONST CONSTANT INTEGER := 6430;
    ERR_PARENT_AIN_FOUND_CONST CONSTANT INTEGER := 6431;
    ERR_PARENT_BGU_FOUND_CONST CONSTANT INTEGER := 6432;
    ERR_PARENT_ATA_FOUND_CONST CONSTANT INTEGER := 6433;
    ERR_PARENT_ADM_FOUND_CONST CONSTANT INTEGER := 6434;
    ERR_PARENT_AGM_FOUND_CONST CONSTANT INTEGER := 6435;
    ERR_PARENT_APE_FOUND_CONST CONSTANT INTEGER := 6436;
    ERR_PARENT_AAG_FOUND_CONST CONSTANT INTEGER := 6438;
    ERR_PARENT_AEX_FOUND_CONST CONSTANT INTEGER := 6439;
    ERR_PARENT_APR_FOUND_CONST CONSTANT INTEGER := 6440;
    ERR_PARENT_APJ_FOUND_CONST CONSTANT INTEGER := 6441;
    ERR_PARENT_APM_FOUND_CONST CONSTANT INTEGER := 6442;
    ERR_PARENT_AAR_FOUND_CONST CONSTANT INTEGER := 6443;
    ERR_PARENT_AVE_FOUND_CONST CONSTANT INTEGER := 6445;
    ERR_PARENT_ASP_FOUND_CONST CONSTANT INTEGER := 6446;
    ERR_PARENT_ASM_FOUND_CONST CONSTANT INTEGER := 6447;
    ERR_PARENT_ARY_FOUND_CONST CONSTANT INTEGER := 6448;
    ERR_PARENT_CPO_FOUND_CONST CONSTANT INTEGER := 6449;
    ERR_PARENT_ASG_FOUND_CONST CONSTANT INTEGER := 6450;
    ERR_PARENT_AAF_FOUND_CONST CONSTANT INTEGER := 6451;
    ERR_PARENT_APG_FOUND_CONST CONSTANT INTEGER := 6452;
    ERR_PARENT_APP_FOUND_CONST CONSTANT INTEGER := 6453;
    ERR_PARENT_PPA_FOUND_CONST CONSTANT INTEGER := 6454;
    ERR_PARENT_AUN_FOUND_CONST CONSTANT INTEGER := 6455;
    ERR_CRO_EXISTANT_CONST     CONSTANT INTEGER := 3133;
    ERR_CRO_GEST_ANO           CONSTANT INTEGER := 3134;
    ERR_CHILD_BGU_CONST        CONSTANT INTEGER := 1199;
    -- AAGRVE
    ERR_VAL_AVE_NULL_CONST    CONSTANT INTEGER := 3946;
    ERR_DUP_VAL_ON_AVE_CONST  CONSTANT INTEGER := 3947;
    ERR_CHILD_AVE_FOUND_CONST CONSTANT INTEGER := 3948;
    -- ACTSPECIALITE -- CV : Gestion des fournisseurs
    ERR_CHILD_ASP_FOUND_CONST CONSTANT INTEGER := 3995;
    ERR_DUP_VAL_ON_ASP_CONST  CONSTANT INTEGER := 4158;
    ERR_VAL_ASP_NULL_CONST    CONSTANT INTEGER := 4157;
    -- ACTSPEMETIER -- CV : Gestion des fournisseurs
    ERR_CHILD_ASM_FOUND_CONST CONSTANT INTEGER := 3996;
    ERR_DUP_VAL_ON_ASM_CONST  CONSTANT INTEGER := 4159;
    ERR_VAL_ASM_NULL_CONST    CONSTANT INTEGER := 3946;
    -- ACTRAYONACTION -- CV : Gestion des fournisseurs
    ERR_CHILD_ARA_FOUND_CONST CONSTANT INTEGER := 3994;
    ERR_DUP_VAL_ON_ARA_CONST  CONSTANT INTEGER := 4160;
    ERR_VAL_ARA_NULL_CONST    CONSTANT INTEGER := 3946;
    -- ACTSECTGESTION -- CV 16012001
    ERR_CHILD_ASE_FOUND_CONST CONSTANT INTEGER := 4122;
    ERR_DUP_VAL_ON_ASE_CONST  CONSTANT INTEGER := 4123;
    ERR_VAL_ASE_NULL_CONST    CONSTANT INTEGER := 4124;
    -- ACTUNITE --
    EP_DOSACTADRESSE_NF          CONSTANT INTEGER := 1839;
    EN_DOSACTADRESSE_M_KEY_CONST CONSTANT INTEGER := 1802;
    ERR_DUP_DOSACTADRESSE_V      CONSTANT INTEGER := 1820;
    --ALA waterfall A2
    ERR_I_PARENT_ARAC_FOUND_CONST CONSTANT INTEGER := 9539;
    ERR_I_VAL_ARAC_NULL_CONST     CONSTANT INTEGER := 9540;
    ERR_I_DUP_VAL_ON_ARAC_CONST   CONSTANT INTEGER := 9541;
    ERR_U_PARENT_ARAC_FOUND_CONST CONSTANT INTEGER := 9542;
    ERR_U_VAL_ARAC_NULL_CONST     CONSTANT INTEGER := 9543;
    ERR_U_DUP_VAL_ON_ARAC_CONST   CONSTANT INTEGER := 9544;
    ERR_D_CHILD_ARAC_FOUND_CONST  CONSTANT INTEGER := 9545;
    --ALA 110706 Propriete des relations
    ERR_I_PARENT_ADE_FOUND_CONST CONSTANT INTEGER := 9616 ;
    ERR_I_VAL_ADE_NULL_CONST     CONSTANT INTEGER := 9617;
    ERR_I_DUP_VAL_ON_ADE_CONST   CONSTANT INTEGER := 9618;
    ERR_U_PARENT_ADE_FOUND_CONST CONSTANT INTEGER := 9619;
    ERR_U_VAL_ADE_NULL_CONST     CONSTANT INTEGER := 9620;
    ERR_U_DUP_VAL_ON_ADE_CONST   CONSTANT INTEGER := 9621;
    ERR_D_CHILD_ADE_FOUND_CONST  CONSTANT INTEGER := 9622;
    --ALA 111006 Adresse par correspondant de l'acteur
    ERR_PARENT_I_ACA_FOUND_CONST CONSTANT INTEGER := 9713;
    ERR_DUP_VAL_I_ACA_CONST      CONSTANT INTEGER := 9714;
    ERR_VAL_I_ACA_NULL_CONST     CONSTANT INTEGER := 9715;
    ERR_PARENT_U_ACA_FOUND_CONST CONSTANT INTEGER := 9716;
    ERR_DUP_VAL_U_ACA_CONST      CONSTANT INTEGER := 9717;
    ERR_VAL_U_ACA_NULL_CONST     CONSTANT INTEGER := 9718;
    ERR_D_CHILD_ACA_FOUND_CONST  CONSTANT INTEGER := 9719;
    --ALA 051106 Propriete des tarifs
    ERR_I_PARENT_ASR_FOUND_CONST CONSTANT INTEGER := 9822;
    ERR_I_VAL_ASR_NULL_CONST     CONSTANT INTEGER := 9823;
    ERR_I_DUP_VAL_ON_ASR_CONST   CONSTANT INTEGER := 9824;
    ERR_U_PARENT_ASR_FOUND_CONST CONSTANT INTEGER := 9825;
    ERR_U_VAL_ASR_NULL_CONST     CONSTANT INTEGER := 9826;
    ERR_U_DUP_VAL_ON_ASR_CONST   CONSTANT INTEGER := 9827;
    ERR_D_CHILD_ASR_FOUND_CONST  CONSTANT INTEGER := 9828;
    --ALA 081106 attributs de la franchise
    ERR_I_PARENT_ASA_FOUND_CONST CONSTANT INTEGER := 9829;
    ERR_I_VAL_ASA_NULL_CONST     CONSTANT INTEGER := 9830;
    ERR_I_DUP_VAL_ON_ASA_CONST   CONSTANT INTEGER := 9831;
    ERR_U_PARENT_ASA_FOUND_CONST CONSTANT INTEGER := 9832;
    ERR_U_VAL_ASA_NULL_CONST     CONSTANT INTEGER := 9833;
    ERR_U_DUP_VAL_ON_ASA_CONST   CONSTANT INTEGER := 9834;
    ERR_D_CHILD_ASA_FOUND_CONST  CONSTANT INTEGER := 9835;
    --ALA 081106 agrement de l acteur
    ERR_I_PARENT_AAG_FOUND_CONST CONSTANT INTEGER := 9836;
    ERR_I_VAL_AAG_NULL_CONST     CONSTANT INTEGER := 9837;
    ERR_I_DUP_VAL_ON_AAG_CONST   CONSTANT INTEGER := 9838;
    ERR_U_PARENT_AAG_FOUND_CONST CONSTANT INTEGER := 9839;
    ERR_U_VAL_AAG_NULL_CONST     CONSTANT INTEGER := 9840;
    ERR_U_DUP_VAL_ON_AAG_CONST   CONSTANT INTEGER := 9841;
    ERR_D_CHILD_AAG_FOUND_CONST  CONSTANT INTEGER := 9842;
    --ALA 111106 Contact de la franchise
    ERR_I_PARENT_AAC_FOUND_CONST CONSTANT INTEGER := 9867;
    ERR_I_VAL_AAC_NULL_CONST     CONSTANT INTEGER := 9868;
    ERR_I_DUP_VAL_ON_AAC_CONST   CONSTANT INTEGER := 9869;
    ERR_U_PARENT_AAC_FOUND_CONST CONSTANT INTEGER := 9870;
    ERR_U_VAL_AAC_NULL_CONST     CONSTANT INTEGER := 9871;
    ERR_U_DUP_VAL_ON_AAC_CONST   CONSTANT INTEGER := 9872;
    ERR_D_CHILD_AAC_FOUND_CONST  CONSTANT INTEGER := 9873;
    ERR_INSERTION_CREVT          CONSTANT INTEGER := 10421;
    ERR_NAFCODE_NOTFOUND         CONSTANT INTEGER := 10478;--ACH
    ERR_NUMNUMERO_TOOBIG         CONSTANT INTEGER := 20767;
    -- Procedures de supression --
    -- ADRESSE --
PROCEDURE D_ADRESSE(
        NADRID ADRESSE.ADRID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ADRESSE WHERE ADRID = NADRID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ADR_FOUND_CONST;
    END;
END D_ADRESSE;
-- ACTEUR --
PROCEDURE D_ACTEUR(
        NACTID ACTEUR.ACTID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        CURSOR C1
        IS
            SELECT RIBID FROM ACTRIB WHERE ACTID = NACTID;
        NCOUNT NUMBER;
    BEGIN
        BEGIN
            NRETURNCODE := 0;
            DELETE FROM ADMSTATUS WHERE ADMID IN
                (
                    SELECT ADMID FROM ADMINISTRATIF WHERE ACTID = NACTID
                ) ;
            DELETE FROM ADMINISTRATIF WHERE ACTID = NACTID;
            DELETE FROM ADMSTATUS WHERE ADMID IN
                (
                    SELECT ADMID FROM ADMINISTRATIF WHERE ACTIDGESTION = NACTID
                ) ;
            DELETE FROM ADMINISTRATIF WHERE ACTIDGESTION = NACTID;
            DELETE FROM ACTRIBTMPDEFAUT WHERE ACTID = NACTID;
            DELETE FROM ACTUNITE WHERE ACTID = NACTID;
            FOR C1R IN C1
            LOOP
                D_ACTRIB(C1R.RIBID, NACTID, NRETURNCODE) ;
                IF(NRETURNCODE != 0) THEN
                    EXIT;
                END IF;
            END LOOP;
            IF(NRETURNCODE = 0) THEN
                DELETE FROM ACTALLOCATIONPRIORITY WHERE ACTID = NACTID;
                DELETE FROM ACTFINANCIER WHERE ACTID = NACTID ;
                DELETE FROM ACTCOMPLEMENT WHERE ACTID = NACTID ;
                DELETE FROM LKASPACO WHERE ACTID = NACTID;
                DELETE FROM LKACTTELCOR WHERE ACTID = NACTID;
                DELETE FROM ACTCORRESPONDANT WHERE ACTID = NACTID;
                DELETE FROM LKACTCORADR WHERE ACTID = NACTID;
                DELETE FROM ACTCONTACT WHERE ACTID = NACTID;
                DELETE FROM ACTEURGROUPE WHERE ACTID = NACTID;
                DELETE FROM ACTTCOVALEUR WHERE ACTID = NACTID;
                DELETE FROM ACTADRESSE WHERE ACTID = NACTID;
                DELETE FROM ACTRIBACCES WHERE ACTID = NACTID;
                DELETE FROM ACTRIB WHERE ACTID = NACTID;
                DELETE FROM ACTTELECOM WHERE ACTID = NACTID;
                --DELETE FROM ACTSTATISTIQUE WHERE ACTID = NACTID; TRUNK-2644
                DELETE FROM ACTTAB WHERE ACTID = NACTID;
                DELETE FROM ACTPHASE WHERE ACTID = NACTID;
                DELETE FROM ACTRELPRODETAIL WHERE ACTID = NACTID;
                DELETE FROM ACTRELPRODETAIL WHERE ACTIDRELATION = NACTID;
                DELETE FROM ACTRELATION WHERE ACTID = NACTID;
                DELETE FROM ACTRELATION WHERE ACTIDRELATION = NACTID;
                DELETE FROM AAGRVE WHERE ACTID = NACTID;
                DELETE FROM ACTSPEMETIER WHERE ACTID = NACTID;
                DELETE FROM ACTSPEATTRIBUTE WHERE ACTID = NACTID;
                DELETE FROM ACTSPESERVICERATE WHERE ACTID = NACTID;
                DELETE FROM ACTSERVICEAGREEMENT WHERE ACTID = NACTID;
                DELETE FROM ACTSPEMETIER WHERE ACTID = NACTID;
                DELETE FROM ACTSPECIALITE WHERE ACTID = NACTID;
                DELETE FROM ACTRAYONACTION WHERE ACTID = NACTID; -- CV-18042002 FSA-8236
                DELETE FROM AROAGE WHERE ACTID = NACTID;
                DELETE FROM AROAGE WHERE ACTIDGESTION = NACTID;
                DELETE FROM LKAVECRE WHERE ACTID = NACTID;
                DELETE FROM LKAVECRE WHERE ACTIDGESTION = NACTID;
                DELETE FROM LKAARFEC WHERE ACTID = NACTID;
                DELETE FROM LKAARFEC WHERE ACTIDGESTION = NACTID;
                DELETE FROM AROAGERELANCE WHERE ACTID = NACTID;
                DELETE FROM AROAGERELANCE WHERE ACTIDGESTION = NACTID;
                DELETE FROM ACTROLE WHERE ACTID = NACTID;
                DELETE FROM LKGROTACAGE WHERE ACTID = NACTID;
                DELETE FROM TACACTGESTION WHERE ACTID = NACTID;
                DELETE FROM LKTPGAGE WHERE ACTID = NACTID;
                DELETE FROM ACTEXERCICE WHERE ACTID = NACTID;
                DELETE FROM LKUTITMFACGDROIT WHERE ACTID = NACTID;
                --DELETE FROM ACTPROCREANCE         WHERE ACTID= nActId;
                --DELETE FROM ACTPROCREANCE         WHERE ACTIDGESTION = nActId;
                DELETE
                FROM
                    ACTPROMANDAT
                WHERE
                    ACTID = NACTID;
                DELETE FROM ACTPROMANDAT WHERE ACTIDMANDAT = NACTID;
                DELETE FROM ACTPROJUGEMENT WHERE ACTID = NACTID;
                DELETE FROM ACTPROAGE WHERE ACTID = NACTID; -- TD 06/06/01
                DELETE FROM ACTPROPHAAUDIENCE WHERE ACTID = NACTID; -- TD 06/06/01
                DELETE FROM ACTPROPHASE WHERE ACTID = NACTID; -- TD 06/06/01
                DELETE FROM ACTPROCEDURE WHERE ACTID = NACTID;
                DELETE FROM CREVT WHERE ACTID = NACTID;
                DELETE FROM NUMEROGESTION WHERE ACTID = NACTID;
                DELETE FROM AGEGROMESURE WHERE ACTID = NACTID;
                DELETE FROM ACTPERIMETRE WHERE ACTID = NACTID;
                DELETE FROM ACTEURPARTICULIER WHERE ACTID = NACTID;
                DELETE FROM ACTEURINDIVISION WHERE ACTID = NACTID;
                DELETE FROM ACTEURETRANGER WHERE ACTID = NACTID;
                DELETE FROM ACTEURPMORALE WHERE ACTID = NACTID;
                DELETE FROM ACTEURGESTION WHERE ACTID = NACTID;
                DELETE FROM ACTSECTGESTION WHERE ACTID = NACTID; -- CV : 16012001
                DELETE FROM ACTCANBESOIN WHERE ACTID = NACTID;
                DELETE FROM ACTCANDIDATURE WHERE ACTID = NACTID;
                DELETE FROM LKACTUTITSM WHERE ACTID = NACTID;
                DELETE FROM AGERACHAT WHERE ACTID = NACTID;
                DELETE FROM ACTEURGROUPE WHERE ACTID = NACTID;
				--TRUNK-2644
				DELETE FROM CCHVALUE WHERE ACTID = NACTID;
                DELETE FROM ACTEUR WHERE ACTID = NACTID;
                NRETURNCODE     := 0;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        EXCEPTION
        WHEN ERR_CHILD_FOUND THEN
            NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
        END;
    END;
END D_ACTEUR;
-- ACTCANDIDATURE --
PROCEDURE D_ACTCANDIDATURE(
        NACTID ACTEUR.ACTID%TYPE,
        NACAORDRE ACTCANDIDATURE.ACAORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTCANBESOIN WHERE ACTID = NACTID AND ACAORDRE = NACAORDRE;
        DELETE FROM ACTCANDIDATURE WHERE ACTID = NACTID AND ACAORDRE = NACAORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AAD_FOUND_CONST;
    END;
END D_ACTCANDIDATURE;
-- ACTADRESSE --
PROCEDURE D_ACTADRESSE(
        NACTID ACTEUR.ACTID%TYPE,
        NADRID ADRESSE.ADRID%TYPE,
        NAADORDRE ACTADRESSE.AADORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTADRESSE WHERE ACTID = NACTID AND AADORDRE = NAADORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AAD_FOUND_CONST;
    END;
END D_ACTADRESSE;
-- LKACTTELCOR1 --
PROCEDURE D_LKACTTELCOR1(
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE ACTCORRESPONDANT.ACOORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM LKACTTELCOR WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
    END;
END D_LKACTTELCOR1;
-- ACTCORRESPONDANT --
PROCEDURE D_ACTCORRESPONDANT(
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE ACTCORRESPONDANT.ACOORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTCORRESPONDANT WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ACO_FOUND_CONST;
    END;
END D_ACTCORRESPONDANT;
-- ACTPHASE --
PROCEDURE D_ACTPHASE(
        NACTID ACTEUR.ACTID%TYPE,
        DTAPHDTDEB ACTPHASE.APHDTDEB%TYPE,
        SPHACODE ACTPHASE.PHACODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPHASE WHERE ACTID = NACTID AND APHDTDEB = DTAPHDTDEB AND PHACODE = SPHACODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APH_FOUND_CONST;
    END;
END D_ACTPHASE;
-- ACTRELATION --
PROCEDURE D_ACTRELATION(
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTRELATION.ACTIDRELATION%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
    BEGIN
        BEGIN
            --ALA 110706 suppression du detail relation si existe
            SELECT
                COUNT( *)
            INTO
                NCOUNT
            FROM
                ACTRELPRODETAIL
            WHERE
                ACTID             = NACTID
                AND ACTIDRELATION = NACTIDRELATION
                AND TRECODE       = STRECODE
                AND AREDTDEB      = DTAREDTDEB;
            NRETURNCODE          := 0;
            IF NCOUNT            != 0 THEN
                DELETE FROM ACTRELPRODETAIL WHERE ACTID = NACTID AND ACTIDRELATION = NACTIDRELATION AND TRECODE = STRECODE AND AREDTDEB = DTAREDTDEB;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
            IF NRETURNCODE = 0 THEN
                DELETE FROM ACTRELATION WHERE ACTID = NACTID AND ACTIDRELATION = NACTIDRELATION AND TRECODE = STRECODE AND AREDTDEB = DTAREDTDEB;
                NRETURNCODE     := 0;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
            --ALA 050707
            IF NRETURNCODE = 0 THEN
                UPDATE ACTEUR SET ACTDTMAJ = TRUNC(SYSDATE) WHERE ACTID IN(NACTID, NACTIDRELATION) ;
            END IF;
        EXCEPTION
        WHEN ERR_CHILD_FOUND THEN
            NRETURNCODE := ERR_CHILD_ARE_FOUND_CONST;
        END;
    END;
END D_ACTRELATION;
-- RININFO --
PROCEDURE D_RIBINFO(
        NRIBID RIB.RIBID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM RIBINFO WHERE RIBID = NRIBID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_RIN_FOUND_CONST;
    END;
END D_RIBINFO;
-- ACTRIB --
PROCEDURE D_ACTRIB(
        NRIBID RIB.RIBID%TYPE,
        NACTID ACTEUR.ACTID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
    BEGIN
        NRETURNCODE := 0;
        SELECT COUNT( *) INTO NCOUNT FROM ACTUNITE WHERE RIBID = NRIBID;
        IF NCOUNT != 0 THEN
            RAISE ERR_CHILD_FOUND;
        END IF;
        SELECT COUNT( *) INTO NCOUNT FROM ACTRIB WHERE RIBID = NRIBID;
        DELETE ACTRIBACCES WHERE ACTID = NACTID AND RIBID = NRIBID;
        DELETE FROM ACTRIB WHERE ACTID = NACTID AND RIBID = NRIBID;
        -- Si le RIB n'est renseigne qu'une seule fois dans ActRib, on efface les donnees de ce RIB --
        IF NCOUNT <= 1 THEN
            BEGIN
                DELETE FROM RIBINFO WHERE RIBID = NRIBID;
                DELETE FROM RIB WHERE RIBID = NRIBID;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END;
        END IF;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ARI_FOUND_CONST;
    END;
END D_ACTRIB;
PROCEDURE D_ACTRIBTMPDEFAUT(
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID RIB.RIBID%TYPE,
        SATDTYPE ACTRIBTMPDEFAUT.ATDTYPE%TYPE,
        STMPCODE ACTRIBTMPDEFAUT.TMPCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
    BEGIN
        NRETURNCODE := 0;
        DELETE FROM ACTRIBTMPDEFAUT WHERE ACTID = NACTID AND ATDTYPE = SATDTYPE AND TMPCODE = STMPCODE;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ARI_FOUND_CONST;
    END;
END D_ACTRIBTMPDEFAUT;
-- ACTROLE --
/* PROCEDURE D_ACTROLE (
nActId ACTEUR.ACTID%TYPE,
sRolCode ACTROLE.ROLCODE%TYPE,
nReturnCode IN OUT NUMBER) AS
BEGIN
DECLARE
nOptionProExt NUMBER;
nItrId  number;
BEGIN
nReturnCode := 0;
DELETE FROM AROAGERELANCE WHERE ACTID = nActId AND ROLCODE = sRolCode;
DELETE FROM LKAVECRE      WHERE ACTID = nActId AND ROLCODE = sRolCode;
-- CV-18042002 FSA-8236
DELETE FROM AAGRVE        WHERE ACTID = nActId AND ROLCODE = sRolCode;
DELETE FROM AROAGE        WHERE ACTID = nActId AND ROLCODE = sRolCode;
DELETE FROM ACTROLE       WHERE ACTID = nActId AND ROLCODE = sRolCode;
IF ( sRolCode = 'PROEXT' ) THEN
SELECT COUNT(*)
INTO   nOptionProExt
FROM   ACTEURGESTION
WHERE  ACTID = nActId;
IF ( nOptionProExt = 1 ) THEN
SELECT MAX(ITRID) INTO nItrId FROM IMMOTRANCHE WHERE ACTID = nActId;
IF nItrId IS NOT NULL THEN
PAV4_UPDATEIMMOTRANCHE.D_IMMOTRANCHE (nItrId,nReturnCode);
END IF;
IF nReturnCode = 0 THEN
DELETE ACTEURGESTION
WHERE  ACTID = nActId;
END IF;
END IF;
END IF;
IF SQL%ROWCOUNT=0 THEN
nReturnCode := ERR_NO_ROWS_CONST;
END IF;
EXCEPTION
WHEN ERR_CHILD_FOUND THEN
nReturnCode := ERR_CHILD_ARO_FOUND_CONST;
END;
END D_ACTROLE; */
-- ACTSTATISTIQUE --
PROCEDURE D_ACTSTATISTIQUE(
        NACTID ACTEUR.ACTID%TYPE,
        SSACCODE CCHVALUE.CVASTRINGVALUE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
		--TRUNK-2644
        --DELETE FROM ACTSTATISTIQUE WHERE ACTID = NACTID AND SACCODE = SSACCODE;
		DELETE FROM CCHVALUE WHERE CCHSID = (SELECT MAX(CCHSID) FROM CUSTOMCHARACTERISTIC WHERE ENTCODE= 'ACTEUR' AND CCHVALUECODE = SSACCODE) AND ENTCODE = 'ACTEUR' AND ACTID = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AST_FOUND_CONST;
    END;
END D_ACTSTATISTIQUE;
-- LKACTTELCOR2 --
PROCEDURE D_LKACTTELCOR2(
        NACTID ACTEUR.ACTID%TYPE,
        NATEORDRE ACTTELECOM.ATEORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM LKACTTELCOR WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
    END;
END D_LKACTTELCOR2;
-- ACTTELECOM --
PROCEDURE D_ACTTELECOM(
        NACTID ACTEUR.ACTID%TYPE,
        NATEORDRE ACTTELECOM.ATEORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTTELECOM WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ATE_FOUND_CONST;
    END;
END D_ACTTELECOM;
-- LKACTTELCOR3 --
PROCEDURE D_LKACTTELCOR3(
        NACTID ACTEUR.ACTID%TYPE,
        NATEORDRE ACTTELECOM.ATEORDRE%TYPE,
        NACOORDRE ACTCORRESPONDANT.ACOORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
 	  DECLARE
 	   ncount number :=0 ;
 	    BEGIN

 	        DELETE FROM LKACTTELCOR WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE AND ACOORDRE = NACOORDRE;         
 	                SELECT count(*) INTO ncount FROM LKACTTELCOR WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE ;
 	                IF ncount = 0 THEN
 	        DELETE FROM ACTTELECOM WHERE ACTID = NACTID AND ATEORDRE = NATEORDRE;
 	        END IF;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
    END;
END D_LKACTTELCOR3;
-- BANQUEGUICHET --
PROCEDURE D_BANQUEGUICHET(
        SBGUBANQUE IN BANQUEGUICHET.BGUBANQUE%TYPE,
        SBGUGUICHET IN BANQUEGUICHET.BGUGUICHET%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM BANQUEGUICHET WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_BGU_CONST;
    END;
END D_BANQUEGUICHET;
-- Procedure d'insertion --
-- ADRESSE --
PROCEDURE I_ADRESSE(
        NADRID IN OUT ADRESSE.ADRID%TYPE,
        SPAYCODE ADRESSE.PAYCODE%TYPE,
        SADRVOIE ADRESSE.ADRVOIE%TYPE,
        SADRLIEUDIT ADRESSE.ADRLIEUDIT%TYPE,
        SADRCODEPOST ADRESSE.ADRCODEPOST%TYPE,
        SADRVILLE ADRESSE.ADRVILLE%TYPE,
        SPRECODE ADRESSE.PRECODE%TYPE,
        SPRETYPE ADRESSE.PRETYPE%TYPE,
        DTADRDTMAJ ADRESSE.ADRDTMAJ%TYPE,
        SUTICODE ADRESSE.UTICODE%TYPE,
        SADRCEDEX ADRESSE.ADRCEDEX%TYPE,
        SADRSUBREGION ADRESSE.ADRSUBREGION%TYPE,
        SADRMSACODE ADRESSE.ADRMSACODE%TYPE,
        SADRTAXAREA ADRESSE.ADRTAXAREA%TYPE,
        SADRDISTRICT ADRESSE.ADRDISTRICT%TYPE,
        SADRTOWN ADRESSE.ADRTOWN%TYPE,
        SADRCODEPOSTNEW ADRESSE.ADRCODEPOSTNEW%TYPE,
        SADRSUBREGIONNEW ADRESSE.ADRSUBREGIONNEW%TYPE,
        SADRVILLENEW ADRESSE.ADRVILLENEW%TYPE,
        SADRDISTRICTNEW ADRESSE.ADRDISTRICTNEW%TYPE,
        SADRVOIENEW ADRESSE.ADRVOIENEW%TYPE,
        SADRCEDEXNEW ADRESSE.ADRCEDEXNEW%TYPE,
        SADRBATIMENTNEW ADRESSE.ADRBATIMENTNEW%TYPE,
        SADRBATIMENT ADRESSE.ADRBATIMENT%TYPE,
        SADRAPPTNEW ADRESSE.ADRAPPTNEW%TYPE,
        SADRAPPT ADRESSE.ADRAPPT%TYPE,
        SADRSUBBUNJI ADRESSE.ADRSUBBUNJI%TYPE,
        SADRSTREETCODESEQ ADRESSE.ADRSTREETCODESEQ%TYPE,
        -- sCdrmsacode       ADRESSE.CDRMSACODE%TYPE,
        -- sAdrtreetcodeseq  ADRESSE.ADRTREETCODESEQ%TYPE,
        SADRBASGRNDAIR ADRESSE.ADRBASGRNDAIR%TYPE,
        SADRBLDGMAIN ADRESSE.ADRBLDGMAIN%TYPE,
        SADRBLDGSUB ADRESSE.ADRBLDGSUB%TYPE,
        SADRSTRTADDUSE ADRESSE.ADRSTRTADDUSE%TYPE,
        SADRLONGITUDECARDINAL ADRESSE.ADRLONGITUDECARDINAL%TYPE,
        SADRLATITUDECARDINAL ADRESSE.ADRLATITUDECARDINAL%TYPE,
        SADRMAINBUNJI ADRESSE.ADRMAINBUNJI%TYPE,
        SADRRANGE ADRESSE.ADRRANGE%TYPE,
		nAdrPctTax         ADRESSE.ADRPCTTAX%TYPE,
		sTaxCode           ADRESSE.TAXCODE%TYPE,
		nAdrTaxBalance     ADRESSE.ADRTAXBALANCE%TYPE,
		sAdrstreetnumber	ADRESSE.ADRSTREETNUMBER%TYPE,
		NAADFLAGBCT    ADRESSE.AADFLAGBCT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        SELECT SEQ_ADRID.NEXTVAL INTO NADRID FROM DUAL;
        INSERT
        INTO
            ADRESSE
            (
                ADRID
              , PAYCODE
              , ADRVOIE
              , ADRLIEUDIT
              , ADRCODEPOST
              , ADRVILLE
              , PRECODE
              , ADRDTMAJ
              , UTICODE
              , ADRCEDEX
              , ADRSUBREGION
              , ADRMSACODE
              , ADRTAXAREA
              , PRETYPE
              , ADRDISTRICT
              , ADRTOWN
              , ADRCODEPOSTNEW
              , ADRSUBREGIONNEW
              , ADRVILLENEW
              , ADRDISTRICTNEW
              , ADRVOIENEW
              , ADRCEDEXNEW
              , ADRBATIMENTNEW
              , ADRBATIMENT
              , ADRAPPTNEW
              , ADRAPPT
              , ADRSUBBUNJI
              , ADRSTREETCODESEQ
              ,
                --  CDRMSACODE,
                --  ADRTREETCODESEQ,
                ADRBASGRNDAIR
              , ADRBLDGMAIN
              , ADRBLDGSUB
              , ADRSTRTADDUSE
              , ADRLONGITUDECARDINAL
              , ADRLATITUDECARDINAL
              , ADRMAINBUNJI
              , ADRRANGE
			  , ADRPCTTAX
			  , TAXCODE
			  ,	ADRTAXBALANCE
			  , ADRSTREETNUMBER
			  , AADFLAGBCT
            )
            VALUES
            (
                NADRID
              , SPAYCODE
              , SADRVOIE
              , SADRLIEUDIT
              , SADRCODEPOST
              , SADRVILLE
              , SPRECODE
              , DTADRDTMAJ
              , SUTICODE
              , SADRCEDEX
              , SADRSUBREGION
              , SADRMSACODE
              , SADRTAXAREA
              , SPRETYPE
              , SADRDISTRICT
              , SADRTOWN
              , SADRCODEPOSTNEW
              , SADRSUBREGIONNEW
              , SADRVILLENEW
              , SADRDISTRICTNEW
              , SADRVOIENEW
              , SADRCEDEXNEW
              , SADRBATIMENTNEW
              , SADRBATIMENT
              , SADRAPPTNEW
              , SADRAPPT
              , SADRSUBBUNJI
              , SADRSTREETCODESEQ
                --  ,sCdrmsacode
                --  ,sAdrtreetcodeseq
              , SADRBASGRNDAIR
              , SADRBLDGMAIN
              , SADRBLDGSUB
              , SADRSTRTADDUSE
              , SADRLONGITUDECARDINAL
              , SADRLATITUDECARDINAL
              , SADRMAINBUNJI--replaced for STAXCODE
              , SADRRANGE
			  , nAdrPctTax
			  , sTaxCode
			  , nAdrTaxBalance
			  , sAdrstreetnumber
			  , NAADFLAGBCT
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ADR_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ADR_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ADRESSE;
-- ACTEUR --
PROCEDURE I_ACTEUR
    (
        NNEWACTID IN OUT ACTEUR.ACTID%TYPE,
        SUGECODE ACTEUR.UGECODE%TYPE,
        SUTICODECREAT ACTEUR.UTICODECREAT%TYPE,
        DTACTDTCREAT ACTEUR.ACTDTCREAT%TYPE,
        SACTCODE ACTEUR.ACTCODE%TYPE,
        SCJUCODE ACTEUR.CJUCODE%TYPE,
        SPAYCODECATJURIDIQUE ACTEUR.PAYCODECATJURIDIQUE%TYPE,
        SUTICODEMAJ ACTEUR.UTICODEMAJ%TYPE,
        SACTLIBCOURT ACTEUR.ACTLIBCOURT%TYPE,
        SACTNOM ACTEUR.ACTNOM%TYPE,
        SACTNOM2 ACTEUR.ACTNOM2%TYPE,
        SACTSIRET ACTEUR.ACTSIRET%TYPE,
        DTACTDTMAJ ACTEUR.ACTDTMAJ%TYPE,
        SPAYCODE ACTEUR.PAYCODE%TYPE,
        SLANCODE ACTEUR.LANCODE%TYPE,
        SAGEEMETTEUR ACTEURGESTION.AGEEMETTEUR%TYPE,
        NFLAGSOCIETE NUMBER,
        NACTFLAGTAXPROF ACTEUR.ACTFLAGTAXPROF%TYPE,
        NACTCAPITAL ACTEUR.ACTCAPITAL%TYPE,
        NACTFINMOISFISC ACTEUR.ACTFINMOISFISC%TYPE,
        SACTNUMRCM ACTEUR.ACTNUMRCM%TYPE,
        SNAFCODE ACTEUR.NAFCODE%TYPE,
        SPAYCODENAF ACTEUR.PAYCODENAF%TYPE,
        SACTTVACE ACTEUR.ACTTVACE%TYPE,
        SACTCODERCM ACTEUR.ACTCODERCM%TYPE,
        LSACTMEMO ACTEUR.ACTMEMO%TYPE,
        DTAPADTNAISS ACTEURPARTICULIER.APADTNAISS%TYPE,
        SAPADEPTNAISS ACTEURPARTICULIER.APADEPTNAISS%TYPE,
        SAPACOMNAISS ACTEURPARTICULIER.APACOMNAISS%TYPE,
        NAPANBENFANT ACTEURPARTICULIER.APANBENFANT%TYPE,
        NAPASEXE ACTEURPARTICULIER.APASEXE%TYPE,
        SAPAPAYCODE ACTEURPARTICULIER.PAYCODE%TYPE,
        SAPAEMPLOYEUR ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
        SAPASITFAM ACTEURPARTICULIER.APASITFAM%TYPE,
        NAPAFLAGPROPRIETE ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
        SAPATITRE ACTEURPARTICULIER.APATITRE%TYPE,
        SAPANOMMARITAL ACTEURPARTICULIER.APANOMMARITAL%TYPE,
        SAPAREGIMEMATRIM ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
        SAGECIB ACTEURGESTION.AGECIB%TYPE,
        SAGELOGO ACTEURGESTION.AGELOGO%TYPE,
        NAGEDELAIEXIGIBLE ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
        SDEVCODE ACTEUR.DEVCODE%TYPE,
        STDRCODEEFFET ACTEURGESTION.TDRCODEEFFET%TYPE,
        STDRCODEPRL ACTEURGESTION.TDRCODEPRL%TYPE,
        STDRCODEPRLACCELERE ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
        STDRCODEVIR ACTEURGESTION.TDRCODEVIR%TYPE,
        NAINNBPARTTOTAL ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
        SAGEEMETVIR ACTEURGESTION.AGEEMETVIR%TYPE,
        SACTLIBCHEQUE ACTEUR.ACTLIBCHEQUE%TYPE,
        NTCIID ACTEURGESTION.TCIID%TYPE,
        BAGEFLAGIRFACTURE ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
        BAGEFLAGIRCHQ ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
        NAGEMTFACMINI ACTEURGESTION.AGEMTFACMINI%TYPE,
        NRUBID ACTEURGESTION.RUBID%TYPE,
        STAXCODE ACTEURGESTION.TAXCODE%TYPE,
        SACTREGIMETVA ACTEUR.ACTREGIMETVA%TYPE,
        NACTFLAGAGREMENT ACTEUR.ACTFLAGAGREMENT%TYPE,
        SACTRATTACHEMENT ACTEUR.ACTRATTACHEMENT%TYPE,
        DTACTDTIMMATRICULATION ACTEUR.ACTDTIMMATRICULATION%TYPE, -- CV-03122001 DMF-64
        NACTEFFECTIF ACTEUR.ACTEFFECTIF%TYPE, -- CV-27022003 FSA-11420
        SAPANOMPATONYME ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
        SAPAPRENOM ACTEURPARTICULIER.APAPRENOM%TYPE,
        SAPACHREGIMEMATRIM ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
        SAPACODENIVEAUETUDE ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
        SAPADIRFONCTION ACTEURPARTICULIER.APADIRFONCTION%TYPE,
        NAPAFLAGDIRIGEANT ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
        NAPAFLAGHOMMECLE ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
        NAPAFLAGINTERDITBANCAIRE ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
        NAPAFLAGSUCCESSIONPRET ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
        NAPAPCTCAPITAL ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
        NAPAANEXPACTIVITE ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
        NAPAEXPERIENCEFONCTION ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
        NACTFLAGNONDECLASSABLE ACTEUR.ACTFLAGNONDECLASSABLE%TYPE, -- CV-18082004 FSA-16070 NL
        SDOMCODE ACTEUR.DOMCODE%TYPE,
        DTAPADTPERMISDECONDUIRE ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE, -- CV-20062005 FSA-20165 Modif de base
        NACTFLAGGROUPE ACTEUR.ACTFLAGGROUPE%TYPE,
        SAGEFICP ACTEURGESTION.AGEFICP%TYPE,
        SAGRCOMPOUNDINGMCODE ACTEURGROUPE.AGRCOMPOUNDINGMCODE%TYPE,
        SAGRCOMPOUNDUSE ACTEURGROUPE.AGRCOMPOUNDUSE%TYPE,
        SAGREXTERNALREF ACTEURGROUPE.AGREXTERNALREF%TYPE,
        SAGRBADDEBTSTATUS ACTEURGROUPE.AGRBADDEBTSTATUS%TYPE,
        SAGRLIBCOURT ACTEURGROUPE.AGRLIBCOURT%TYPE,
        SAPAVILLENAISS ACTEURPARTICULIER.APAVILLENAISS%TYPE,
        DTACTDTDEBNAF ACTEUR.ACTDTDEBNAF%TYPE,
        NCALID ACTEURGESTION.CALID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        SELECT SEQ_ACTID.NEXTVAL INTO NNEWACTID FROM DUAL;
        INSERT
        INTO
            ACTEUR
            (
                ACTID
              , UGECODE
              , UTICODECREAT
              , ACTDTCREAT
              , ACTCODE
              , CJUCODE
              , PAYCODECATJURIDIQUE
              , UTICODEMAJ
              , ACTLIBCOURT
              , ACTNOM
              , ACTNOM2
              , ACTSIRET
              , ACTDTMAJ
              , PAYCODE
              , LANCODE
              , ACTFLAGTAXPROF
              , ACTCAPITAL
              , ACTFINMOISFISC
              , ACTNUMRCM
              , NAFCODE
              , PAYCODENAF
              , ACTTVACE
              , ACTCODERCM
              , ACTMEMO
              , DEVCODE
              , ACTLIBCHEQUE
              , ACTREGIMETVA
              , ACTFLAGAGREMENT
              , ACTRATTACHEMENT
              , ACTDTIMMATRICULATION
              , -- CV-03122001 DMF-64
                ACTEFFECTIF
              , -- CV-27022003 FSA-11420
                ACTFLAGNONDECLASSABLE
              , -- CV-18082004 FSA-16070 NL
                DOMCODE
              , ACTFLAGGROUPE
              , ACTDTDEBNAF
              , ACTETAT
            )
            VALUES
            (
                NNEWACTID
              , SUGECODE
              , SUTICODECREAT
              , DTACTDTCREAT
              , SACTCODE
              , SCJUCODE
              , DECODE(SPAYCODECATJURIDIQUE, NULL, SPAYCODE, SPAYCODECATJURIDIQUE)
              , SUTICODEMAJ
              , SACTLIBCOURT
              , SACTNOM
              , SACTNOM2
              , SACTSIRET
              , DTACTDTMAJ
              , SPAYCODE
              , SLANCODE
              , NACTFLAGTAXPROF
              , NACTCAPITAL
              , NACTFINMOISFISC
              , SACTNUMRCM
              , SNAFCODE
              , DECODE(SPAYCODENAF, NULL, SPAYCODE, SPAYCODENAF)
              , SACTTVACE
              , SACTCODERCM
              , LSACTMEMO
              , SDEVCODE
              , SACTLIBCHEQUE
              , SACTREGIMETVA
              , NACTFLAGAGREMENT
              , SACTRATTACHEMENT
              , DTACTDTIMMATRICULATION
              , NACTEFFECTIF
              , NACTFLAGNONDECLASSABLE
              , SDOMCODE
              , NACTFLAGGROUPE
              , DTACTDTDEBNAF
              , 'OK'
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
        IF NRETURNCODE != ERR_NO_ROWS_CONST THEN
            BEGIN
                IF NFLAGSOCIETE = 1 THEN
                    BEGIN
                        INSERT
                        INTO
                            ACTEURGESTION
                            (
                                ACTID
                              , AGEEMETTEUR
                              , AGECIB
                              , AGELOGO
                              , AGEDELAIEXIGIBLE
                              , TDRCODEEFFET
                              , TDRCODEPRL
                              , TDRCODEPRLACCELERE
                              , TDRCODEVIR
                              , AGEEMETVIR
                              , TCIID
                              , AGEFLAGIRFACTURE
                              , AGEFLAGIRCHQ
                              , AGEMTFACMINI
                              , RUBID
                              , TAXCODE
                              , AGEFICP
                              , CALID
                            )
                            VALUES
                            (
                                NNEWACTID
                              , SAGEEMETTEUR
                              , SAGECIB
                              , SAGELOGO
                              , NAGEDELAIEXIGIBLE
                              , STDRCODEEFFET
                              , STDRCODEPRL
                              , STDRCODEPRLACCELERE
                              , STDRCODEVIR
                              , SAGEEMETVIR
                              , NTCIID
                              , BAGEFLAGIRFACTURE
                              , BAGEFLAGIRCHQ
                              , NAGEMTFACMINI
                              , NRUBID
                              , STAXCODE
                              , SAGEFICP
                              , NCALID
                            ) ;
                        NRETURNCODE     := 0;
                        IF SQL%ROWCOUNT  = 0 THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        END IF;
                    END;
                END IF;
                IF NACTFLAGGROUPE = 1 THEN
                    BEGIN
                        INSERT
                        INTO
                            ACTEURGROUPE
                            (
                                ACTID
                              , AGRCOMPOUNDINGMCODE
                              , AGRCOMPOUNDUSE
                              , AGREXTERNALREF
                              , AGRBADDEBTSTATUS
                              , AGRLIBCOURT
                            )
                            VALUES
                            (
                                NNEWACTID
                              , SAGRCOMPOUNDINGMCODE
                              , SAGRCOMPOUNDUSE
                              , SAGREXTERNALREF
                              , SAGRBADDEBTSTATUS
                              , SAGRLIBCOURT
                            ) ;
                        NRETURNCODE     := 0;
                        IF SQL%ROWCOUNT  = 0 THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        END IF;
                    END;
                END IF;
                IF(SCJUCODE < '2000') THEN
                    BEGIN
                        INSERT
                        INTO
                            ACTEURPARTICULIER
                            (
                                ACTID
                              , APADTNAISS
                              , APADEPTNAISS
                              , APACOMNAISS
                              , APANBENFANT
                              , APASEXE
                              , PAYCODE
                              , APAEMPLOYEUR
                              , APASITFAM
                              , APAFLAGPROPRIETE
                              , APATITRE
                              , APANOMMARITAL
                              , APAREGIMEMATRIM
                              , APANOMPATRONYMIQUE
                              , APAPRENOM
                              , APACHGREGIMEMATRIM
                              , APACODENIVEAUETUDE
                              , APADIRFONCTION
                              , APAFLAGDIRIGEANT
                              , APAFLAGHOMMECLE
                              , APAFLAGINTERDITBANCAIRE
                              , APAFLAGSUCCESSIONPRET
                              , APAPCTCAPITAL
                              , APAANEXPERACTIVITE
                              , APAANEXPERIENCEFONCTION
                              , APADTPERMISDECONDUIRE
                              , APAVILLENAISS
                            )
                            VALUES
                            (
                                NNEWACTID
                              , DTAPADTNAISS
                              , SAPADEPTNAISS
                              , SAPACOMNAISS
                              , NAPANBENFANT
                              , NAPASEXE
                              , SAPAPAYCODE
                              , SAPAEMPLOYEUR
                              , SAPASITFAM
                              , NAPAFLAGPROPRIETE
                              , SAPATITRE
                              , SAPANOMMARITAL
                              , SAPAREGIMEMATRIM
                              , SAPANOMPATONYME
                              , SAPAPRENOM
                              , SAPACHREGIMEMATRIM
                              , SAPACODENIVEAUETUDE
                              , SAPADIRFONCTION
                              , NAPAFLAGDIRIGEANT
                              , NAPAFLAGHOMMECLE
                              , NAPAFLAGINTERDITBANCAIRE
                              , NAPAFLAGSUCCESSIONPRET
                              , NAPAPCTCAPITAL
                              , NAPAANEXPACTIVITE
                              , NAPAEXPERIENCEFONCTION
                              , DTAPADTPERMISDECONDUIRE
                              , SAPAVILLENAISS
                            ) ;
                        NRETURNCODE     := 0;
                        IF SQL%ROWCOUNT  = 0 THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        END IF;
                    END;
                ELSIF(SCJUCODE >= '2100') AND
                    (
                        SCJUCODE < '2200'
                    )
                    THEN
                    BEGIN
                        INSERT INTO ACTEURINDIVISION
                            (ACTID, AINNBPARTTOTAL
                            ) VALUES
                            (NNEWACTID, NAINNBPARTTOTAL
                            ) ;
                        NRETURNCODE     := 0;
                        IF SQL%ROWCOUNT  = 0 THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        END IF;
                    END;
                END IF;
            END;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ACT_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ACT_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ACTEUR_CONST ;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTEUR;
-- ACTADRESSE --
PROCEDURE I_ACTADRESSE
    (
        NADRID ACTADRESSE.ADRID%TYPE,
        NACTID ACTEUR.ACTID%TYPE,
        NAADFLAGSIEGE ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL ACTADRESSE.AADCOMPL%TYPE,
        SUTICODE ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE ACTADRESSE.AADORDRE%TYPE,
        SAADTYPE ACTADRESSE.AADTYPE%TYPE,
        SAADCHANNEL ACTADRESSE.AADCHANNEL%TYPE,
        SAADERRORCODE ACTADRESSE.AADERRORCODE%TYPE,
        SAADCONTACTCODE ACTADRESSE.AADCONTACTCODE%TYPE,
        SAADCONTROLCODE ACTADRESSE.AADCONTROLCODE%TYPE,
        SADRSUBBUNJI ADRESSE.ADRSUBBUNJI%TYPE,
        SADRSTREETCODESEQ ADRESSE.ADRSTREETCODESEQ%TYPE,
        SADRMSACODE ADRESSE.ADRMSACODE%TYPE,
        --   sAdrtreetcodeseq   ADRESSE.ADRTREETCODESEQ%TYPE,
        SADRBASGRNDAIR ADRESSE.ADRBASGRNDAIR%TYPE,
        SADRBLDGMAIN ADRESSE.ADRBLDGMAIN%TYPE,
        SADRBLDGSUB ADRESSE.ADRBLDGSUB%TYPE,
        SADRSTRTADDUSE ADRESSE.ADRSTRTADDUSE%TYPE,
        SADRLONGITUDECARDINAL ADRESSE.ADRLONGITUDECARDINAL%TYPE,
        SADRLATITUDECARDINAL ADRESSE.ADRLATITUDECARDINAL%TYPE,
        SADRMAINBUNJI ADRESSE.ADRMAINBUNJI%TYPE,
        SADRRANGE ADRESSE.ADRRANGE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN

        INSERT
        INTO
            ACTADRESSE
            (
                ADRID
              , ACTID
              , AADFLAGSIEGE
              , AADFLAGCOURRIER
              , AADFLAGFACTURATION
              , AADFLAGLIVRAISON
              , AADCOMPL
              , UTICODE
              , AADDTMAJ
              , AADDTDEB
              , AADORDRE
              , AADTYPE
              , AADCHANNEL
              , AADERRORCODE
              , AADCONTACTCODE
              , AADCONTROLCODE
            )
            VALUES
            (
                NADRID
              , NACTID
              , NAADFLAGSIEGE
              , NAADFLAGCOURRIER
              , NAADFLAGFACTURATION
              , NAADFLAGLIVRAISON
              , SAADCOMPL
              , SUTICODE
              , TRUNC(SYSDATE)
              , DTAADDTDEB
              , NAADORDRE
              , SAADTYPE
              , SAADCHANNEL
              , SAADERRORCODE
              , SAADCONTACTCODE
              , SAADCONTROLCODE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
   /* EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_AAD_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_AAD_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE; */
    END;
END I_ACTADRESSE;
PROCEDURE I_ACTCANDIDATURE
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACAORDRE ACTCANDIDATURE.ACAORDRE%TYPE,
        SACATYPE ACTCANDIDATURE.ACATYPE%TYPE,
        SACANATURE ACTCANDIDATURE.ACANATURE%TYPE,
        SACAORIGINE ACTCANDIDATURE.ACAORIGINE%TYPE,
        NMANID ACTCANDIDATURE.MANID%TYPE,
        DTACADTEFFET ACTCANDIDATURE.ACADTEFFET%TYPE,
        DTACADTTOT ACTCANDIDATURE.ACADTTOT%TYPE,
        DTACADTTARD ACTCANDIDATURE.ACADTTARD%TYPE,
        DTACADTLIMITE ACTCANDIDATURE.ACADTLIMITE%TYPE,
        NACAFLAGOCCUPE ACTCANDIDATURE.ACAFLAGOCCUPE%TYPE,
        SACAMEMO ACTCANDIDATURE.ACAMEMO%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTCANDIDATURE
            (
                ACTID
              , ACAORDRE
              , ACATYPE
              , ACANATURE
              , ACAORIGINE
              , MANID
              , ACADTEFFET
              , ACADTTOT
              , ACADTTARD
              , ACADTLIMITE
              , ACAFLAGOCCUPE
              , ACAMEMO
            )
            VALUES
            (
                NACTID
              , NACAORDRE
              , SACATYPE
              , SACANATURE
              , SACAORIGINE
              , NMANID
              , DTACADTEFFET
              , DTACADTTOT
              , DTACADTTARD
              , DTACADTLIMITE
              , NACAFLAGOCCUPE
              , SACAMEMO
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ACA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTCANDIDATURE;
-- ACTCORRESPONDANT --
PROCEDURE I_ACTCORRESPONDANT
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE ACTCORRESPONDANT.ACOORDRE%TYPE,
        SACONOM ACTCORRESPONDANT.ACONOM%TYPE,
        SACOQUALITE ACTCORRESPONDANT.ACOQUALITE%TYPE,
        SACOTITRE ACTCORRESPONDANT.ACOTITRE%TYPE,
        NACOFLAGPREFERE ACTCORRESPONDANT.ACOFLAGPREFERE%TYPE,
        SACOINITIALAUTREPRENOM ACTCORRESPONDANT.ACOINITIALAUTREPRENOM%TYPE,
        SACOPRENOM ACTCORRESPONDANT.ACOPRENOM%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTCORRESPONDANT
            (
                ACTID
              , ACOORDRE
              , ACONOM
              , ACOQUALITE
              , ACOTITRE
              , ACOFLAGPREFERE
              , ACOINITIALAUTREPRENOM
              , ACOPRENOM
            )
            VALUES
            (
                NACTID
              , NACOORDRE
              , SACONOM
              , SACOQUALITE
              , SACOTITRE
              , NACOFLAGPREFERE
              , SACOINITIALAUTREPRENOM
              , SACOPRENOM
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ACO_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ACO_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ACO_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTCORRESPONDANT;
-- ACTTCOVALEUR --
PROCEDURE I_ACTTCOVALEUR
    (
        NACTID ACTTCOVALEUR.ACTID%TYPE,
        NATVORDRE ACTTCOVALEUR.ATVORDRE%TYPE,
        NTCOID ACTTCOVALEUR.TCOID%TYPE,
        STVACODE ACTTCOVALEUR.TVACODE%TYPE,
        DTATVDTDEB ACTTCOVALEUR.ATVDTDEB%TYPE,
        DTATVDTFIN ACTTCOVALEUR.ATVDTFIN%TYPE,
        DTATVDTMAJ ACTTCOVALEUR.ATVDTMAJ%TYPE,
        SUTICODE ACTTCOVALEUR.UTICODE%TYPE,
        NCREID ACTTCOVALEUR.CREID%TYPE,
        SATVCODEEXTERNE ACTTCOVALEUR.ATVCODEEXTERNE%TYPE,
        SATVETABLISSEMENTCOTEUR ACTTCOVALEUR.ATVETABLISSEMENTCOTEUR%TYPE,
        SATVETABLISSEMENTPILOTE ACTTCOVALEUR.ATVETABLISSEMENTPILOTE%TYPE,
        NATVFLAGFORCE ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        I_ACTTCOVALEURWITHSCORE(NACTID, NATVORDRE, NTCOID, STVACODE, DTATVDTDEB, DTATVDTFIN, DTATVDTMAJ, SUTICODE, NCREID, NULL, SATVCODEEXTERNE, SATVETABLISSEMENTCOTEUR, SATVETABLISSEMENTPILOTE, NATVFLAGFORCE, NULL, NRETURNCODE) ;
    END;
END I_ACTTCOVALEUR;
-- ACTTCOVALEUR --
PROCEDURE I_ACTTCOVALEURWITHSCORE
    (
        NACTID ACTTCOVALEUR.ACTID%TYPE,
        NATVORDRE ACTTCOVALEUR.ATVORDRE%TYPE,
        NTCOID ACTTCOVALEUR.TCOID%TYPE,
        STVACODE ACTTCOVALEUR.TVACODE%TYPE,
        DTATVDTDEB ACTTCOVALEUR.ATVDTDEB%TYPE,
        DTATVDTFIN ACTTCOVALEUR.ATVDTFIN%TYPE,
        DTATVDTMAJ ACTTCOVALEUR.ATVDTMAJ%TYPE,
        SUTICODE ACTTCOVALEUR.UTICODE%TYPE,
        NCREID ACTTCOVALEUR.CREID%TYPE,
        NSCORE ACTTCOVALEUR.ATVSCORE%TYPE,
        SATVCODEEXTERNE ACTTCOVALEUR.ATVCODEEXTERNE%TYPE,
        SATVETABLISSEMENTCOTEUR ACTTCOVALEUR.ATVETABLISSEMENTCOTEUR%TYPE,
        SATVETABLISSEMENTPILOTE ACTTCOVALEUR.ATVETABLISSEMENTPILOTE%TYPE,
        NATVFLAGFORCE ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
        SATVCOMMENT ACTTCOVALEUR.ATVCOMMENT%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
	declare nCount number := 0;
    BEGIN
	 SELECT NVL( MAX( ATVORDRE ),0 ) + 1 into nCount FROM ACTTCOVALEUR WHERE ACTID = NACTID;
        INSERT
        INTO
            ACTTCOVALEUR
            (
                ACTID
              , ATVORDRE
              , TCOID
              , TVACODE
              , ATVDTDEB
              , ATVDTFIN
              , ATVDTMAJ
              , UTICODE
              , CREID
              , ATVCODEEXTERNE
              , ATVETABLISSEMENTPILOTE
              , ATVETABLISSEMENTCOTEUR
              , ATVFLAGFORCE
              , ATVCOMMENT
              , ATVSCORE
            )
            VALUES
            (
                NACTID
              , nCount
              , NTCOID
              , STVACODE
              , DTATVDTDEB
              , DTATVDTFIN
              , DTATVDTMAJ
              , SUTICODE
              , NCREID
              , SATVCODEEXTERNE
              , SATVETABLISSEMENTPILOTE
              , SATVETABLISSEMENTCOTEUR
              , NATVFLAGFORCE
              , SATVCOMMENT
              , NSCORE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ARA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_RAT_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTTCOVALEURWITHSCORE;
PROCEDURE U_ACTTCOVALEUR
    (
        NACTID ACTTCOVALEUR.ACTID%TYPE,
        NATVORDRE ACTTCOVALEUR.ATVORDRE%TYPE,
        NTCOID ACTTCOVALEUR.TCOID%TYPE,
        STVACODE ACTTCOVALEUR.TVACODE%TYPE,
        DTATVDTDEB ACTTCOVALEUR.ATVDTDEB%TYPE,
        DTATVDTFIN ACTTCOVALEUR.ATVDTFIN%TYPE,
        DTATVDTMAJ ACTTCOVALEUR.ATVDTMAJ%TYPE,
        SUTICODE ACTTCOVALEUR.UTICODE%TYPE,
        NCREID ACTTCOVALEUR.CREID%TYPE,
        SATVCODEEXTERNE ACTTCOVALEUR.ATVCODEEXTERNE%TYPE,
        SATVETABLISSEMENTCOTEUR ACTTCOVALEUR.ATVETABLISSEMENTCOTEUR%TYPE,
        SATVETABLISSEMENTPILOTE ACTTCOVALEUR.ATVETABLISSEMENTPILOTE%TYPE,
        NATVFLAGFORCE ACTTCOVALEUR.ATVFLAGFORCE%TYPE,
		SATVCOMMENT ACTTCOVALEUR.ATVCOMMENT%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTTCOVALEUR
        SET
            ATVDTDEB               = DTATVDTDEB
          , ATVDTFIN               = DTATVDTFIN
          , ATVDTMAJ               = DTATVDTMAJ
          , UTICODE                = SUTICODE
          , CREID                  = NCREID
          , ATVCODEEXTERNE         = SATVCODEEXTERNE
          , ATVETABLISSEMENTCOTEUR = SATVETABLISSEMENTCOTEUR
          , ATVFLAGFORCE           = NATVFLAGFORCE
		  , ATVCOMMENT             = SATVCOMMENT
        WHERE
            ACTID        = NACTID
            AND ATVORDRE = NATVORDRE
            AND TCOID    = NTCOID
            AND TVACODE  = STVACODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ARA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_RAT_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTTCOVALEUR;
PROCEDURE D_ACTTCOVALEUR(
        NACTID ACTTCOVALEUR.ACTID%TYPE,
        NATVORDRE ACTTCOVALEUR.ATVORDRE%TYPE,
        NTCOID ACTTCOVALEUR.TCOID%TYPE,
        STVACODE ACTTCOVALEUR.TVACODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE ACTTCOVALEUR WHERE ACTID = NACTID AND ATVORDRE = NATVORDRE AND TCOID = NTCOID AND TVACODE = STVACODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_RAT_FOUND_CONST;
    END;
END D_ACTTCOVALEUR;
-- ACTPHASE --
PROCEDURE I_ACTPHASE(
        NACTID ACTPHASE.ACTID%TYPE,
        SPHACODE ACTPHASE.PHACODE%TYPE,
        NAPHORDRE ACTPHASE.APHORDRE%TYPE,
        SPHADEST ACTPHASE.PHADEST%TYPE,
        SJALCODE ACTPHASE.JALCODE%TYPE,
        DTAPHDTDEB ACTPHASE.APHDTDEB%TYPE,
        SUTICODE ACTPHASE.UTICODE%TYPE,
        DTAPHDTFIN ACTPHASE.APHDTFIN%TYPE,
        DTAPHDTMAJ ACTPHASE.APHDTMAJ%TYPE,
        NCREID ACTPHASE.CREID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        VARPHACODE  VARCHAR(20) ;
        VARAPHORDRE NUMBER;
        VARAPHDTDEB ACTPHASE.APHDTDEB%TYPE;
    BEGIN
        BEGIN
            BEGIN
                SELECT
                    PHACODE
                  , APHORDRE
                  , APHDTDEB
                INTO
                    VARPHACODE
                  , VARAPHORDRE
                  , VARAPHDTDEB
                FROM
                    ACTEUR ACT
                  , ACTPHASE APH
                WHERE
                    APH.ACTID     = NACTID
                    AND APH.ACTID = ACT.ACTID
                    AND
                    (
                        APHORDRE, ACT.ACTID
                    )
                    IN
                    (
                        SELECT MAX(APHORDRE), ACT.ACTID FROM ACTEUR ACT, ACTPHASE APH WHERE ACT.ACTID = APH.ACTID GROUP BY ACT.ACTID
                    ) ;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END;
            IF NRETURNCODE    != ERR_NO_ROWS_CONST THEN
                IF VARAPHDTDEB > DTAPHDTDEB THEN
                    BEGIN
                        UPDATE ACTPHASE SET APHDTDEB = DTAPHDTDEB WHERE ACTID = NACTID AND APHORDRE = VARAPHORDRE AND PHACODE = VARPHACODE AND PHADEST = 'ACTEUR';
                    END;
                END IF;
                IF TRUNC(SYSDATE) > DTAPHDTDEB THEN
                    BEGIN
                        UPDATE ACTPHASE SET APHDTFIN = DTAPHDTDEB WHERE ACTID = NACTID AND APHORDRE = VARAPHORDRE AND PHACODE = VARPHACODE AND PHADEST = 'ACTEUR';
                    END;
                ELSE
                    BEGIN
                        UPDATE ACTPHASE SET APHDTFIN = TRUNC(SYSDATE) WHERE ACTID = NACTID AND APHORDRE = VARAPHORDRE AND PHACODE = VARPHACODE AND PHADEST = 'ACTEUR';
                    END;
                END IF;
            END IF;
            INSERT
            INTO
                ACTPHASE
                (
                    ACTID
                  , PHACODE
                  , APHORDRE
                  , PHADEST
                  , JALCODE
                  , APHDTDEB
                  , UTICODE
                  , APHDTFIN
                  , APHDTMAJ
                  , CREID
                )
                VALUES
                (
                    NACTID
                  , SPHACODE
                  , NAPHORDRE
                  , SPHADEST
                  , SJALCODE
                  , DTAPHDTDEB
                  , SUTICODE
                  , DTAPHDTFIN
                  , DTAPHDTMAJ
                  , NCREID
                ) ;
            NRETURNCODE     := 0;
            IF SQL%ROWCOUNT  = 0 THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND THEN
            -- CV-26012012 CFS55477
            -- nReturnCode := ERR_PARENT_APH_FOUND_CONST;
            NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_APH_FOUND_CONST) ;
        WHEN DUP_VAL_ON_INDEX THEN
            NRETURNCODE := ERR_DUP_VAL_ON_APH_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY THEN
            NRETURNCODE := ERR_VAL_APH_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY THEN
            NRETURNCODE := ERR_VAL_APH_NULL_CONST;
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
    END;
END I_ACTPHASE;
-- ACTRELATION --
PROCEDURE I_ACTRELATION
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTEUR.ACTID%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NAREQP ACTRELATION.AREQP%TYPE,
        DTAREDTFIN ACTRELATION.AREDTFIN%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        IF STRECODE IS NOT NULL THEN
            INSERT INTO ACTRELATION
                (ACTID, ACTIDRELATION, TRECODE, AREDTDEB, AREQP, AREDTFIN
                ) VALUES
                (NACTID, NACTIDRELATION, STRECODE, DTAREDTDEB, NAREQP, DTAREDTFIN
                ) ;
        END IF;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
        --ALA 050707
        IF NRETURNCODE = 0 THEN
            UPDATE ACTEUR SET ACTDTMAJ = TRUNC(SYSDATE) WHERE ACTID IN(NACTID, NACTIDRELATION) ;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARE_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARE_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARE_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RELAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RELAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTRELATION;
-- RIB --

-- RIB --
PROCEDURE I_RIB (
   sBguBanque           	RIB.BGUBANQUE%TYPE,
   sBguGuichet          	RIB.BGUGUICHET%TYPE,
   sRibCompte           	RIB.RIBCOMPTE%TYPE,
   sRibCle              	RIB.RIBCLE%TYPE,
   sRibIntitule         	RIB.RIBINTITULE%TYPE,
   nNewRib              	OUT RIB.RIBID%TYPE,
   nRibIBANCle          	RIB.RIBIBANCLE%TYPE,                -- CV-26112002 FSA-10616
   sRibIBANCompte       	RIB.RIBIBANCOMPTE%TYPE,             -- CV-26112002 FSA-10616
   sBguGuichetInvariant 	RIB.BGUGUICHETINVARIANT%TYPE,       -- CV-29062005 FSA-12995 SG
   sDevCode             	RIB.DEVCODE%TYPE,
   SPAYCODE 				IN BANQUEGUICHET.PAYCODE%TYPE,
   sRibAccountType      	RIB.RIBACCOUNTTYPE%TYPE,
   nActIdOwner				RIB.ACTIDOWNER%TYPE,
   nRibFlagVirtual      	RIB.RIBFLAGVIRTUAL%TYPE,
   SBGUCODEINTERBANCAIRE 	BANQUEGUICHET.BGUCODEINTERBANCAIRE%TYPE,
   nReturnCode          IN OUT NUMBER) AS
BEGIN

DECLARE
      nCount NUMBER;
   BEGIN

      SELECT SEQ_RIBID.NEXTVAL INTO nNewRib FROM DUAL;

      select count(*) into nCount from BANQUEGUICHET where BGUBANQUE = sBguBanque and BGUGUICHET = sBguGuichet;

      IF nCount=0 THEN
      BEGIN
      I_BANQUEGUICHET(sBguBanque,sBguGuichet,null,null,SBGUCODEINTERBANCAIRE,SPAYCODE,null,null,null,null,null,null, null,nReturnCode);
      END;

      END IF;

      INSERT INTO RIB (
                   RIBID,
                   BGUBANQUE,
                   BGUGUICHET,
                   RIBCOMPTE,
                   RIBCLE,
                   RIBINTITULE,
                   RIBIBANCLE,
                   RIBIBANCOMPTE,
                   BGUGUICHETINVARIANT,
                   DEVCODE,
                   RIBACCOUNTTYPE,
                    ACTIDOWNER,
                  RIBFLAGVIRTUAL)
      VALUES     ( nNewRib,
                   sBguBanque,
                   sBguGuichet,
                   sRibCompte,
                   sRibCle,
                   sRibIntitule,
                   nRibIBANCLe,
                   sRibIBANCompte,
                   sBguGuichetInvariant,
                   sDevCode,
                   sRibAccountType,
                   nActIdOwner,
                   nRibFlagVirtual);


      nReturnCode := 0;
      IF SQL%ROWCOUNT=0 THEN
          nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
 /* EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
          nReturnCode := ERR_PARENT_RIB_FOUND_CONST;

    WHEN DUP_VAL_ON_INDEX THEN
          nReturnCode := ERR_DUP_VAL_ON_RIB_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
          nReturnCode := ERR_VAL_RIB_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
          nReturnCode := ERR_VAL_RIB_NULL_CONST;
    WHEN OTHERS THEN
          nReturnCode := -1 * SQLCODE;*/
  END;
END I_RIB;
-- ACTRIB --
PROCEDURE I_ACTRIB
    (
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID RIB.RIBID%TYPE,
        NRIBIDREMPLACE ACTRIB.RIBIDREMPLACE%TYPE,
        DTARIDTREMPLACE ACTRIB.ARIDTREMPLACE%TYPE,
        NCREID ACTRIB.CREID%TYPE,
        SARITYPE ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB ACTRIB.ARIDTDEB%TYPE,
        NRIBIDINTERMEDIATE ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SARICODEBANK ACTRIB.ARICODEBANK%TYPE,
        SARIDACOM ACTRIB.ARIDACOM %TYPE,
        SARIDACOM2 ACTRIB.ARIDACOM2%TYPE,
        SARIPWD ACTRIB.ARIPWD%TYPE,
        DTARIDTVALIDATE ACTRIB.ARIDTVALIDATE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTRIB
            (
                ACTID
              , RIBID
              , RIBIDREMPLACE
              , ARIDTREMPLACE
              , CREID
              , ARITYPE
              , ARIDTDEB
              , RIBIDINTERMEDIATE
              , ARICODEBANK
              , ARIDACOM
              , ARIDACOM2
              , ARIPWD
              , ARIDTVALIDATE
            )
            VALUES
            (
                NACTID
              , NRIBID
              , NRIBIDREMPLACE
              , DTARIDTREMPLACE
              , NCREID
              , SARITYPE
              , DTARIDTDEB
              , NRIBIDINTERMEDIATE
              , SARICODEBANK
              , SARIDACOM
              , SARIDACOM2
              , SARIPWD
              , DTARIDTVALIDATE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARI_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTRIB;
-- ACTRIBTMPDEFAUT --
PROCEDURE I_ACTRIBTMPDEFAUT
    (
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID RIB.RIBID%TYPE,
        SATDTYPE ACTRIBTMPDEFAUT.ATDTYPE%TYPE,
        STMPCODE ACTRIBTMPDEFAUT.TMPCODE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT INTO ACTRIBTMPDEFAUT
            (ACTID, RIBID, ATDTYPE, TMPCODE
            ) VALUES
            (NACTID, NRIBID, SATDTYPE, STMPCODE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ATD_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTRIBTMPDEFAUT;
-- RIBINFO --
PROCEDURE I_RIBINFO
    (
        NRIBID RIBINFO.RIBID%TYPE,
        NRINDELAIP RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR RIBINFO.RINFORCEVIR%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT
        INTO
            RIBINFO
            (
                RIBID
              , RINBRDCHQSP
              , RINBRDVIR
              , RINBRDPRL
              , RINBRDCHQHP
              , RINDELAIP
              , RINDELAIV
              , RINVALREMHP
              , RINVALREMSP
              , RINVALVIR
              , RINVALPRL
              , RINVALCHQ
              , RINFORCEPRL
              , RINFORCEVIR
            )
            VALUES
            (
                NRIBID
              , 0
              , 0
              , 0
              , 0
              , NRINDELAIP
              , NRINDELAIV
              , NRINVALREMHP
              , NRINVALREMSP
              , NRINVALVIR
              , NRINVALPRL
              , NRINVALCHQ
              , NRINFORCEPRL
              , NRINFORCEVIR
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_RIN_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_RIN_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_RIBINFO;
-- ACTROLE --
PROCEDURE I_ACTROLE
    (
        NACTID ACTEUR.ACTID%TYPE,
        SROLCODE ACTROLE.ROLCODE%TYPE,
        NARONBEXFAC ACTROLE.ARONBEXFAC%TYPE,
        SARORECAPFAC ACTROLE.ARORECAPFAC%TYPE,
        NAROGRPFAC ACTROLE.AROGRPFAC%TYPE,
        NAROGRPPREL ACTROLE.AROGRPPREL%TYPE,
        SAROREFEXTERNE ACTROLE.AROREFEXTERNE%TYPE,
        NAROFACAVANCE ACTROLE.AROFACAVANCE%TYPE,
        SAROPERIODE ACTROLE.AROPERIODE%TYPE, -- CV-19062001
        NAROMULTIPLE ACTROLE.AROMULTIPLE%TYPE, -- CV-19062001
        SAROEDITFAC ACTROLE.AROEDITFAC%TYPE, -- DA-29092001
        NAROGRPDEC ACTROLE.AROGRPDEC%TYPE,
        SAROENVOINOTICE ACTROLE.AROENVOINOTICE%TYPE,
        SAROFORMATSORTIE ACTROLE.AROFORMATSORTIE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    DECLARE
        NOPTIONPROEXT NUMBER := 0;
    BEGIN
        IF(SROLCODE = 'PROEXT') THEN
            PA_COMMON.S_TPALOGIQUE('MANDANT', 'PROPRIOEXT', NOPTIONPROEXT) ;
            IF(NOPTIONPROEXT = 1) THEN
                SELECT COUNT( *) INTO NOPTIONPROEXT FROM ACTEURGESTION WHERE ACTID = NACTID;
                IF(NOPTIONPROEXT = 0) THEN
                    INSERT INTO ACTEURGESTION
                        (ACTID, AGEEMETTEUR
                        ) VALUES
                        (NACTID, 0
                        ) ;
                END IF;
            END IF;
        END IF;
        INSERT
        INTO
            ACTROLE
            (
                ACTID
              , ROLCODE
              , ARONBEXFAC
              , ARORECAPFAC
              , AROGRPFAC
              , AROGRPPREL
              , AROREFEXTERNE
              , AROFACAVANCE
              , AROPERIODE
              , -- CV-19062001
                AROMULTIPLE
              , -- CV-19062001
                AROEDITFAC
              , -- DA-29092001
                AROGRPDEC
              , AROENVOINOTICE
              , AROFORMATSORTIE
            )
            VALUES
            (
                NACTID
              , SROLCODE
              , NARONBEXFAC
              , SARORECAPFAC
              , NAROGRPFAC
              , NAROGRPPREL
              , SAROREFEXTERNE
              , NAROFACAVANCE
              , SAROPERIODE
              , -- CV-19062001
                NAROMULTIPLE
              , -- CV-19062001
                SAROEDITFAC
              , NAROGRPDEC
              , SAROENVOINOTICE
              , SAROFORMATSORTIE
            ) ; -- DA-29092001
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARO_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARO_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARO_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTROLE;
-- ACTSTATISTIQUE --
PROCEDURE I_ACTSTATISTIQUE
    (
        SSACCODE CCHVALUE.CVASTRINGVALUE%TYPE,
        SSAVCODEVAL CCHVALUE.CVASTRINGVALUE%TYPE,
        SASTLIBRE CCHVALUE.CVASTRINGVALUE%TYPE,
        NACTID ACTEUR.ACTID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT INTO ACTSTATISTIQUE
            (SACCODE, SAVCODEVAL, ASTLIBRE, ACTID
            ) VALUES
            (SSACCODE, SSAVCODEVAL, SASTLIBRE, NACTID
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AST_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AST_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_STAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_STAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSTATISTIQUE;
-- ACTTELECOM --
PROCEDURE I_ACTTELECOM
    (
        NACTID ACTEUR.ACTID%TYPE,
        NATEORDRE ACTTELECOM.ATEORDRE%TYPE,
        SATENUM ACTTELECOM.ATENUM%TYPE,
        SATETYPE ACTTELECOM.ATETYPE%TYPE,
        DTATEDTEFFET ACTTELECOM.ATEDTEFFET%TYPE,
        DTATEDTFIN ACTTELECOM.ATEDTFIN%TYPE,
        SATEDOMAIN ACTTELECOM.ATEDOMAIN%TYPE,
        NATEFLAGASSENT ACTTELECOM.ATEFLAGASSENT%TYPE,
        NATEFLAGTELECOM ACTTELECOM.ATEFLAGPREFERE%TYPE,
        SATEERRORCODE ACTTELECOM.ATEERRORCODE%TYPE,
        SATECONTACTCODE ACTTELECOM.ATECONTACTCODE%TYPE,
        SATECONTROLCODE ACTTELECOM.ATECONTROLCODE%TYPE,
        NATEFLAGOFFTIME ACTTELECOM.ATEFLAGOFFTIME%TYPE,
        NATEDTUSED ACTTELECOM.ATEDTUSED%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    DECLARE
        NORDRE NUMBER;
		NCOUNT NUMBER;
	 BEGIN
		SELECT COUNT(*) INTO NCOUNT FROM ACTTELECOM where ACTID=NACTID AND ATEORDRE=NATEORDRE;
		IF NCOUNT = 0 THEN
			NORDRE := NVL(NATEORDRE,0);
			IF( NORDRE = 0 ) THEN
				SELECT NVL(MAX(ATEORDRE), 0) + 1 INTO NORDRE FROM ACTTELECOM WHERE ACTID = NACTID;
			END IF;
		ELSE
			SELECT NVL(MAX(ATEORDRE), 0) + 1 INTO NORDRE FROM ACTTELECOM WHERE ACTID = NACTID;
		END IF;
        INSERT
        INTO
            ACTTELECOM
            (
                ACTID
              , ATEORDRE
              , ATENUM
              , ATETYPE
              , ATEDTEFFET
              , ATEDTFIN
              , ATEDOMAIN
              , ATEFLAGASSENT
              , ATEFLAGPREFERE
              , ATEERRORCODE
              , ATECONTACTCODE
              , ATECONTROLCODE
              , ATEFLAGOFFTIME
              , ATEDTUSED
            )
            VALUES
            (
                NACTID
              , NORDRE
              , SATENUM
              , SATETYPE
              , DTATEDTEFFET
              , DTATEDTFIN
              , SATEDOMAIN
              , NATEFLAGASSENT
              , NATEFLAGTELECOM
              , SATEERRORCODE
              , SATECONTACTCODE
              , SATECONTROLCODE
              , NATEFLAGOFFTIME
              , NATEDTUSED
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ATE_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ATE_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ATE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTTELECOM;
-- LKACTTELCOR --
PROCEDURE I_LKACTTELCOR
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE LKACTTELCOR.ACOORDRE%TYPE,
        NATEORDRE LKACTTELCOR.ATEORDRE%TYPE,
        NATCFLAGPREFERE LKACTTELCOR.ATCFLAGPREFERE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT INTO LKACTTELCOR
            (ACTID, ACOORDRE, ATEORDRE, ATCFLAGPREFERE
            ) VALUES
            (NACTID, NACOORDRE, NATEORDRE, NATCFLAGPREFERE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ATC_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_TELCOR_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_LKACTTELCOR;
PROCEDURE U_LKACTTELCOR
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE LKACTTELCOR.ACOORDRE%TYPE,
        NATEORDRE LKACTTELCOR.ATEORDRE%TYPE,
        NATCFLAGPREFERE LKACTTELCOR.ATCFLAGPREFERE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE LKACTTELCOR SET ATCFLAGPREFERE = NATCFLAGPREFERE WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE AND ATEORDRE = NATEORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ATC_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_TELCOR_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_LAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_LKACTTELCOR;
PROCEDURE D_ACTEURGESTION(
        NACTID ACTEUR.ACTID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NOPTIONPROEXT NUMBER;
        NANY          NUMBER;
    BEGIN
        NRETURNCODE := 0;
        PA_COMMON.S_TPALOGIQUE('MANDANT', 'PROPRIOEXT', NOPTIONPROEXT) ;
        IF(NOPTIONPROEXT = 1) THEN
            SELECT COUNT(1) INTO NANY FROM ACTROLE WHERE ACTID = NACTID AND ROLCODE = 'PROEXT';
        ELSE
            NANY := 0;
        END IF;
        IF(NANY = 0) THEN
            SELECT COUNT( *) INTO NANY FROM ACTEURGESTION WHERE ACTID = NACTID;
            IF(NANY > 0) THEN
                DELETE FROM ACTEURGESTION WHERE ACTID = NACTID;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ACTEURGESTION;
PROCEDURE D_ACTEURINDIVISION(
        NACTID ACTEUR.ACTID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NOPTIONPROEXT NUMBER;
        NANY          NUMBER;
    BEGIN
        NRETURNCODE := 0;
        SELECT COUNT( *) INTO NANY FROM ACTEURINDIVISION WHERE ACTID = NACTID;
        IF(NANY > 0) THEN
            DELETE FROM ACTEURINDIVISION WHERE ACTID = NACTID;
            IF SQL%ROWCOUNT  = 0 THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ACTEURINDIVISION;
PROCEDURE D_ACTEURPARTICULIER(
        NACTID ACTEUR.ACTID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NOPTIONPROEXT NUMBER;
        NANY          NUMBER;
    BEGIN
        NRETURNCODE := 0;
        SELECT COUNT( *) INTO NANY FROM ACTEURPARTICULIER WHERE ACTID = NACTID;
        IF(NANY > 0) THEN
            DELETE FROM ACTEURPARTICULIER WHERE ACTID = NACTID;
            IF SQL%ROWCOUNT  = 0 THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ACT_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ACTEURPARTICULIER;
-- Procedures de mise a jour --
-- ACTEUR --
PROCEDURE U_ACTEUR(
        NACTID ACTEUR.ACTID%TYPE,
        SUGECODE ACTEUR.UGECODE%TYPE,
        SUTICODECREAT ACTEUR.UTICODECREAT%TYPE,
        DTACTDTCREAT ACTEUR.ACTDTCREAT%TYPE,
        SACTCODE ACTEUR.ACTCODE%TYPE,
        SCJUCODE ACTEUR.CJUCODE%TYPE,
        SPAYCODECATJURIDIQUE ACTEUR.PAYCODECATJURIDIQUE%TYPE,
        SUTICODEMAJ ACTEUR.UTICODEMAJ%TYPE,
        SACTLIBCOURT ACTEUR.ACTLIBCOURT%TYPE,
        SACTNOM ACTEUR.ACTNOM%TYPE,
        SACTNOM2 ACTEUR.ACTNOM2%TYPE,
        SACTSIRET ACTEUR.ACTSIRET%TYPE,
        DTACTDTMAJ ACTEUR.ACTDTMAJ%TYPE,
        SPAYCODE ACTEUR.PAYCODE%TYPE,
        SLANCODE ACTEUR.LANCODE%TYPE,
        SAGEEMETTEUR ACTEURGESTION.AGEEMETTEUR%TYPE,
        NFLAGSOCIETE NUMBER,
        NACTFLAGTAXPROF ACTEUR.ACTFLAGTAXPROF%TYPE,
        NACTCAPITAL ACTEUR.ACTCAPITAL%TYPE,
        NACTFINMOISFISC ACTEUR.ACTFINMOISFISC%TYPE,
        SACTNUMRCM ACTEUR.ACTNUMRCM%TYPE,
        SNAFCODE ACTEUR.NAFCODE%TYPE,
        SPAYCODENAF ACTEUR.PAYCODENAF%TYPE,
        SACTTVACE ACTEUR.ACTTVACE%TYPE,
        SACTCODERCM ACTEUR.ACTCODERCM%TYPE,
        LSACTMEMO ACTEUR.ACTMEMO%TYPE,
        DTAPADTNAISS ACTEURPARTICULIER.APADTNAISS%TYPE,
        SAPADEPTNAISS ACTEURPARTICULIER.APADEPTNAISS%TYPE,
        SAPACOMNAISS ACTEURPARTICULIER.APACOMNAISS%TYPE,
        NAPANBENFANT ACTEURPARTICULIER.APANBENFANT%TYPE,
        NAPASEXE ACTEURPARTICULIER.APASEXE%TYPE,
        SAPAPAYCODE ACTEURPARTICULIER.PAYCODE%TYPE,
        SAPAEMPLOYEUR ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
        SAPASITFAM ACTEURPARTICULIER.APASITFAM%TYPE,
        NAPAFLAGPROPRIETE ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
        SAPATITRE ACTEURPARTICULIER.APATITRE%TYPE,
        SAPANOMMARITAL ACTEURPARTICULIER.APANOMMARITAL%TYPE,
        SAPAREGIMEMATRIM ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
        SAGECIB ACTEURGESTION.AGECIB%TYPE,
        SAGELOGO ACTEURGESTION.AGELOGO%TYPE,
        NAGEDELAIEXIGIBLE ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
        SDEVCODE ACTEUR.DEVCODE%TYPE,
        STDRCODEEFFET ACTEURGESTION.TDRCODEEFFET%TYPE,
        STDRCODEPRL ACTEURGESTION.TDRCODEPRL%TYPE,
        STDRCODEPRLACCELERE ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
        STDRCODEVIR ACTEURGESTION.TDRCODEVIR%TYPE,
        NAINNBPARTTOTAL ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
        SAGEEMETVIR ACTEURGESTION.AGEEMETVIR%TYPE,
        SACTLIBCHEQUE ACTEUR.ACTLIBCHEQUE%TYPE,
        NTCIID ACTEURGESTION.TCIID%TYPE,
        BAGEFLAGIRFACTURE ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
        BAGEFLAGIRCHQ ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
        STAXCODE ACTEURGESTION.TAXCODE%TYPE,
        NRUBID ACTEURGESTION.RUBID%TYPE,
        NAGEMTFACMINI ACTEURGESTION.AGEMTFACMINI%TYPE,
        SACTREGIMETVA ACTEUR.ACTREGIMETVA%TYPE,
        NACTFLAGAGREMENT ACTEUR.ACTFLAGAGREMENT%TYPE,
        SACTRATTACHEMENT ACTEUR.ACTRATTACHEMENT%TYPE,
        DTACTDTIMMATRICULATION ACTEUR.ACTDTIMMATRICULATION%TYPE, -- CV-03122001 DMF-64
        NACTEFFECTIF ACTEUR.ACTEFFECTIF%TYPE, -- CV-27022003 FSA-11420
        SAPANOMPATONYME ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
        SAPAPRENOM ACTEURPARTICULIER.APAPRENOM%TYPE,
        SAPACHREGIMEMATRIM ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
        SAPACODENIVEAUETUDE ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
        SAPADIRFONCTION ACTEURPARTICULIER.APADIRFONCTION%TYPE,
        NAPAFLAGDIRIGEANT ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
        NAPAFLAGHOMMECLE ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
        NAPAFLAGINTERDITBANCAIRE ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
        NAPAFLAGSUCCESSIONPRET ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
        NAPAPCTCAPITAL ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
        NAPAANEXPACTIVITE IN OUT ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
        NAPAEXPERIENCEFONCTION IN OUT ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
        NACTFLAGNONDECLASSABLE ACTEUR.ACTFLAGNONDECLASSABLE%TYPE, -- CV-18082004 FSA-16070 NL
        SDOMCODE ACTEUR.DOMCODE%TYPE,
        DTAPADTPERMISDECONDUIRE ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE, -- CV-20062005 FSA-20165 Modif de base
        NACTFLAGGROUPE ACTEUR.ACTFLAGGROUPE%TYPE,
        SAGEFICP ACTEURGESTION.AGEFICP%TYPE,
        SAGRCOMPOUNDINGMCODE ACTEURGROUPE.AGRCOMPOUNDINGMCODE%TYPE,
        SAGRCOMPOUNDUSE ACTEURGROUPE.AGRCOMPOUNDUSE%TYPE,
        SAGREXTERNALREF ACTEURGROUPE.AGREXTERNALREF%TYPE,
        SAGRBADDEBTSTATUS ACTEURGROUPE.AGRBADDEBTSTATUS%TYPE,
        SAGRLIBCOURT ACTEURGROUPE.AGRLIBCOURT%TYPE,
        SAPAVILLENAISS ACTEURPARTICULIER.APAVILLENAISS%TYPE,
        DTACTDTDEBNAF ACTEUR.ACTDTDEBNAF%TYPE,
        NCALID ACTEURGESTION.CALID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
    BEGIN
        BEGIN
            UPDATE
                ACTEUR
            SET
                UGECODE              = SUGECODE
              , CJUCODE              = SCJUCODE
              , PAYCODECATJURIDIQUE  = SPAYCODECATJURIDIQUE
              , LANCODE              = SLANCODE
              , UTICODECREAT         = SUTICODECREAT
              , UTICODEMAJ           = SUTICODEMAJ
              , NAFCODE              = SNAFCODE
              , PAYCODENAF           = SPAYCODENAF
              , PAYCODE              = SPAYCODE
              , ACTCODE              = SACTCODE
              , ACTLIBCOURT          = SACTLIBCOURT
              , ACTNOM               = SACTNOM
              , ACTNOM2              = SACTNOM2
              , ACTSIRET             = SACTSIRET
              , ACTFLAGTAXPROF       = NACTFLAGTAXPROF
              , ACTDTCREAT           = DTACTDTCREAT
              , ACTDTMAJ             = DTACTDTMAJ
              , ACTTVACE             = SACTTVACE
              , ACTCODERCM           = SACTCODERCM
              , ACTFINMOISFISC       = NACTFINMOISFISC
              , ACTNUMRCM            = SACTNUMRCM
              , ACTMEMO              = LSACTMEMO
              , ACTCAPITAL           = NACTCAPITAL
              , DEVCODE              = SDEVCODE
              , ACTLIBCHEQUE         = SACTLIBCHEQUE
              , ACTREGIMETVA         = SACTREGIMETVA
              , ACTFLAGAGREMENT      = NACTFLAGAGREMENT
              , ACTRATTACHEMENT      = SACTRATTACHEMENT
              , ACTDTIMMATRICULATION = DTACTDTIMMATRICULATION
              , -- CV-03122001 DMF-64
                ACTEFFECTIF = NACTEFFECTIF
              , -- CV-27022003 FSA-11420
                ACTFLAGNONDECLASSABLE = NACTFLAGNONDECLASSABLE
              , -- CV-18082004 FSA-16070 NL
                DOMCODE       = SDOMCODE
              , ACTFLAGGROUPE = NACTFLAGGROUPE
              , ACTDTDEBNAF   = DTACTDTDEBNAF
            WHERE
                ACTID        = NACTID;
            NRETURNCODE     := 0;
            IF SQL%ROWCOUNT  = 0 THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
            IF(NRETURNCODE = 0) THEN
                BEGIN
                    SELECT COUNT( *) INTO NCOUNT FROM ACTEURGROUPE WHERE ACTID = NACTID;
                    IF(NACTFLAGGROUPE = 1) THEN
                        BEGIN
                            IF(NCOUNT > 0) THEN
                                UPDATE
                                    ACTEURGROUPE
                                SET
                                    AGRCOMPOUNDINGMCODE = SAGRCOMPOUNDINGMCODE
                                  , AGRCOMPOUNDUSE      = SAGRCOMPOUNDUSE
                                  , AGREXTERNALREF      = SAGREXTERNALREF
                                  , AGRBADDEBTSTATUS    = SAGRBADDEBTSTATUS
                                  , AGRLIBCOURT         = SAGRLIBCOURT
                                WHERE
                                    ACTID = NACTID;
                            ELSE
                                INSERT
                                INTO
                                    ACTEURGROUPE
                                    (
                                        ACTID
                                      , AGRCOMPOUNDINGMCODE
                                      , AGRCOMPOUNDUSE
                                      , AGREXTERNALREF
                                      , AGRBADDEBTSTATUS
                                      , AGRLIBCOURT
                                    )
                                    VALUES
                                    (
                                        NACTID
                                      , SAGRCOMPOUNDINGMCODE
                                      , SAGRCOMPOUNDUSE
                                      , SAGREXTERNALREF
                                      , SAGRBADDEBTSTATUS
                                      , SAGRLIBCOURT
                                    ) ;
                            END IF;
                            NRETURNCODE     := 0;
                            IF SQL%ROWCOUNT  = 0 THEN
                                NRETURNCODE := ERR_NO_ROWS_CONST;
                            END IF;
                        END;
                    END IF;
                    IF(NRETURNCODE  = 0) THEN
                        IF(SCJUCODE < '2000') AND NRETURNCODE = 0 THEN
                            BEGIN
                                SELECT COUNT( *) INTO NCOUNT FROM ACTEURPARTICULIER WHERE ACTID = NACTID;
                                IF(NCOUNT = 0) THEN
                                    BEGIN
                                        INSERT
                                        INTO
                                            ACTEURPARTICULIER
                                            (
                                                ACTID
                                              , APADTNAISS
                                              , APADEPTNAISS
                                              , APACOMNAISS
                                              , APANBENFANT
                                              , APASEXE
                                              , PAYCODE
                                              , APAEMPLOYEUR
                                              , APASITFAM
                                              , APAFLAGPROPRIETE
                                              , APATITRE
                                              , APANOMMARITAL
                                              , APAREGIMEMATRIM
                                              , APANOMPATRONYMIQUE
                                              , APAPRENOM
                                              , APACHGREGIMEMATRIM
                                              , APACODENIVEAUETUDE
                                              , APADIRFONCTION
                                              , APAFLAGDIRIGEANT
                                              , APAFLAGHOMMECLE
                                              , APAFLAGINTERDITBANCAIRE
                                              , APAFLAGSUCCESSIONPRET
                                              , APAPCTCAPITAL
                                              , APAANEXPERACTIVITE
                                              , APAANEXPERIENCEFONCTION
                                              , APADTPERMISDECONDUIRE
                                              , APAVILLENAISS
                                            )
                                            VALUES
                                            (
                                                NACTID
                                              , DTAPADTNAISS
                                              , SAPADEPTNAISS
                                              , SAPACOMNAISS
                                              , NAPANBENFANT
                                              , NAPASEXE
                                              , SAPAPAYCODE
                                              , SAPAEMPLOYEUR
                                              , SAPASITFAM
                                              , NAPAFLAGPROPRIETE
                                              , SAPATITRE
                                              , SAPANOMMARITAL
                                              , SAPAREGIMEMATRIM
                                              , SAPANOMPATONYME
                                              , SAPAPRENOM
                                              , SAPACHREGIMEMATRIM
                                              , SAPACODENIVEAUETUDE
                                              , SAPADIRFONCTION
                                              , NAPAFLAGDIRIGEANT
                                              , NAPAFLAGHOMMECLE
                                              , NAPAFLAGINTERDITBANCAIRE
                                              , NAPAFLAGSUCCESSIONPRET
                                              , NAPAPCTCAPITAL
                                              , NAPAANEXPACTIVITE
                                              , NAPAEXPERIENCEFONCTION
                                              , DTAPADTPERMISDECONDUIRE
                                              , SAPAVILLENAISS
                                            ) ;
                                        NRETURNCODE     := 0;
                                        IF SQL%ROWCOUNT  = 0 THEN
                                            NRETURNCODE := ERR_NO_ROWS_CONST;
                                        END IF;
                                        IF(NRETURNCODE = 0) THEN
                                            D_ACTEURGESTION(NACTID, NRETURNCODE) ;
                                            IF(NRETURNCODE = 0) THEN
                                                D_ACTEURINDIVISION(NACTID, NRETURNCODE) ;
                                            END IF;
                                        END IF;
                                    END;
                                ELSE
                                    U_ACTEURPARTICULIER(NACTID, NAPAFLAGPROPRIETE, NAPASEXE, NAPANBENFANT, SAPACOMNAISS, SAPADEPTNAISS, SAPAEMPLOYEUR, SAPANOMMARITAL, SAPAREGIMEMATRIM, SAPATITRE, SAPASITFAM, DTAPADTNAISS, SAPAPAYCODE, -- CV-
                                    -- 29012002 FSA-7683 sPaycode,
                                    SAPANOMPATONYME, SAPAPRENOM, SAPACHREGIMEMATRIM, SAPACODENIVEAUETUDE, SAPADIRFONCTION, NAPAFLAGDIRIGEANT, NAPAFLAGHOMMECLE, NAPAFLAGINTERDITBANCAIRE, NAPAFLAGSUCCESSIONPRET, NAPAPCTCAPITAL, NAPAANEXPACTIVITE,
                                    NAPAEXPERIENCEFONCTION, DTAPADTPERMISDECONDUIRE, SAPAVILLENAISS, NRETURNCODE) ;
                                END IF;
                            END;
                        ELSIF(SCJUCODE >= '2100') AND
                            (
                                SCJUCODE < '2200'
                            )
                            THEN
                            BEGIN
                                SELECT COUNT( *) INTO NCOUNT FROM ACTEURINDIVISION WHERE ACTID = NACTID;
                                IF(NCOUNT = 0) THEN
                                    BEGIN
                                        INSERT INTO ACTEURINDIVISION
                                            (ACTID, AINNBPARTTOTAL
                                            ) VALUES
                                            (NACTID, NAINNBPARTTOTAL
                                            ) ;
                                        NRETURNCODE     := 0;
                                        IF SQL%ROWCOUNT  = 0 THEN
                                            NRETURNCODE := ERR_NO_ROWS_CONST;
                                        END IF;
                                    END;
                                    IF(NRETURNCODE = 0) THEN
                                        D_ACTEURGESTION(NACTID, NRETURNCODE) ;
                                        IF(NRETURNCODE = 0) THEN
                                            D_ACTEURPARTICULIER(NACTID, NRETURNCODE) ;
                                        END IF;
                                    END IF;
                                ELSE
                                    U_ACTEURINDIVISION(NACTID, NAINNBPARTTOTAL, NRETURNCODE) ;
                                END IF;
                            END;
                        ELSE
                            D_ACTEURPARTICULIER(NACTID, NRETURNCODE) ;
                            IF(NRETURNCODE = 0) THEN
                                D_ACTEURINDIVISION(NACTID, NRETURNCODE) ;
                            END IF;
                        END IF;
                        IF(NRETURNCODE = 0) AND
                            (
                                NFLAGSOCIETE = 1
                            )
                            THEN
                            U_ACTEURGESTION(NACTID, SAGECIB, SAGEEMETTEUR, SAGELOGO, STDRCODEEFFET, STDRCODEPRL, STDRCODEPRLACCELERE, STDRCODEVIR, SAGEEMETVIR, NTCIID, BAGEFLAGIRFACTURE, BAGEFLAGIRCHQ, STAXCODE, NRUBID, NAGEMTFACMINI,
                            NAGEDELAIEXIGIBLE, SAGEFICP, NCALID, NRETURNCODE) ;
                        END IF;
                    END IF;
                END;
            END IF;
        EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND THEN
            -- CV-26012012 CFS55477
            -- nReturnCode := ERR_PARENT_ACT_FOUND_CONST;
            NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ACT_FOUND_CONST) ;
        WHEN DUP_VAL_ON_INDEX THEN
            NRETURNCODE := ERR_DUP_VAL_ON_ACT_CONST ;
        WHEN ERR_U_NULL_MANDATORY_KEY THEN
            NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY THEN
            NRETURNCODE := ERR_VAL_ACT_NULL_CONST;
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
    END;
END U_ACTEUR;
-- ACTADRESSE --
PROCEDURE U_ACTADRESSE
    (
        NACTID ACTEUR.ACTID%TYPE,
        NADRID ADRESSE.ADRID%TYPE,
        NAADORDREREMPLACE ACTADRESSE.AADORDREREMPLACE%TYPE,
        NAADFLAGSIEGE ACTADRESSE.AADFLAGSIEGE%TYPE,
        NAADFLAGCOURRIER ACTADRESSE.AADFLAGCOURRIER%TYPE,
        NAADFLAGFACTURATION ACTADRESSE.AADFLAGFACTURATION%TYPE,
        NAADFLAGLIVRAISON ACTADRESSE.AADFLAGLIVRAISON%TYPE,
        SAADCOMPL ACTADRESSE.AADCOMPL%TYPE,
        DTAADDTREMPLACE ACTADRESSE.AADDTMAJ%TYPE,
        NCREID CREVT.CREID%TYPE,
        SUTICODE ACTADRESSE.UTICODE%TYPE,
        DTAADDTDEB ACTADRESSE.AADDTDEB%TYPE,
        NAADORDRE ACTADRESSE.AADORDRE%TYPE,
        SAADTYPE ACTADRESSE.AADTYPE%TYPE,
        SAADCHANNEL ACTADRESSE.AADCHANNEL%TYPE,
        SAADERRORCODE ACTADRESSE.AADERRORCODE%TYPE,
        SAADCONTACTCODE ACTADRESSE.AADCONTACTCODE%TYPE,
        SAADCONTROLCODE ACTADRESSE.AADCONTROLCODE%TYPE,
        SADRSUBBUNJI ADRESSE.ADRSUBBUNJI%TYPE,
        SADRSTREETCODESEQ ADRESSE.ADRSTREETCODESEQ%TYPE,
        SCDRMSACODE ADRESSE.ADRMSACODE%TYPE,
        --  sAdrtreetcodeseq   ADRESSE.ADRTREETCODESEQ%TYPE,
        SADRBASGRNDAIR ADRESSE.ADRBASGRNDAIR%TYPE,
        SADRBLDGMAIN ADRESSE.ADRBLDGMAIN%TYPE,
        SADRBLDGSUB ADRESSE.ADRBLDGSUB%TYPE,
        SADRSTRTADDUSE ADRESSE.ADRSTRTADDUSE%TYPE,
        SADRLONGITUDECARDINAL ADRESSE.ADRLONGITUDECARDINAL%TYPE,
        SADRLATITUDECARDINAL ADRESSE.ADRLATITUDECARDINAL%TYPE,
        SADRMAINBUNJI ADRESSE.ADRMAINBUNJI%TYPE,
        SADRRANGE ADRESSE.ADRRANGE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTADRESSE
        SET
            AADORDREREMPLACE   = NAADORDREREMPLACE
          , AADFLAGSIEGE       = NAADFLAGSIEGE
          , AADFLAGCOURRIER    = NAADFLAGCOURRIER
          , AADFLAGFACTURATION = NAADFLAGFACTURATION
          , AADFLAGLIVRAISON   = NAADFLAGLIVRAISON
          , AADCOMPL           = SAADCOMPL
          , AADDTMAJ           = TRUNC(SYSDATE)
          , AADDTREMPLACE      = DTAADDTREMPLACE
          , AADDTDEB           = DTAADDTDEB
          ,
            --   CREID    = nCreId,
            UTICODE         = SUTICODE
          , AADTYPE         = SAADTYPE
          , AADCHANNEL      = SAADCHANNEL
          , AADERRORCODE    = SAADERRORCODE
          , AADCONTACTCODE  = SAADCONTACTCODE
          , AADCONTROLCODE  = SAADCONTROLCODE
        WHERE
            ACTID        = NACTID
            AND AADORDRE = NAADORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_AAD_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_AAD_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AAD_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTADRESSE;
-----------ACTCANDIDATURE------------
PROCEDURE U_ACTCANDIDATURE(
        NACTID ACTEUR.ACTID%TYPE,
        NACAORDRE ACTCANDIDATURE.ACAORDRE%TYPE,
        SACATYPE ACTCANDIDATURE.ACATYPE%TYPE,
        SACANATURE ACTCANDIDATURE.ACANATURE%TYPE,
        SACAORIGINE ACTCANDIDATURE.ACAORIGINE%TYPE,
        NMANID ACTCANDIDATURE.MANID%TYPE,
        DTACADTEFFET ACTCANDIDATURE.ACADTEFFET%TYPE,
        DTACADTTOT ACTCANDIDATURE.ACADTTOT%TYPE,
        DTACADTTARD ACTCANDIDATURE.ACADTTARD%TYPE,
        DTACADTLIMITE ACTCANDIDATURE.ACADTLIMITE%TYPE,
        NACAFLAGOCCUPE ACTCANDIDATURE.ACAFLAGOCCUPE%TYPE,
        SACAMEMO ACTCANDIDATURE.ACAMEMO%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTCANDIDATURE
        SET
            ACATYPE       = SACATYPE
          , ACANATURE     = SACANATURE
          , ACAORIGINE    = SACAORIGINE
          , MANID         = NMANID
          , ACADTEFFET    = DTACADTEFFET
          , ACADTTOT      = DTACADTTOT
          , ACADTTARD     = DTACADTTARD
          , ACADTLIMITE   = DTACADTLIMITE
          , ACAFLAGOCCUPE = NACAFLAGOCCUPE
          , ACAMEMO       = SACAMEMO
        WHERE
            ACTID        = NACTID
            AND ACAORDRE = NACAORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ACA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AAD_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAD_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTCANDIDATURE;
-- ACTCORRESPONDANT --
PROCEDURE U_ACTCORRESPONDANT(
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE ACTCORRESPONDANT.ACOORDRE%TYPE,
        SACONOM ACTCORRESPONDANT.ACONOM%TYPE,
        SACOQUALITE ACTCORRESPONDANT.ACOQUALITE%TYPE,
        SACOTITRE ACTCORRESPONDANT.ACOTITRE%TYPE,
        NACOFLAGPREFERE ACTCORRESPONDANT.ACOFLAGPREFERE%TYPE,
        SACOINITIALAUTREPRENOM ACTCORRESPONDANT.ACOINITIALAUTREPRENOM%TYPE,
        SACOPRENOM ACTCORRESPONDANT.ACOPRENOM%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTCORRESPONDANT
        SET
            ACOQUALITE            = SACOQUALITE
          , ACONOM                = SACONOM
          , ACOTITRE              = SACOTITRE
          , ACOFLAGPREFERE        = NACOFLAGPREFERE
          , ACOINITIALAUTREPRENOM = SACOINITIALAUTREPRENOM
          , ACOPRENOM             = SACOPRENOM
        WHERE
            ACTID        = NACTID
            AND ACOORDRE = NACOORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ACO_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ACO_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ACO_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_CORRESP_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTCORRESPONDANT;
-- ACTPHASE --
PROCEDURE U_ACTPHASE(
        NACTID ACTEUR.ACTID%TYPE,
        SPHACODE ACTPHASE.PHACODE%TYPE,
        NAPHORDRE ACTPHASE.APHORDRE%TYPE,
        DTAPHDTDEB ACTPHASE.APHDTDEB%TYPE,
        DTAPHDTMAJ ACTPHASE.APHDTMAJ%TYPE,
        SJALCODE ACTPHASE.JALCODE%TYPE,
        NCREID ACTPHASE.CREID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTPHASE
        SET
            APHDTDEB = DTAPHDTDEB
          , APHDTMAJ = DTAPHDTMAJ
          , JALCODE  = SJALCODE
          , CREID    = NCREID
        WHERE
            ACTID        = NACTID
            AND PHACODE  = SPHACODE
            AND APHORDRE = NAPHORDRE
            AND PHADEST  = 'ACTEUR'
            AND ACTID    = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_APH_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_APH_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APH_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APH_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APH_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPHASE;
-- ACTRELATION --
PROCEDURE U_ACTRELATION(
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTEUR.ACTID%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NAREQP ACTRELATION.AREQP%TYPE,
        DTAREDTFIN ACTRELATION.AREDTFIN%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTRELATION
        SET
            AREQP    = NAREQP
          , AREDTFIN = DTAREDTFIN
        WHERE
            ACTID             = NACTID
            AND ACTIDRELATION = NACTIDRELATION
            AND TRECODE       = STRECODE
            AND AREDTDEB      = DTAREDTDEB;
        NRETURNCODE          := 0;
        IF SQL%ROWCOUNT       = 0 THEN
            NRETURNCODE      := ERR_NO_ROWS_CONST;
        END IF;
        --ALA 050707
        IF NRETURNCODE = 0 THEN
            UPDATE ACTEUR SET ACTDTMAJ = TRUNC(SYSDATE) WHERE ACTID IN(NACTID, NACTIDRELATION) ;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARE_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARE_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRELATION;
-- RIB --
PROCEDURE U_RIB(
        NRIBID RIB.RIBID%TYPE,
        SRIBINTITULE RIB.RIBINTITULE%TYPE,
        SBGUGUICHETINVARIANT RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG
        SDEVCODE RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPE RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            RIB
        SET
            RIBINTITULE         = SRIBINTITULE
          , BGUGUICHETINVARIANT = SBGUGUICHETINVARIANT
          , DEVCODE             = SDEVCODE
          , RIBACCOUNTTYPE      = SRIBACCOUNTTYPE
        WHERE
            RIBID        = NRIBID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    /*EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_RIB_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_RIB_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RIB_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RIB_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;*/
    END;
END U_RIB;
-- RIBINFO --
PROCEDURE U_RIBINFO(
        NRIBID RIB.RIBID%TYPE,
        NRINDELAIP RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ RIBINFO.RINVALCHQ%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            RIBINFO
        SET
            RINDELAIP   = NRINDELAIP
          , RINDELAIV   = NRINDELAIV
          , RINVALREMHP = NRINVALREMHP
          , RINVALREMSP = NRINVALREMSP
          , RINVALVIR   = NRINVALVIR
          , RINVALPRL   = NRINVALPRL
          , RINVALCHQ   = NRINVALCHQ
        WHERE
            RIBID        = NRIBID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_RIN_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_RIN_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RIN_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_RIBINFO;
-- ACTROLE --
PROCEDURE U_ACTROLE(
        NACTID ACTEUR.ACTID%TYPE,
        SROLCODE ACTROLE.ROLCODE%TYPE,
        NARONBEXFAC ACTROLE.ARONBEXFAC%TYPE,
        SARORECAPFAC ACTROLE.ARORECAPFAC%TYPE,
        NAROGRPFAC ACTROLE.AROGRPFAC%TYPE,
        NAROGRPPREL ACTROLE.AROGRPPREL%TYPE,
        SAROREFEXTERNE ACTROLE.AROREFEXTERNE%TYPE,
        NAROFACAVANCE ACTROLE.AROFACAVANCE%TYPE,
        SAROPERIODE ACTROLE.AROPERIODE%TYPE, -- CV-19062001
        NAROMULTIPLE ACTROLE.AROMULTIPLE%TYPE, -- CV-19062001
        SAROEDITFAC ACTROLE.AROEDITFAC%TYPE, -- DA-29092001
        NAROGRPDEC ACTROLE.AROGRPDEC%TYPE,
        SAROENVOINOTICE ACTROLE.AROENVOINOTICE%TYPE,
        SAROFORMATSORTIE ACTROLE.AROFORMATSORTIE%TYPE,
        SAROINVOICEMETHOD ACTROLE.AROINVOICEMETHOD%TYPE, -- CFS-47412
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTROLE
        SET
            ARONBEXFAC    = NARONBEXFAC
          , ARORECAPFAC   = SARORECAPFAC
          , AROGRPFAC     = NAROGRPFAC
          , AROGRPPREL    = NAROGRPPREL
          , AROREFEXTERNE = SAROREFEXTERNE
          , AROFACAVANCE  = NAROFACAVANCE
          , AROPERIODE    = SAROPERIODE
          , -- CV-19062201
            AROMULTIPLE = NAROMULTIPLE
          , -- CV-19062001
            AROEDITFAC = SAROEDITFAC
          , -- CV-19062001
            AROGRPDEC        = NAROGRPDEC
          , AROENVOINOTICE   = SAROENVOINOTICE
          , AROFORMATSORTIE  = SAROFORMATSORTIE
          , AROINVOICEMETHOD = SAROINVOICEMETHOD -- CFS-47412
        WHERE
            ACTID       = NACTID
            AND ROLCODE = SROLCODE;
        --UPDATE AROAGE SET AAGREFEXTERNE = sAroRefExterne WHERE ACTID = nActId AND ROLCODE = sRolCode AND AAGDTFIN IS NULL;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARO_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARO_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARO_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ROLE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTROLE;
-- ACTSTATISTIQUE --
PROCEDURE U_ACTSTATISTIQUE(
        NACTID ACTEUR.ACTID%TYPE,
        SSACCODE CCHVALUE.CVASTRINGVALUE%TYPE,
        SSAVCODEVAL CCHVALUE.CVASTRINGVALUE%TYPE,
        SASTLIBRE CCHVALUE.CVASTRINGVALUE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE ACTSTATISTIQUE SET SAVCODEVAL = SSAVCODEVAL, ASTLIBRE = SASTLIBRE WHERE ACTID = NACTID AND SACCODE = SSACCODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AST_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AST_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_STAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_STAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSTATISTIQUE;
-- ACTTELECOM --
PROCEDURE U_ACTTELECOM(
        NACTID ACTEUR.ACTID%TYPE,
        NATEORDRE ACTTELECOM.ATEORDRE%TYPE,
        NATENUM ACTTELECOM.ATENUM%TYPE,
        DTATEDTFIN ACTTELECOM.ATEDTFIN%TYPE,
        SATEDOMAIN ACTTELECOM.ATEDOMAIN%TYPE,
        NATEFLAGASSENT ACTTELECOM.ATEFLAGASSENT%TYPE,
        NATEFLAGTELECOM ACTTELECOM.ATEFLAGPREFERE%TYPE,
        SATEERRORCODE ACTTELECOM.ATEERRORCODE%TYPE,
        SATECONTACTCODE ACTTELECOM.ATECONTACTCODE%TYPE,
        SATECONTROLCODE ACTTELECOM.ATECONTROLCODE%TYPE,
        NATEFLAGOFFTIME ACTTELECOM.ATEFLAGOFFTIME%TYPE,
        NATEDTUSED ACTTELECOM.ATEDTUSED%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTTELECOM
        SET
            ATENUM         = NATENUM
          , ATEDTFIN       = DTATEDTFIN
          , ATEFLAGPREFERE = NATEFLAGTELECOM
          , ATEDOMAIN      = SATEDOMAIN
          , ATEFLAGASSENT  = NATEFLAGASSENT
          , ATEERRORCODE   = SATEERRORCODE
          , ATECONTACTCODE = SATECONTACTCODE
          , ATECONTROLCODE = SATECONTROLCODE
          , ATEFLAGOFFTIME = NATEFLAGOFFTIME
          , ATEDTUSED      = NATEDTUSED
        WHERE
            ACTID        = NACTID
            AND ATEORDRE = NATEORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ATE_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ATE_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ATE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_TELECOM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTTELECOM;
-- ACTEURPARTICULIER --
PROCEDURE U_ACTEURPARTICULIER(
        NACTID ACTEUR.ACTID%TYPE,
        NAPAFLAGPROPRIETE ACTEURPARTICULIER.APAFLAGPROPRIETE%TYPE,
        NAPASEXE ACTEURPARTICULIER.APASEXE%TYPE,
        NAPANBENFANT ACTEURPARTICULIER.APANBENFANT%TYPE,
        SAPACOMNAISS ACTEURPARTICULIER.APACOMNAISS%TYPE,
        SAPADEPTNAISS ACTEURPARTICULIER.APADEPTNAISS%TYPE,
        SAPAEMPLOYEUR ACTEURPARTICULIER.APAEMPLOYEUR%TYPE,
        SAPANOMMARITAL ACTEURPARTICULIER.APANOMMARITAL%TYPE,
        SAPAREGIMEMATRIM ACTEURPARTICULIER.APAREGIMEMATRIM%TYPE,
        SAPATITRE ACTEURPARTICULIER.APATITRE%TYPE,
        SAPASITFAM ACTEURPARTICULIER.APASITFAM%TYPE,
        DTAPADTNAISS ACTEURPARTICULIER.APADTNAISS%TYPE,
        SPAYCODE ACTEURPARTICULIER.PAYCODE%TYPE,
        SAPANOMPATONYME ACTEURPARTICULIER.APANOMPATRONYMIQUE%TYPE,
        SAPAPRENOM ACTEURPARTICULIER.APAPRENOM%TYPE,
        SAPACHREGIMEMATRIM ACTEURPARTICULIER.APACHGREGIMEMATRIM%TYPE,
        SAPACODENIVEAUETUDE ACTEURPARTICULIER.APACODENIVEAUETUDE%TYPE,
        SAPADIRFONCTION ACTEURPARTICULIER.APADIRFONCTION%TYPE,
        NAPAFLAGDIRIGEANT ACTEURPARTICULIER.APAFLAGDIRIGEANT%TYPE,
        NAPAFLAGHOMMECLE ACTEURPARTICULIER.APAFLAGHOMMECLE%TYPE,
        NAPAFLAGINTERDITBANCAIRE ACTEURPARTICULIER.APAFLAGINTERDITBANCAIRE%TYPE,
        NAPAFLAGSUCCESSIONPRET ACTEURPARTICULIER.APAFLAGSUCCESSIONPRET%TYPE,
        NAPAPCTCAPITAL ACTEURPARTICULIER.APAPCTCAPITAL%TYPE,
        NAPAANEXPACTIVITE IN OUT ACTEURPARTICULIER.APAANEXPERACTIVITE%TYPE,
        NAPAEXPERIENCEFONCTION IN OUT ACTEURPARTICULIER.APAANEXPERIENCEFONCTION%TYPE,
        DTAPADTPERMISDECONDUIRE ACTEURPARTICULIER.APADTPERMISDECONDUIRE%TYPE, -- CV-20062005 FSA-20165 Modif de base
        SAPAVILLENAISS ACTEURPARTICULIER.APAVILLENAISS%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DECLARE
            NBOCC NUMBER;
        BEGIN
            SELECT COUNT( *) INTO NBOCC FROM ACTEURPARTICULIER WHERE ACTID = NACTID;
            IF NBOCC >= 1 THEN
                UPDATE
                    ACTEURPARTICULIER
                SET
                    APADTNAISS              = DTAPADTNAISS
                  , APADEPTNAISS            = SAPADEPTNAISS
                  , APACOMNAISS             = SAPACOMNAISS
                  , APANBENFANT             = NAPANBENFANT
                  , APASEXE                 = NAPASEXE
                  , APAEMPLOYEUR            = SAPAEMPLOYEUR
                  , APASITFAM               = SAPASITFAM
                  , APAFLAGPROPRIETE        = NAPAFLAGPROPRIETE
                  , APATITRE                = SAPATITRE
                  , APANOMMARITAL           = SAPANOMMARITAL
                  , APAREGIMEMATRIM         = SAPAREGIMEMATRIM
                  , PAYCODE                 = SPAYCODE
                  , APANOMPATRONYMIQUE      = SAPANOMPATONYME
                  , APAPRENOM               = SAPAPRENOM
                  , APACHGREGIMEMATRIM      = SAPACHREGIMEMATRIM
                  , APACODENIVEAUETUDE      = SAPACODENIVEAUETUDE
                  , APADIRFONCTION          = SAPADIRFONCTION
                  , APAFLAGDIRIGEANT        = NAPAFLAGDIRIGEANT
                  , APAFLAGHOMMECLE         = NAPAFLAGHOMMECLE
                  , APAFLAGINTERDITBANCAIRE = NAPAFLAGINTERDITBANCAIRE
                  , APAFLAGSUCCESSIONPRET   = NAPAFLAGSUCCESSIONPRET
                  , APAPCTCAPITAL           = NAPAPCTCAPITAL
                  , APAANEXPERACTIVITE      = NAPAANEXPACTIVITE
                  , APAANEXPERIENCEFONCTION = NAPAEXPERIENCEFONCTION
                  , APADTPERMISDECONDUIRE   = DTAPADTPERMISDECONDUIRE
                  , -- CV-20062005 FSA-20165
                    APAVILLENAISS = SAPAVILLENAISS
                WHERE
                    ACTID        = NACTID;
                NRETURNCODE     := 0;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            ELSE
                INSERT
                INTO
                    ACTEURPARTICULIER
                    (
                        APADTNAISS
                      , APADEPTNAISS
                      , APACOMNAISS
                      , APANBENFANT
                      , APASEXE
                      , APAEMPLOYEUR
                      , APASITFAM
                      , APAFLAGPROPRIETE
                      , APATITRE
                      , APANOMMARITAL
                      , APAREGIMEMATRIM
                      , PAYCODE
                      , ACTID
                      , APANOMPATRONYMIQUE
                      , APAPRENOM
                      , APACHGREGIMEMATRIM
                      , APACODENIVEAUETUDE
                      , APADIRFONCTION
                      , APAFLAGDIRIGEANT
                      , APAFLAGHOMMECLE
                      , APAFLAGINTERDITBANCAIRE
                      , APAFLAGSUCCESSIONPRET
                      , APAPCTCAPITAL
                      , APAANEXPERACTIVITE
                      , APAANEXPERIENCEFONCTION
                      , APADTPERMISDECONDUIRE
                      , APAVILLENAISS
                    )
                    VALUES
                    (
                        DTAPADTNAISS
                      , SAPADEPTNAISS
                      , SAPACOMNAISS
                      , NAPANBENFANT
                      , NAPASEXE
                      , SAPAEMPLOYEUR
                      , SAPASITFAM
                      , NAPAFLAGPROPRIETE
                      , SAPATITRE
                      , SAPANOMMARITAL
                      , SAPAREGIMEMATRIM
                      , SPAYCODE
                      , NACTID
                      , SAPANOMPATONYME
                      , SAPAPRENOM
                      , SAPACHREGIMEMATRIM
                      , SAPACODENIVEAUETUDE
                      , SAPADIRFONCTION
                      , NAPAFLAGDIRIGEANT
                      , NAPAFLAGHOMMECLE
                      , NAPAFLAGINTERDITBANCAIRE
                      , NAPAFLAGSUCCESSIONPRET
                      , NAPAPCTCAPITAL
                      , NAPAANEXPACTIVITE
                      , NAPAEXPERIENCEFONCTION
                      , DTAPADTPERMISDECONDUIRE
                      , SAPAVILLENAISS
                    ) ;
                NRETURNCODE     := 0;
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
            END IF;
        END;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_APA_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_APA_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTEURPARTICULIER;
-- ACTEURGESTION --
PROCEDURE U_ACTEURGESTION
    (
        NACTID ACTEUR.ACTID%TYPE,
        SAGECIB ACTEURGESTION.AGECIB%TYPE,
        SAGEEMETTEUR ACTEURGESTION.AGEEMETTEUR%TYPE,
        SAGELOGO ACTEURGESTION.AGELOGO%TYPE,
        STDRCODEEFFET ACTEURGESTION.TDRCODEEFFET%TYPE,
        STDRCODEPRL ACTEURGESTION.TDRCODEPRL%TYPE,
        STDRCODEPRLACCELERE ACTEURGESTION.TDRCODEPRLACCELERE%TYPE,
        STDRCODEVIR ACTEURGESTION.TDRCODEVIR%TYPE,
        SAGEEMETVIR ACTEURGESTION.AGEEMETVIR%TYPE,
        NTCIID ACTEURGESTION.TCIID%TYPE,
        BAGEFLAGIRFACTURE ACTEURGESTION.AGEFLAGIRFACTURE%TYPE,
        BAGEFLAGIRCHQ ACTEURGESTION.AGEFLAGIRCHQ%TYPE,
        STAXCODE ACTEURGESTION.TAXCODE%TYPE,
        NRUBID ACTEURGESTION.RUBID%TYPE,
        NAGEMTFACMINI ACTEURGESTION.AGEMTFACMINI%TYPE,
        NAGEDELAIEXIGIBLE ACTEURGESTION.AGEDELAIEXIGIBLE%TYPE,
        SAGEFICP ACTEURGESTION.AGEFICP%TYPE,
        NCALID ACTEURGESTION.CALID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTEURGESTION
        SET
            AGEEMETTEUR        = SAGEEMETTEUR
          , AGELOGO            = SAGELOGO
          , AGECIB             = SAGECIB
          , TDRCODEEFFET       = STDRCODEEFFET
          , TDRCODEPRL         = TDRCODEPRL
          , TDRCODEPRLACCELERE = TDRCODEPRLACCELERE
          , TDRCODEVIR         = TDRCODEVIR
          , AGEEMETVIR         = SAGEEMETVIR
          , TCIID              = NTCIID
          , AGEFLAGIRFACTURE   = BAGEFLAGIRFACTURE
          , AGEFLAGIRCHQ       = BAGEFLAGIRCHQ
          , TAXCODE            = STAXCODE
          , RUBID              = NRUBID
          , AGEDELAIEXIGIBLE   = NAGEDELAIEXIGIBLE
          , AGEFICP            = SAGEFICP
          , CALID              = NCALID
        WHERE
            ACTID        = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AGE_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTEURGESTION;
-- ACTEURINDIVISOIN --
PROCEDURE U_ACTEURINDIVISION(
        NACTID ACTEUR.ACTID%TYPE,
        NAINNBPARTTOTAL ACTEURINDIVISION.AINNBPARTTOTAL%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE ACTEURINDIVISION SET AINNBPARTTOTAL = NAINNBPARTTOTAL WHERE ACTID = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AIN_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTEURINDIVISION;
-- ADRESSE --
PROCEDURE U_ADRESSE(
        NADRID ADRESSE.ADRID%TYPE,
        SPAYCODE ADRESSE.PAYCODE%TYPE,
        SUTICODE ADRESSE.UTICODE%TYPE,
        SADRVOIE ADRESSE.ADRVOIE%TYPE,
        SADRLIEUDIT ADRESSE.ADRLIEUDIT%TYPE,
        SADRCODEPOST ADRESSE.ADRCODEPOST%TYPE,
        SADRVILLE ADRESSE.ADRVILLE%TYPE,
        SPRECODE ADRESSE.PRECODE%TYPE,
        SPRETYPE ADRESSE.PRETYPE%TYPE,
        DTADRDTMAJ ADRESSE.ADRDTMAJ%TYPE,
        SADRCEDEX ADRESSE.ADRCEDEX%TYPE,
        SADRSUBREGION ADRESSE.ADRSUBREGION%TYPE,
        SADRMSACODE ADRESSE.ADRMSACODE%TYPE,
        SADRTAXAREA ADRESSE.ADRTAXAREA%TYPE,
        SADRDISTRICT ADRESSE.ADRDISTRICT%TYPE,
        SADRTOWN ADRESSE.ADRTOWN%TYPE,
        SADRCODEPOSTNEW ADRESSE.ADRCODEPOSTNEW%TYPE,
        SADRSUBREGIONNEW ADRESSE.ADRSUBREGIONNEW%TYPE,
        SADRVILLENEW ADRESSE.ADRVILLENEW%TYPE,
        SADRDISTRICTNEW ADRESSE.ADRDISTRICTNEW%TYPE,
        SADRVOIENEW ADRESSE.ADRVOIENEW%TYPE,
        SADRCEDEXNEW ADRESSE.ADRCEDEXNEW%TYPE,
        SADRBATIMENTNEW ADRESSE.ADRBATIMENTNEW%TYPE,
        SADRBATIMENT ADRESSE.ADRBATIMENT%TYPE,
        SADRAPPTNEW ADRESSE.ADRAPPTNEW%TYPE,
        SADRAPPT ADRESSE.ADRAPPT%TYPE,
        SADRSUBBUNJI ADRESSE.ADRSUBBUNJI%TYPE,
        SADRSTREETCODESEQ ADRESSE.ADRSTREETCODESEQ%TYPE,
        -- sCdrmsacode      ADRESSE.CDRMSACODE%TYPE,
        -- sAdrtreetcodeseq   ADRESSE.ADRTREETCODESEQ%TYPE,
        SADRBASGRNDAIR ADRESSE.ADRBASGRNDAIR%TYPE,
        SADRBLDGMAIN ADRESSE.ADRBLDGMAIN%TYPE,
        SADRBLDGSUB ADRESSE.ADRBLDGSUB%TYPE,
        SADRSTRTADDUSE ADRESSE.ADRSTRTADDUSE%TYPE,
        SADRLONGITUDECARDINAL ADRESSE.ADRLONGITUDECARDINAL%TYPE,
        SADRLATITUDECARDINAL ADRESSE.ADRLATITUDECARDINAL%TYPE,
        SADRMAINBUNJI ADRESSE.ADRMAINBUNJI%TYPE,
        SADRRANGE ADRESSE.ADRRANGE%TYPE,
		nAdrPctTax         ADRESSE.ADRPCTTAX%TYPE,
		sTaxCode           ADRESSE.TAXCODE%TYPE,
		nAdrTaxBalance     ADRESSE.ADRTAXBALANCE%TYPE,
		sAdrstreetnumber	ADRESSE.ADRSTREETNUMBER%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ADRESSE
        SET
            PAYCODE          = SPAYCODE
          , UTICODE          = SUTICODE
          , ADRVOIE          = SADRVOIE
          , ADRLIEUDIT       = SADRLIEUDIT
          , ADRCODEPOST      = SADRCODEPOST
          , ADRVILLE         = SADRVILLE
          , PRECODE          = SPRECODE
          , ADRDTMAJ         = DTADRDTMAJ
          , ADRCEDEX         = SADRCEDEX
          , ADRSUBREGION     = SADRSUBREGION
          , ADRMSACODE       = SADRMSACODE
          , ADRTAXAREA       = SADRTAXAREA
          , PRETYPE          = SPRETYPE
          , ADRDISTRICT      = SADRDISTRICT
          , ADRTOWN          = SADRTOWN
          , ADRCODEPOSTNEW   = SADRCODEPOSTNEW
          , ADRSUBREGIONNEW  = SADRSUBREGIONNEW
          , ADRVILLENEW      = SADRVILLENEW
          , ADRDISTRICTNEW   = SADRDISTRICTNEW
          , ADRVOIENEW       = SADRVOIENEW
          , ADRCEDEXNEW      = SADRCEDEXNEW
          , ADRBATIMENTNEW   = SADRBATIMENTNEW
          , ADRBATIMENT      = SADRBATIMENT
          , ADRAPPTNEW       = SADRAPPTNEW
          , ADRAPPT          = SADRAPPT
          , ADRSUBBUNJI      = SADRSUBBUNJI
          , ADRSTREETCODESEQ = SADRSTREETCODESEQ
          ,
            --   CDRMSACODE  = sCdrmsacode,
            --   ADRTREETCODESEQ  =  sAdrtreetcodeseq,
            ADRBASGRNDAIR        = SADRBASGRNDAIR
          , ADRBLDGMAIN          = SADRBLDGMAIN
          , ADRBLDGSUB           = SADRBLDGSUB
          , ADRSTRTADDUSE        = SADRSTRTADDUSE
          , ADRLONGITUDECARDINAL = SADRLONGITUDECARDINAL
          , ADRLATITUDECARDINAL  = SADRLATITUDECARDINAL
          , ADRMAINBUNJI         = SADRMAINBUNJI
          , ADRRANGE             = SADRRANGE
		  , ADRPCTTAX 			 = nAdrPctTax
          , TAXCODE 			 = sTaxCode
          , ADRTAXBALANCE 		 = nAdrTaxBalance
		  , ADRSTREETNUMBER		 = sAdrstreetnumber
        WHERE
            ADRID        = NADRID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ADR_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ADR_FOUND_CONST) ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADR_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADR_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ADRESSE;
-- BANQUEGUICHET --
PROCEDURE I_BANQUEGUICHET(
        SBGUBANQUE IN BANQUEGUICHET.BGUBANQUE%TYPE,
        SBGUGUICHET IN BANQUEGUICHET.BGUGUICHET%TYPE,
        NADRID IN BANQUEGUICHET.ADRID%TYPE,
        SBGUAGENCE IN BANQUEGUICHET.BGUAGENCE%TYPE,
        SBGUCODEINTERBANCAIRE IN BANQUEGUICHET.BGUCODEINTERBANCAIRE%TYPE,
        SPAYCODE IN BANQUEGUICHET.PAYCODE%TYPE,
        SBGUSWIFT IN BANQUEGUICHET.BGUSWIFT%TYPE,
        NBGUACCOUNTMIN IN BANQUEGUICHET.BGUACCOUNTMIN%TYPE,
        NBGUACCOUNTMAX IN BANQUEGUICHET.BGUACCOUNTMAX%TYPE,
        SBGUACCOUNTFORMAT IN BANQUEGUICHET.BGUACCOUNTFORMAT%TYPE,
        NBGUFLAGVIRTUAL IN BANQUEGUICHET.BGUFLAGVIRTUAL%TYPE,
        SRIBCOMPTE IN RIB.RIBCOMPTE%TYPE,
		NBGUTYPE IN BANQUEGUICHET.BGUTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NNEWRIB NUMBER := 0;
    BEGIN
        INSERT
        INTO
            BANQUEGUICHET
            (
                BGUBANQUE
              , BGUGUICHET
              , ADRID
              , BGUAGENCE
              , BGUCODEINTERBANCAIRE
              , PAYCODE
              , BGUSWIFT
              , BGUACCOUNTMIN
              , BGUACCOUNTMAX
              , BGUACCOUNTFORMAT
              , BGUFLAGVIRTUAL
			  , BGUTYPE
            )
            VALUES
            (
                SBGUBANQUE
              , SBGUGUICHET
              , NADRID
              , SBGUAGENCE
              , SBGUCODEINTERBANCAIRE
              , SPAYCODE
              , SBGUSWIFT
              , NBGUACCOUNTMIN
              , NBGUACCOUNTMAX
              , SBGUACCOUNTFORMAT
              , NBGUFLAGVIRTUAL
			  , NBGUTYPE
            ) ;
        NRETURNCODE   := 0;
        IF SRIBCOMPTE IS NOT NULL THEN
            I_RIB(SBGUBANQUE, SBGUGUICHET, SRIBCOMPTE, '00', NULL, NNEWRIB, NULL, NULL, NULL, NULL,SPAYCODE, NULL, NULL, NBGUFLAGVIRTUAL,NULL, NRETURNCODE) ;
            NRETURNCODE := 0;
        END IF;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_BANQUEGUICHET;
PROCEDURE U_BANQUEGUICHET
    (
        SBGUBANQUE IN BANQUEGUICHET.BGUBANQUE%TYPE,
        SBGUGUICHET IN BANQUEGUICHET.BGUGUICHET%TYPE,
        NADRID IN BANQUEGUICHET.ADRID%TYPE,
        SBGUAGENCE IN BANQUEGUICHET.BGUAGENCE%TYPE,
        SBGUCODEINTERBANCAIRE IN BANQUEGUICHET.BGUCODEINTERBANCAIRE%TYPE,
        SPAYCODE IN BANQUEGUICHET.PAYCODE%TYPE,
        SBGUSWIFT IN BANQUEGUICHET.BGUSWIFT%TYPE,
        NBGUACCOUNTMIN IN BANQUEGUICHET.BGUACCOUNTMIN%TYPE,
        NBGUACCOUNTMAX IN BANQUEGUICHET.BGUACCOUNTMAX%TYPE,
        SBGUACCOUNTFORMAT IN BANQUEGUICHET.BGUACCOUNTFORMAT%TYPE,
        NBGUFLAGVIRTUAL IN BANQUEGUICHET.BGUFLAGVIRTUAL%TYPE,
		NBGUTYPE IN BANQUEGUICHET.BGUTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            BANQUEGUICHET
        SET
            ADRID                = NADRID
          , BGUAGENCE            = SBGUAGENCE
          , BGUCODEINTERBANCAIRE = SBGUCODEINTERBANCAIRE
          , PAYCODE              = SPAYCODE
          , BGUSWIFT             = SBGUSWIFT
          , BGUACCOUNTMIN        = NBGUACCOUNTMIN
          , BGUACCOUNTMAX        = NBGUACCOUNTMAX
          , BGUACCOUNTFORMAT     = SBGUACCOUNTFORMAT
          , BGUFLAGVIRTUAL       = NBGUFLAGVIRTUAL
		  , BGUTYPE              = NBGUTYPE
        WHERE
            BGUBANQUE      = SBGUBANQUE
            AND BGUGUICHET = SBGUGUICHET;
        NRETURNCODE       := 0;
        IF SQL%ROWCOUNT    = 0 THEN
            NRETURNCODE   := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_BANQUEGUICHET ;
--ACTTAB --
PROCEDURE I_ACTTAB(
        NACTID ACTEUR.ACTID%TYPE,
        DTATBDTVALID ACTTAB.ATBDTVALID%TYPE,
        DTATBDTSAISIE ACTTAB.ATBDTSAISIE%TYPE,
        DTATBDTFIN ACTTAB.ATBDTFIN%TYPE,
        STABCODE ACTTAB.TABCODE%TYPE,
        SATBVALEUR ACTTAB.ATBVALEUR%TYPE,
        SPAYCODE ACTTAB.PAYCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTTAB
            (
                ACTID
              , TABCODE
              , ATBDTVALID
              , ATBDTSAISIE
              , ATBVALEUR
              , ATBDTFIN
              , PAYCODE
            )
            VALUES
            (
                NACTID
              , STABCODE
              , DTATBDTVALID
              , DTATBDTSAISIE
              , SATBVALEUR
              , DTATBDTFIN
              , SPAYCODE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ATA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ATA_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BAFI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BAFI_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTTAB;
PROCEDURE U_ACTTAB
    (
        NACTID ACTEUR.ACTID%TYPE,
        DTATBDTVALID ACTTAB.ATBDTVALID%TYPE,
        DTATBDTSAISIE ACTTAB.ATBDTSAISIE%TYPE,
        DTATBDTFIN ACTTAB.ATBDTFIN%TYPE,
        STABCODE ACTTAB.TABCODE%TYPE,
        SATBVALEUR ACTTAB.ATBVALEUR%TYPE,
        SPAYCODE ACTTAB.PAYCODE%TYPE, --ALA 180607
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTTAB
        SET
            ATBVALEUR = SATBVALEUR
          , ATBDTFIN  = DTATBDTFIN
        WHERE
            TABCODE        = STABCODE
            AND ACTID      = NACTID
            AND ATBDTVALID = DTATBDTVALID
            AND PAYCODE    = SPAYCODE;
        NRETURNCODE       := 0;
        IF SQL%ROWCOUNT    = 0 THEN
            NRETURNCODE   := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ATA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADM_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTTAB;
PROCEDURE D_ACTTAB(
        NACTID ACTEUR.ACTID%TYPE,
        DTATBDTVALID ACTTAB.ATBDTVALID%TYPE,
        STABCODE ACTTAB.TABCODE%TYPE,
        SPAYCODE ACTTAB.PAYCODE%TYPE, --ALA 180607
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTTAB WHERE ACTID = NACTID AND ATBDTVALID = DTATBDTVALID AND TABCODE = STABCODE AND PAYCODE = SPAYCODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ATB_FOUND_CONST;
    END;
END D_ACTTAB;
PROCEDURE U_ACTADMINISTRATIF(
        NACTID ACTEUR.ACTID%TYPE,
        NADMID ADMINISTRATIF.ADMID%TYPE,
        NADMFORID ADMINISTRATIF.FORID%TYPE,
        DTADMDTEMIS ADMINISTRATIF.ADMDTEMIS%TYPE,
        DTADMDTRECEP ADMINISTRATIF.ADMDTRECEP%TYPE,
        SADMCOMMENT ADMINISTRATIF.ADMCOMMENT%TYPE,
        NADMDELAIEMIS ADMINISTRATIF.ADMDELAIEMIS%TYPE,
        NADMDELAIREP ADMINISTRATIF.ADMDELAIREP%TYPE,
        SADMMEMO ADMINISTRATIF.ADMMEMO%TYPE,
        SADMETAT ADMINISTRATIF.ADMETAT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ADMINISTRATIF
        SET
            ADMDTEMIS    = DTADMDTEMIS
          , ADMDTRECEP   = DTADMDTRECEP
          , ADMCOMMENT   = SADMCOMMENT
          , ADMDELAIEMIS = NADMDELAIEMIS
          , ADMDELAIREP  = NADMDELAIREP
          , ADMMEMO      = SADMMEMO
          , ADMETAT      = SADMETAT
        WHERE
            FORID        = NADMFORID
            AND ACTID    = NACTID
            AND ADMID    = NADMID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ADM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADM_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTADMINISTRATIF;
PROCEDURE D_ACTADMINISTRATIF(
        NACTID ADMINISTRATIF.ACTID%TYPE,
        NADMID ADMINISTRATIF.ADMID%TYPE,
        NADMFORID ADMINISTRATIF.FORID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ADMSTATUS WHERE ADMID IN
            (
                SELECT ADMID FROM ADMINISTRATIF WHERE ACTID = NACTID AND ADMID = NADMID
            ) ;
        DELETE FROM ADMINISTRATIF WHERE ACTID = NACTID AND ADMID = NADMID AND FORID = NADMFORID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ADM_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ACTADMINISTRATIF;
-- AGEGROMESURE --
PROCEDURE I_AGEGROMESURE(
        NACTID AGEGROMESURE.ACTID%TYPE,
        SAGMCODE AGEGROMESURE.AGMCODE%TYPE,
        SAGMNATURE AGEGROMESURE.AGMNATURE%TYPE,
        DTAGMDTDEB AGEGROMESURE.AGMDTDEB%TYPE,
        DTAGMDTFIN AGEGROMESURE.AGMDTFIN%TYPE,
        SDEVCODE AGEGROMESURE.DEVCODE%TYPE,
        NAGMMT AGEGROMESURE.AGMMT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            AGEGROMESURE
            (
                ACTID
              , AGMCODE
              , AGMNATURE
              , AGMDTDEB
              , AGMDTFIN
              , DEVCODE
              , AGMMT
            )
            VALUES
            (
                NACTID
              , SAGMCODE
              , SAGMNATURE
              , DTAGMDTDEB
              , DTAGMDTFIN
              , SDEVCODE
              , NAGMMT
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AGM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AGM_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_AGEGROMESURE;
PROCEDURE D_AGEGROMESURE
    (
        NACTID AGEGROMESURE.ACTID%TYPE,
        SAGMCODE AGEGROMESURE.AGMCODE%TYPE,
        SAGMNATURE AGEGROMESURE.AGMNATURE%TYPE,
        DTAGMDTDEB AGEGROMESURE.AGMDTDEB%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE FROM AGEGROMESURE WHERE ACTID = NACTID AND AGMCODE = SAGMCODE AND AGMNATURE = SAGMNATURE AND AGMDTDEB = DTAGMDTDEB;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AGM_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_AGEGROMESURE;
PROCEDURE U_AGEGROMESURE(
        NACTID AGEGROMESURE.ACTID%TYPE,
        SAGMCODE AGEGROMESURE.AGMCODE%TYPE,
        SAGMNATURE AGEGROMESURE.AGMNATURE%TYPE,
        DTAGMDTDEB AGEGROMESURE.AGMDTDEB%TYPE,
        DTAGMDTFIN AGEGROMESURE.AGMDTFIN%TYPE,
        SDEVCODE AGEGROMESURE.DEVCODE%TYPE,
        NAGMMT AGEGROMESURE.AGMMT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            AGEGROMESURE
        SET
            DEVCODE  = SDEVCODE
          , AGMMT    = NAGMMT
          , AGMDTFIN = DTAGMDTFIN
        WHERE
            AGMNATURE    = SAGMNATURE
            AND AGMCODE  = SAGMCODE
            AND AGMDTDEB = DTAGMDTDEB
            AND ACTID    = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AGM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AGM_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_AGEGROMESURE;
-- ACTPERIMETRE --
PROCEDURE I_ACTPERIMETRE(
        NACTID ACTPERIMETRE.ACTID%TYPE,
        SAPECODE ACTPERIMETRE.APECODE%TYPE,
        NAPEORDER ACTPERIMETRE.APEORDER%TYPE,
		DTAPEDTDEB ACTPERIMETRE.APEDTDEB%TYPE,
        DTAPEDTFIN ACTPERIMETRE.APEDTFIN%TYPE,
        SAPECODETYPE ACTPERIMETRE.APECODETYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
nApeordermax ACTPERIMETRE.APEORDER%TYPE;
BEGIN
    BEGIN

	SELECT NVL(MAX(APEORDER),0)+1 INTO nApeordermax  FROM ACTPERIMETRE WHERE ACTID = NACTID;

        INSERT INTO ACTPERIMETRE
            (ACTID,APEORDER,APECODE, APEDTDEB, APEDTFIN, APECODETYPE
            ) VALUES
            (NACTID,nApeordermax, SAPECODE, DTAPEDTDEB, DTAPEDTFIN, SAPECODETYPE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APE_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APE_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPERIMETRE;
PROCEDURE U_ACTPERIMETRE
    (
        NACTID ACTPERIMETRE.ACTID%TYPE,
        SAPECODE ACTPERIMETRE.APECODE%TYPE,
        NAPEORDER ACTPERIMETRE.APEORDER%TYPE,
        DTAPEDTFIN ACTPERIMETRE.APEDTFIN%TYPE,
        SAPECODETYPE ACTPERIMETRE.APECODETYPE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE ACTPERIMETRE SET APEDTFIN = DTAPEDTFIN, APECODETYPE = SAPECODETYPE WHERE ACTID = NACTID AND APEORDER = NAPEORDER AND APECODE = SAPECODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APE_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPERIMETRE;
PROCEDURE D_ACTPERIMETRE(
        NACTID ACTPERIMETRE.ACTID%TYPE,
        SAPECODE ACTPERIMETRE.APECODE%TYPE,
        NAPEORDER ACTPERIMETRE.APEORDER%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPERIMETRE WHERE ACTID = NACTID AND APECODE = SAPECODE AND APEORDER = NAPEORDER ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APE_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ACTPERIMETRE;
PROCEDURE U_ACTRIB(
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID RIB.RIBID%TYPE,
        NRIBIDREMPLACE ACTRIB.RIBIDREMPLACE%TYPE,
        DTARIDTREMPLACE ACTRIB.ARIDTREMPLACE%TYPE,
        NCREID ACTRIB.CREID%TYPE,
        NRIBIDINTERMEDIATE ACTRIB.RIBIDINTERMEDIATE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTRIB
        SET
            RIBIDREMPLACE     = NRIBIDREMPLACE
          , ARIDTREMPLACE     = DTARIDTREMPLACE
          , RIBIDINTERMEDIATE = NRIBIDINTERMEDIATE
          , CREID             = NCREID
        WHERE
            ACTID        = NACTID
            AND RIBID    = NRIBID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARI_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRIB;
PROCEDURE U_ACTRIBTMPDEFAUT(
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID RIB.RIBID%TYPE,
        SATDTYPE ACTRIBTMPDEFAUT.ATDTYPE%TYPE,
        STMPCODE ACTRIBTMPDEFAUT.TMPCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE ACTRIBTMPDEFAUT SET RIBID = NRIBID WHERE ACTID = NACTID AND ATDTYPE = SATDTYPE AND TMPCODE = STMPCODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ATD_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRIBTMPDEFAUT;
-- AROAGE --
PROCEDURE I_ACTAROAGE(
        NACTID AROAGE.ACTID%TYPE,
        SROLCODE AROAGE.ROLCODE%TYPE,
        NACTIDGESTION AROAGE.ACTIDGESTION%TYPE,
        DTAAGDTVALID AROAGE.AAGDTVALID%TYPE,
        STMPCODE AROAGE.TMPCODE%TYPE,
        SAAGDELAIPMT AROAGE.AAGDELAIPMT%TYPE,
        SAAGBASEDEPART AROAGE.AAGBASEDEPART%TYPE,
        NAAGJOUR AROAGE.AAGJOUR%TYPE,
        NTCIID AROAGE.TCIID%TYPE,
        STAXCODE AROAGE.TAXCODE%TYPE,
        NRUBID AROAGE.RUBID%TYPE,
        NAAGFLAGIRFACTURE AROAGE.AAGFLAGIRFACTURE%TYPE,
        NAAGFLAGIRFACSEPARE AROAGE.AAGFLAGIRFACSEPARE%TYPE,
        NAAGFLAGIRCHQ AROAGE.AAGFLAGIRCHQ%TYPE,
        NAAGFMTIRMINIMAL AROAGE.AAGFMTIRMINIMAL%TYPE,
        NAAGMTIRFORFAIT AROAGE.AAGMTIRFORFAIT%TYPE,
        NAAGTXIRPLANCHER AROAGE.AAGTXIRPLANCHER%TYPE,
        NAAGTXIRPLAFOND AROAGE.AAGTXIRPLAFOND%TYPE,
        DTAAGDTFIN AROAGE.AAGDTFIN%TYPE,
        NAAGPCTESCOMPTE AROAGE.AAGPCTESCOMPTE%TYPE,
        NAAGIRMARGE AROAGE.AAGIRMARGE%TYPE,
        NAAGIRTXFIXE AROAGE.AAGIRTXFIXE%TYPE,
        SAAGBLOCAGERELANCE AROAGE.AAGBLOCAGERELANCE%TYPE,
        STMPCODEENC AROAGE.TMPCODEENC%TYPE, --CV-19062001
        NAAGTVIDPLAFOND AROAGE.FTVIDPLAFOND%TYPE, --LG 08/11/2002
        NAAGTVIDPLANCHER AROAGE.FTVIDPLANCHER%TYPE, --LG 08/11/2002
        SAAGMOTIFNONRELANCE AROAGE.AAGMOTIFNONRELANCE%TYPE,
        SAAGENVOINOTICE AROAGE.AAGENVOINOTICE%TYPE,
        SAAGDELAIPMTENC AROAGE.AAGDELAIPMTENC%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        SAAGREF ACTROLE.AROREFEXTERNE%TYPE;
        NANNEEEXIST   NUMBER;
        NMOISEXIST    NUMBER;
        NNUMERO       NUMBER;
        DTSAMPLE      DATE;
        SACTIDGESTION NUMBER;
    BEGIN
        NANNEEEXIST   := 0;
        NMOISEXIST    := 0;
        NNUMERO       := - 1;
        DTSAMPLE      := NULL;
        SACTIDGESTION := NULL;
        SAAGREF       := NULL;
        PA_COMMON.S_NUMEROFORMATE('AROPREFEXTERNE', SACTIDGESTION, 'AROPREFEXTERNE', DTSAMPLE, NANNEEEXIST, NMOISEXIST, NNUMERO, SAAGREF) ;
        INSERT
        INTO
            AROAGE
            (
                ACTID
              , ROLCODE
              , ACTIDGESTION
              , AAGDTVALID
              , TMPCODE
              , AAGDELAIPMT
              , AAGBASEDEPART
              , AAGJOUR
              , TCIID
              , TAXCODE
              , RUBID
              , AAGFLAGIRFACTURE
              , AAGFLAGIRFACSEPARE
              , AAGFLAGIRCHQ
              , AAGFMTIRMINIMAL
              , AAGMTIRFORFAIT
              , AAGTXIRPLANCHER
              , AAGTXIRPLAFOND
              , AAGDTFIN
              , AAGPCTESCOMPTE
              , AAGIRMARGE
              , AAGIRTXFIXE
              , AAGBLOCAGERELANCE
              , TMPCODEENC
              , -- CV-19062001
                FTVIDPLAFOND
              , FTVIDPLANCHER
              , AAGMOTIFNONRELANCE
              , AAGENVOINOTICE
              , AAGREFEXTERNE
              , AAGDELAIPMTENC
            )
            VALUES
            (
                NACTID
              , SROLCODE
              , NACTIDGESTION
              , NVL(DTAAGDTVALID, SYSDATE)
              , STMPCODE
              , SAAGDELAIPMT
              , SAAGBASEDEPART
              , NAAGJOUR
              , NTCIID
              , STAXCODE
              , NRUBID
              , NAAGFLAGIRFACTURE
              , NAAGFLAGIRFACSEPARE
              , NAAGFLAGIRCHQ
              , NAAGFMTIRMINIMAL
              , NAAGMTIRFORFAIT
              , NAAGTXIRPLANCHER
              , NAAGTXIRPLAFOND
              , DTAAGDTFIN
              , NAAGPCTESCOMPTE
              , NAAGIRMARGE
              , NAAGIRTXFIXE
              , SAAGBLOCAGERELANCE
              , STMPCODEENC
              , -- CV-19062001
                NAAGTVIDPLAFOND
              , NAAGTVIDPLANCHER
              , SAAGMOTIFNONRELANCE
              , SAAGENVOINOTICE
              , SAAGREF
              , SAAGDELAIPMTENC
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        ELSE
            UPDATE ACTROLE SET AROREFEXTERNE = SAAGREF WHERE ACTID = NACTID AND ROLCODE = SROLCODE;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTAROAGE;
PROCEDURE D_AROAGE(
        NACTID AROAGE.ACTID%TYPE,
        SROLCODE AROAGE.ROLCODE%TYPE,
        NACTIDGESTION AROAGE.ACTIDGESTION%TYPE,
        DTAAGDTVALID AROAGE.AAGDTVALID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM AROAGERELANCE WHERE ACTID = NACTID AND ROLCODE = SROLCODE AND ACTIDGESTION = NACTIDGESTION;
        DELETE FROM AAGRVE WHERE ACTID = NACTID AND ROLCODE = SROLCODE AND ACTIDGESTION = NACTIDGESTION AND AAGDTVALID = DTAAGDTVALID;
        DELETE FROM AROAGE WHERE ACTID = NACTID AND ROLCODE = SROLCODE AND ACTIDGESTION = NACTIDGESTION AND AAGDTVALID = DTAAGDTVALID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AAG_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_AROAGE;
PROCEDURE U_ACTAROAGE(
        NACTID AROAGE.ACTID%TYPE,
        SROLCODE AROAGE.ROLCODE%TYPE,
        NACTIDGESTION AROAGE.ACTIDGESTION%TYPE,
        DTAAGDTVALID AROAGE.AAGDTVALID%TYPE,
        STMPCODE AROAGE.TMPCODE%TYPE,
        SAAGDELAIPMT AROAGE.AAGDELAIPMT%TYPE,
        SAAGBASEDEPART AROAGE.AAGBASEDEPART%TYPE,
        NAAGJOUR AROAGE.AAGJOUR%TYPE,
        NTCIID AROAGE.TCIID%TYPE,
        STAXCODE AROAGE.TAXCODE%TYPE,
        NRUBID AROAGE.RUBID%TYPE,
        NAAGFLAGIRFACTURE AROAGE.AAGFLAGIRFACTURE%TYPE,
        NAAGFLAGIRFACSEPARE AROAGE.AAGFLAGIRFACSEPARE%TYPE,
        NAAGFLAGIRCHQ AROAGE.AAGFLAGIRCHQ%TYPE,
        NAAGFMTIRMINIMAL AROAGE.AAGFMTIRMINIMAL%TYPE,
        NAAGMTIRFORFAIT AROAGE.AAGMTIRFORFAIT%TYPE,
        NAAGTXIRPLANCHER AROAGE.AAGTXIRPLANCHER%TYPE,
        NAAGTXIRPLAFOND AROAGE.AAGTXIRPLAFOND%TYPE,
        DTAAGDTFIN AROAGE.AAGDTFIN%TYPE, -- TD 30/03/01
        NAAGPCTESCOMPTE AROAGE.AAGPCTESCOMPTE%TYPE,
        NAAGIRMARGE AROAGE.AAGIRMARGE%TYPE,
        NAAGIRTXFIXE AROAGE.AAGIRTXFIXE%TYPE,
        SAAGBLOCAGERELANCE AROAGE.AAGBLOCAGERELANCE%TYPE,
        STMPCODEENC AROAGE.TMPCODEENC%TYPE, -- CV-19062001
        NAAGTVIDPLAFOND AROAGE.FTVIDPLAFOND%TYPE, --LG 08/11/2002
        NAAGTVIDPLANCHER AROAGE.FTVIDPLANCHER%TYPE, --LG 08/11/2002
        SAAGMOTIFNONRELANCE AROAGE.AAGMOTIFNONRELANCE%TYPE,
        SAAGENVOINOTICE AROAGE.AAGENVOINOTICE%TYPE,
        SAAGDELAIPMTENC AROAGE.AAGDELAIPMTENC%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            AROAGE
        SET
            TMPCODE            = STMPCODE
          , AAGDELAIPMT        = SAAGDELAIPMT
          , AAGBASEDEPART      = SAAGBASEDEPART
          , AAGJOUR            = NAAGJOUR
          , TCIID              = NTCIID
          , TAXCODE            = STAXCODE
          , RUBID              = NRUBID
          , AAGFLAGIRFACTURE   = NAAGFLAGIRFACTURE
          , AAGFLAGIRFACSEPARE = NAAGFLAGIRFACSEPARE
          , AAGFLAGIRCHQ       = NAAGFLAGIRCHQ
          , AAGFMTIRMINIMAL    = NAAGFMTIRMINIMAL
          , AAGMTIRFORFAIT     = NAAGMTIRFORFAIT
          , AAGTXIRPLANCHER    = NAAGTXIRPLANCHER
          , AAGTXIRPLAFOND     = NAAGTXIRPLAFOND
          , AAGDTFIN           = DTAAGDTFIN
          , AAGPCTESCOMPTE     = NAAGPCTESCOMPTE
          , AAGIRMARGE         = NAAGIRMARGE
          , AAGIRTXFIXE        = NAAGIRTXFIXE
          , AAGBLOCAGERELANCE  = SAAGBLOCAGERELANCE
          , TMPCODEENC         = STMPCODEENC
          , FTVIDPLAFOND       = NAAGTVIDPLAFOND
          , FTVIDPLANCHER      = NAAGTVIDPLANCHER
          , AAGMOTIFNONRELANCE = SAAGMOTIFNONRELANCE
          , AAGENVOINOTICE     = SAAGENVOINOTICE
          , AAGDELAIPMTENC     = SAAGDELAIPMTENC
        WHERE
            ACTID            = NACTID
            AND ROLCODE      = SROLCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND AAGDTVALID   = NVL(DTAAGDTVALID, SYSDATE) ;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTAROAGE;
PROCEDURE I_ACTEXERCICE(
        NACTID ACTEXERCICE.ACTID%TYPE,
        NAEXEXERCICE ACTEXERCICE.AEXEXERCICE%TYPE,
        SDEVCODE ACTEXERCICE.DEVCODE%TYPE,
        NAEXANNEEDEB ACTEXERCICE.AEXANNEEDEB%TYPE,
        NAEXMOISDEB ACTEXERCICE.AEXMOISDEB%TYPE,
        NAEXANNEEFIN ACTEXERCICE.AEXANNEEFIN%TYPE,
        NAEXMOISFIN ACTEXERCICE.AEXMOISFIN%TYPE,
        DTAEXDTSAISIE ACTEXERCICE.AEXDTSAISIE%TYPE,
        DTAEXDTCLOTURE ACTEXERCICE.AEXDTCLOTURE%TYPE,
        NAEXNBMOISOUVERT ACTEXERCICE.AEXNBMOISOUVERT%TYPE,
        NAEXPCTRECUPTVAP ACTEXERCICE.AEXPCTRECUPTVAP%TYPE,
        NAEXPCTRECUPTVAD ACTEXERCICE.AEXPCTRECUPTVAD%TYPE,
        SAEXTYPECLOTURE ACTEXERCICE.AEXTYPECLOTURE%TYPE, --hn 09/05/03
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTEXERCICE
            (
                ACTID
              , AEXEXERCICE
              , DEVCODE
              , AEXANNEEDEB
              , AEXMOISDEB
              , AEXANNEEFIN
              , AEXMOISFIN
              , AEXDTSAISIE
              , AEXDTCLOTURE
              , AEXNBMOISOUVERT
              , AEXPCTRECUPTVAP
              , AEXTYPECLOTURE
              , --hn 09/05/03
                AEXPCTRECUPTVAD
            )
            VALUES
            (
                NACTID
              , NAEXEXERCICE
              , SDEVCODE
              , NAEXANNEEDEB
              , NAEXMOISDEB
              , NAEXANNEEFIN
              , NAEXMOISFIN
              , DTAEXDTSAISIE
              , DTAEXDTCLOTURE
              , NAEXNBMOISOUVERT
              , NAEXPCTRECUPTVAP
              , SAEXTYPECLOTURE
              , --hn 09/05/03
                NAEXPCTRECUPTVAD
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTEXERCICE;
PROCEDURE U_ACTEXERCICE
    (
        NACTID ACTEXERCICE.ACTID%TYPE,
        NAEXEXERCICE ACTEXERCICE.AEXEXERCICE%TYPE,
        SDEVCODE ACTEXERCICE.DEVCODE%TYPE,
        NAEXANNEEDEB ACTEXERCICE.AEXANNEEDEB%TYPE,
        NAEXMOISDEB ACTEXERCICE.AEXMOISDEB%TYPE,
        NAEXANNEEFIN ACTEXERCICE.AEXANNEEFIN%TYPE,
        NAEXMOISFIN ACTEXERCICE.AEXMOISFIN%TYPE,
        DTAEXDTSAISIE ACTEXERCICE.AEXDTSAISIE%TYPE,
        DTAEXDTCLOTURE ACTEXERCICE.AEXDTCLOTURE%TYPE,
        NAEXNBMOISOUVERT ACTEXERCICE.AEXNBMOISOUVERT%TYPE,
        NAEXPCTRECUPTVAP ACTEXERCICE.AEXPCTRECUPTVAP%TYPE,
        NAEXPCTRECUPTVAD ACTEXERCICE.AEXPCTRECUPTVAD%TYPE,
        SAEXTYPECLOTURE ACTEXERCICE.AEXTYPECLOTURE%TYPE, --hn 09/05/3
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTEXERCICE
        SET
            AEXANNEEDEB    = NAEXANNEEDEB
          , AEXMOISDEB     = NAEXMOISDEB
          , AEXANNEEFIN    = NAEXANNEEFIN
          , AEXMOISFIN     = NAEXMOISFIN
          , AEXDTSAISIE    = DTAEXDTSAISIE
          , AEXDTCLOTURE   = DTAEXDTCLOTURE
          , AEXTYPECLOTURE = SAEXTYPECLOTURE
          , -- hn 09/05/03
            DEVCODE         = SDEVCODE
          , AEXNBMOISOUVERT = NAEXNBMOISOUVERT
          , AEXPCTRECUPTVAP = NAEXPCTRECUPTVAP
          , AEXPCTRECUPTVAD = NAEXPCTRECUPTVAD
        WHERE
            ACTID           = NACTID
            AND AEXEXERCICE = NAEXEXERCICE;
        NRETURNCODE        := 0;
        IF SQL%ROWCOUNT     = 0 THEN
            NRETURNCODE    := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AEX_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AEX_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AEX_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTEXERCICE;
PROCEDURE D_AEXTAXE(
        NACTID ACTEXERCICE.ACTID%TYPE,
        NAEXEXERCICE ACTEXERCICE.AEXEXERCICE%TYPE,
        NATAORDRE AEXTAXE.ATAORDRE%TYPE,
        NCRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DELETE FROM AEXTAXE WHERE ACTID = NACTID AND AEXEXERCICE = NAEXEXERCICE AND ATAORDRE = NATAORDRE;
EXCEPTION
WHEN OTHERS THEN
    NCRETURNCODE := - 1 * SQLCODE ;
END D_AEXTAXE;
/* PROCEDURE D_ACTEXERCICE (
nActId ACTEXERCICE.ACTID%TYPE,
nAexExercice ACTEXERCICE.AEXEXERCICE%TYPE,
nReturnCode IN OUT NUMBER) AS
BEGIN
DECLARE
dtAexDtDeb DATE;
dtAexDtFin DATE;
nCroGenere NUMBER;
ERR_CROTROUVE EXCEPTION;
ERR_GESTCRO EXCEPTION;
nCount NUMBER;
nAexMoisDebTemp ACTEXERCICE.AEXMOISDEB%TYPE;
nAexAnneeDebTemp ACTEXERCICE.AEXANNEEDEB%TYPE;
nAexMoisFinTemp ACTEXERCICE.AEXMOISFIN%TYPE;
nAexAnneeFinTemp ACTEXERCICE.AEXANNEEFIN%TYPE;
nCReturnCode NUMBER;
BEGIN
BEGIN
SELECT AEXMOISDEB,
AEXANNEEDEB,
AEXMOISFIN,
AEXANNEEFIN
INTO   nAexMoisDebTemp,
nAexAnneeDebTemp,
nAexMoisFinTemp,
nAexAnneeFinTemp
FROM   ACTEXERCICE
WHERE  ACTID = nActId
AND AEXEXERCICE = nAexExercice;
EXCEPTION
WHEN OTHERS THEN
nAexMoisDebTemp := NULL;
nAexAnneeDebTemp := NULL;
nAexMoisFinTemp := NULL;
nAexAnneeFinTemp := NULL;
END;
-- Les tests ne sont possibles que si on est capable de construire une date de debut, ainsi q'une date de fin
IF ( nAexMoisDebTemp IS NOT NULL ) AND ( nAexAnneeDebTemp IS NOT NULL )
AND ( nAexMoisFinTemp IS NOT NULL ) AND ( nAexAnneeFinTemp IS NOT NULL ) THEN
-- On construit les dates de debut et de fin de l'exercice a supprimer --
SELECT TO_DATE ( TO_CHAR ( 1 )||'/' || TO_CHAR( nAexMoisDebTemp ) || '/' || TO_CHAR( nAexAnneeDebTemp ), 'dd/mm/yyyy' )
INTO   dtAexDtDeb
FROM   DUAL;
SELECT LAST_DAY ( TO_DATE ( TO_CHAR ( 1 )||'/' || TO_CHAR ( nAexMoisFinTemp ) || '/' || TO_CHAR ( nAexAnneeFinTemp ), 'dd/mm/yyyy' ) )
INTO   dtAexDtFin
FROM   DUAL;
-- On verifie que aucun cro n'a ete genere sur l'exercice a supprimer --
PA_COMMON.S_ISCROGENERE ( nActId,
dtAexDtDeb,
dtAexDtFin,
nCroGenere );
IF nCroGenere = 1 THEN
RAISE ERR_CROTROUVE;
END IF;
-- Il faut maintenant verifier qu'il n'y a pas d'instances en attente de validation avec une date de compta comprise --
-- dans l'exercice a supprimer --
SELECT COUNT (*)
INTO   nCount
FROM   DEPENSE DEP,
DEPPHASE DPH
WHERE  DEP.ACTIDGESTION = nActId
AND DEP.DEPDTCOMPTA >= dtAexDtDeb
AND DEP.DEPDTCOMPTA <= dtAexDtFin
AND DEP.DEPID = DPH.DEPID
AND DPH.DPHDTFIN IS NULL
AND ( DPH.PHACODE = 'INI'
OR ( DPH.PHACODE = 'VALIDE'
AND DPH.JALCODE = 'ABPT' ) );
IF nCount = 0 THEN
SELECT COUNT (*)
INTO   nCount
FROM   IMMOTRANCHE ITR,
ITRRUBRIQUE IRU,
ITRRUBPHASE IRP
WHERE  ITR.ACTID = nActId
AND ITR.ITRID = IRU.ITRID
AND IRU.ITRID = IRP.ITRID
AND IRU.IRUORDRE = IRP.IRUORDRE
AND IRP.IRPDTFIN IS NULL
AND IRP.PHACODE = 'INI'
AND IRP.IRPDTEFFET >= dtAexDtDeb
AND IRP.IRPDTEFFET <= dtAexDtFin;
IF nCount = 0 THEN
SELECT COUNT (*)
INTO   nCount
FROM   REGLEMENT
WHERE  ( REGFLAGVALID IS NULL
OR REGFLAGVALID = 0 )
AND ACTID = nActId
AND REGDTREGLT >= dtAexDtDeb
AND REGDTREGLT <= dtAexDtFin;
IF nCount != 0 THEN
RAISE ERR_GESTCRO;
END IF;
ELSE
RAISE ERR_GESTCRO;
END IF;
ELSE
RAISE ERR_GESTCRO;
END IF;
--Delete the data from child table AEXTAXE
DELETE FROM AEXTAXE WHERE ACTID = nActId AND AEXEXERCICE = nAexExercice;
DELETE FROM  ACTEXERCICE
WHERE ACTID = nActId
AND AEXEXERCICE = nAexExercice;
nReturnCode := 0;
IF SQL%ROWCOUNT=0 or nCReturnCode  is not null THEN
nReturnCode := ERR_NO_ROWS_CONST;
END IF;
-- Si un des champs servant a construire la date est NULL, on supprime sauvagement la ligne d'exercice comptable sans se poser
-- de questions ( normalement, ce cas ne devrait plus se produire des l'instauration de nouveaux controles PL/SQL sur les champs
-- concernant l'exercice comptable )
ELSE
--Delete the data from child table AEXTAXE
DELETE FROM AEXTAXE WHERE ACTID = nActId AND AEXEXERCICE = nAexExercice;
DELETE FROM  ACTEXERCICE
WHERE ACTID = nActId
AND AEXEXERCICE = nAexExercice;
nReturnCode := 0;
IF SQL%ROWCOUNT=0 or nCReturnCode is not null THEN
nReturnCode := ERR_NO_ROWS_CONST;
END IF;
END IF;
EXCEPTION
WHEN ERR_CHILD_FOUND THEN
nReturnCode := ERR_CHILD_AEX_FOUND_CONST;
WHEN ERR_CROTROUVE THEN
nReturnCode := ERR_CRO_EXISTANT_CONST;
WHEN ERR_GESTCRO THEN
nReturnCode := ERR_CRO_GEST_ANO;
END;
END D_ACTEXERCICE; */
-- ACTRIB2 --
PROCEDURE I_ACTRIB2(
        NACTID ACTEUR.ACTID%TYPE,
        NRIB IN OUT RIB.RIBID%TYPE,
        SBGUBANQUE RIB.BGUBANQUE%TYPE,
        SBGUGUICHET RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE RIB.RIBCOMPTE%TYPE,
        SRIBCLE RIB.RIBCLE%TYPE,
        SRIBINTITULE RIB.RIBINTITULE%TYPE,
        NRINDELAIP RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB ACTRIB.ARIDTDEB%TYPE,
        NRIBIBANCLE RIB.RIBIBANCLE%TYPE, -- CV-26112002 FSA-10616
        SRIBIBANCOMPTE RIB.RIBIBANCOMPTE%TYPE, -- CV-26112002 FSA-10616
        SBGUGUICHETINVARIANT RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG
		SPAYCODE 			 BANQUEGUICHET.PAYCODE%TYPE,
		SDEVCODE RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE IN OUT ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE RIB.RIBACCOUNTTYPE%TYPE,
        NACTIDOWNER RIB.ACTIDOWNER%TYPE,
        --
        SBGUBANQUEINTERMEDIATE RIB.BGUBANQUE%TYPE,
        SBGUGUICHETINTERMEDIATE RIB.BGUGUICHET%TYPE,
        SRIBCOMPTEINTERMEDIATE RIB.RIBCOMPTE%TYPE,
        SRIBCLEINTERMEDIATE RIB.RIBCLE%TYPE,
        SRIBINTITULEINTERMEDIATE RIB.RIBINTITULE%TYPE,
        NRINDELAIPINTERMEDIATE RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE RIBINFO.RINFORCEVIR%TYPE,
        NRIBIBANCLEINTERMEDIATE RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTEINTERMEDIATE RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVINTERMEDIATE RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE RIB.RIBACCOUNTTYPE%TYPE,
        NACTIDOWNERINTERMEDIATE RIB.ACTIDOWNER%TYPE,
        NRIBFLAGVIRTUAL RIB.RIBFLAGVIRTUAL%TYPE,
        SARICODEBANK ACTRIB.ARICODEBANK%TYPE,
        SARIDACOM ACTRIB.ARIDACOM %TYPE,
        SARIDACOM2 ACTRIB.ARIDACOM2%TYPE,
        SARIPWD ACTRIB.ARIPWD%TYPE,
        DTARIDTVALIDATE ACTRIB.ARIDTVALIDATE%TYPE,
		SBGUCODEINTERBANCAIRE BANQUEGUICHET.BGUCODEINTERBANCAIRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NOK NUMBER;
        NNUMNUMERO NUMERO.NUMNUMERO%TYPE;
        NBGUACCOUNTMAX BANQUEGUICHET.BGUACCOUNTMAX%TYPE;
        SACCOUNTFORMAT BANQUEGUICHET.BGUACCOUNTFORMAT%TYPE;
        --nNewRibFlagVirtual removed from declaration
        --nNewRibFlagVirtual RIB.RIBFLAGVIRTUAL%TYPE;
        SNEWRIBCOMPTE RIB.RIBCOMPTE%TYPE := SRIBCOMPTE;
        SNEWRIBCLE RIB.RIBCLE%TYPE       := SRIBCLE;
        NVIRTUALCOUNT NUMBER             := 0;
    BEGIN
        -- SQL query to calculate flag has been commented as this value will now be coming as an arguement
        -- BEGIN
        --       SELECT NVL(BGUFLAGVIRTUAL,0) INTO nBguFlagVirtual
        --       FROM BANQUEGUICHET
        --       WHERE BGUBANQUE = sBguBanque AND BGUGUICHET = sBguGuichet;
        --    EXCEPTION
        --       WHEN OTHERS THEN
        --           nBguFlagVirtual := 0;
        --  END;
        NRETURNCODE := 0;
        BEGIN
            IF SNEWRIBCOMPTE  IS NULL AND NRIBFLAGVIRTUAL = 1 THEN
                NNUMNUMERO    := F_GETNUMNUMERO(SBGUBANQUE||'#'||SBGUGUICHET) ;
                IF NNUMNUMERO IS NULL THEN
                    SELECT BGUACCOUNTMIN INTO NNUMNUMERO FROM BANQUEGUICHET WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET;
                    IF NNUMNUMERO IS NULL THEN
                        RAISE NO_DATA_FOUND;
                    ELSE
                        INSERT INTO NUMERO
                            (NUMCIBLE, NUMANNEE, NUMMOIS, NUMNUMERO
                            ) VALUES
                            (SBGUBANQUE||'#'|| SBGUGUICHET, 0, 0, NNUMNUMERO
                            ) ;
                    END IF;
                END IF;
                SELECT BGUACCOUNTMAX INTO NBGUACCOUNTMAX FROM BANQUEGUICHET WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET;
                IF NNUMNUMERO    > NBGUACCOUNTMAX THEN
                    NRETURNCODE := ERR_NUMNUMERO_TOOBIG;
                ELSE
                    SELECT BGUACCOUNTFORMAT INTO SACCOUNTFORMAT FROM BANQUEGUICHET WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET;
                    IF SACCOUNTFORMAT IS NULL THEN
                        RAISE NO_DATA_FOUND;
                    ELSE
                        IF SACCOUNTFORMAT LIKE '9%' THEN
                            SNEWRIBCOMPTE := LPAD(TO_CHAR(NNUMNUMERO), LENGTH(SACCOUNTFORMAT), '0') ;
                        ELSE
                            SNEWRIBCOMPTE := TO_CHAR(NNUMNUMERO) ;
                        END IF;
                    END IF;
                END IF;
            END IF;
            SNEWRIBCLE := NVL(SNEWRIBCLE, 0) ;
       EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
        IF NRETURNCODE = 0 THEN
            PA_COMMON.S_TPALOGIQUE('ACTEUR', 'RIBINTERMEDIATE', NOK) ;
            IF NOK = 1 THEN
                -- RibIdLie
                IF SRIBCOMPTEINTERMEDIATE IS NOT NULL AND SRIBCLEINTERMEDIATE IS NOT NULL THEN
                    BEGIN
                        SELECT
                            MIN(RIBID)
                        INTO
                            NRIBIDINTERMEDIATE
                        FROM
                            RIB
                        WHERE
                            BGUBANQUE          = SBGUBANQUEINTERMEDIATE
                            AND BGUGUICHET     = SBGUGUICHETINTERMEDIATE
                            AND RIBCOMPTE      = SRIBCOMPTEINTERMEDIATE
                            AND RIBCLE         = SRIBCLEINTERMEDIATE;
                        IF NRIBIDINTERMEDIATE IS NULL THEN
                            RAISE NO_DATA_FOUND;
                        END IF;
                   EXCEPTION
                    WHEN NO_DATA_FOUND THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                    END;
                    IF NRETURNCODE = ERR_NO_ROWS_CONST THEN
                        BEGIN
                            I_RIB(SBGUBANQUEINTERMEDIATE, SBGUGUICHETINTERMEDIATE, SRIBCOMPTEINTERMEDIATE, SRIBCLEINTERMEDIATE, SRIBINTITULEINTERMEDIATE, NRIBIDINTERMEDIATE, NRIBIBANCLEINTERMEDIATE, SRIBIBANCOMPTEINTERMEDIATE,
                            SBGUGUICHETINVINTERMEDIATE, SDEVCODEINTERMEDIATE, SPAYCODE, SRIBACCOUNTTYPEINTERMEDIATE, NACTIDOWNERINTERMEDIATE, NRIBFLAGVIRTUAL, NULL, NRETURNCODE) ;
                            IF NRETURNCODE = 0 THEN
                                BEGIN
                                    I_RIBINFO(NRIBIDINTERMEDIATE, NRINDELAIPINTERMEDIATE, NRINDELAIVINTERMEDIATE, NRINVALREMHPINTERMEDIATE, NRINVALREMSPINTERMEDIATE, NRINVALVIRINTERMEDIATE, NRINVALPRLINTERMEDIATE, NRINVALCHQINTERMEDIATE,
                                    NRINFORCEPRLINTERMEDIATE, NRINFORCEVIRINTERMEDIATE, NRETURNCODE) ;
                                END;
                            END IF;
                        END;
                    END IF;
                END IF;
            END IF;
            BEGIN
                --bd10102000         modif BIL 11112000
                SELECT
                    MIN(RIBID)
                INTO
                    NRIB
                FROM
                    RIB
                WHERE
                    BGUBANQUE      = SBGUBANQUE
                    AND BGUGUICHET = SBGUGUICHET
                    AND RIBCOMPTE  = SNEWRIBCOMPTE
                    AND RIBCLE     = SNEWRIBCLE; -- Report CV-17092004 FSA-16061 -> FSA-16449
                --bd10102000
                IF NRIB         IS NULL THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                    --RAISE NO_DATA_FOUND;
                END IF;
            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END;
            IF NRETURNCODE != ERR_NO_ROWS_CONST THEN
                BEGIN
					UPDATE RIB SET DEVCODE = SDEVCODE WHERE RIBID = NRIB;
                    I_ACTRIB(NACTID, NRIB, NULL, NULL, NULL, SARITYPE, DTARIDTDEB, NRIBIDINTERMEDIATE, SARICODEBANK, SARIDACOM, SARIDACOM2, SARIPWD, DTARIDTVALIDATE, NRETURNCODE) ;
					-- CV-27032017 NLSCUAT-4005
					IF NRETURNCODE = 0 THEN
						U_RIB(NRIB, SRIBINTITULE, SBGUGUICHETINVARIANT, SDEVCODE, SRIBACCOUNTTYPE, NRETURNCODE) ;
					END IF;	
                END;
            ELSE
                BEGIN
                    I_RIB(SBGUBANQUE, SBGUGUICHET, SNEWRIBCOMPTE, SNEWRIBCLE, SRIBINTITULE, NRIB, NRIBIBANCLE, -- CV-26112002 FSA-10616
                    SRIBIBANCOMPTE, -- CV-26112002 FSA-10616
                    SBGUGUICHETINVARIANT, -- CV-29062005 FSA-12995 SG
                    SDEVCODE, SPAYCODE, SRIBACCOUNTTYPE, NACTIDOWNER, NRIBFLAGVIRTUAL, SBGUCODEINTERBANCAIRE, NRETURNCODE) ;
                    IF NRETURNCODE = 0 THEN
                        BEGIN
                            I_RIBINFO(NRIB, NRINDELAIP, NRINDELAIV, NRINVALREMHP, NRINVALREMSP, NRINVALVIR, NRINVALPRL, NRINVALCHQ, NRINFORCEPRL, NRINFORCEVIR, NRETURNCODE) ;
                            IF NRETURNCODE = 0 THEN
                                BEGIN
                                    I_ACTRIB(NACTID, NRIB, NULL, NULL, NULL, SARITYPE, DTARIDTDEB, NRIBIDINTERMEDIATE, SARICODEBANK, SARIDACOM, SARIDACOM2, SARIPWD, DTARIDTVALIDATE, NRETURNCODE) ;
                                END;
                            END IF;
                        END;
                    END IF;
                END;
            END IF;
        END IF;
        SELECT COUNT(BVIACCOUNT) INTO NVIRTUALCOUNT FROM BGUVIRTUAL WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET AND BVIACCOUNT = SNEWRIBCOMPTE;
        IF NVIRTUALCOUNT > 0 THEN
            UPDATE BGUVIRTUAL SET BVIFLAGUSED = 1, BVIDTSTART = SYSDATE() WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET AND BVIACCOUNT = SNEWRIBCOMPTE;
        END IF;
    END ;
    -- Riblie
END I_ACTRIB2;
-- ACTPROCEDURE --
PROCEDURE I_ACTPROCEDURE(
        NACTID ACTPROCEDURE.ACTID%TYPE,
        NAPRORDRE ACTPROCEDURE.APRORDRE%TYPE,
        SAPRNUM ACTPROCEDURE.APRNUM%TYPE,
        SAPRTYPE ACTPROCEDURE.APRTYPE%TYPE,
        DTAPRDTDEB ACTPROCEDURE.APRDTDEB%TYPE,
        NCREID ACTPROCEDURE.CREID%TYPE,
        DTAPRDTFIN ACTPROCEDURE.APRDTFIN%TYPE,
        NAPRFLAGDEMANDEUR ACTPROCEDURE.APRFLAGDEMANDEUR%TYPE,
        SAPRTYPETRIBUNAL ACTPROCEDURE.APRTYPETRIBUNAL%TYPE,
        SAPRNIVEAURISQUE ACTPROCEDURE.APRNIVEAURISQUE%TYPE,
        SAPRMEMOFAIT ACTPROCEDURE.APRMEMOFAIT%TYPE,
        SAPRTRANSACTION ACTPROCEDURE.APRTRANSACTION%TYPE,
        SAPRTYPEMISSION ACTPROCEDURE.APRTYPEMISSION %TYPE,
        SAPRMEMOACCEDIT ACTPROCEDURE.APRMEMOACCEDIT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NMAX   NUMBER;
        NCOUNT NUMBER;
    BEGIN
        SELECT COUNT( *) INTO NCOUNT FROM TUSPARAM TUS WHERE TUS.TUPCODE = SAPRTYPE AND TUS.TUSNOM = 'TYPROCIND';
        IF NCOUNT < 1 THEN
            SELECT MAX(APRORDRE) INTO NMAX FROM ACTPROCEDURE WHERE ACTID = NACTID AND APRORDRE < NAPRORDRE;
            IF NMAX != 0 THEN
                UPDATE ACTPROCEDURE SET APRDTFIN = GREATEST(DTAPRDTDEB - 1, APRDTDEB) WHERE ACTID = NACTID AND APRORDRE = NMAX;
            END IF;
        END IF;
        INSERT
        INTO
            ACTPROCEDURE
            (
                ACTID
              , APRORDRE
              , APRNUM
              , APRTYPE
              , APRDTDEB
              , CREID
              , APRDTFIN
              , APRFLAGDEMANDEUR
              , APRTYPETRIBUNAL
              , APRNIVEAURISQUE
              , APRMEMOFAIT
              , APRTRANSACTION
              , APRTYPEMISSION
              , APRMEMOACCEDIT
            )
            VALUES
            (
                NACTID
              , NAPRORDRE
              , SAPRNUM
              , SAPRTYPE
              , DTAPRDTDEB
              , NCREID
              , DTAPRDTFIN
              , NAPRFLAGDEMANDEUR
              , SAPRTYPETRIBUNAL
              , SAPRNIVEAURISQUE
              , SAPRMEMOFAIT
              , SAPRTRANSACTION
              , SAPRTYPEMISSION
              , SAPRMEMOACCEDIT
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APR_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APR_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APR_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APR_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPROCEDURE;
-- ACTPROCEDURE --
PROCEDURE U_ACTPROCEDURE
    (
        NACTID ACTPROCEDURE.ACTID%TYPE,
        NAPRORDRE ACTPROCEDURE.APRORDRE%TYPE,
        SAPRNUM ACTPROCEDURE.APRNUM%TYPE,
        SAPRTYPE ACTPROCEDURE.APRTYPE%TYPE,
        DTAPRDTDEB ACTPROCEDURE.APRDTDEB%TYPE,
        NCREID ACTPROCEDURE.CREID%TYPE,
        DTAPRDTFIN ACTPROCEDURE.APRDTFIN%TYPE,
        NAPRFLAGDEMANDEUR ACTPROCEDURE.APRFLAGDEMANDEUR%TYPE,
        SAPRTYPETRIBUNAL ACTPROCEDURE.APRTYPETRIBUNAL%TYPE,
        SAPRNIVEAURISQUE ACTPROCEDURE.APRNIVEAURISQUE%TYPE,
        SAPRMEMOFAIT ACTPROCEDURE.APRMEMOFAIT%TYPE,
        SAPRTRANSACTION ACTPROCEDURE.APRTRANSACTION%TYPE,
        SAPRTYPEMISSION ACTPROCEDURE.APRTYPEMISSION %TYPE,
        SAPRMEMOACCEDIT ACTPROCEDURE.APRMEMOACCEDIT%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTPROCEDURE
        SET
            APRNUM           = SAPRNUM
          , APRTYPE          = SAPRTYPE
          , APRDTDEB         = DTAPRDTDEB
          , CREID            = NCREID
          , APRDTFIN         = DTAPRDTFIN
          , APRFLAGDEMANDEUR = NAPRFLAGDEMANDEUR
          , APRTYPETRIBUNAL  = SAPRTYPETRIBUNAL
          , APRNIVEAURISQUE  = SAPRNIVEAURISQUE
          , APRMEMOFAIT      = SAPRMEMOFAIT
          , APRTRANSACTION   = SAPRTRANSACTION
          , APRTYPEMISSION   = SAPRTYPEMISSION
          , APRMEMOACCEDIT   = SAPRMEMOACCEDIT
        WHERE
            ACTID        = NACTID
            AND APRORDRE = NAPRORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APR_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APR_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APR_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APR_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPROCEDURE;
PROCEDURE D_ACTPROCEDURE(
        NACTID ACTEUR.ACTID%TYPE,
        NAPRORDRE ACTPROCEDURE.APRORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPROPHAAUDIENCE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
        DELETE FROM ACTPROPHASE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
        DELETE FROM ACTPROAGE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
        DELETE FROM ACTPROMANDAT WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
        DELETE FROM ACTPROJUGEMENT WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
        DELETE FROM ACTPROCEDURE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ADR_FOUND_CONST;
    END;
END D_ACTPROCEDURE;
-- ACTPROJUGEMENT --
PROCEDURE I_ACTPROJUGEMENT(
        NACTID ACTPROJUGEMENT.ACTID%TYPE,
        NAPRORDRE ACTPROJUGEMENT.APRORDRE%TYPE,
        SAPJTYPE ACTPROJUGEMENT.APJTYPE%TYPE,
        DTAPJDTDEB ACTPROJUGEMENT.APJDTDEB%TYPE,
        NAPJDUREEAN ACTPROJUGEMENT.APJDUREEAN%TYPE,
        NAPJDUREEMOIS ACTPROJUGEMENT.APJDUREEMOIS%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTPROJUGEMENT
            (
                ACTID
              , APRORDRE
              , APJTYPE
              , APJDTDEB
              , APJDUREEAN
              , APJDUREEMOIS
            )
            VALUES
            (
                NACTID
              , NAPRORDRE
              , SAPJTYPE
              , DTAPJDTDEB
              , NAPJDUREEAN
              , NAPJDUREEMOIS
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APJ_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPROJUGEMENT;
PROCEDURE U_ACTPROJUGEMENT
    (
        NACTID ACTPROJUGEMENT.ACTID%TYPE,
        NAPRORDRE ACTPROJUGEMENT.APRORDRE%TYPE,
        SAPJTYPE ACTPROJUGEMENT.APJTYPE%TYPE,
        DTAPJDTDEB ACTPROJUGEMENT.APJDTDEB%TYPE,
        NAPJDUREEAN ACTPROJUGEMENT.APJDUREEAN%TYPE,
        NAPJDUREEMOIS ACTPROJUGEMENT.APJDUREEMOIS%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTPROJUGEMENT
        SET
            APJDTDEB     = DTAPJDTDEB
          , APJDUREEAN   = NAPJDUREEAN
          , APJDUREEMOIS = NAPJDUREEMOIS
        WHERE
            ACTID        = NACTID
            AND APRORDRE = NAPRORDRE
            AND APJTYPE  = SAPJTYPE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APJ_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPROJUGEMENT;
PROCEDURE D_ACTPROJUGEMENT(
        NACTID ACTPROJUGEMENT.ACTID%TYPE,
        NAPRORDRE ACTPROJUGEMENT.APRORDRE%TYPE,
        SAPJTYPE ACTPROJUGEMENT.APJTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPROJUGEMENT WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APJTYPE = SAPJTYPE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APJ_FOUND_CONST;
    END;
END D_ACTPROJUGEMENT;
-- ACPROMANDAT --
PROCEDURE I_ACTPROMANDAT(
        NACTID ACTPROMANDAT.ACTID%TYPE,
        NAPRORDRE ACTPROMANDAT.APRORDRE%TYPE,
        SAPMTYPE ACTPROMANDAT.APMTYPE%TYPE,
        NACTIDMANDAT ACTPROMANDAT.ACTIDMANDAT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT INTO ACTPROMANDAT
            (ACTID, APRORDRE, ACTIDMANDAT, APMTYPE
            ) VALUES
            (NACTID, NAPRORDRE, NACTIDMANDAT, SAPMTYPE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APM_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPROMANDAT;
PROCEDURE D_ACTPROMANDAT
    (
        NACTID ACTPROMANDAT.ACTID%TYPE,
        NAPRORDRE ACTPROMANDAT.APRORDRE%TYPE,
        SAPMTYPE ACTPROMANDAT.APMTYPE%TYPE,
        NACTIDMANDAT ACTPROMANDAT.ACTIDMANDAT%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE FROM ACTPROMANDAT WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND ACTIDMANDAT = NACTIDMANDAT AND APMTYPE = SAPMTYPE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APM_FOUND_CONST;
    END;
END D_ACTPROMANDAT;
-- ACTRIB2 --
PROCEDURE U_ACTRIB2(
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID RIB.RIBID%TYPE,
        SRIBINTITULE RIB.RIBINTITULE%TYPE,
        NRINBRDCHQSP RIBINFO.RINBRDCHQSP%TYPE,
        NRINBRDVIR RIBINFO.RINBRDVIR%TYPE,
        NRINBRDPRL RIBINFO.RINBRDPRL%TYPE,
        NRINBRDCHQHP RIBINFO.RINBRDCHQHP%TYPE,
        NRINDELAIP RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB ACTRIB.ARIDTDEB%TYPE,
        SBGUGUICHETINVARIANT RIB.BGUGUICHETINVARIANT%TYPE, -- CV-29062005 FSA-12995 SG Report FSA-20300
        SDEVCODE RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE RIB.RIBACCOUNTTYPE%TYPE,
        --
        SRIBINTITULEINTERMEDIATE RIB.RIBINTITULE%TYPE,
        NRINBRDCHQSPINTERMEDIATE RIBINFO.RINBRDCHQSP%TYPE,
        NRINBRDVIRINTERMEDIATE RIBINFO.RINBRDVIR%TYPE,
        NRINBRDPRLINTERMEDIATE RIBINFO.RINBRDPRL%TYPE,
        NRINBRDCHQHPINTERMEDIATE RIBINFO.RINBRDCHQHP%TYPE,
        NRINDELAIPINTERMEDIATE RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE RIBINFO.RINFORCEVIR%TYPE,
        SBGUGUICHETINVINTERMEDIATE RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT  NUMBER;
        NNEWRIB NUMBER;
        NOK     NUMBER;
    BEGIN
        NRETURNCODE := 0;
        PA_COMMON.S_TPALOGIQUE('ACTEUR', 'RIBINTERMEDIATE', NOK) ;
        IF NOK = 1 THEN
            U_RIB(NRIBIDINTERMEDIATE, SRIBINTITULEINTERMEDIATE, SBGUGUICHETINVINTERMEDIATE, SDEVCODEINTERMEDIATE, SRIBACCOUNTTYPEINTERMEDIATE, NRETURNCODE) ;
            IF NRETURNCODE       = 0 THEN
                IF SQL%ROWCOUNT  = 0 THEN
                    NRETURNCODE := ERR_NO_ROWS_CONST;
                END IF;
                IF NRETURNCODE != ERR_NO_ROWS_CONST THEN
                    SELECT COUNT( *) INTO NCOUNT FROM RIBINFO WHERE RIBID = NRIBIDINTERMEDIATE;
                    IF NCOUNT != 0 THEN
                        UPDATE
                            RIBINFO
                        SET
                            RINBRDCHQSP = NRINBRDCHQSPINTERMEDIATE
                          , RINBRDVIR   = NRINBRDVIRINTERMEDIATE
                          , RINBRDPRL   = NRINBRDPRLINTERMEDIATE
                          , RINBRDCHQHP = NRINBRDCHQHPINTERMEDIATE
                          , RINDELAIP   = NRINDELAIPINTERMEDIATE
                          , RINDELAIV   = NRINDELAIVINTERMEDIATE
                          , RINVALREMHP = NRINVALREMHPINTERMEDIATE
                          , RINVALREMSP = NRINVALREMSPINTERMEDIATE
                          , RINVALPRL   = NRINVALPRLINTERMEDIATE
                          , RINVALVIR   = NRINVALVIRINTERMEDIATE
                          , RINVALCHQ   = NRINVALCHQINTERMEDIATE
                          , RINFORCEPRL = NRINFORCEPRLINTERMEDIATE
                          , RINFORCEVIR = NRINFORCEVIRINTERMEDIATE
                        WHERE
                            RIBID        = NRIBIDINTERMEDIATE;
                        IF SQL%ROWCOUNT  = 0 THEN
                            NRETURNCODE := ERR_NO_ROWS_CONST;
                        END IF;
                    ELSE
                        INSERT
                        INTO
                            RIBINFO
                            (
                                RIBID
                              , RINBRDCHQSP
                              , RINBRDVIR
                              , RINBRDPRL
                              , RINBRDCHQHP
                              , RINDELAIP
                              , RINDELAIV
                              , RINVALREMHP
                              , RINVALREMSP
                              , RINVALVIR
                              , RINVALPRL
                              , RINVALCHQ
                              , RINFORCEPRL
                              , RINFORCEVIR
                            )
                            VALUES
                            (
                                NRIBIDINTERMEDIATE
                              , NRINBRDCHQSPINTERMEDIATE
                              , NRINBRDVIRINTERMEDIATE
                              , NRINBRDPRLINTERMEDIATE
                              , NRINBRDCHQHPINTERMEDIATE
                              , NRINDELAIPINTERMEDIATE
                              , NRINDELAIVINTERMEDIATE
                              , NRINVALREMHPINTERMEDIATE
                              , NRINVALREMSPINTERMEDIATE
                              , NRINVALVIRINTERMEDIATE
                              , NRINVALPRLINTERMEDIATE
                              , NRINVALCHQINTERMEDIATE
                              , NRINFORCEPRLINTERMEDIATE
                              , NRINFORCEVIRINTERMEDIATE
                            ) ;
                    END IF;
                END IF;
            END IF;
        END IF;
        U_RIB(NRIBID, SRIBINTITULE, SBGUGUICHETINVARIANT, SDEVCODE, SRIBACCOUNTTYPE, NRETURNCODE) ;
        -- UPDATE RIB
        -- SET    RIBINTITULE   = sRibIntitule
        -- WHERE  RIBID = nRibId;
        -- IF SQL%ROWCOUNT=0 THEN
        --    nReturnCode := ERR_NO_ROWS_CONST;
        -- END IF;
        -- IF nReturnCode != ERR_NO_ROWS_CONST THEN
        IF NRETURNCODE = 0 THEN
            UPDATE ACTRIB SET ARITYPE = SARITYPE, ARIDTDEB = DTARIDTDEB, RIBIDINTERMEDIATE = NRIBIDINTERMEDIATE WHERE ACTID = NACTID AND RIBID = NRIBID;
            --PAV4_TRACE.DEBUG ( 'Update ACTRIB reussi' );
            IF SQL%ROWCOUNT  = 0 THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
                --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour ACTRIB' );
            END IF;
            IF NRETURNCODE != ERR_NO_ROWS_CONST THEN
                SELECT COUNT( *) INTO NCOUNT FROM RIBINFO WHERE RIBID = NRIBID;
                IF NCOUNT != 0 THEN
                    UPDATE
                        RIBINFO
                    SET
                        RINBRDCHQSP = NRINBRDCHQSP
                      , RINBRDVIR   = NRINBRDVIR
                      , RINBRDPRL   = NRINBRDPRL
                      , RINBRDCHQHP = NRINBRDCHQHP
                      , RINDELAIP   = NRINDELAIP
                      , RINDELAIV   = NRINDELAIV
                      , RINVALREMHP = NRINVALREMHP
                      , RINVALREMSP = NRINVALREMSP
                      , RINVALPRL   = NRINVALPRL
                      , RINVALVIR   = NRINVALVIR
                      , RINVALCHQ   = NRINVALCHQ
                      , RINFORCEPRL = NRINFORCEPRL
                      , RINFORCEVIR = NRINFORCEVIR
                    WHERE
                        RIBID = NRIBID;
                    --PAV4_TRACE.DEBUG ( 'Update RIBINFO reussi' );
                    IF SQL%ROWCOUNT  = 0 THEN
                        NRETURNCODE := ERR_NO_ROWS_CONST;
                        --PAV4_TRACE.DEBUG ( 'Passage dans ROWCOUNT = 0 pour RIBINFO' );
                    END IF;
                    -- MP 240801
                ELSE
                    INSERT
                    INTO
                        RIBINFO
                        (
                            RIBID
                          , RINBRDCHQSP
                          , RINBRDVIR
                          , RINBRDPRL
                          , RINBRDCHQHP
                          , RINDELAIP
                          , RINDELAIV
                          , RINVALREMHP
                          , RINVALREMSP
                          , RINVALVIR
                          , RINVALPRL
                          , RINVALCHQ
                          , RINFORCEPRL
                          , RINFORCEVIR
                        )
                        VALUES
                        (
                            NRIBID
                          , NRINBRDCHQSP
                          , NRINBRDVIR
                          , NRINBRDPRL
                          , NRINBRDCHQHP
                          , NRINDELAIP
                          , NRINDELAIV
                          , NRINVALREMHP
                          , NRINVALREMSP
                          , NRINVALVIR
                          , NRINVALPRL
                          , NRINVALCHQ
                          , NRINFORCEPRL
                          , NRINFORCEVIR
                        ) ;
                END IF;
            END IF;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARI_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARI_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARI_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARI_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRIB2;
-- AROAGERELANCE --
/* PROCEDURE I_AROAGERELANCE(
nActId         AROAGERELANCE.ACTID%TYPE,
sRolCode       AROAGERELANCE.ROLCODE%TYPE,
nActIdGestion  AROAGERELANCE.ACTIDGESTION%TYPE,
nAarOrdre      AROAGERELANCE.AARORDRE%TYPE,
dtAarDtDeb     AROAGERELANCE.AARDTDEB%TYPE,
dtAarDtFin     AROAGERELANCE.AARDTFIN%TYPE,
sAarRelCode    AROAGERELANCE.AARRELCODE%TYPE,
sAarBloCode    AROAGERELANCE.AARBLOCODE%TYPE,
nAarMt         AROAGERELANCE.AARMT%TYPE,
sDevCode       AROAGERELANCE.DEVCODE%TYPE,
dtAarDtTrait   AROAGERELANCE.AARDTTRAIT%TYPE,
nAarTraitId    AROAGERELANCE.AARTRAITID%TYPE,            -- CV-18062003 FSA-12499
nReturnCode    IN OUT NUMBER) AS
BEGIN
DECLARE
sAprType          ACTPROCEDURE.APRTYPE%TYPE;
sImpCode          IMPAYE.IMPCODE%TYPE;
nIMPFLAGDOUTEUX   IMPAYE.IMPFLAGDOUTEUX%TYPE;
nMaxAveOrdre      AAGRVE.AVEORDRE%TYPE;
nCount            NUMBER;
dtAagDtValid      AROAGE.AAGDTVALID%TYPE;
nTbaId            NUMBER;
BEGIN
-- td FSA 14515
IF nAarTraitId IS NULL THEN
PA_UPDATETBATCH.I_TBATCH (
nTbaId,
'RELANCE',
dtAarDtDeb,
'-s' || nActIdGestion || ' INSERTION VIA CASSIOPEE',
NULL,
0,
NULL,
nReturnCode);
ELSE
nTbaId := nAarTraitId;
END if;
INSERT INTO AROAGERELANCE ( ACTID,
ROLCODE,
ACTIDGESTION,
AARORDRE,
AARDTDEB,
AARDTFIN,
AARRELCODE,
AARBLOCODE,
AARMT,
DEVCODE,
AARDTTRAIT,
AARTRAITID )
VALUES                    ( nActId,
sRolCode,
nActIdGestion,
nAarOrdre,
dtAarDtDeb,
dtAarDtFin,
sAarRelCode,
sAarBloCode,
nAarMt,
sDevCode,
dtAarDtTrait,
nAarTraitId );
nReturnCode := 0;
IF SQL%ROWCOUNT = 0 THEN
nReturnCode := ERR_NO_ROWS_CONST;
END IF;
-- Mise a jour des codes d'impayes --
-- Recherche de la procedure dans laquelle se trouve actuellement l'acteur --
BEGIN
SELECT APRTYPE
INTO   sAprType
FROM   ACTPROCEDURE
WHERE  ACTID = nActId
AND APRDTDEB = ( SELECT MAX ( APRDTDEB )
FROM   ACTPROCEDURE
WHERE  ACTID = nActId
AND APRDTDEB < dtAarDtDeb );
EXCEPTION
WHEN NO_DATA_FOUND THEN
sAprType := NULL;
END;
IF sAprType IS NOT NULL THEN
BEGIN
-- On Cherche le code d'impaye a inserer --
BEGIN
SELECT IMPCODE, NVL(IMPFLAGDOUTEUX,0)
INTO   sImpCode, nIMPFLAGDOUTEUX
FROM   IMPAYE
WHERE  ACTID      = nActIdGestion
AND  IMPRELCODE = sAarRelCode
AND  IMPPROJUD  = sAprType;
EXCEPTION
WHEN NO_DATA_FOUND THEN
sImpCode := NULL;
END;
IF sImpCode IS NOT NULL THEN
BEGIN
-- On verifie que l'attribut actuel de l'acteur n'est pas deja celui que l'on veut inserer --
SELECT COUNT (*)
INTO   nCount
FROM   AAGRVE
WHERE  ACTID        = nActId
AND  ROLCODE      = sRolCode
AND  ACTIDGESTION = nActIdGestion
AND  AVEDTFIN    IS NULL
AND  RVACODE      = 'IMPAYES'
AND  RVVCODE      = sImpCode;
IF nCount = 0 THEN
BEGIN
SELECT AAGDTVALID
INTO   dtAagDtValid
FROM   AROAGE
WHERE  ACTID        = nActId
AND  ACTIDGESTION = nActIdGestion
AND  ROLCODE      = sRolCode
AND  AAGDTVALID  <= dtAarDtDeb
AND  ( ( AAGDTFIN IS NULL ) OR ( dtAarDtDeb <= AAGDTFIN ) );
-- On met a jour le dernier attribut de l'acteur --
UPDATE AAGRVE
SET    AVEDTFIN = GREATEST( AVEDTDEB, dtAarDtDeb - 1 )
WHERE  ACTID            = nActId
AND ROLCODE      = sRolCode
AND ACTIDGESTION = nActIdGestion
AND RVACODE      = 'IMPAYES'
AND AVEDTFIN    IS NULL;
SELECT MAX(AVEORDRE)
INTO   nMaxAveOrdre
FROM   AAGRVE
WHERE  ACTIDGESTION = nActIdGestion
AND  ACTID    = nActId
AND  ROLCODE  = sRolCode
AND  RVACODE  = 'IMPAYES';
nMaxAveOrdre := NVL( nMaxAveOrdre, 0 );
INSERT INTO AAGRVE
( ACTIDGESTION,
ACTID       ,
ROLCODE     ,
AAGDTVALID  ,
RVACODE     ,
AVEORDRE    ,
AVEDTDEB    ,
AVEDTFIN    ,
DEVCODE     ,
RVVCODE)
VALUES (nActIdGestion,
nActId,
sRolCode,
dtAagDtValid,
'IMPAYES',
nMaxAveOrdre + 1,
dtAarDtDeb,
NULL,
NULL,
sImpCode);
END;
END IF;
END;
END IF;
END;
END IF;
EXCEPTION
WHEN ERR_PARENT_NOT_FOUND THEN
nReturnCode := ERR_PARENT_AAR_FOUND_CONST;
WHEN DUP_VAL_ON_INDEX THEN
nReturnCode := ERR_DUP_VAL_ON_APJ_CONST;
WHEN ERR_U_NULL_MANDATORY_KEY THEN
nReturnCode := ERR_VAL_APJ_NULL_CONST;
WHEN ERR_I_NULL_MANDATORY_KEY THEN
nReturnCode := ERR_VAL_APJ_NULL_CONST;
WHEN OTHERS THEN
nReturnCode := -1 * SQLCODE;
END;
END I_AROAGERELANCE; */
PROCEDURE U_AROAGERELANCE
    (
        NACTID AROAGERELANCE.ACTID%TYPE,
        SROLCODE AROAGERELANCE.ROLCODE%TYPE,
        NACTIDGESTION AROAGERELANCE.ACTIDGESTION%TYPE,
        NAARORDRE AROAGERELANCE.AARORDRE%TYPE,
        DTAARDTDEB AROAGERELANCE.AARDTDEB%TYPE,
        DTAARDTFIN AROAGERELANCE.AARDTFIN%TYPE,
        SAARRELCODE AROAGERELANCE.AARRELCODE%TYPE,
        SAARBLOCODE AROAGERELANCE.AARBLOCODE%TYPE,
        NAARMT AROAGERELANCE.AARMT%TYPE,
        SDEVCODE AROAGERELANCE.DEVCODE%TYPE,
        DTAARDTTRAIT AROAGERELANCE.AARDTTRAIT%TYPE,
        NAARTRAITID AROAGERELANCE.AARTRAITID%TYPE, -- CV-18062003 FSA-12499
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            AROAGERELANCE
        SET
            AARDTDEB   = DTAARDTDEB
          , AARDTFIN   = DTAARDTFIN
          , AARRELCODE = SAARRELCODE
          , AARBLOCODE = SAARBLOCODE
          , AARMT      = NAARMT
          , DEVCODE    = SDEVCODE
          , AARDTTRAIT = DTAARDTTRAIT
          , AARTRAITID = NAARTRAITID -- CV-18062003 FSA-12499
        WHERE
            ACTID            = NACTID
            AND ROLCODE      = SROLCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND AARORDRE     = NAARORDRE;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AAR_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_AROAGERELANCE;
PROCEDURE D_AROAGERELANCE(
        NACTID AROAGERELANCE.ACTID%TYPE,
        SROLCODE AROAGERELANCE.ROLCODE%TYPE,
        NACTIDGESTION AROAGERELANCE.ACTIDGESTION%TYPE,
        NAARORDRE AROAGERELANCE.AARORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM AROAGERELANCE WHERE ACTID = NACTID AND ROLCODE = SROLCODE AND ACTIDGESTION = NACTIDGESTION AND AARORDRE = NAARORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AAR_FOUND_CONST;
    END;
END D_AROAGERELANCE;
/*
PROCEDURE F_DEBUG(
sNomFic VARCHAR2,
sBuffer VARCHAR2 ) AS
BEGIN
DECLARE
sTypeFichier SYS.UTL_FILE.file_type;
BEGIN
sTypeFichier := SYS.UTL_FILE.fopen( 'e:\dbdata\dbdev2\expdev2',
sNomFic,
'W');
SYS.UTL_FILE.put_line( sTypeFichier,
sBuffer );
SYS.UTL_FILE.fclose(sTypeFichier);
EXCEPTION
WHEN SYS.UTL_FILE.invalid_path THEN
--PAV4_TRACE.ERROR( 'Path invalide !!! ' );
NULL;
WHEN SYS.UTL_FILE.invalid_mode THEN
--PAV4_TRACE.ERROR ( 'Mode ouverture de fichier invalide !!! ' );
NULL;
WHEN SYS.UTL_FILE.invalid_operation THEN
--PAV4_TRACE.ERROR ( 'Fichier non ouvert !!! ' );
NULL;
END;
END F_DEBUG;
*/
-- AAGRVE --
PROCEDURE I_AAGRVE(
        NACTID AAGRVE.ACTID%TYPE,
        SROLCODE AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID AAGRVE.AAGDTVALID%TYPE,
        SRVACODE AAGRVE.RVACODE%TYPE,
        NAVEORDRE AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE AAGRVE.DEVCODE%TYPE,
        SRVVCODE AAGRVE.RVVCODE%TYPE,
        SAVEMOTIF AAGRVE.AVEMOTIF%TYPE, -- CV-23012004 FSA-13272
        NCREID AAGRVE.CREID%TYPE,
        NDOSID AAGRVE.DOSID%TYPE,
        NTBAID AAGRVE.TBAID%TYPE,
        LSAVEMEMO AAGRVE.AVEMEMO%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            AAGRVE
            (
                ACTID
              , ROLCODE
              , ACTIDGESTION
              , AAGDTVALID
              , RVACODE
              , AVEORDRE
              , AVEDTDEB
              , AVEDTFIN
              , AVEMTOBJECTIF
              , AVEMTREALISE
              , AVEMTATTRIBUT
              , AVEFLAGBLOQUANT
              , DEVCODE
              , RVVCODE
              , AVEMOTIF
              , CREID
              , DOSID
              , TBAID
              , AVEMEMO
            )
            VALUES
            (
                NACTID
              , SROLCODE
              , NACTIDGESTION
              , DTAAGDTVALID
              , SRVACODE
              , NAVEORDRE
              , DTAVEDTDEB
              , DTAVEDTFIN
              , NAVEMTOBJECTIF
              , NAVEMTREALISE
              , NAVEMTATTRIBUT
              , NAVEFLAGBLOQUANT
              , SDEVCODE
              , SRVVCODE
              , SAVEMOTIF
              , NCREID
              , NDOSID
              , NTBAID
              , LSAVEMEMO
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_AAGRVE;
PROCEDURE U_AAGRVE
    (
        NACTID AAGRVE.ACTID%TYPE,
        SROLCODE AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID AAGRVE.AAGDTVALID%TYPE,
        SRVACODE AAGRVE.RVACODE%TYPE,
        NAVEORDRE AAGRVE.AVEORDRE%TYPE,
        DTAVEDTDEB AAGRVE.AVEDTDEB%TYPE,
        DTAVEDTFIN AAGRVE.AVEDTFIN%TYPE,
        NAVEMTOBJECTIF AAGRVE.AVEMTOBJECTIF%TYPE,
        NAVEMTREALISE AAGRVE.AVEMTREALISE%TYPE,
        NAVEMTATTRIBUT AAGRVE.AVEMTATTRIBUT%TYPE,
        NAVEFLAGBLOQUANT AAGRVE.AVEFLAGBLOQUANT%TYPE,
        SDEVCODE AAGRVE.DEVCODE%TYPE,
        SRVVCODE AAGRVE.RVVCODE%TYPE,
        NCREID AAGRVE.CREID%TYPE,
        NDOSID AAGRVE.DOSID%TYPE,
        NTBAID AAGRVE.TBAID%TYPE,
        LSAVEMEMO AAGRVE.AVEMEMO%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            AAGRVE
        SET
            AVEDTDEB        = DTAVEDTDEB
          , AVEDTFIN        = DTAVEDTFIN
          , AVEMTOBJECTIF   = NAVEMTOBJECTIF
          , AVEMTREALISE    = NAVEMTREALISE
          , AVEMTATTRIBUT   = NAVEMTATTRIBUT
          , AVEFLAGBLOQUANT = NAVEFLAGBLOQUANT
          , DEVCODE         = SDEVCODE
          , RVVCODE         = SRVVCODE
          , CREID           = NCREID
          , DOSID           = NDOSID
          , TBAID           = NTBAID
          , AVEMEMO         = LSAVEMEMO
        WHERE
            ACTID            = NACTID
            AND ROLCODE      = SROLCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND AAGDTVALID   = DTAAGDTVALID
            AND RVACODE      = SRVACODE
            AND AVEORDRE     = NAVEORDRE;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AVE_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AVE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AVE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_AAGRVE;
PROCEDURE D_AAGRVE(
        NACTID AAGRVE.ACTID%TYPE,
        SROLCODE AAGRVE.ROLCODE%TYPE,
        NACTIDGESTION AAGRVE.ACTIDGESTION%TYPE,
        DTAAGDTVALID AAGRVE.AAGDTVALID%TYPE,
        SRVACODE AAGRVE.RVACODE%TYPE,
        NAVEORDRE AAGRVE.AVEORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE
        FROM
            AAGRVE
        WHERE
            ACTID            = NACTID
            AND ROLCODE      = SROLCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND AAGDTVALID   = DTAAGDTVALID
            AND RVACODE      = SRVACODE
            AND AVEORDRE     = NAVEORDRE;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AVE_FOUND_CONST;
    END;
END D_AAGRVE;
-- ACTSPECIALITE -- CV : Gestion des fournisseurs
PROCEDURE D_ACTSPECIALITE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPECIALITE.ASPCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        -- CV-29032001 FSA-5420
        DELETE FROM ACTSPEMETIER WHERE ACTID = NACTID AND ASPCODE = SASPCODE;
        DELETE FROM ACTSPECIALITE WHERE ACTID = NACTID AND ASPCODE = SASPCODE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ASP_FOUND_CONST;
    END;
END D_ACTSPECIALITE;
PROCEDURE I_ACTSPECIALITE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPECIALITE.ASPCODE%TYPE,
        NASPFLAGDEFAUT ACTSPECIALITE.ASPFLAGDEFAUT%TYPE,
        SASPAPPRECIATION ACTSPECIALITE.ASPAPPRECIATION%TYPE,
        NACTIDGESTION ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPECIALITE.AAGDTVALID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTSPECIALITE
            (
                ACTID
              , ASPCODE
              , ASPFLAGDEFAUT
              , ASPAPPRECIATION
              , ACTIDGESTION
              , ROLCODE
              , AAGDTVALID
            )
            VALUES
            (
                NACTID
              , SASPCODE
              , NASPFLAGDEFAUT
              , SASPAPPRECIATION
              , NACTIDGESTION
              , SROLCODE
              , DTAAGDTVALID
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ASP_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ASP_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSPECIALITE;
PROCEDURE U_ACTSPECIALITE
    (
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPECIALITE.ASPCODE%TYPE,
        NASPFLAGDEFAUT ACTSPECIALITE.ASPFLAGDEFAUT%TYPE,
        SASPAPPRECIATION ACTSPECIALITE.ASPAPPRECIATION%TYPE,
        NACTIDGESTION ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPECIALITE.AAGDTVALID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTSPECIALITE
        SET
            ASPCODE         = SASPCODE
          , ASPFLAGDEFAUT   = NASPFLAGDEFAUT
          , ASPAPPRECIATION = SASPAPPRECIATION
        WHERE
            ACTID            = NACTID
            AND ASPCODE      = SASPCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ASP_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ASP_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASP_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSPECIALITE;
-- ACTSPEMETIER -- CV : Gestion des fournisseurs
PROCEDURE D_ACTSPEMETIER(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPEMETIER.ASPCODE%TYPE,
        NACTIDGESTION ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPECIALITE.AAGDTVALID%TYPE,
        SASMCODE ACTSPEMETIER.ASMCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE
        FROM
            ACTSPEMETIER
        WHERE
            ACTID            = NACTID
            AND ASPCODE      = SASPCODE
            AND ASMCODE      = SASMCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ASM_FOUND_CONST;
    END;
END D_ACTSPEMETIER;
PROCEDURE I_ACTSPEMETIER(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPEMETIER.ASPCODE%TYPE,
        NACTIDGESTION ACTSPECIALITE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPECIALITE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPECIALITE.AAGDTVALID%TYPE,
        SASMCODE ACTSPEMETIER.ASMCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTSPEMETIER
            (
                ACTID
              , ASPCODE
              , ASMCODE
              , ACTIDGESTION
              , ROLCODE
              , AAGDTVALID
            )
            VALUES
            (
                NACTID
              , SASPCODE
              , SASMCODE
              , NACTIDGESTION
              , SROLCODE
              , DTAAGDTVALID
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ASM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ASM_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSPEMETIER;
/*PROCEDURE U_ACTSPEMETIER (
nActId           ACTEUR.ACTID%TYPE,
sAspCode         ACTSPEMETIER.ASPCODE%TYPE,
sAsmCode         ACTSPEMETIER.ASMCODE%TYPE,
nReturnCode   IN OUT NUMBER) AS
BEGIN
BEGIN
UPDATE ACTSPEMETIER
SET    ASMCODE = sAsmCode
WHERE  ACTID   = nActId
AND    ASPCODE = sAspCode
AND    ASMCODE = sAsmCode;
nReturnCode := 0;
IF SQL%ROWCOUNT=0 THEN
nReturnCode := ERR_NO_ROWS_CONST;
END IF;
EXCEPTION
WHEN ERR_PARENT_NOT_FOUND THEN
nReturnCode := ERR_PARENT_ASM_FOUND_CONST;
WHEN DUP_VAL_ON_INDEX THEN
nReturnCode := ERR_DUP_VAL_ON_ASM_CONST ;
WHEN ERR_U_NULL_MANDATORY_KEY THEN
nReturnCode := ERR_VAL_ASM_NULL_CONST;
WHEN ERR_I_NULL_MANDATORY_KEY THEN
nReturnCode := ERR_VAL_ASM_NULL_CONST;
WHEN OTHERS THEN
nReturnCode := -1 * SQLCODE;
END;
END U_ACTSPEMETIER;*/
-- ACTRAYONACTION -- CV : Gestion des fournisseurs
PROCEDURE D_ACTRAYONACTION
    (
        NACTID ACTEUR.ACTID%TYPE,
        NARAORDRE ACTRAYONACTION.ARAORDRE%TYPE,
        NACTIDGESTION ACTRAYONACTION.ACTIDGESTION%TYPE,
        SROLCODE ACTRAYONACTION.ROLCODE%TYPE,
        DTAAGDTVALID ACTRAYONACTION.AAGDTVALID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE
        FROM
            ACTRAYONACTION
        WHERE
            ACTID            = NACTID
            AND ARAORDRE     = NARAORDRE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ARA_FOUND_CONST;
    END;
END D_ACTRAYONACTION;
PROCEDURE I_ACTRAYONACTION(
        NACTID ACTEUR.ACTID%TYPE,
        NARAORDRE ACTRAYONACTION.ARAORDRE%TYPE,
        SARANIVEAU ACTRAYONACTION.ARANIVEAU%TYPE,
        SARASECTGEO ACTRAYONACTION.ARASECTGEO%TYPE,
        SASPCODE ACTRAYONACTION.ASPCODE%TYPE,
        NACTIDGESTION ACTRAYONACTION.ACTIDGESTION%TYPE,
        SROLCODE ACTRAYONACTION.ROLCODE%TYPE,
        DTAAGDTVALID ACTRAYONACTION.AAGDTVALID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTRAYONACTION
            (
                ACTID
              , ARAORDRE
              , ARANIVEAU
              , ARASECTGEO
              , ASPCODE
              , ACTIDGESTION
              , ROLCODE
              , AAGDTVALID
            )
            VALUES
            (
                NACTID
              , NARAORDRE
              , SARANIVEAU
              , SARASECTGEO
              , SASPCODE
              , NACTIDGESTION
              , SROLCODE
              , DTAAGDTVALID
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ARY_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARA_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTRAYONACTION;
PROCEDURE U_ACTRAYONACTION
    (
        NACTID ACTEUR.ACTID%TYPE,
        NARAORDRE ACTRAYONACTION.ARAORDRE%TYPE,
        SARANIVEAU ACTRAYONACTION.ARANIVEAU%TYPE,
        SARASECTGEO ACTRAYONACTION.ARASECTGEO%TYPE,
        SASPCODE ACTRAYONACTION.ASPCODE%TYPE,
        NACTIDGESTION ACTRAYONACTION.ACTIDGESTION%TYPE,
        SROLCODE ACTRAYONACTION.ROLCODE%TYPE,
        DTAAGDTVALID ACTRAYONACTION.AAGDTVALID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTRAYONACTION
        SET
            ARAORDRE   = NARAORDRE
          , ARANIVEAU  = SARANIVEAU
          , ARASECTGEO = SARASECTGEO
          , ASPCODE    = SASPCODE
        WHERE
            ACTID            = NACTID
            AND ARAORDRE     = NARAORDRE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ARY_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARA_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ARA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRAYONACTION;
-- PROCEDURE DE MAJ DE LA TABLE ADMINISTRATIF PAR BATCH DES RELANCES --
PROCEDURE U_ADMINISTRATIF(
        NTBAID ADMINISTRATIF.TBAID%TYPE,
        NFORID ADMINISTRATIF.FORID%TYPE,
        SROLCODE ADMINISTRATIF.ROLCODE%TYPE,
        DTADMDTEMIS ADMINISTRATIF.ADMDTEMIS%TYPE,
        SADMETAT ADMINISTRATIF.ADMETAT%TYPE,
		NRBOID IN  ADMINISTRATIF.RBOID%TYPE DEFAULT NULL,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        NRETURNCODE := 0;
        IF(NTBAID   IS NOT NULL) AND
            (
                DTADMDTEMIS IS NOT NULL
            )
            AND
            (
                SADMETAT IS NOT NULL
            )
            THEN
            IF(NFORID IS NOT NULL) AND
                (
                    SROLCODE IS NOT NULL
                )
                THEN
                UPDATE ADMINISTRATIF SET ADMCOMMENT = NULL, ADMDTEMIS = DTADMDTEMIS, ADMETAT = SADMETAT WHERE TBAID = NTBAID AND FORID = NFORID AND ROLCODE = SROLCODE;
            ELSE
                UPDATE ADMINISTRATIF SET ADMCOMMENT = NULL, ADMDTEMIS = DTADMDTEMIS, ADMETAT = SADMETAT WHERE TBAID = NTBAID;
            END IF;
            IF SQL%ROWCOUNT  = 0 THEN
                NRETURNCODE := ERR_NO_ROWS_CONST;
            END IF;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ADM_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADM_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADM_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ADMINISTRATIF;
PROCEDURE I_CODEPOSTAL(
        SPAYCODE CODEPOSTAL.PAYCODE%TYPE,
        SCPOCODE CODEPOSTAL.CPOCODE%TYPE,
        SCPOVILLE CODEPOSTAL.CPOVILLE%TYPE,
        SCPOSUBREGION CODEPOSTAL.CPOSUBREGION%TYPE,
        SMSACODE CODEPOSTAL.MSACODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT INTO CODEPOSTAL
            (PAYCODE, CPOCODE, CPOVILLE, CPOSUBREGION, MSACODE
            ) VALUES
            (SPAYCODE, SCPOCODE, SCPOVILLE, SCPOSUBREGION, SMSACODE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_CPO_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_CPO_CONST ;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_CPO_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_CODEPOSTAL;
PROCEDURE D_CODEPOSTAL
    (
        SPAYCODE CODEPOSTAL.PAYCODE%TYPE,
        SCPOCODE CODEPOSTAL.CPOCODE%TYPE,
        SCPOVILLE CODEPOSTAL.CPOVILLE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE FROM CODEPOSTAL WHERE PAYCODE = SPAYCODE AND CPOCODE = SCPOCODE AND CPOVILLE = SCPOVILLE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_CPO_FOUND_CONST;
    END;
END D_CODEPOSTAL;
-- ACTSECTGESTION -- CV 16012001
PROCEDURE D_ACTSECTGESTION(
        NACTID ACTEUR.ACTID%TYPE,
        SACTSECTGESTION ACTSECTGESTION.ACTSECTGESTION%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTSECTGESTION WHERE ACTID = NACTID AND ACTSECTGESTION = SACTSECTGESTION;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ASE_FOUND_CONST;
    END;
END D_ACTSECTGESTION;

PROCEDURE U_ACTSECTGESTION(
        NACTID ACTEUR.ACTID%TYPE,
        SACTSECTGESTION ACTSECTGESTION.ACTSECTGESTION%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
	DECLARE
		NCOUNT NUMBER := 0;
    BEGIN
		SELECT COUNT(*) INTO NCOUNT FROM ACTSECTGESTION WHERE ACTID = NACTID;
		IF NCOUNT > 0 THEN 
			UPDATE ACTSECTGESTION SET ACTSECTGESTION = SACTSECTGESTION WHERE ACTID = NACTID;

			IF SQL%ROWCOUNT  = 0 THEN
				NRETURNCODE := ERR_NO_ROWS_CONST;
			END IF;
		ELSE
			I_ACTSECTGESTION( NACTID, SACTSECTGESTION, NRETURNCODE );		
		END IF;

    EXCEPTION
		WHEN ERR_PARENT_NOT_FOUND THEN
			NRETURNCODE := ERR_PARENT_AAF_FOUND_CONST;
		WHEN DUP_VAL_ON_INDEX THEN
			NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST;
		WHEN ERR_U_NULL_MANDATORY_KEY THEN
			NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
		WHEN ERR_I_NULL_MANDATORY_KEY THEN
			NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
		WHEN OTHERS THEN
			NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSECTGESTION;

PROCEDURE I_ACTSECTGESTION(
        NACTID ACTEUR.ACTID%TYPE,
        SACTSECTGESTION ACTSECTGESTION.ACTSECTGESTION%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT INTO ACTSECTGESTION
            (ACTID, ACTSECTGESTION
            ) VALUES
            (NACTID, SACTSECTGESTION
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_ASG_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ASE_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ASE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSECTGESTION;
-- LKAARFEC --
PROCEDURE I_LKAARFEC
    (
        NACTID LKAARFEC.ACTID%TYPE,
        SROLCODE LKAARFEC.ROLCODE%TYPE,
        NACTIDGESTION LKAARFEC.ACTIDGESTION%TYPE,
        NAARORDRE LKAARFEC.AARORDRE%TYPE,
        NFACID LKAARFEC.FACID%TYPE,
        NFECORDRE LKAARFEC.FECORDRE%TYPE,
        SAAFBLOCODE LKAARFEC.AAFBLOCODE%TYPE,
        DTAAFDTDEB LKAARFEC.AAFDTDEB%TYPE,
        DTAAFDTFIN LKAARFEC.AAFDTFIN%TYPE,
        NAAFMTRELANCE LKAARFEC.AAFMTRELANCE%TYPE,
        NAAFTXDEVISE LKAARFEC.AAFTXDEVISE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        INSERT
        INTO
            LKAARFEC
            (
                ACTID
              , ROLCODE
              , ACTIDGESTION
              , AARORDRE
              , FACID
              , FECORDRE
              , AAFBLOCODE
              , AAFDTDEB
              , AAFDTFIN
              , AAFMTRELANCE
              , AAFTXDEVISE
            )
            VALUES
            (
                NACTID
              , SROLCODE
              , NACTIDGESTION
              , NAARORDRE
              , NFACID
              , NFECORDRE
              , SAAFBLOCODE
              , DTAAFDTDEB
              , DTAAFDTFIN
              , NAAFMTRELANCE
              , NAAFTXDEVISE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AAF_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_LKAARFEC;
PROCEDURE U_LKAARFEC
    (
        NACTID LKAARFEC.ACTID%TYPE,
        SROLCODE LKAARFEC.ROLCODE%TYPE,
        NACTIDGESTION LKAARFEC.ACTIDGESTION%TYPE,
        NAARORDRE LKAARFEC.AARORDRE%TYPE,
        NFACID LKAARFEC.FACID%TYPE,
        NFECORDRE LKAARFEC.FECORDRE%TYPE,
        SAAFBLOCODE LKAARFEC.AAFBLOCODE%TYPE,
        DTAAFDTDEB LKAARFEC.AAFDTDEB%TYPE,
        DTAAFDTFIN LKAARFEC.AAFDTFIN%TYPE,
        NAAFMTRELANCE LKAARFEC.AAFMTRELANCE%TYPE,
        NAAFTXDEVISE LKAARFEC.AAFTXDEVISE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            LKAARFEC
        SET
            AAFBLOCODE   = SAAFBLOCODE
          , AAFDTDEB     = DTAAFDTDEB
          , AAFDTFIN     = DTAAFDTFIN
          , AAFMTRELANCE = NAAFMTRELANCE
          , AAFTXDEVISE  = NAAFTXDEVISE
        WHERE
            ACTID            = NACTID
            AND ROLCODE      = SROLCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND AARORDRE     = NAARORDRE
            AND FACID        = NFACID
            AND FECORDRE     = NFECORDRE;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AAF_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AGE_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AGE_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_LKAARFEC;
PROCEDURE D_LKAARFEC(
        NACTID LKAARFEC.ACTID%TYPE,
        SROLCODE LKAARFEC.ROLCODE%TYPE,
        NACTIDGESTION LKAARFEC.ACTIDGESTION%TYPE,
        NAARORDRE LKAARFEC.AARORDRE%TYPE,
        NFACID LKAARFEC.FACID%TYPE,
        NFECORDRE LKAARFEC.FECORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE
        FROM
            LKAARFEC
        WHERE
            ACTID            = NACTID
            AND ROLCODE      = SROLCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND AARORDRE     = NAARORDRE
            AND FACID        = NFACID
            AND FECORDRE     = NFECORDRE;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_AAF_FOUND_CONST;
    END;
END D_LKAARFEC;
-- ACTPROAGE --
PROCEDURE D_ACTPROAGE(
        NACTID ACTPROAGE.ACTID%TYPE,
        NAPRORDRE ACTPROAGE.APRORDRE%TYPE,
        NACTIDGESTION ACTPROAGE.ACTIDGESTION%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPROAGE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND ACTIDGESTION = NACTIDGESTION;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APG_FOUND_CONST;
    END;
END D_ACTPROAGE;
PROCEDURE I_ACTPROAGE(
        NACTID ACTPROAGE.ACTID%TYPE,
        NAPRORDRE ACTPROAGE.APRORDRE%TYPE,
        NACTIDGESTION ACTPROAGE.ACTIDGESTION%TYPE,
        SDEVCODE ACTPROAGE.DEVCODE%TYPE,
        DTAPGDTCREANCE ACTPROAGE.APGDTCREANCE%TYPE,
        SAPGSOLUTION ACTPROAGE.APGSOLUTION%TYPE,
        NAPGMTTOTAL ACTPROAGE.APGMTTOTAL%TYPE,
        NAPGMTAVANCE ACTPROAGE.APGMTAVANCE%TYPE,
        NAPGMTECHU ACTPROAGE.APGMTECHU%TYPE,
        NAPGFLAGDOSSUITE ACTPROAGE.APGFLAGDOSSUITE%TYPE,
        NAPGFLAGBAILSUITE ACTPROAGE.APGFLAGBAILSUITE%TYPE,
        DTAPGDTREPRISECLE ACTPROAGE.APGDTREPRISECLE%TYPE,
        DTAPGDTDEMEURE ACTPROAGE.APGDTDEMEURE%TYPE,
        NAPGFLAGCONTESTE ACTPROAGE.APGFLAGCONTESTE%TYPE,
        NAPGFLAGADMISSION ACTPROAGE.APGFLAGADMISSION%TYPE,
        DTAPGDTADMISSION ACTPROAGE.APGDTADMISSION%TYPE,
        SAPGMEMO ACTPROAGE.APGMEMO%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTPROAGE
            (
                ACTID
              , APRORDRE
              , ACTIDGESTION
              , DEVCODE
              , APGDTCREANCE
              , APGSOLUTION
              , APGMTTOTAL
              , APGMTAVANCE
              , APGMTECHU
              , APGFLAGDOSSUITE
              , APGFLAGBAILSUITE
              , APGDTREPRISECLE
              , APGDTDEMEURE
              , APGFLAGCONTESTE
              , APGFLAGADMISSION
              , APGDTADMISSION
              , APGMEMO
            )
            VALUES
            (
                NACTID
              , NAPRORDRE
              , NACTIDGESTION
              , SDEVCODE
              , DTAPGDTCREANCE
              , SAPGSOLUTION
              , NAPGMTTOTAL
              , NAPGMTAVANCE
              , NAPGMTECHU
              , NAPGFLAGDOSSUITE
              , NAPGFLAGBAILSUITE
              , DTAPGDTREPRISECLE
              , DTAPGDTDEMEURE
              , NAPGFLAGCONTESTE
              , NAPGFLAGADMISSION
              , DTAPGDTADMISSION
              , SAPGMEMO
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APG_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APG_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APG_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPROAGE;
PROCEDURE U_ACTPROAGE
    (
        NACTID ACTPROAGE.ACTID%TYPE,
        NAPRORDRE ACTPROAGE.APRORDRE%TYPE,
        NACTIDGESTION ACTPROAGE.ACTIDGESTION%TYPE,
        SDEVCODE ACTPROAGE.DEVCODE%TYPE,
        DTAPGDTCREANCE ACTPROAGE.APGDTCREANCE%TYPE,
        SAPGSOLUTION ACTPROAGE.APGSOLUTION%TYPE,
        NAPGMTTOTAL ACTPROAGE.APGMTTOTAL%TYPE,
        NAPGMTAVANCE ACTPROAGE.APGMTAVANCE%TYPE,
        NAPGMTECHU ACTPROAGE.APGMTECHU%TYPE,
        NAPGFLAGDOSSUITE ACTPROAGE.APGFLAGDOSSUITE%TYPE,
        NAPGFLAGBAILSUITE ACTPROAGE.APGFLAGBAILSUITE%TYPE,
        DTAPGDTREPRISECLE ACTPROAGE.APGDTREPRISECLE%TYPE,
        DTAPGDTDEMEURE ACTPROAGE.APGDTDEMEURE%TYPE,
        NAPGFLAGCONTESTE ACTPROAGE.APGFLAGCONTESTE%TYPE,
        NAPGFLAGADMISSION ACTPROAGE.APGFLAGADMISSION%TYPE,
        DTAPGDTADMISSION ACTPROAGE.APGDTADMISSION%TYPE,
        SAPGMEMO ACTPROAGE.APGMEMO%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTPROAGE
        SET
            DEVCODE          = SDEVCODE
          , APGDTCREANCE     = DTAPGDTCREANCE
          , APGSOLUTION      = SAPGSOLUTION
          , APGMTTOTAL       = NAPGMTTOTAL
          , APGMTAVANCE      = NAPGMTAVANCE
          , APGMTECHU        = NAPGMTECHU
          , APGFLAGDOSSUITE  = NAPGFLAGDOSSUITE
          , APGFLAGBAILSUITE = NAPGFLAGBAILSUITE
          , APGDTREPRISECLE  = DTAPGDTREPRISECLE
          , APGDTDEMEURE     = DTAPGDTDEMEURE
          , APGFLAGCONTESTE  = NAPGFLAGCONTESTE
          , APGFLAGADMISSION = NAPGFLAGADMISSION
          , APGDTADMISSION   = DTAPGDTADMISSION
          , APGMEMO          = SAPGMEMO
        WHERE
            ACTID            = NACTID
            AND APRORDRE     = NAPRORDRE
            AND ACTIDGESTION = NACTIDGESTION;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APG_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APG_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APG_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPROAGE;
-- ACTPROPHASE --
PROCEDURE D_ACTPROPHASE(
        NACTID ACTPROPHASE.ACTID%TYPE,
        NAPRORDRE ACTPROPHASE.APRORDRE%TYPE,
        NAPPORDRE ACTPROPHASE.APPORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPROPHAAUDIENCE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APPORDRE = NAPPORDRE;
        DELETE FROM ACTPROPHASE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APPORDRE = NAPPORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APP_FOUND_CONST;
    END;
END D_ACTPROPHASE;
PROCEDURE I_ACTPROPHASE(
        NACTID ACTPROPHASE.ACTID%TYPE,
        NAPRORDRE ACTPROPHASE.APRORDRE%TYPE,
        NAPPORDRE ACTPROPHASE.APPORDRE%TYPE,
        SPHACODE ACTPROPHASE.PHACODE%TYPE,
        SPHADEST ACTPROPHASE.PHADEST%TYPE,
        SJALCODE ACTPROPHASE.JALCODE%TYPE,
        DTAPPDTDEB ACTPROPHASE.APPDTDEB%TYPE,
        DTAPPDTFIN ACTPROPHASE.APPDTFIN%TYPE,
        NCREID ACTPROPHASE.CREID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTPROPHASE
            (
                ACTID
              , APRORDRE
              , APPORDRE
              , PHACODE
              , PHADEST
              , JALCODE
              , APPDTDEB
              , APPDTFIN
              , CREID
            )
            VALUES
            (
                NACTID
              , NAPRORDRE
              , NAPPORDRE
              , SPHACODE
              , SPHADEST
              , SJALCODE
              , DTAPPDTDEB
              , DTAPPDTFIN
              , NCREID
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APP_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APP_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APP_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPROPHASE;
PROCEDURE U_ACTPROPHASE
    (
        NACTID ACTPROPHASE.ACTID%TYPE,
        NAPRORDRE ACTPROPHASE.APRORDRE%TYPE,
        NAPPORDRE ACTPROPHASE.APPORDRE%TYPE,
        SPHACODE ACTPROPHASE.PHACODE%TYPE,
        SPHADEST ACTPROPHASE.PHADEST%TYPE,
        SJALCODE ACTPROPHASE.JALCODE%TYPE,
        DTAPPDTDEB ACTPROPHASE.APPDTDEB%TYPE,
        DTAPPDTFIN ACTPROPHASE.APPDTFIN%TYPE,
        NCREID ACTPROPHASE.CREID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTPROPHASE
        SET
            PHACODE  = SPHACODE
          , PHADEST  = SPHADEST
          , JALCODE  = SJALCODE
          , APPDTDEB = DTAPPDTDEB
          , APPDTFIN = DTAPPDTFIN
          , CREID    = NCREID
        WHERE
            ACTID        = NACTID
            AND APRORDRE = NAPRORDRE
            AND APPORDRE = NAPPORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_APP_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APP_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APP_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPROPHASE;
-- ACTPROPHAAUDIENCE --
PROCEDURE D_ACTPROPHAAUDIENCE(
        NACTID ACTPROPHAAUDIENCE.ACTID%TYPE,
        NAPRORDRE ACTPROPHAAUDIENCE.APRORDRE%TYPE,
        NAPPORDRE ACTPROPHAAUDIENCE.APPORDRE%TYPE,
        NAPAORDRE ACTPROPHAAUDIENCE.APAORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTPROPHAAUDIENCE WHERE ACTID = NACTID AND APRORDRE = NAPRORDRE AND APPORDRE = NAPPORDRE AND APAORDRE = NAPAORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_APA_FOUND_CONST;
    END;
END D_ACTPROPHAAUDIENCE;
PROCEDURE I_ACTPROPHAAUDIENCE(
        NACTID ACTPROPHAAUDIENCE.ACTID%TYPE,
        NAPRORDRE ACTPROPHAAUDIENCE.APRORDRE%TYPE,
        NAPPORDRE ACTPROPHAAUDIENCE.APPORDRE%TYPE,
        NAPAORDRE ACTPROPHAAUDIENCE.APAORDRE%TYPE,
        DTAPADTAUDIENCE ACTPROPHAAUDIENCE.APADTAUDIENCE%TYPE,
        NAPAFLAGRENVOI ACTPROPHAAUDIENCE.APAFLAGRENVOI%TYPE,
        SAPADECISION ACTPROPHAAUDIENCE.APADECISION%TYPE,
        DTAPADTDECISION ACTPROPHAAUDIENCE.APADTDECISION%TYPE,
        NACTIDHUISSIER ACTPROPHAAUDIENCE.ACTIDHUISSIER%TYPE,
        SAPAEXPERTISE ACTPROPHAAUDIENCE.APAEXPERTISE%TYPE,
        SAPACONDAMNE ACTPROPHAAUDIENCE.APACONDAMNE%TYPE,
        NAPAFLAGEXECPROV ACTPROPHAAUDIENCE.APAFLAGEXECPROV%TYPE,
        DTAPADTSIGNIFIE ACTPROPHAAUDIENCE.APADTSIGNIFIE%TYPE,
        NAPADELAI ACTPROPHAAUDIENCE.APADELAI%TYPE,
        NAPAFLAGPOURVOI ACTPROPHAAUDIENCE.APAFLAGPOURVOI%TYPE,
        NACTIDCOUR ACTPROPHAAUDIENCE.ACTIDCOUR%TYPE,
        NAPAFLAGDEMANDEUR ACTPROPHAAUDIENCE.APAFLAGDEMANDEUR%TYPE,
        SAPAMEMO ACTPROPHAAUDIENCE.APAMEMO%TYPE,
        SAPATYPE ACTPROPHAAUDIENCE.APATYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTPROPHAAUDIENCE
            (
                ACTID
              , APRORDRE
              , APPORDRE
              , APAORDRE
              , APADTAUDIENCE
              , APAFLAGRENVOI
              , APADECISION
              , APADTDECISION
              , ACTIDHUISSIER
              , APAEXPERTISE
              , APACONDAMNE
              , APAFLAGEXECPROV
              , APADTSIGNIFIE
              , APADELAI
              , APAFLAGPOURVOI
              , ACTIDCOUR
              , APAFLAGDEMANDEUR
              , APAMEMO
              , APATYPE
            )
            VALUES
            (
                NACTID
              , NAPRORDRE
              , NAPPORDRE
              , NAPAORDRE
              , DTAPADTAUDIENCE
              , NAPAFLAGRENVOI
              , SAPADECISION
              , DTAPADTDECISION
              , NACTIDHUISSIER
              , SAPAEXPERTISE
              , SAPACONDAMNE
              , NAPAFLAGEXECPROV
              , DTAPADTSIGNIFIE
              , NAPADELAI
              , NAPAFLAGPOURVOI
              , NACTIDCOUR
              , NAPAFLAGDEMANDEUR
              , SAPAMEMO
              , SAPATYPE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_PPA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APD_CONST ;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTPROPHAAUDIENCE;
PROCEDURE U_ACTPROPHAAUDIENCE
    (
        NACTID ACTPROPHAAUDIENCE.ACTID%TYPE,
        NAPRORDRE ACTPROPHAAUDIENCE.APRORDRE%TYPE,
        NAPPORDRE ACTPROPHAAUDIENCE.APPORDRE%TYPE,
        NAPAORDRE ACTPROPHAAUDIENCE.APAORDRE%TYPE,
        DTAPADTAUDIENCE ACTPROPHAAUDIENCE.APADTAUDIENCE%TYPE,
        NAPAFLAGRENVOI ACTPROPHAAUDIENCE.APAFLAGRENVOI%TYPE,
        SAPADECISION ACTPROPHAAUDIENCE.APADECISION%TYPE,
        DTAPADTDECISION ACTPROPHAAUDIENCE.APADTDECISION%TYPE,
        NACTIDHUISSIER ACTPROPHAAUDIENCE.ACTIDHUISSIER%TYPE,
        SAPAEXPERTISE ACTPROPHAAUDIENCE.APAEXPERTISE%TYPE,
        SAPACONDAMNE ACTPROPHAAUDIENCE.APACONDAMNE%TYPE,
        NAPAFLAGEXECPROV ACTPROPHAAUDIENCE.APAFLAGEXECPROV%TYPE,
        DTAPADTSIGNIFIE ACTPROPHAAUDIENCE.APADTSIGNIFIE%TYPE,
        NAPADELAI ACTPROPHAAUDIENCE.APADELAI%TYPE,
        NAPAFLAGPOURVOI ACTPROPHAAUDIENCE.APAFLAGPOURVOI%TYPE,
        NACTIDCOUR ACTPROPHAAUDIENCE.ACTIDCOUR%TYPE,
        NAPAFLAGDEMANDEUR ACTPROPHAAUDIENCE.APAFLAGDEMANDEUR%TYPE,
        SAPAMEMO ACTPROPHAAUDIENCE.APAMEMO%TYPE,
        SAPATYPE ACTPROPHAAUDIENCE.APATYPE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTPROPHAAUDIENCE
        SET
            APADTAUDIENCE    = DTAPADTAUDIENCE
          , APAFLAGRENVOI    = NAPAFLAGRENVOI
          , APADECISION      = SAPADECISION
          , APADTDECISION    = DTAPADTDECISION
          , ACTIDHUISSIER    = NACTIDHUISSIER
          , APAEXPERTISE     = SAPAEXPERTISE
          , APACONDAMNE      = SAPACONDAMNE
          , APAFLAGEXECPROV  = NAPAFLAGEXECPROV
          , APADTSIGNIFIE    = DTAPADTSIGNIFIE
          , APADELAI         = NAPADELAI
          , APAFLAGPOURVOI   = NAPAFLAGPOURVOI
          , ACTIDCOUR        = NACTIDCOUR
          , APAFLAGDEMANDEUR = NAPAFLAGDEMANDEUR
          , APAMEMO          = SAPAMEMO
          , APATYPE          = SAPATYPE
        WHERE
            ACTID        = NACTID
            AND APRORDRE = NAPRORDRE
            AND APPORDRE = NAPPORDRE
            AND APAORDRE = NAPAORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_PPA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_APD_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_APA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTPROPHAAUDIENCE;
PROCEDURE P_PROCINDIVIDUELLE(
        NCREID IN CREVT.CREID%TYPE,
        SDESTINATION IN LANTTRPARAM.TTPCODE%TYPE,
        NNUMID IN NUMBER,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        IF SDESTINATION = 'CHANTIER' THEN
            UPDATE CREVT SET CHAID = NNUMID, CRECODEORIGINE = SDESTINATION WHERE CREID = NCREID;
        ELSIF SDESTINATION = 'BIEN' THEN
            UPDATE CREVT SET BIMID = NNUMID, CRECODEORIGINE = SDESTINATION WHERE CREID = NCREID;
        ELSIF SDESTINATION = 'DOSSIER' THEN
            UPDATE CREVT SET DOSID = NNUMID, CRECODEORIGINE = SDESTINATION WHERE CREID = NCREID;
        END IF;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := 0;
    END;
END P_PROCINDIVIDUELLE;
PROCEDURE P_VERIFNUMPROCEDURE(
        SAPRNUM IN ACTPROCEDURE.APRNUM%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
    BEGIN
        NRETURNCODE := 0;
        SELECT COUNT( *) INTO NCOUNT FROM ACTPROCEDURE WHERE APRNUM = SAPRNUM;
        IF NCOUNT       >= 1 THEN
            NRETURNCODE := - 1;
        END IF;
    END;
END P_VERIFNUMPROCEDURE;
-- ACTUNITE --
PROCEDURE I_ACTUNITE(
        NACTID ACTUNITE.ACTID%TYPE,
        NAADORDRE ACTUNITE.AADORDRE%TYPE,
        NAUNORDRE ACTUNITE.AUNORDRE%TYPE,
        SAUNINTITULE ACTUNITE.AUNINTITULE%TYPE,
        STMPCODE ACTUNITE.TMPCODE%TYPE,
		STMPCODEDEC ACTUNITE.TMPCODEDEC%TYPE,
        NRIBID ACTUNITE.RIBID%TYPE,
		NRIBIDDEC ACTUNITE.RIBIDDEC%TYPE,
        NACOORDRE ACTUNITE.ACOORDRE%TYPE,
        SAUNDELAIPMT ACTUNITE.AUNDELAIPMT%TYPE,
        NAUNJOUR ACTUNITE.AUNJOUR%TYPE,
        SAUNRECAPFAC ACTUNITE.AUNRECAPFAC%TYPE,
        NAUNFACAVANCE ACTUNITE.AUNFACAVANCE%TYPE,
        SAUNQUANTIEMEFAC ACTUNITE.AUNQUANTIEMEFAC%TYPE,
        DTAUNDTDEB ACTUNITE.AUNDTDEB%TYPE,
        DTAUNDTFIN ACTUNITE.AUNDTFIN%TYPE,
        NCREID ACTUNITE.CREID%TYPE,
        NAUNUNITE ACTUNITE.AUNUNITE%TYPE,
        NACTIDGESTION ACTUNITE.ACTIDGESTION%TYPE,
        SAUNPERIODE ACTUNITE.AUNPERIODE%TYPE,
        NAUNMULTIPLE ACTUNITE.AUNMULTIPLE%TYPE,
        NAUNGRPFAC ACTUNITE.AUNGRPFAC%TYPE,
        NAUNGRPPRL ACTUNITE.AUNGRPPRL%TYPE,
        SAUNRAISON1 ACTUNITE.AUNRAISON1%TYPE,
        SAUNRAISON2 ACTUNITE.AUNRAISON2%TYPE,
        SAUNCOMMENT ACTUNITE.AUNCOMMENT%TYPE,
        SAUNREGLECLIENT ACTUNITE.AUNREGLECLIENT%TYPE,
        SAUNINVOICECODE ACTUNITE.AUNINVOICECODE%TYPE,
        SAUNNOTICEMETHODSEND ACTUNITE.AUNNOTICEMETHODSEND%TYPE,
        NAUNFLAGALARMSERVICE ACTUNITE.AUNFLAGALARMSERVICE%TYPE,
        DTAUNDTSTARTTMPCODE ACTUNITE.AUNDTSTARTTMPCODE%TYPE,
        DTAUNDTENDTMPCODE ACTUNITE.AUNDTENDTMPCODE%TYPE,
        NATEORDRE ACTUNITE.ATEORDRE%TYPE,
        NATEORDRE2 ACTUNITE.ATEORDRE2%TYPE,
		NAUNFLAGDEFAULT ACTUNITE.AUNFLAGDEFAULT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTUNITE
            (
                ACTID
              , AADORDRE
              , AUNORDRE
              , AUNINTITULE
              , TMPCODE
              , TMPCODEDEC
              , RIBID
              , RIBIDDEC
              , ACOORDRE
              , AUNDELAIPMT
              , AUNJOUR
              , AUNRECAPFAC
              , AUNFACAVANCE
              , AUNQUANTIEMEFAC
              , AUNDTDEB
              , AUNDTFIN
              , CREID
              , AUNUNITE
              , ACTIDGESTION
              , AUNPERIODE
              , AUNMULTIPLE
              , AUNGRPFAC
              , AUNGRPPRL
              , AUNRAISON1
              , AUNRAISON2
              , AUNCOMMENT
              , AUNREGLECLIENT
              , AUNINVOICECODE
              , AUNNOTICEMETHODSEND
              , AUNFLAGALARMSERVICE
              , AUNDTSTARTTMPCODE
              , AUNDTENDTMPCODE
              , ATEORDRE
              , ATEORDRE2
			  , AUNFLAGDEFAULT
            )
            VALUES
            (
                NACTID
              , NAADORDRE
              , NAUNORDRE
              , SAUNINTITULE
              , STMPCODE
              , STMPCODEDEC
              , NRIBID
              , NRIBIDDEC
              , NACOORDRE
              , SAUNDELAIPMT
              , NAUNJOUR
              , SAUNRECAPFAC
              , NAUNFACAVANCE
              , SAUNQUANTIEMEFAC
              , DTAUNDTDEB
              , DTAUNDTFIN
              , NCREID
              , NAUNUNITE
              , NACTIDGESTION
              , SAUNPERIODE
              , NAUNMULTIPLE
              , NAUNGRPFAC
              , NAUNGRPPRL
              , SAUNRAISON1
              , SAUNRAISON2
              , SAUNCOMMENT
              , SAUNREGLECLIENT
              , SAUNINVOICECODE
              , SAUNNOTICEMETHODSEND
              , NAUNFLAGALARMSERVICE
              , DTAUNDTSTARTTMPCODE
              , DTAUNDTENDTMPCODE
              , NATEORDRE
              , NATEORDRE2
			  , NAUNFLAGDEFAULT
            ) ;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AUN_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADU_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTUNITE;
PROCEDURE U_ACTUNITE
    (
        NACTID ACTUNITE.ACTID%TYPE,
        NAADORDRE ACTUNITE.AADORDRE%TYPE,
        NAUNORDRE ACTUNITE.AUNORDRE%TYPE,
        SAUNINTITULE ACTUNITE.AUNINTITULE%TYPE,
        STMPCODE ACTUNITE.TMPCODE%TYPE,
		STMPCODEDEC ACTUNITE.TMPCODEDEC%TYPE,
        NRIBID ACTUNITE.RIBID%TYPE,
        NRIBIDDEC ACTUNITE.RIBIDDEC%TYPE,
        NACOORDRE ACTUNITE.ACOORDRE%TYPE,
        SAUNDELAIPMT ACTUNITE.AUNDELAIPMT%TYPE,
        NAUNJOUR ACTUNITE.AUNJOUR%TYPE,
        SAUNRECAPFAC ACTUNITE.AUNRECAPFAC%TYPE,
        NAUNFACAVANCE ACTUNITE.AUNFACAVANCE%TYPE,
        SAUNQUANTIEMEFAC ACTUNITE.AUNQUANTIEMEFAC%TYPE,
        DTAUNDTDEB ACTUNITE.AUNDTDEB%TYPE,
        DTAUNDTFIN ACTUNITE.AUNDTFIN%TYPE,
        NCREID ACTUNITE.CREID%TYPE,
        NAUNUNITE ACTUNITE.AUNUNITE%TYPE,
        NACTIDGESTION ACTUNITE.ACTIDGESTION%TYPE,
        SAUNPERIODE ACTUNITE.AUNPERIODE%TYPE,
        NAUNMULTIPLE ACTUNITE.AUNMULTIPLE%TYPE,
        NAUNGRPFAC ACTUNITE.AUNGRPFAC%TYPE,
        NAUNGRPPRL ACTUNITE.AUNGRPPRL%TYPE,
        SAUNRAISON1 ACTUNITE.AUNRAISON1%TYPE,
        SAUNRAISON2 ACTUNITE.AUNRAISON2%TYPE,
        SAUNCOMMENT ACTUNITE.AUNCOMMENT%TYPE,
        SAUNREGLECLIENT ACTUNITE.AUNREGLECLIENT%TYPE,
        SAUNINVOICECODE ACTUNITE.AUNINVOICECODE%TYPE,
        SAUNNOTICEMETHODSEND ACTUNITE.AUNNOTICEMETHODSEND%TYPE,
        NAUNFLAGALARMSERVICE ACTUNITE.AUNFLAGALARMSERVICE%TYPE,
        DTAUNDTSTARTTMPCODE ACTUNITE.AUNDTSTARTTMPCODE%TYPE,
        DTAUNDTENDTMPCODE ACTUNITE.AUNDTENDTMPCODE%TYPE,
        NATEORDRE ACTUNITE.ATEORDRE%TYPE,
        NATEORDRE2 ACTUNITE.ATEORDRE2%TYPE,
		NAUNFLAGDEFAULT ACTUNITE.AUNFLAGDEFAULT%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTUNITE
        SET
            AUNINTITULE         = SAUNINTITULE
          , AADORDRE            = NAADORDRE
          , TMPCODE             = STMPCODE
          , TMPCODEDEC       = STMPCODEDEC
          , RIBID               = NRIBID
          , RIBIDDEC               = NRIBIDDEC
          , ACOORDRE            = NACOORDRE
          , AUNDELAIPMT         = SAUNDELAIPMT
          , AUNJOUR             = NAUNJOUR
          , AUNRECAPFAC         = SAUNRECAPFAC
          , AUNFACAVANCE        = NAUNFACAVANCE
          , AUNQUANTIEMEFAC     = SAUNQUANTIEMEFAC
          , AUNDTDEB            = DTAUNDTDEB
          , AUNDTFIN            = DTAUNDTFIN
          , CREID               = NCREID
          , AUNUNITE            = NAUNUNITE
          , ACTIDGESTION        = NACTIDGESTION
          , AUNPERIODE          = SAUNPERIODE
          , AUNMULTIPLE         = NAUNMULTIPLE
          , AUNGRPFAC           = NAUNGRPFAC
          , AUNGRPPRL           = NAUNGRPPRL
          , AUNRAISON1          = SAUNRAISON1
          , AUNRAISON2          = SAUNRAISON2
          , AUNCOMMENT          = SAUNCOMMENT
          , AUNREGLECLIENT      = SAUNREGLECLIENT
          , AUNINVOICECODE      = SAUNINVOICECODE
          , AUNNOTICEMETHODSEND = SAUNNOTICEMETHODSEND
          , AUNFLAGALARMSERVICE = NAUNFLAGALARMSERVICE
          , AUNDTSTARTTMPCODE   = DTAUNDTSTARTTMPCODE
          , AUNDTENDTMPCODE     = DTAUNDTENDTMPCODE
          , ATEORDRE            = NATEORDRE
          , ATEORDRE2           = NATEORDRE2
		  , AUNFLAGDEFAULT      = NAUNFLAGDEFAULT
        WHERE
            ACTID        = NACTID
            AND AUNORDRE = NAUNORDRE;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AUN_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ADU_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_ADU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTUNITE;
PROCEDURE D_ACTUNITE(
        NACTID ACTUNITE.ACTID%TYPE,
        NAUNORDRE ACTUNITE.AUNORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE ACTUNITE WHERE ACTID = NACTID AND AUNORDRE = NAUNORDRE;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ADU_FOUND_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ACTUNITE;
--ALA 070606 waterfall D2
PROCEDURE I_ACTRIBACCES(
        NACTID ACTRIBACCES.ACTID%TYPE,
        NRIBID ACTRIBACCES.RIBID%TYPE,
        NACTIDSIGNATURE ACTRIBACCES.ACTIDSIGNATURE%TYPE,
        SARAACCESSTYPE ACTRIBACCES.ARAACCESSTYPE%TYPE,
        DTARADTBEG ACTRIBACCES.ARADTBEG%TYPE,
        DTARADTEND ACTRIBACCES.ARADTEND%TYPE,
        NCREID ACTRIBACCES.CREID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTRIBACCES
            (
                ACTID
              , RIBID
              , ACTIDSIGNATURE
              , ARAACCESSTYPE
              , ARADTBEG
              , ARADTEND
              , CREID
            )
            VALUES
            (
                NACTID
              , NRIBID
              , NACTIDSIGNATURE
              , SARAACCESSTYPE
              , DTARADTBEG
              , DTARADTEND
              , NCREID
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_I_PARENT_ARAC_FOUND_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_I_VAL_ARAC_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_I_DUP_VAL_ON_ARAC_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTRIBACCES;
PROCEDURE U_ACTRIBACCES
    (
        NACTID ACTRIBACCES.ACTID%TYPE,
        NRIBID ACTRIBACCES.RIBID%TYPE,
        NACTIDSIGNATURE ACTRIBACCES.ACTIDSIGNATURE%TYPE,
        SARAACCESSTYPE ACTRIBACCES.ARAACCESSTYPE%TYPE,
        DTARADTBEG ACTRIBACCES.ARADTBEG%TYPE,
        DTARADTEND ACTRIBACCES.ARADTEND%TYPE,
        NCREID ACTRIBACCES.CREID%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTRIBACCES
        SET
            ARAACCESSTYPE = SARAACCESSTYPE
          , ARADTBEG      = DTARADTBEG
          , ARADTEND      = DTARADTEND
          , CREID         = NCREID
        WHERE
            ACTID              = NACTID
            AND RIBID          = NRIBID
            AND ACTIDSIGNATURE = NACTIDSIGNATURE;
        NRETURNCODE           := 0;
        IF SQL%ROWCOUNT        = 0 THEN
            NRETURNCODE       := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_U_PARENT_ARAC_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_U_VAL_ARAC_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_U_DUP_VAL_ON_ARAC_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRIBACCES;
PROCEDURE D_ACTRIBACCES(
        NACTID ACTRIBACCES.ACTID%TYPE,
        NRIBID ACTRIBACCES.RIBID%TYPE,
        NACTIDSIGNATURE ACTRIBACCES.ACTIDSIGNATURE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE ACTRIBACCES WHERE ACTID = NACTID AND RIBID = NRIBID AND ACTIDSIGNATURE = NACTIDSIGNATURE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_D_CHILD_ARAC_FOUND_CONST;
    END;
END D_ACTRIBACCES;
--ALA 110706 ACTRELPRODETAIL
PROCEDURE I_ACTRELPRODETAIL(
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTEUR.ACTID%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NADEORDRE IN OUT ACTRELPRODETAIL.ADEORDRE%TYPE,
        STATATTRIBUTE ACTRELPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE ACTRELPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        --ALA recuperer le max ADEORDRE
        SELECT
            MAX(ADEORDRE)
        INTO
            NADEORDRE
        FROM
            ACTRELPRODETAIL
        WHERE
            ACTID             = NACTID
            AND ACTIDRELATION = NACTIDRELATION
            AND TRECODE       = STRECODE
            AND AREDTDEB      = DTAREDTDEB;
        IF NADEORDRE         IS NULL THEN
            NADEORDRE        := 1;
        ELSE
            NADEORDRE := NADEORDRE + 1;
        END IF;
        INSERT
        INTO
            ACTRELPRODETAIL
            (
                ACTID
              , ACTIDRELATION
              , TRECODE
              , AREDTDEB
              , ADEORDRE
              , TATATTRIBUTE
              , TDEVALUE
            )
            VALUES
            (
                NACTID
              , NACTIDRELATION
              , STRECODE
              , DTAREDTDEB
              , NADEORDRE
              , STATATTRIBUTE
              , STDEVALUE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_I_PARENT_ADE_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_I_VAL_ADE_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_I_DUP_VAL_ON_ADE_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTRELPRODETAIL;
PROCEDURE U_ACTRELPRODETAIL
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTEUR.ACTID%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NADEORDRE ACTRELPRODETAIL.ADEORDRE%TYPE,
        STATATTRIBUTE ACTRELPRODETAIL.TATATTRIBUTE%TYPE,
        STDEVALUE ACTRELPRODETAIL.TDEVALUE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            ACTRELPRODETAIL
        SET
            TATATTRIBUTE = STATATTRIBUTE
          , TDEVALUE     = STDEVALUE
        WHERE
            ACTID             = NACTID
            AND ACTIDRELATION = NACTIDRELATION
            AND TRECODE       = STRECODE
            AND AREDTDEB      = DTAREDTDEB
            AND ADEORDRE      = NADEORDRE;
        NRETURNCODE          := 0;
        IF SQL%ROWCOUNT       = 0 THEN
            NRETURNCODE      := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_U_PARENT_ADE_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_U_VAL_ADE_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_U_DUP_VAL_ON_ADE_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTRELPRODETAIL;
PROCEDURE D_ACTRELPRODETAIL(
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTRELATION.ACTIDRELATION%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NADEORDRE ACTRELPRODETAIL.ADEORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM ACTRELPRODETAIL WHERE ACTID = NACTID AND ACTIDRELATION = NACTIDRELATION AND TRECODE = STRECODE AND AREDTDEB = DTAREDTDEB AND ADEORDRE = NADEORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_D_CHILD_ADE_FOUND_CONST;
    END;
END D_ACTRELPRODETAIL;
-- LKACTCORADR --
PROCEDURE I_LKACTCORADR(
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE LKACTCORADR.ACOORDRE%TYPE,
        NAADORDRE LKACTCORADR.AADORDRE%TYPE,
        SAADERRORCODE ACTADRESSE.AADERRORCODE%TYPE,
        SAADCONTACTCODE ACTADRESSE.AADCONTACTCODE%TYPE,
        SAADCONTROLCODE ACTADRESSE.AADCONTROLCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT INTO LKACTCORADR
            (ACTID, ACOORDRE, AADORDRE
            ) VALUES
            (NACTID, NACOORDRE, NAADORDRE
            ) ;
        UPDATE ACTADRESSE SET AADERRORCODE = SAADERRORCODE, AADCONTACTCODE = SAADCONTACTCODE, AADCONTROLCODE = SAADCONTROLCODE WHERE ACTID = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_I_ACA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_VAL_I_ACA_NULL_CONST ;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_DUP_VAL_I_ACA_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_LKACTCORADR;
PROCEDURE U_LKACTCORADR(
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE LKACTCORADR.ACOORDRE%TYPE,
        NAADORDRE LKACTCORADR.AADORDRE%TYPE,
        SAADERRORCODE ACTADRESSE.AADERRORCODE%TYPE,
        SAADCONTACTCODE ACTADRESSE.AADCONTACTCODE%TYPE,
        SAADCONTROLCODE ACTADRESSE.AADCONTROLCODE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE LKACTCORADR SET AADORDRE = NAADORDRE WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE;
        UPDATE ACTADRESSE SET AADERRORCODE = SAADERRORCODE, AADCONTACTCODE = SAADCONTACTCODE, AADCONTROLCODE = SAADCONTROLCODE WHERE ACTID = NACTID;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_U_ACA_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_U_ACA_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_U_ACA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_LKACTCORADR;
PROCEDURE D_LKACTCORADR(
        NACTID ACTEUR.ACTID%TYPE,
        NACOORDRE LKACTCORADR.ACOORDRE%TYPE,
        NAADORDRE LKACTCORADR.AADORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM LKACTCORADR WHERE ACTID = NACTID AND ACOORDRE = NACOORDRE AND AADORDRE = NAADORDRE;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_CHILD_ATC_FOUND_CONST;
    END;
END D_LKACTCORADR;
PROCEDURE D_ACTSPESERVICERATE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPESERVICERATE.ASPCODE%TYPE,
        NACTIDGESTION ACTSPESERVICERATE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPESERVICERATE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPESERVICERATE.AAGDTVALID%TYPE,
        SASRRATETYPE ACTSPESERVICERATE.ASRRATETYPE%TYPE,
        SASRRATESUBTYPE ACTSPESERVICERATE.ASRRATESUBTYPE%TYPE,
        DTASRDTBEG ACTSPESERVICERATE.ASRDTBEG%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE
        FROM
            ACTSPESERVICERATE
        WHERE
            ACTID              = NACTID
            AND ASPCODE        = SASPCODE
            AND ACTIDGESTION   = NACTIDGESTION
            AND ROLCODE        = SROLCODE
            AND AAGDTVALID     = DTAAGDTVALID
            AND ASRRATETYPE    = SASRRATETYPE
            AND ASRRATESUBTYPE = SASRRATESUBTYPE
            AND ASRDTBEG       = DTASRDTBEG;
        NRETURNCODE           := 0;
        IF SQL%ROWCOUNT        = 0 THEN
            NRETURNCODE       := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_D_CHILD_ASR_FOUND_CONST;
    END;
END D_ACTSPESERVICERATE;
PROCEDURE U_ACTSPESERVICERATE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPESERVICERATE.ASPCODE%TYPE,
        NACTIDGESTION ACTSPESERVICERATE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPESERVICERATE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPESERVICERATE.AAGDTVALID%TYPE,
        SASRRATETYPE ACTSPESERVICERATE.ASRRATETYPE%TYPE,
        SASRRATESUBTYPE ACTSPESERVICERATE.ASRRATESUBTYPE%TYPE,
        DTASRDTBEG ACTSPESERVICERATE.ASRDTBEG%TYPE,
        DTASRDTEND ACTSPESERVICERATE.ASRDTEND%TYPE,
        NASRPRICE ACTSPESERVICERATE.ASRPRICE%TYPE,
        SASRUNIT ACTSPESERVICERATE.ASRUNIT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTSPESERVICERATE
        SET
            ASRDTEND = DTASRDTEND
          , ASRPRICE = NASRPRICE
          , ASRUNIT  = SASRUNIT
        WHERE
            ACTID              = NACTID
            AND ASPCODE        = SASPCODE
            AND ACTIDGESTION   = NACTIDGESTION
            AND ROLCODE        = SROLCODE
            AND AAGDTVALID     = DTAAGDTVALID
            AND ASRRATETYPE    = SASRRATETYPE
            AND ASRRATESUBTYPE = SASRRATESUBTYPE
            AND ASRDTBEG       = DTASRDTBEG;
        NRETURNCODE           := 0;
        IF SQL%ROWCOUNT        = 0 THEN
            NRETURNCODE       := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_U_PARENT_ASR_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_U_VAL_ASR_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_U_DUP_VAL_ON_ASR_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSPESERVICERATE;
PROCEDURE I_ACTSPESERVICERATE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPESERVICERATE.ASPCODE%TYPE,
        NACTIDGESTION ACTSPESERVICERATE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPESERVICERATE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPESERVICERATE.AAGDTVALID%TYPE,
        SASRRATETYPE ACTSPESERVICERATE.ASRRATETYPE%TYPE,
        SASRRATESUBTYPE ACTSPESERVICERATE.ASRRATESUBTYPE%TYPE,
        DTASRDTBEG ACTSPESERVICERATE.ASRDTBEG%TYPE,
        DTASRDTEND ACTSPESERVICERATE.ASRDTEND%TYPE,
        NASRPRICE ACTSPESERVICERATE.ASRPRICE%TYPE,
        SASRUNIT ACTSPESERVICERATE.ASRUNIT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTSPESERVICERATE
            (
                ACTID
              , ASPCODE
              , ACTIDGESTION
              , ROLCODE
              , AAGDTVALID
              , ASRRATETYPE
              , ASRRATESUBTYPE
              , ASRDTBEG
              , ASRDTEND
              , ASRPRICE
              , ASRUNIT
            )
            VALUES
            (
                NACTID
              , SASPCODE
              , NACTIDGESTION
              , SROLCODE
              , DTAAGDTVALID
              , SASRRATETYPE
              , SASRRATESUBTYPE
              , DTASRDTBEG
              , DTASRDTEND
              , NASRPRICE
              , SASRUNIT
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_I_PARENT_ASR_FOUND_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_I_VAL_ASR_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_I_DUP_VAL_ON_ASR_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSPESERVICERATE;
PROCEDURE D_ACTSPEATTRIBUTE
    (
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPEATTRIBUTE.ASPCODE%TYPE,
        NACTIDGESTION ACTSPEATTRIBUTE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPEATTRIBUTE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPEATTRIBUTE.AAGDTVALID%TYPE,
        SASATYPE ACTSPEATTRIBUTE.ASATYPE%TYPE,
        DTASADTBEG ACTSPEATTRIBUTE.ASADTBEG%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE
        FROM
            ACTSPEATTRIBUTE
        WHERE
            ACTID            = NACTID
            AND ASPCODE      = SASPCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID
            AND ASATYPE      = SASATYPE
            AND ASADTBEG     = DTASADTBEG;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_D_CHILD_ASA_FOUND_CONST;
    END;
END D_ACTSPEATTRIBUTE;
PROCEDURE U_ACTSPEATTRIBUTE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPEATTRIBUTE.ASPCODE%TYPE,
        NACTIDGESTION ACTSPEATTRIBUTE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPEATTRIBUTE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPEATTRIBUTE.AAGDTVALID%TYPE,
        SASATYPE ACTSPEATTRIBUTE.ASATYPE%TYPE,
        DTASADTBEG ACTSPEATTRIBUTE.ASADTBEG%TYPE,
        DTASADTEND ACTSPEATTRIBUTE.ASADTEND%TYPE,
        SASAVALUE ACTSPEATTRIBUTE.ASAVALUE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTSPEATTRIBUTE
        SET
            ASADTEND = DTASADTEND
          , ASAVALUE = SASAVALUE
        WHERE
            ACTID            = NACTID
            AND ASPCODE      = SASPCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID
            AND ASADTBEG     = DTASADTBEG;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_U_PARENT_ASA_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_U_VAL_ASA_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_U_DUP_VAL_ON_ASA_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSPEATTRIBUTE;
PROCEDURE I_ACTSPEATTRIBUTE(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE ACTSPEATTRIBUTE.ASPCODE%TYPE,
        NACTIDGESTION ACTSPEATTRIBUTE.ACTIDGESTION%TYPE,
        SROLCODE ACTSPEATTRIBUTE.ROLCODE%TYPE,
        DTAAGDTVALID ACTSPEATTRIBUTE.AAGDTVALID%TYPE,
        SASATYPE ACTSPEATTRIBUTE.ASATYPE%TYPE,
        DTASADTBEG ACTSPEATTRIBUTE.ASADTBEG%TYPE,
        DTASADTEND ACTSPEATTRIBUTE.ASADTEND%TYPE,
        SASAVALUE ACTSPEATTRIBUTE.ASAVALUE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            ACTSPEATTRIBUTE
            (
                ACTID
              , ASPCODE
              , ACTIDGESTION
              , ROLCODE
              , AAGDTVALID
              , ASATYPE
              , ASADTBEG
              , ASADTEND
              , ASAVALUE
            )
            VALUES
            (
                NACTID
              , SASPCODE
              , NACTIDGESTION
              , SROLCODE
              , DTAAGDTVALID
              , SASATYPE
              , DTASADTBEG
              , DTASADTEND
              , SASAVALUE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_I_PARENT_ASA_FOUND_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_I_VAL_ASA_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_I_DUP_VAL_ON_ASA_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSPEATTRIBUTE;
PROCEDURE D_ACTSERVICEAGREEMENT
    (
        NACTID ACTEUR.ACTID%TYPE,
        SASAAGREEMENTTYPE ACTSERVICEAGREEMENT.ASAAGREEMENTTYPE%TYPE,
        SASAAGREEMENTREFERENCE ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE,
        NACTIDGESTION ACTSERVICEAGREEMENT.ACTIDGESTION%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    DECLARE
        SASAAGRREF ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE;
        NCOUNT NUMBER;
    BEGIN
        SELECT
            COUNT( *)
        INTO
            NCOUNT
        FROM
            ACTSERVICEAGREEMENT
        WHERE
            ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
            AND ACTID        = NACTID
            AND
            (
                NACTIDGESTION  IS NULL
                OR ACTIDGESTION = NACTIDGESTION
            )
            AND ASADTBEG =
            (
                SELECT MAX(ASADTBEG) FROM ACTSERVICEAGREEMENT WHERE ASAAGREEMENTTYPE = SASAAGREEMENTTYPE
            )
            AND ASADTEND IS NULL;
        IF NCOUNT         > 0 OR NACTIDGESTION IS NULL THEN
            DELETE FROM ACTSERVICEAGREEMENT WHERE ACTID = NACTID AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE AND ASAAGREEMENTREFERENCE = SASAAGREEMENTREFERENCE;
            NRETURNCODE := 0;
        ELSE
            -- tentative de supprimer un agrement qui n est pas le dernier par couple ( AAGREEMENTTYPE, ACTIDGESTION )
            NRETURNCODE := 9850;
        END IF;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_D_CHILD_AAG_FOUND_CONST;
    END;
END D_ACTSERVICEAGREEMENT;
PROCEDURE U_ACTSERVICEAGREEMENT(
        NACTID ACTEUR.ACTID%TYPE,
        SASAAGREEMENTTYPE ACTSERVICEAGREEMENT.ASAAGREEMENTTYPE%TYPE,
        SASAAGREEMENTREFERENCE ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE,
        NACTIDGESTION ACTSERVICEAGREEMENT.ACTIDGESTION%TYPE,
        DTASADTSIGNATURE ACTSERVICEAGREEMENT.ASADTSIGNATURE%TYPE,
        DTASADTBEG ACTSERVICEAGREEMENT.ASADTBEG%TYPE,
        DTASADTEND ACTSERVICEAGREEMENT.ASADTEND%TYPE,
        DTASADTLASTRENEWAL ACTSERVICEAGREEMENT.ASADTLASTRENEWAL%TYPE,
        NASARENEWALFREQUENCY ACTSERVICEAGREEMENT.ASARENEWALFREQUENCY%TYPE,
        SUTICODE ACTSERVICEAGREEMENT.UTICODE%TYPE,
        NASAFLAGPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASAFLAGPOLICYAGREEMENT%TYPE,
        SASAPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASAPOLICYAGREEMENTTYPE%TYPE,
        DTASADTSIGNPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASADTSIGNPOLICYAGREEMENT%TYPE,
        DTASADTSTARTPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASADTSTARTPOLICYAGREEMENT%TYPE,
        DTASADTENDPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASADTENDPOLICYAGREEMENT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            ACTSERVICEAGREEMENT
        SET
            ACTIDGESTION              = NACTIDGESTION
          , ASADTSIGNATURE            = DTASADTSIGNATURE
          , ASADTBEG                  = DTASADTBEG
          , ASADTEND                  = DTASADTEND
          , ASADTLASTRENEWAL          = DTASADTLASTRENEWAL
          , ASARENEWALFREQUENCY       = NASARENEWALFREQUENCY
          , UTICODE                   = SUTICODE
          , ASAFLAGPOLICYAGREEMENT    = NASAFLAGPOLICYAGREEMENT
          , ASAPOLICYAGREEMENTTYPE    = SASAPOLICYAGREEMENT
          , ASADTSIGNPOLICYAGREEMENT  = DTASADTSIGNPOLICYAGREEMENT
          , ASADTSTARTPOLICYAGREEMENT = DTASADTSTARTPOLICYAGREEMENT
          , ASADTENDPOLICYAGREEMENT   = DTASADTENDPOLICYAGREEMENT
        WHERE
            ACTID                     = NACTID
            AND ASAAGREEMENTTYPE      = SASAAGREEMENTTYPE
            AND ASAAGREEMENTREFERENCE = SASAAGREEMENTREFERENCE;
        NRETURNCODE                  := 0;
        IF SQL%ROWCOUNT               = 0 THEN
            NRETURNCODE              := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_U_PARENT_AAG_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_U_VAL_AAG_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_U_DUP_VAL_ON_AAG_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSERVICEAGREEMENT;
PROCEDURE I_ACTSERVICEAGREEMENT(
        NACTID ACTEUR.ACTID%TYPE,
        SASAAGREEMENTTYPE ACTSERVICEAGREEMENT.ASAAGREEMENTTYPE%TYPE,
        SASAAGREEMENTREFERENCE ACTSERVICEAGREEMENT.ASAAGREEMENTREFERENCE%TYPE,
        NACTIDGESTION ACTSERVICEAGREEMENT.ACTIDGESTION%TYPE,
        DTASADTSIGNATURE ACTSERVICEAGREEMENT.ASADTSIGNATURE%TYPE,
        DTASADTBEG ACTSERVICEAGREEMENT.ASADTBEG%TYPE,
        DTASADTEND ACTSERVICEAGREEMENT.ASADTEND%TYPE,
        DTASADTLASTRENEWAL ACTSERVICEAGREEMENT.ASADTLASTRENEWAL%TYPE,
        NASARENEWALFREQUENCY ACTSERVICEAGREEMENT.ASARENEWALFREQUENCY%TYPE,
        SUTICODE ACTSERVICEAGREEMENT.UTICODE%TYPE,
        NASAFLAGPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASAFLAGPOLICYAGREEMENT%TYPE,
        SASAPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASAPOLICYAGREEMENTTYPE%TYPE,
        DTASADTSIGNPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASADTSIGNPOLICYAGREEMENT%TYPE,
        DTASADTSTARTPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASADTSTARTPOLICYAGREEMENT%TYPE,
        DTASADTENDPOLICYAGREEMENT ACTSERVICEAGREEMENT.ASADTENDPOLICYAGREEMENT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
        DTDTFIN ACTSERVICEAGREEMENT.ASADTBEG%TYPE;
    BEGIN
        SELECT COUNT( *) INTO NCOUNT FROM ACTSERVICEAGREEMENT WHERE ACTID = NACTID AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE AND ASADTEND IS NULL;
        IF NCOUNT > 0 THEN
            SELECT MAX(ASADTBEG) INTO DTDTFIN FROM ACTSERVICEAGREEMENT WHERE ACTID = NACTID AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE AND ASADTEND IS NULL;
            IF DTDTFIN   >(DTASADTBEG - 1) THEN
                DTDTFIN := DTASADTBEG ;
            ELSE
                DTDTFIN := DTASADTBEG - 1;
            END IF;
            UPDATE ACTSERVICEAGREEMENT SET ASADTEND = DTDTFIN WHERE ACTID = NACTID AND ASAAGREEMENTTYPE = SASAAGREEMENTTYPE AND ASADTEND IS NULL;
        END IF;
        INSERT
        INTO
            ACTSERVICEAGREEMENT
            (
                ACTID
              , ASAAGREEMENTTYPE
              , ASAAGREEMENTREFERENCE
              , ACTIDGESTION
              , ASADTSIGNATURE
              , ASADTBEG
              , ASADTEND
              , ASADTLASTRENEWAL
              , ASARENEWALFREQUENCY
              , UTICODE
              , ASAFLAGPOLICYAGREEMENT
              , ASAPOLICYAGREEMENTTYPE
              , ASADTSIGNPOLICYAGREEMENT
              , ASADTSTARTPOLICYAGREEMENT
              , ASADTENDPOLICYAGREEMENT
            )
            VALUES
            (
                NACTID
              , SASAAGREEMENTTYPE
              , SASAAGREEMENTREFERENCE
              , NACTIDGESTION
              , DTASADTSIGNATURE
              , DTASADTBEG
              , DTASADTEND
              , DTASADTLASTRENEWAL
              , NASARENEWALFREQUENCY
              , SUTICODE
              , NASAFLAGPOLICYAGREEMENT
              , SASAPOLICYAGREEMENT
              , DTASADTSIGNPOLICYAGREEMENT
              , DTASADTSTARTPOLICYAGREEMENT
              , DTASADTENDPOLICYAGREEMENT
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_I_PARENT_AAG_FOUND_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_I_VAL_AAG_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_I_DUP_VAL_ON_AAG_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSERVICEAGREEMENT;
PROCEDURE D_LKASPACO
    (
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE LKASPACO.ASPCODE%TYPE,
        NACTIDGESTION LKASPACO.ACTIDGESTION%TYPE,
        SROLCODE LKASPACO.ROLCODE%TYPE,
        DTAAGDTVALID LKASPACO.AAGDTVALID%TYPE,
        NACOORDRE LKASPACO.ACOORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE
        FROM
            LKASPACO
        WHERE
            ACTID            = NACTID
            AND ASPCODE      = SASPCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID
            AND ACOORDRE     = NACOORDRE;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_CHILD_FOUND THEN
        NRETURNCODE := ERR_D_CHILD_AAC_FOUND_CONST;
    END;
END D_LKASPACO;
PROCEDURE U_LKASPACO(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE LKASPACO.ASPCODE%TYPE,
        NACTIDGESTION LKASPACO.ACTIDGESTION%TYPE,
        SROLCODE LKASPACO.ROLCODE%TYPE,
        DTAAGDTVALID LKASPACO.AAGDTVALID%TYPE,
        NACOORDRE LKASPACO.ACOORDRE%TYPE,
        NACOORDREOLD LKASPACO.ACOORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            LKASPACO
        SET
            ACOORDRE = NACOORDRE
        WHERE
            ACTID            = NACTID
            AND ASPCODE      = SASPCODE
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLCODE
            AND AAGDTVALID   = DTAAGDTVALID
            AND ACOORDRE     = NACOORDREOLD;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_U_PARENT_AAC_FOUND_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_U_VAL_AAC_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_U_DUP_VAL_ON_AAC_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_LKASPACO;
PROCEDURE I_LKASPACO(
        NACTID ACTEUR.ACTID%TYPE,
        SASPCODE LKASPACO.ASPCODE%TYPE,
        NACTIDGESTION LKASPACO.ACTIDGESTION%TYPE,
        SROLCODE LKASPACO.ROLCODE%TYPE,
        DTAAGDTVALID LKASPACO.AAGDTVALID%TYPE,
        NACOORDRE LKASPACO.ACOORDRE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT INTO LKASPACO
            (ACTID, ASPCODE, ACTIDGESTION, ROLCODE, AAGDTVALID, ACOORDRE
            ) VALUES
            (NACTID, SASPCODE, NACTIDGESTION, SROLCODE, DTAAGDTVALID, NACOORDRE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_I_PARENT_AAC_FOUND_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_I_VAL_AAC_NULL_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_I_DUP_VAL_ON_AAC_CONST ;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_LKASPACO;
--MME 25042007
PROCEDURE U_ACTRIBCOMPTE
    (
        NACTID ACTEUR.ACTID%TYPE,
        NRIBID IN OUT RIB.RIBID%TYPE,
        SBGUBANQUE RIB.BGUBANQUE%TYPE,
        SBGUGUICHET RIB.BGUGUICHET%TYPE,
        SRIBCOMPTE RIB.RIBCOMPTE%TYPE,
        SRIBCLE RIB.RIBCLE%TYPE,
        SRIBINTITULE RIB.RIBINTITULE%TYPE,
        NRINDELAIP RIBINFO.RINDELAIP%TYPE,
        NRINDELAIV RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHP RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSP RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIR RIBINFO.RINVALVIR%TYPE,
        NRINVALPRL RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQ RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRL RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIR RIBINFO.RINFORCEVIR%TYPE,
        SARITYPE ACTRIB.ARITYPE%TYPE,
        DTARIDTDEB ACTRIB.ARIDTDEB%TYPE,
        NRIBIBANCLE RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTE RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVARIANT RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODE RIB.DEVCODE%TYPE,
        NRIBIDINTERMEDIATE IN OUT ACTRIB.RIBIDINTERMEDIATE%TYPE,
        SRIBACCOUNTTYPE RIB.RIBACCOUNTTYPE%TYPE,
        --
        SBGUBANQUEINTERMEDIATE RIB.BGUBANQUE%TYPE,
        SBGUGUICHETINTERMEDIATE RIB.BGUGUICHET%TYPE,
        SRIBCOMPTEINTERMEDIATE RIB.RIBCOMPTE%TYPE,
        SRIBCLEINTERMEDIATE RIB.RIBCLE%TYPE,
        SRIBINTITULEINTERMEDIATE RIB.RIBINTITULE%TYPE,
        NRINDELAIPINTERMEDIATE RIBINFO.RINDELAIP%TYPE,
        NRINDELAIVINTERMEDIATE RIBINFO.RINDELAIV%TYPE,
        NRINVALREMHPINTERMEDIATE RIBINFO.RINVALREMHP%TYPE,
        NRINVALREMSPINTERMEDIATE RIBINFO.RINVALREMSP%TYPE,
        NRINVALVIRINTERMEDIATE RIBINFO.RINVALVIR%TYPE,
        NRINVALPRLINTERMEDIATE RIBINFO.RINVALPRL%TYPE,
        NRINVALCHQINTERMEDIATE RIBINFO.RINVALCHQ%TYPE,
        NRINFORCEPRLINTERMEDIATE RIBINFO.RINFORCEPRL%TYPE,
        NRINFORCEVIRINTERMEDIATE RIBINFO.RINFORCEVIR%TYPE,
        NRIBIBANCLEINTERMEDIATE RIB.RIBIBANCLE%TYPE,
        SRIBIBANCOMPTEINTERMEDIATE RIB.RIBIBANCOMPTE%TYPE,
        SBGUGUICHETINVINTERMEDIATE RIB.BGUGUICHETINVARIANT%TYPE,
        SDEVCODEINTERMEDIATE RIB.DEVCODE%TYPE,
        SRIBACCOUNTTYPEINTERMEDIATE RIB.RIBACCOUNTTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    DECLARE
        NOKMODIF NUMBER;
        NNEWRIBID RIB.RIBID%TYPE;
        NCOUNT  NUMBER;
        BAPPCRE BOOLEAN;
        CURSOR C1
        IS
            SELECT ACTID, RIBID, ACTIDSIGNATURE, ARAACCESSTYPE, ARADTBEG, ARADTEND, CREID FROM ACTRIBACCES WHERE ACTID = NACTID AND RIBID = NRIBID;
        CURSOR CLTMP
        IS
            SELECT ACTID, TMPCODE, ATDTYPE, RIBID FROM ACTRIBTMPDEFAUT WHERE ACTID = NACTID AND RIBID = NRIBID;
    BEGIN
        --modification ou pas du RIB
        SELECT
            COUNT( *)
        INTO
            NOKMODIF
        FROM
            RIB
        WHERE
            RIBID = NRIBID
            AND
            (
                BGUBANQUE        != SBGUBANQUE
                OR BGUGUICHET    != SBGUGUICHET
                OR RIBCOMPTE     != SRIBCOMPTE
                OR RIBCLE        != SRIBCLE
                OR RIBIBANCLE    != NRIBIBANCLE
                OR RIBIBANCOMPTE != SRIBIBANCOMPTE
            ) ;
        BAPPCRE    := FALSE;
        IF NOKMODIF > 0 THEN
            --modification du RIB
            SELECT
                COUNT( *)
            INTO
                NCOUNT
            FROM
                RIB
            WHERE
                BGUBANQUE      = SBGUBANQUE
                AND BGUGUICHET = SBGUGUICHET
                AND RIBCOMPTE  = SRIBCOMPTE
                AND RIBCLE     = SRIBCLE;
            --recherche si RIB deja present en base
            IF NCOUNT > 0 THEN
                --RIB deja present en base sous un autre id
                SELECT
                    MAX(RIBID)
                INTO
                    NNEWRIBID
                FROM
                    RIB
                WHERE
                    BGUBANQUE      = SBGUBANQUE
                    AND BGUGUICHET = SBGUGUICHET
                    AND RIBCOMPTE  = SRIBCOMPTE
                    AND RIBCLE     = SRIBCLE;
                UPDATE
                    RIB
                SET
                    BGUBANQUE     = SBGUBANQUE
                  , BGUGUICHET    = SBGUGUICHET
                  , RIBCOMPTE     = SRIBCOMPTE
                  , RIBCLE        = SRIBCLE
                  , RIBIBANCLE    = NRIBIBANCLE
                  , RIBIBANCOMPTE = SRIBIBANCOMPTE
                WHERE
                    RIBID = NNEWRIBID;
                BAPPCRE  := TRUE;
            ELSE
                --RIB non present en base
                --si RIB non utilise sous un autre acteur INSERTION sinon DELETE/INSERT avec nouveau ID
                SELECT
                    COUNT( *)
                INTO
                    NCOUNT
                FROM
                    ACTRIB
                WHERE
                    RIBID      = NRIBID
                    AND ACTID != NACTID;
                IF NCOUNT      = 0 THEN
                    -- RIB non utilise sous un autre acteur INSERTION
                    UPDATE
                        RIB
                    SET
                        BGUBANQUE     = SBGUBANQUE
                      , BGUGUICHET    = SBGUGUICHET
                      , RIBCOMPTE     = SRIBCOMPTE
                      , RIBCLE        = SRIBCLE
                      , RIBIBANCLE    = NRIBIBANCLE
                      , RIBIBANCOMPTE = SRIBIBANCOMPTE
                    WHERE
                        RIBID = NRIBID;
                ELSE
                    BAPPCRE := TRUE;
                END IF;
            END IF;
            IF BAPPCRE THEN
                -- RIB utilise avec autre acteur INSERT/DELETE nouveau ID
                I_ACTRIB2(NACTID, NNEWRIBID, SBGUBANQUE, SBGUGUICHET, SRIBCOMPTE, SRIBCLE, SRIBINTITULE, NRINDELAIP, NRINDELAIV, NRINVALREMHP, NRINVALREMSP, NRINVALVIR, NRINVALPRL, NRINVALCHQ, NRINFORCEPRL, NRINFORCEVIR, SARITYPE, DTARIDTDEB,
                NRIBIBANCLE, SRIBIBANCOMPTE, SBGUGUICHETINVARIANT, SDEVCODE, NULL, NRIBIDINTERMEDIATE, SRIBACCOUNTTYPE, NULL, SBGUBANQUEINTERMEDIATE, SBGUGUICHETINTERMEDIATE, SRIBCOMPTEINTERMEDIATE, SRIBCLEINTERMEDIATE, SRIBINTITULEINTERMEDIATE,
                NRINDELAIPINTERMEDIATE, NRINDELAIVINTERMEDIATE, NRINVALREMHPINTERMEDIATE, NRINVALREMSPINTERMEDIATE, NRINVALVIRINTERMEDIATE, NRINVALPRLINTERMEDIATE, NRINVALCHQINTERMEDIATE, NRINFORCEPRLINTERMEDIATE, NRINFORCEVIRINTERMEDIATE,
                NRIBIBANCLEINTERMEDIATE, SRIBIBANCOMPTEINTERMEDIATE, SBGUGUICHETINVINTERMEDIATE, SDEVCODEINTERMEDIATE, SRIBACCOUNTTYPEINTERMEDIATE, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NRETURNCODE) ;
                IF NRETURNCODE = 0 THEN
                    FOR C1R IN C1
                    LOOP
                        IF NRETURNCODE = 0 THEN
                            D_ACTRIBACCES(NACTID, NRIBID, C1R.ACTIDSIGNATURE, NRETURNCODE) ;
                        END IF;
                        IF NRETURNCODE = 0 THEN
                            I_ACTRIBACCES(C1R.ACTID, NNEWRIBID, C1R.ACTIDSIGNATURE, C1R.ARAACCESSTYPE, C1R.ARADTBEG, C1R.ARADTEND, C1R.CREID, NRETURNCODE) ;
                        END IF;
                    END LOOP;
                    FOR CLRTMP IN CLTMP
                    LOOP
                        IF NRETURNCODE = 0 THEN
                            D_ACTRIBTMPDEFAUT(CLRTMP.ACTID, NRIBID, CLRTMP.ATDTYPE, CLRTMP.TMPCODE, NRETURNCODE) ;
                        END IF;
                        IF NRETURNCODE = 0 THEN
                            I_ACTRIBTMPDEFAUT(CLRTMP.ACTID, NNEWRIBID, CLRTMP.ATDTYPE, CLRTMP.TMPCODE, NRETURNCODE) ;
                        END IF;
                    END LOOP;
                    IF NRETURNCODE = 0 THEN
                        D_ACTRIB(NRIBID, NACTID, NRETURNCODE) ;
                    END IF;
                    IF NRETURNCODE = 0 THEN
                        NRIBID    := NNEWRIBID;
                    END IF;
                END IF;
            END IF;
        END IF;
    END;
END U_ACTRIBCOMPTE;
--ACH 26/12/2004 CFS 26290
PROCEDURE U_ACTEURNAFCODE(
        NACTID ACTEUR.ACTID%TYPE,
        SUGECODE ACTEUR.UGECODE%TYPE,
        SUTICODE ACTEUR.UTICODECREAT%TYPE,
        SNAFCODE ACTEUR.NAFCODE%TYPE,
        DTACTDTDEBNAF ACTEUR.ACTDTDEBNAF%TYPE,
        NTBAID TBATCH.TBAID%TYPE,
        NRETURNCODE IN OUT NUMBER)
IS
BEGIN
    DECLARE
        NCREID CREVT.CREID%TYPE;
        SNAFCODEAN ACTEUR.NAFCODE%TYPE;
        DTDATE DATE;
        NCOUNT NUMBER;
    BEGIN
        NRETURNCODE := 0;
        SELECT NAFCODE, ACTDTDEBNAF INTO SNAFCODEAN, DTDATE FROM ACTEUR WHERE ACTID = NACTID;
        --mise ? jour de la table acteur
        SELECT COUNT( *) INTO NCOUNT FROM NAF WHERE NAFCODE = SNAFCODE;
        IF NCOUNT        = 0 THEN
            NRETURNCODE := ERR_NAFCODE_NOTFOUND;
        END IF;
        IF NRETURNCODE = 0 THEN
            UPDATE ACTEUR SET NAFCODE = SNAFCODE, ACTDTDEBNAF = DTACTDTDEBNAF WHERE ACTID = NACTID;
            --insertion dans CREVT
            SELECT SEQ_CREID.NEXTVAL INTO NCREID FROM DUAL ;
            BEGIN
                INSERT
                INTO
                    CREVT
                    (
                        CREID
                      , TACCODE
                      , UTICODECREAT
                      , UTICODEVALID
                      , CREDTEFFET
                      , CREDTCREAT
                      , TMOMODULE
                      , TMFFONCTION
                      , TEVDEST
                      , ACTID
                      , TBAID
                      , CREDTVALID
                    )
                    VALUES
                    (
                        NCREID
                      , 'GLOBAL'
                      , SUTICODE
                      , SUTICODE
                      , TRUNC(DTACTDTDEBNAF)
                      , TRUNC(SYSDATE)
                      , 'ACTEUR'
                      , 'EVACT_NAFV2'
                      , 'ACTEUR'
                      , NACTID
                      , NTBAID
                      , TRUNC(SYSDATE)
                    ) ;
            EXCEPTION
            WHEN OTHERS THEN
                NRETURNCODE := ERR_INSERTION_CREVT;
            END;
        END IF;
        --insertion dans CREDATA
        IF NRETURNCODE = 0 THEN
            BEGIN
                INSERT INTO CREDATA
                    (CREID, CDAORDRE, CDATABLE, CDACOLONNE, CDADATASTRING
                    ) VALUES
                    (NCREID, 1, 'ACTEUR', 'NAFCODE', SNAFCODEAN
                    ) ;
                INSERT INTO CREDATA
                    (CREID, CDAORDRE, CDATABLE, CDACOLONNE, CDADATASTRING
                    ) VALUES
                    (NCREID, 2, 'ACTEUR', 'NEW_NAFCODE', SNAFCODE
                    ) ;
                INSERT INTO CREDATA
                    (CREID, CDAORDRE, CDATABLE, CDACOLONNE, CDADATADATE
                    ) VALUES
                    (NCREID, 3, 'ACTEUR', 'ACTDTDEBNAF', DTDATE
                    ) ;
                INSERT INTO CREDATA
                    (CREID, CDAORDRE, CDATABLE, CDACOLONNE, CDADATADATE
                    ) VALUES
                    (NCREID, 4, 'ACTEUR', 'NEW_ACTDTDEBNAF', DTACTDTDEBNAF
                    ) ;
            EXCEPTION
            WHEN OTHERS THEN
                NRETURNCODE := ERR_PARENT_NOT_FOUND_CONST;
            END;
        END IF ;
    END;
END U_ACTEURNAFCODE;
PROCEDURE P_ACTEUR_CLONE
    (
        NACTIDCLONE IN ACTEUR.ACTID%TYPE,
        SACTCODE IN ACTEUR.ACTLIBCOURT%TYPE,
        SACTLIBCOURT IN ACTEUR.ACTLIBCOURT%TYPE,
        SACTSIRET IN ACTEUR.ACTSIRET%TYPE,
        SACTNOM IN ACTEUR.ACTNOM%TYPE,
        SACTNOM2 IN ACTEUR.ACTNOM2%TYPE,
        NRIBCLONE IN NUMBER,
        NNEWACTID IN OUT ACTEUR.ACTID%TYPE,
		SUTICODE IN UTILISATEUR.UTICODE%TYPE,
		STUGECODE IN UTILISATEUR.UGECODE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    DECLARE
        ROWACT ACTEUR%ROWTYPE;
        ROWAGE ACTEURGESTION%ROWTYPE;
        ROWAPA ACTEURPARTICULIER%ROWTYPE;
        ROWAIN ACTEURINDIVISION%ROWTYPE;
        ROWAGR ACTEURGROUPE%ROWTYPE;
        NFLAGSOC  NUMBER;
        BAPHCLONE BOOLEAN;
        NARAORDRE AGERACHAT.ARAORDRE%TYPE;
        DTEXEFIN DATE;
        NACTID ACTRELATION.ACTID%TYPE;
        NACTIDRELATION ACTRELATION.ACTIDRELATION%TYPE;
        DTDATE DATE;
        NANNEE NUMBER;
        NMOIS  NUMBER;
        NNUMERO NUMERO.NUMNUMERO%TYPE;
        SNUMFORMAT ACTEUR.ACTCODE%TYPE;
        SUGECODE UTILISATEUR.UGECODE%TYPE := STUGECODE;
        SUSER UTILISATEUR.UTICODE%TYPE    := SUTICODE;
        -- Table prise en compte
        -- ACTEUR
        -- ACTEURETRANGER
        -- ACTEURGESTION
        -- ACTEURGROUPE
        -- ACTEURINDIVISION
        -- ACTEURPARTICULIER
        -- ACTEURPMORALE
        -- ACTPHASE
        -- AGERACHAT
        -- ACTEXERCICE
        -- ACTADRESSE
        -- ACTRIB
        -- ACTRIBACCES
        -- ACTRIBTMPDEFAUT
        -- ACTROLE
        -- ACTTELECOM
        -- ACTCORRESPONDANT
        -- LKACTCORADR
        -- LKACTTELCOR
        -- ACTSTATISTIQUE
        -- ACTRELATION
        -- ACTRELPRODETAIL
        -- ACTPERIMETRE
        -- AGEGROMESURE
        -- ACTTAB
        -- LKACTUTITSM
        -- ACTCONTACT
        -- ACTALLOCATIONPRIORITY
        -- Table NON prise en compte
        -- ACTCANBESOIN
        -- ACTCANDIDATURE
        -- ACTFINANCIER
        -- ACTCOMPLEMENT
        -- ACTPROAGE
        -- ACTPROCEDURE
        -- ACTPROJUGEMENT
        -- ACTPROMANDAT
        -- ACTPROPHAAUDIENCE
        -- ACTPROPHASE
        -- ACTRAYONACTION
        -- ACTSECTGESTION
        -- ACTSERVICEAGREEMENT
        -- ACTSPEATTRIBUTE
        -- ACTSPECIALITE
        -- ACTSPEMETIER
        -- ACTSPESERVICERATE
        -- ACTTCOVALEUR
        -- ACTUNITE
        -- LKASPACO
        -- AROAGE
        -- ADMINISTRATIF
        -- ADMSTATUS
        -- LKGROTACAGE
        -- LKTPGAGE
        -- LKUTITMFACGDROIT
        -- TACACTGESTION
        CURSOR CAPH
        IS
            SELECT * FROM ACTPHASE WHERE ACTID = NACTIDCLONE ORDER BY APHORDRE, PHACODE, PHADEST;
        CURSOR CAGR
        IS
            SELECT * FROM AGERACHAT WHERE ACTID = NACTIDCLONE ORDER BY ARAORDRE;
        CURSOR CAEX
        IS
            SELECT * FROM ACTEXERCICE WHERE ACTID = NACTIDCLONE ORDER BY AEXEXERCICE;
        CURSOR CAAD
        IS
            SELECT * FROM ACTADRESSE WHERE ACTID = NACTIDCLONE ORDER BY AADORDRE;
        CURSOR CARI
        IS
            SELECT * FROM ACTRIB WHERE ACTID = NACTIDCLONE ORDER BY RIBID;
        CURSOR CARA
        IS
            SELECT * FROM ACTRIBACCES WHERE ACTID = NACTIDCLONE ORDER BY RIBID, ACTIDSIGNATURE;
        CURSOR CATD
        IS
            SELECT * FROM ACTRIBTMPDEFAUT WHERE ACTID = NACTIDCLONE ORDER BY ACTID, TMPCODE, ATDTYPE;
        CURSOR CARO
        IS
            SELECT * FROM ACTROLE WHERE ACTID = NACTIDCLONE ORDER BY ACTID, ROLCODE;
        CURSOR CATE
        IS
            SELECT * FROM ACTTELECOM WHERE ACTID = NACTIDCLONE ORDER BY ATEORDRE;
        CURSOR CACO
        IS
            SELECT * FROM ACTCORRESPONDANT WHERE ACTID = NACTIDCLONE ORDER BY ACOORDRE;
        CURSOR CATC
        IS
            SELECT * FROM LKACTTELCOR WHERE ACTID = NACTIDCLONE ORDER BY ACOORDRE, ATEORDRE;
        CURSOR CACA
        IS
            SELECT * FROM LKACTCORADR WHERE ACTID = NACTIDCLONE ORDER BY ACOORDRE, AADORDRE;
        CURSOR CAST
        IS
            SELECT * FROM ACTSTATISTIQUE WHERE ACTID = NACTIDCLONE ORDER BY SACCODE;
        CURSOR CARE
        IS
            SELECT * FROM ACTRELATION WHERE ACTID = NACTIDCLONE OR ACTIDRELATION = NACTIDCLONE ORDER BY ACTID, TRECODE, ACTIDRELATION, AREDTDEB;
        CURSOR CADE
        IS
            SELECT
                *
            FROM
                ACTRELPRODETAIL
            WHERE
                ACTID            = NACTIDCLONE
                OR ACTIDRELATION = NACTIDCLONE
            ORDER BY
                ACTID
              , TRECODE
              , ACTIDRELATION
              , AREDTDEB
              , ADEORDRE
              , TATATTRIBUTE
              , TDEVALUE;
        CURSOR CAPE
        IS
            SELECT * FROM ACTPERIMETRE WHERE ACTID = NACTIDCLONE ORDER BY APECODE, APEDTDEB;
        CURSOR CAGM
        IS
            SELECT * FROM AGEGROMESURE WHERE ACTID = NACTIDCLONE ORDER BY AGMCODE, AGMNATURE, AGMDTDEB;
        CURSOR CATB
        IS
            SELECT * FROM ACTTAB WHERE ACTID = NACTIDCLONE ORDER BY ACTID, PAYCODE, ATBDTVALID, TABCODE;
        CURSOR CASM
        IS
            SELECT * FROM LKACTUTITSM WHERE ACTID = NACTIDCLONE ORDER BY TSMSECTGESTION, TSMMETIER, UTICODE;
        CURSOR CACN
        IS
            SELECT
                *
            FROM
                ACTCONTACT
            WHERE
                ACTID      = NACTIDCLONE
                AND DOSID IS NULL
                AND BIMID IS NULL
                AND ITRID IS NULL
                AND CHAID IS NULL
                AND FACID IS NULL
                AND DEPID IS NULL
                AND COMID IS NULL
                AND REGID IS NULL
                AND MANID IS NULL
                AND ASSID IS NULL
                AND SINID IS NULL
                AND CEXID IS NULL
                AND CONID IS NULL
            ORDER BY
                ACNORDRE;
        CURSOR CAAP
        IS
            SELECT * FROM ACTALLOCATIONPRIORITY WHERE ACTID = NACTIDCLONE ORDER BY TACCODE, AAPORDRE;
    BEGIN
        NNEWACTID   := NULL;
        NRETURNCODE := 0;
        BEGIN
            SELECT * INTO ROWACT FROM ACTEUR WHERE ACTID = NACTIDCLONE;
        EXCEPTION
        WHEN OTHERS THEN
            ROWACT.ACTID := NULL;
        END;
        BEGIN
            SELECT * INTO ROWAGE FROM ACTEURGESTION WHERE ACTID = NACTIDCLONE;
            NFLAGSOC := 1;
        EXCEPTION
        WHEN OTHERS THEN
            ROWAGE.ACTID := NULL;
            NFLAGSOC     := 0;
        END;
        BEGIN
            SELECT * INTO ROWAPA FROM ACTEURPARTICULIER WHERE ACTID = NACTIDCLONE;
        EXCEPTION
        WHEN OTHERS THEN
            ROWAPA.ACTID := NULL;
        END;
        BEGIN
            SELECT * INTO ROWAIN FROM ACTEURINDIVISION WHERE ACTID = NACTIDCLONE;
        EXCEPTION
        WHEN OTHERS THEN
            ROWAIN.ACTID := NULL;
        END;
        BEGIN
            SELECT * INTO ROWAGR FROM ACTEURGROUPE WHERE ACTID = NACTIDCLONE;
        EXCEPTION
        WHEN OTHERS THEN
            ROWAGR.ACTID := NULL;
        END;
        IF(ROWACT.ACTID        IS NOT NULL) THEN
            IF(SACTCODE        IS NOT NULL) THEN
                ROWACT.ACTCODE := SACTCODE;
                ROWACT.UGECODE := SUGECODE;
            ELSE
                ROWACT.ACTCODE := SUSER;
                ROWACT.UGECODE := SUGECODE;
            END IF;
            ROWACT.ACTLIBCOURT := SACTLIBCOURT;
            ROWACT.ACTSIRET    := SACTSIRET;
            ROWACT.ACTNOM      := SACTNOM;
            ROWACT.ACTNOM2     := SACTNOM2;
            I_ACTEUR(ROWACT.ACTID, ROWACT.UGECODE, ROWACT.UTICODECREAT, ROWACT.ACTDTCREAT, ROWACT.ACTCODE, ROWACT.CJUCODE, ROWACT.PAYCODECATJURIDIQUE, ROWACT.UTICODEMAJ, ROWACT.ACTLIBCOURT, ROWACT.ACTNOM, ROWACT.ACTNOM2, ROWACT.ACTSIRET,
            ROWACT.ACTDTMAJ, ROWACT.PAYCODE, ROWACT.LANCODE, ROWAGE.AGEEMETTEUR, NFLAGSOC, ROWACT.ACTFLAGTAXPROF, ROWACT.ACTCAPITAL, ROWACT.ACTFINMOISFISC, ROWACT.ACTNUMRCM, ROWACT.NAFCODE, ROWACT.PAYCODENAF, ROWACT.ACTTVACE, ROWACT.ACTCODERCM,
            ROWACT.ACTMEMO, ROWAPA.APADTNAISS, ROWAPA.APADEPTNAISS, ROWAPA.APACOMNAISS, ROWAPA.APANBENFANT, ROWAPA.APASEXE, ROWAPA.PAYCODE, ROWAPA.APAEMPLOYEUR, ROWAPA.APASITFAM, ROWAPA.APAFLAGPROPRIETE, ROWAPA.APATITRE, ROWAPA.APANOMMARITAL,
            ROWAPA.APAREGIMEMATRIM, ROWAGE.AGECIB, ROWAGE.AGELOGO, ROWAGE.AGEDELAIEXIGIBLE, ROWACT.DEVCODE, ROWAGE.TDRCODEEFFET, ROWAGE.TDRCODEPRL, ROWAGE.TDRCODEPRLACCELERE, ROWAGE.TDRCODEVIR, ROWAIN.AINNBPARTTOTAL, ROWAGE.AGEEMETVIR,
            ROWACT.ACTLIBCHEQUE, ROWAGE.TCIID, ROWAGE.AGEFLAGIRFACTURE, ROWAGE.AGEFLAGIRCHQ, ROWAGE.AGEMTFACMINI, ROWAGE.RUBID, ROWAGE.TAXCODE, ROWACT.ACTREGIMETVA, ROWACT.ACTFLAGAGREMENT, ROWACT.ACTRATTACHEMENT, ROWACT.ACTDTIMMATRICULATION,
            ROWACT.ACTEFFECTIF, ROWAPA.APANOMPATRONYMIQUE, ROWAPA.APAPRENOM, ROWAPA.APACHGREGIMEMATRIM, ROWAPA.APACODENIVEAUETUDE, ROWAPA.APADIRFONCTION, ROWAPA.APAFLAGDIRIGEANT, ROWAPA.APAFLAGHOMMECLE, ROWAPA.APAFLAGINTERDITBANCAIRE,
            ROWAPA.APAFLAGSUCCESSIONPRET, ROWAPA.APAPCTCAPITAL, ROWAPA.APAANEXPERACTIVITE, ROWAPA.APAANEXPERIENCEFONCTION, ROWACT.ACTFLAGNONDECLASSABLE, ROWACT.DOMCODE, ROWAPA.APADTPERMISDECONDUIRE, ROWACT.ACTFLAGGROUPE, ROWAGE.AGEFICP,
            ROWAGR.AGRCOMPOUNDINGMCODE, ROWAGR.AGRCOMPOUNDUSE, ROWAGR.AGREXTERNALREF, ROWAGR.AGRBADDEBTSTATUS, ROWAGR.AGRLIBCOURT, ROWAPA.APAVILLENAISS, ROWACT.ACTDTDEBNAF, ROWAGE.CALID, NRETURNCODE) ;
            IF(NRETURNCODE = 0) THEN
                NNEWACTID := ROWACT.ACTID;
                -- ACTPHASE
                FOR CAPH_REC IN CAPH
                LOOP
                    IF(NRIBCLONE   = 1) THEN
                        BAPHCLONE := TRUE;
                    ELSE
                        IF(CAPH_REC.PHACODE    = 'INI') THEN
                            BAPHCLONE         := TRUE;
                            CAPH_REC.APHDTFIN := NULL;
                        ELSE
                            BAPHCLONE := FALSE;
                        END IF;
                    END IF;
                    IF(BAPHCLONE) THEN
                        I_ACTPHASE(NNEWACTID, CAPH_REC.PHACODE, CAPH_REC.APHORDRE, CAPH_REC.PHADEST, CAPH_REC.JALCODE, CAPH_REC.APHDTDEB, CAPH_REC.UTICODE, CAPH_REC.APHDTFIN, CAPH_REC.APHDTMAJ, CAPH_REC.CREID, NRETURNCODE) ;
                    END IF;
                    IF(NRETURNCODE != 0) THEN
                        EXIT;
                    END IF;
                END LOOP;
                IF(NRETURNCODE = 0) THEN
                    -- AGERACHAT
                    FOR CAGR_REC IN CAGR
                    LOOP
                        NARAORDRE := CAGR_REC.ARAORDRE;
                        PA_UPDATEACTEUR2.I_AGERACHAT(NNEWACTID, NARAORDRE, CAGR_REC.ARADTDEB, CAGR_REC.ARADTFIN, CAGR_REC.ARANBMOIS, CAGR_REC.ARATYPEPENALITEACHAT, CAGR_REC.ARAMTFORFAITACHAT, CAGR_REC.ARAPCTPENALITEACHAT, CAGR_REC.CREID,
                        CAGR_REC.TPGCODE, CAGR_REC.TACCODE, CAGR_REC.ARAPENALTYTYPE, CAGR_REC.ARAPCTMAXBUYOUT, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTEXERCICE
                    FOR CAEX_REC IN CAEX
                    LOOP
                        DTEXEFIN                 := LAST_DAY(TO_DATE('01/' || LPAD(CAEX_REC.AEXMOISFIN, 2, '0') || '/' || LPAD(CAEX_REC.AEXANNEEFIN, 4, '0'), 'DD/MM/YYYY')) ;
                        IF(CAEX_REC.AEXDTCLOTURE IS NULL) OR
                            (
                                CAEX_REC.AEXDTCLOTURE != DTEXEFIN
                            )
                            THEN
                            I_ACTEXERCICE(NNEWACTID, CAEX_REC.AEXEXERCICE, CAEX_REC.DEVCODE, CAEX_REC.AEXANNEEDEB, CAEX_REC.AEXMOISDEB, CAEX_REC.AEXANNEEFIN, CAEX_REC.AEXMOISFIN, CAEX_REC.AEXDTSAISIE, CAEX_REC.AEXDTCLOTURE, CAEX_REC.AEXNBMOISOUVERT,
                            CAEX_REC.AEXPCTRECUPTVAP, CAEX_REC.AEXPCTRECUPTVAD, CAEX_REC.AEXTYPECLOTURE, NRETURNCODE) ;
                            IF(NRETURNCODE != 0) THEN
                                EXIT;
                            END IF;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTADRESSE
                    FOR CAAD_REC IN CAAD
                    LOOP
                        --                  I_ACTADRESSE(
                        --                     cAad_rec.ADRID,
                        --                     nNewActId,
                        --                     cAad_rec.AADFLAGSIEGE,
                        --                     cAad_rec.AADFLAGCOURRIER,
                        --                     cAad_rec.AADFLAGFACTURATION,
                        --                     cAad_rec.AADFLAGLIVRAISON,
                        --                     cAad_rec.AADCOMPL,
                        --                     sUser,
                        --                     cAAd_rec.AADDTDEB,
                        --                     cAAd_rec.AADORDRE,
                        --      cAAd_rec.AADTYPE,
                        --      cAAd_rec.AADCHANNEL,
                        --      cAAd_rec.AADERRORCODE,
                        --      cAAd_rec.AADCONTACTCODE,
                        --      cAAd_rec.AADCONTROLCODE,
                        --                     nReturnCode );
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                    IF(NRETURNCODE = 0) THEN
                        FOR CAAD_REC IN CAAD
                        LOOP
                            IF((CAAD_REC.AADORDREREMPLACE IS NOT NULL) OR
                                (
                                    CAAD_REC.AADDTREMPLACE IS NOT NULL
                                )
                                ) THEN
                                --                        U_ACTADRESSE(
                                --                           nNewActId,
                                --                           cAad_rec.ADRID,
                                --                           cAad_rec.AADORDREREMPLACE,
                                --                           cAad_rec.AADFLAGSIEGE,
                                --                           cAad_rec.AADFLAGCOURRIER,
                                --                           cAad_rec.AADFLAGFACTURATION,
                                --                           cAad_rec.AADFLAGLIVRAISON,
                                --                           cAad_rec.AADCOMPL,
                                --                           cAad_rec.AADDTREMPLACE,
                                --                           cAad_rec.CREID,
                                --                           sUser,
                                --                           cAad_rec.AADDTDEB,
                                --                           cAad_rec.AADORDRE,
                                --         cAad_rec.AADTYPE,
                                --         cAAd_rec.AADCHANNEL,
                                --         cAAd_rec.AADERRORCODE,
                                --         cAAd_rec.AADCONTACTCODE,
                                --         cAAd_rec.AADCONTROLCODE,
                                --                           nReturnCode );
                                IF(NRETURNCODE != 0) THEN
                                    EXIT;
                                END IF;
                            END IF;
                        END LOOP;
                    END IF;
                END IF;
                IF(NRIBCLONE       = 1) THEN
                    IF(NRETURNCODE = 0) THEN
                        -- ACTRIB
                        FOR CARI_REC IN CARI
                        LOOP
                            I_ACTRIB(NNEWACTID, CARI_REC.RIBID, NULL, NULL, CARI_REC.CREID, CARI_REC.ARITYPE, CARI_REC.ARIDTDEB, NULL, NULL, NULL, NULL, NULL, NULL, NRETURNCODE) ;
                            IF(NRETURNCODE != 0) THEN
                                EXIT;
                            END IF;
                        END LOOP;
                        IF(NRETURNCODE = 0) THEN
                            FOR CARI_REC IN CARI
                            LOOP
                                IF((CARI_REC.RIBIDREMPLACE IS NOT NULL) OR
                                    (
                                        CARI_REC.ARIDTREMPLACE IS NOT NULL
                                    )
                                    OR
                                    (
                                        CARI_REC.RIBIDINTERMEDIATE IS NOT NULL
                                    )
                                    ) THEN
                                    U_ACTRIB(NNEWACTID, CARI_REC.RIBID, CARI_REC.RIBIDREMPLACE, CARI_REC.ARIDTREMPLACE, CARI_REC.CREID, CARI_REC.RIBIDINTERMEDIATE, NRETURNCODE) ;
                                    IF(NRETURNCODE != 0) THEN
                                        EXIT;
                                    END IF;
                                END IF;
                            END LOOP;
                        END IF;
                        IF(NRETURNCODE = 0) THEN
                            -- ACTRIBACCES
                            FOR CARA_REC IN CARA
                            LOOP
                                I_ACTRIBACCES(NNEWACTID, CARA_REC.RIBID, CARA_REC.ACTIDSIGNATURE, CARA_REC.ARAACCESSTYPE, CARA_REC.ARADTBEG, CARA_REC.ARADTEND, CARA_REC.CREID, NRETURNCODE) ;
                                IF(NRETURNCODE != 0) THEN
                                    EXIT;
                                END IF;
                            END LOOP;
                            IF(NRETURNCODE = 0) THEN
                                -- ACTRIBTMPDEFAUT
                                FOR CATD_REC IN CATD
                                LOOP
                                    I_ACTRIBTMPDEFAUT(NNEWACTID, CATD_REC.RIBID, CATD_REC.ATDTYPE, CATD_REC.TMPCODE, NRETURNCODE) ;
                                    IF(NRETURNCODE != 0) THEN
                                        EXIT;
                                    END IF;
                                END LOOP;
                            END IF;
                        END IF;
                    END IF;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTROLE
                    FOR CARO_REC IN CARO
                    LOOP
                        I_ACTROLE(NNEWACTID, CARO_REC.ROLCODE, CARO_REC.ARONBEXFAC, CARO_REC.ARORECAPFAC, CARO_REC.AROGRPFAC, CARO_REC.AROGRPPREL, CARO_REC.AROREFEXTERNE, CARO_REC.AROFACAVANCE, CARO_REC.AROPERIODE, CARO_REC.AROMULTIPLE,
                        CARO_REC.AROEDITFAC, CARO_REC.AROGRPDEC, CARO_REC.AROENVOINOTICE, CARO_REC.AROFORMATSORTIE, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTTELECOM
                    FOR CATE_REC IN CATE
                    LOOP
                        I_ACTTELECOM(NNEWACTID, CATE_REC.ATEORDRE, CATE_REC.ATENUM, CATE_REC.ATETYPE, CATE_REC.ATEDTEFFET, CATE_REC.ATEDTFIN, CATE_REC.ATEDOMAIN, CATE_REC.ATEFLAGASSENT, CATE_REC.ATEFLAGPREFERE, NULL, NULL, NULL, NULL,
                        CATE_REC.ATEDTUSED, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTCORRESPONDANT
                    FOR CACO_REC IN CACO
                    LOOP
                        I_ACTCORRESPONDANT(NNEWACTID, CACO_REC.ACOORDRE, CACO_REC.ACONOM, CACO_REC.ACOQUALITE, CACO_REC.ACOTITRE, CACO_REC.ACOFLAGPREFERE, CACO_REC.ACOINITIALAUTREPRENOM, CACO_REC.ACOPRENOM, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                    IF(NRETURNCODE = 0) THEN
                        -- LKACTTELCOR
                        FOR CATC_REC IN CATC
                        LOOP
                            I_LKACTTELCOR(NNEWACTID, CATC_REC.ACOORDRE, CATC_REC.ATEORDRE, CATC_REC.ATCFLAGPREFERE, NRETURNCODE) ;
                            IF(NRETURNCODE != 0) THEN
                                EXIT;
                            END IF;
                        END LOOP;
                        IF(NRETURNCODE = 0) THEN
                            -- LKACTCORADR
                            FOR CACA_REC IN CACA
                            LOOP
                                I_LKACTCORADR(NNEWACTID, CACA_REC.ACOORDRE, CACA_REC.AADORDRE, NULL, NULL, NULL, NRETURNCODE) ;
                                IF(NRETURNCODE != 0) THEN
                                    EXIT;
                                END IF;
                            END LOOP;
                        END IF;
                    END IF;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTSTATISTIQUE
                    FOR CAST_REC IN CAST
                    LOOP
                        I_ACTSTATISTIQUE(CAST_REC.SACCODE, CAST_REC.SAVCODEVAL, CAST_REC.ASTLIBRE, NNEWACTID, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTRELATION
                    FOR CARE_REC IN CARE
                    LOOP
                        IF(CARE_REC.ACTIDRELATION = NACTIDCLONE) THEN
                            NACTID               := CARE_REC.ACTID;
                            NACTIDRELATION       := NNEWACTID;
                        ELSE
                            NACTID         := NNEWACTID;
                            NACTIDRELATION := CARE_REC.ACTIDRELATION;
                        END IF;
                        I_ACTRELATION(NACTID, NACTIDRELATION, CARE_REC.TRECODE, CARE_REC.AREDTDEB, CARE_REC.AREQP, CARE_REC.AREDTFIN, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                    IF(NRETURNCODE = 0) THEN
                        -- ACTRELPRODETAIL
                        FOR CADE_REC IN CADE
                        LOOP
                            IF(CADE_REC.ACTIDRELATION = NACTIDCLONE) THEN
                                NACTID               := CADE_REC.ACTID;
                                NACTIDRELATION       := NNEWACTID;
                            ELSE
                                NACTID         := NNEWACTID;
                                NACTIDRELATION := CADE_REC.ACTIDRELATION;
                            END IF;
                            I_ACTRELPRODETAIL(NACTID, NACTIDRELATION, CADE_REC.TRECODE, CADE_REC.AREDTDEB, CADE_REC.ADEORDRE, CADE_REC.TATATTRIBUTE, CADE_REC.TDEVALUE, NRETURNCODE) ;
                            IF(NRETURNCODE != 0) THEN
                                EXIT;
                            END IF;
                        END LOOP;
                    END IF;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTPERIMETRE
                    FOR CAPE_REC IN CAPE
                    LOOP
                        I_ACTPERIMETRE(NNEWACTID, CAPE_REC.APECODE, CAPE_REC.APEORDER,CAPE_REC.APEDTDEB, CAPE_REC.APEDTFIN, CAPE_REC.APECODETYPE, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- AGEGROMESURE
                    FOR CAGM_REC IN CAGM
                    LOOP
                        I_AGEGROMESURE(NNEWACTID, CAGM_REC.AGMCODE, CAGM_REC.AGMNATURE, CAGM_REC.AGMDTDEB, CAGM_REC.AGMDTFIN, CAGM_REC.DEVCODE, CAGM_REC.AGMMT, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTTAB
                    FOR CATB_REC IN CATB
                    LOOP
                        I_ACTTAB(NNEWACTID, CATB_REC.ATBDTVALID, CATB_REC.ATBDTSAISIE, CATB_REC.ATBDTFIN, CATB_REC.TABCODE, CATB_REC.ATBVALEUR, CATB_REC.PAYCODE, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- LKACTUTITSM
                    FOR CASM_REC IN CASM
                    LOOP
                        PA_UPDATEACTEUR2.I_LKACTUTITSM(NNEWACTID, CASM_REC.TSMMETIER, CASM_REC.TSMSECTGESTION, CASM_REC.UTICODE, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTCONTACT
                    FOR CACN_REC IN CACN
                    LOOP
                        PA_UPDATEACTEUR2.I_ACTCONTACT(NNEWACTID, CACN_REC.ACNORDRE, CACN_REC.ACOORDRE, CACN_REC.DOSID, CACN_REC.ACNDTDEB, CACN_REC.ACNMEMO, CACN_REC.ACNTYPE, CACN_REC.ACNCHARACTER, CACN_REC.BIMID, CACN_REC.CHAID, CACN_REC.ITRID,
                        CACN_REC.COMID, CACN_REC.DEPID, CACN_REC.FACID, CACN_REC.REGID, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) THEN
                    -- ACTALLOCATIONPRIORITY
                    FOR CAAP_REC IN CAAP
                    LOOP
                        PA_UPDATEACTEUR2.I_ACTALLOCATIONPRIORITY(NNEWACTID, CAAP_REC.AAPORDRE, CAAP_REC.TACCODE, CAAP_REC.TPGCODE, CAAP_REC.RUBID, CAAP_REC.AAPNATURE, CAAP_REC.AAPMETHOD, CAAP_REC.AAPPRIORITYLEVEL, CAAP_REC.AAPGRPPRIORLEVEL,
                        CAAP_REC.RULID, CAAP_REC.AAPFLAGCOLLECTABLE, NRETURNCODE) ;
                        IF(NRETURNCODE != 0) THEN
                            EXIT;
                        END IF;
                    END LOOP;
                END IF;
                IF(NRETURNCODE = 0) AND
                    (
                        SACTCODE IS NULL
                    )
                    THEN
                    DTDATE     := TRUNC(SYSDATE) ;
                    NANNEE     := 0;
                    NMOIS      := 0;
                    NNUMERO    := - 1;
                    SNUMFORMAT := NULL;
                    --PA_COMMON.S_NUMEROFORMATE( 'ACTEUR', NULL, 'ACTNUM', dtDate, nAnnee, nMois, nNumero, sNumFormat );
                    P_GETPLCHRONO('ACTEUR', 'GLOBAL', 'TOUT', 'ALL', NULL, 'ACTNUM', NULL, DTDATE, NANNEE, NMOIS, NNUMERO, SNUMFORMAT, NULL, NULL, NULL) ;
                    IF(SNUMFORMAT IS NOT NULL) THEN
                        BEGIN
                            UPDATE ACTEUR SET ACTCODE = SNUMFORMAT WHERE ACTID = NNEWACTID;
                        EXCEPTION
                        WHEN OTHERS THEN
                            PAV4_TRACE.ERROR('nActIdClone = ' || TO_CHAR(NACTIDCLONE) || ' ==> Automatic number update failed') ;
                            NRETURNCODE := - 1;
                        END;
                    ELSE
                        PAV4_TRACE.DEBUG('nActIdClone = ' || TO_CHAR(NACTIDCLONE) || ' ==> Automatic number generation failed') ;
                        NRETURNCODE := - 1;
                    END IF;
                END IF;
            END IF;
        ELSE
            PAV4_TRACE.DEBUG('nActIdClone = ' || TO_CHAR(NACTIDCLONE) || ' ==> Actor to clone not found') ;
            NRETURNCODE := - 1;
        END IF;
    END;
END P_ACTEUR_CLONE;
-- Le 14/09/2011 CFS#48817
PROCEDURE U_AROAGE_EVACT_RELBLOC(
        NCREID CREVT.CREID%TYPE,
        NACTID AROAGE.ACTID%TYPE,
        NACTIDGESTION AROAGE.ACTIDGESTION%TYPE,
        SROLECODE AROAGE.ROLCODE%TYPE,
        DTEVENTDATE AROAGE.AAGDTVALID%TYPE,
        STYPE AROAGE.AAGBLOCAGERELANCE%TYPE,
        SREASON AROAGE.AAGMOTIFNONRELANCE%TYPE,
        DTENDNOREMIND AROAGE.AAGDTENDNOREMIND%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        CURSOR C_RELANCE
        IS
            SELECT AARORDRE, DOSID, AARDTDEB FROM AROAGERELANCE WHERE ACTID = NACTID AND ACTIDGESTION = NACTIDGESTION AND ROLCODE = SROLECODE AND AARDTFIN IS NULL ;
        NOPTIONRELANCE_LEAVEOPENREM NUMBER := NULL; -- Le 21/03/2012 CFS#56844
        SUTICODE UTILISATEUR.UTICODE%TYPE;
    BEGIN
        PA_COMMON.S_TPALOGIQUE('RELANCE', 'LEAVEOPENREM', NOPTIONRELANCE_LEAVEOPENREM) ; -- Le 21/03/2012 CFS#56844
        BEGIN
            UPDATE
                AROAGE
            SET
                AAGBLOCAGERELANCE  = STYPE
              , AAGMOTIFNONRELANCE = SREASON
              , AAGDTENDNOREMIND   = DTENDNOREMIND
            WHERE
                ACTID            = NACTID
                AND ACTIDGESTION = NACTIDGESTION
                AND ROLCODE      = SROLECODE
                AND AAGDTVALID  <= DTEVENTDATE
                AND AAGDTFIN    IS NULL ;
            NRETURNCODE         := 0;
            IF SQL%ROWCOUNT      = 0 THEN
                NRETURNCODE     := ERR_NO_ROWS_CONST;
            END IF;
        EXCEPTION
        WHEN ERR_PARENT_NOT_FOUND THEN
            NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
        WHEN DUP_VAL_ON_INDEX THEN
            NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST;
        WHEN ERR_U_NULL_MANDATORY_KEY THEN
            NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
        WHEN ERR_I_NULL_MANDATORY_KEY THEN
            NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
        -- UPDATE sur AROAGE reussi => MAJ des relances associees
        --IF (nReturnCode = 0) THEN                        -- Le 04/01/2012 CFS#55074
        --IF (nReturnCode = 0) AND (sReason <> 'TEMP') THEN  -- Le 04/01/2012 CFS#55074           -- Le 21/03/2012 CFS#56844
        IF(NRETURNCODE = 0) AND
            (
                SREASON <> 'TEMP'
            )
            AND
            (
                NOPTIONRELANCE_LEAVEOPENREM = 0
            )
            THEN -- Le 21/03/2012 CFS#56844
            FOR C_RELANCE_REC IN C_RELANCE
            LOOP
                -- MAJ de LKAARFEC
                IF(NRETURNCODE = 0 AND STYPE <> 'DEF') THEN -- Le 12/03/2013 CASNT-687 LBU
                    BEGIN
                        UPDATE
                            LKAARFEC
                        SET
                            AAFDTFIN = GREATEST(AAFDTDEB, DTEVENTDATE)
                        WHERE
                            ACTID            = NACTID
                            AND ACTIDGESTION = NACTIDGESTION
                            AND ROLCODE      = SROLECODE
                            AND AARORDRE     = C_RELANCE_REC.AARORDRE
                            AND AAFDTFIN    IS NULL ;
                        NRETURNCODE         := 0;
                    EXCEPTION
                    WHEN ERR_PARENT_NOT_FOUND THEN
                        NRETURNCODE := ERR_PARENT_AAF_FOUND_CONST;
                    WHEN DUP_VAL_ON_INDEX THEN
                        NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
                    WHEN ERR_U_NULL_MANDATORY_KEY THEN
                        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
                    WHEN ERR_I_NULL_MANDATORY_KEY THEN
                        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
                    WHEN OTHERS THEN
                        NRETURNCODE := - 1 * SQLCODE;
                    END;
                END IF;
                -- MAJ de AROAGERELANCE
                IF(NRETURNCODE = 0 AND STYPE <> 'DEF') THEN -- Le 07/03/2013 CASNT-687 LBU
                    BEGIN
                        UPDATE
                            AROAGERELANCE
                        SET
                            AARDTFIN = GREATEST(AARDTDEB, DTEVENTDATE)
                        WHERE
                            ACTID            = NACTID
                            AND ACTIDGESTION = NACTIDGESTION
                            AND ROLCODE      = SROLECODE
                            AND AARORDRE     = C_RELANCE_REC.AARORDRE
                            AND AARDTFIN    IS NULL ;
                        NRETURNCODE         := 0;
                    EXCEPTION
                    WHEN ERR_PARENT_NOT_FOUND THEN
                        NRETURNCODE := ERR_PARENT_AAR_FOUND_CONST;
                    WHEN DUP_VAL_ON_INDEX THEN
                        NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
                    WHEN ERR_U_NULL_MANDATORY_KEY THEN
                        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
                    WHEN ERR_I_NULL_MANDATORY_KEY THEN
                        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
                    WHEN OTHERS THEN
                        NRETURNCODE := - 1 * SQLCODE;
                    END;
                END IF;
                -- MAJ de AAGRVE, attribut IMPAYES
                IF(NRETURNCODE = 0 AND STYPE <> 'DEF') THEN -- Le 12/03/2013 CASNT-687 LBU
                    BEGIN
                        UPDATE
                            AAGRVE
                        SET
                            AVEDTFIN = GREATEST(AVEDTDEB, DTEVENTDATE)
                        WHERE
                            ACTID            = NACTID
                            AND ACTIDGESTION = NACTIDGESTION
                            AND ROLCODE      = SROLECODE
                            AND RVACODE      = 'IMPAYES'
                            AND DOSID        = C_RELANCE_REC.DOSID
                            AND AVEDTFIN    IS NULL ;
                        NRETURNCODE         := 0;
                    EXCEPTION
                    WHEN ERR_PARENT_NOT_FOUND THEN
                        NRETURNCODE := ERR_PARENT_AAR_FOUND_CONST;
                    WHEN DUP_VAL_ON_INDEX THEN
                        NRETURNCODE := ERR_DUP_VAL_ON_APJ_CONST;
                    WHEN ERR_U_NULL_MANDATORY_KEY THEN
                        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
                    WHEN ERR_I_NULL_MANDATORY_KEY THEN
                        NRETURNCODE := ERR_VAL_APJ_NULL_CONST;
                    WHEN OTHERS THEN
                        NRETURNCODE := - 1 * SQLCODE;
                    END;
                END IF;
                PACOM_UPDATEACTEUR_SHARED.U_AROAGE_EVACT_RELBLOC_AFTER(NACTID, NACTIDGESTION, C_RELANCE_REC.AARDTDEB, GREATEST(C_RELANCE_REC.AARDTDEB, DTEVENTDATE), C_RELANCE_REC.DOSID, 'U', SROLECODE, C_RELANCE_REC.AARORDRE, SUTICODE, NCREID,
                NRETURNCODE) ;
                IF(NRETURNCODE != 0) THEN
                    EXIT;
                END IF;
            END LOOP;
        END IF;
    END;
END U_AROAGE_EVACT_RELBLOC;
PROCEDURE U_AROAGE_EVACT_STOPROLE(
        NACTID AROAGE.ACTID%TYPE,
        NACTIDGESTION AROAGE.ACTIDGESTION%TYPE,
        SROLECODE AROAGE.ROLCODE%TYPE,
        DTEVENTDATE AROAGE.AAGDTVALID%TYPE,
        DTAAGDTFIN AROAGE.AAGDTFIN%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        UPDATE
            AROAGE
        SET
            AAGDTFIN = DTAAGDTFIN
        WHERE
            ACTID            = NACTID
            AND ACTIDGESTION = NACTIDGESTION
            AND ROLCODE      = SROLECODE
            AND AAGDTVALID  <= DTEVENTDATE
            AND AAGDTFIN    IS NULL;
        NRETURNCODE         := 0;
        IF SQL%ROWCOUNT      = 0 THEN
            NRETURNCODE     := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_AAG_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_AAA_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_AAA_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_AROAGE_EVACT_STOPROLE;
FUNCTION F_GETNUMNUMERO(
        SNUMCIBLE IN NUMERO.NUMCIBLE%TYPE)
    RETURN NUMERO.NUMNUMERO%TYPE
AS
    PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
    DECLARE
        NNUMNUMERO NUMERO.NUMNUMERO%TYPE;
    BEGIN
        UPDATE NUMERO SET NUMNUMERO = NUMNUMERO + 1 WHERE NUMCIBLE = SNUMCIBLE;
        SELECT NUMNUMERO INTO NNUMNUMERO FROM NUMERO WHERE NUMCIBLE = SNUMCIBLE;
        COMMIT;
        RETURN NNUMNUMERO;
    EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RETURN NULL;
    END;
END F_GETNUMNUMERO;
-- CV-07062013 CASNT-3515
PROCEDURE P_MAJ_ACT_ASSENT(
        SAASSTATUSOLD ACTASSENT.AASSTATUS%TYPE,
        SAASSTATUSNEW ACTASSENT.AASSTATUS%TYPE,
        SAASTYPE ACTASSENT.AASTYPE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        NRETURNCODE := 0;
        -- between 204 and 213
        UPDATE
            ACTASSENT AAS
        SET
            AASSTATUS = SAASSTATUSNEW
        WHERE
            EXISTS
            (
                SELECT 1 FROM ACTASSATTRIBUTE WHERE ACTID = AAS.ACTID AND AASORDER = AAS.AASORDER AND AATCODE BETWEEN '204' AND '213'
            )
            AND AASSTATUS = SAASSTATUSOLD
            AND AASTYPE   = SAASTYPE
            AND AASDTEND  < SYSDATE;
        -- 202
        UPDATE
            ACTASSENT AAS
        SET
            AASSTATUS = SAASSTATUSNEW
          , AASDTEND  =
            (
                SELECT DOSDTFIN FROM DOSSIER DOS WHERE AAS.DOSID = DOS.DOSID
            )
        WHERE
            EXISTS
            (
                SELECT 1 FROM ACTASSATTRIBUTE WHERE ACTID = AAS.ACTID AND AASORDER = AAS.AASORDER AND AATCODE = '202'
            )
            AND AASSTATUS  = SAASSTATUSOLD
            AND AASTYPE    = SAASTYPE
            AND AAS.DOSID IN
            (
                SELECT
                    DOS.DOSID
                FROM
                    DOSSIER DOS
                  , ACTASSENT AAS2
                WHERE
                    AAS2.DOSID = DOS.DOSID
                    AND EXISTS
                    (
                        SELECT 1 FROM ACTASSATTRIBUTE WHERE ACTID = AAS2.ACTID AND AASORDER = AAS2.AASORDER AND AATCODE = '202'
                    )
                    AND AAS2.AASSTATUS = SAASSTATUSOLD
                    AND DOSDTFIN       < SYSDATE
            ) ;
        -- 212
        UPDATE
            ACTASSENT AAS
        SET
            AASSTATUS = SAASSTATUSNEW
          , AASDTEND  =
            (
                SELECT DOSDTFIN FROM DOSSIER DOS WHERE AAS.DOSID = DOS.DOSID
            )
        WHERE
            EXISTS
            (
                SELECT 1 FROM ACTASSATTRIBUTE WHERE ACTID = AAS.ACTID AND AASORDER = AAS.AASORDER AND AATCODE = '212'
            )
            AND AASSTATUS  = SAASSTATUSOLD
            AND AASTYPE    = SAASTYPE
            AND AAS.DOSID IN
            (
                SELECT
                    DOS.DOSID
                FROM
                    DOSSIER DOS
                  , ACTASSENT AAS2
                WHERE
                    AAS2.DOSID = DOS.DOSID
                    AND EXISTS
                    (
                        SELECT 1 FROM ACTASSATTRIBUTE WHERE ACTID = AAS2.ACTID AND AASORDER = AAS2.AASORDER AND AATCODE = '212'
                    )
                    AND AAS2.AASSTATUS = SAASSTATUSOLD
                    AND DOSDTFIN       < AAS2.AASDTEND
            ) ;
        COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
        ROLLBACK;
    END;
END P_MAJ_ACT_ASSENT;
PROCEDURE P_MAJ_ACT_ASSENT_DAILY_UPDATE(
        SAASSTATUSOLD IN ACTASSENT.AASSTATUS%TYPE,
        SAASSTATUSNEW IN ACTASSENT.AASSTATUS%TYPE,
        SAASTYPE IN ACTASSENT.AASTYPE%TYPE,
        SAATCODES1 IN VARCHAR2,
        SAATCODES2 IN VARCHAR2,
        SAATCODES3 IN VARCHAR2,
        SAATCODES4 IN VARCHAR2,
        SAATCODES5 IN VARCHAR2,
        SAATCODES6 IN VARCHAR2,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        NRETURNCODE := 0;
        UPDATE
            ACTASSENT AAS
        SET
            AASSTATUS = SAASSTATUSNEW
          , AASDTEND  =
            (
                SELECT DOSDTFIN FROM DOSSIER DOS WHERE AAS.DOSID = DOS.DOSID
            )
        WHERE
            EXISTS
            (
                SELECT
                    1
                FROM
                    ACTASSATTRIBUTE
                WHERE
                    ACTID        = AAS.ACTID
                    AND AASORDER = AAS.AASORDER
                    AND AATCODE IN(SAATCODES1, SAATCODES2, SAATCODES3, SAATCODES4, SAATCODES5, SAATCODES6)
            )
            AND AASSTATUS  = SAASSTATUSOLD
            AND AASTYPE    = SAASTYPE
            AND AAS.DOSID IN
            (
                SELECT
                    DOS.DOSID
                FROM
                    DOSSIER DOS
                  , ACTASSENT AAS2
                WHERE
                    AAS2.DOSID = DOS.DOSID
                    AND EXISTS
                    (
                        SELECT
                            1
                        FROM
                            ACTASSATTRIBUTE
                        WHERE
                            ACTID        = AAS2.ACTID
                            AND AASORDER = AAS2.AASORDER
                            AND AATCODE IN(SAATCODES1, SAATCODES2, SAATCODES3, SAATCODES4, SAATCODES5, SAATCODES6)
                    )
                    AND AAS2.AASSTATUS = SAASSTATUSOLD
            ) ;
        COMMIT;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
        ROLLBACK;
    END;
END P_MAJ_ACT_ASSENT_DAILY_UPDATE;
PROCEDURE P_EVACT_OBJ(-- call this PROC when for all the actors  eligible and ticked during the global event
        NTBAID IN CREVT.TBAID%TYPE, -- global event id
        NACTIDGESTION IN ACTEUR.ACTID%TYPE, -- company
        SROLCODE IN ROLE.ROLCODE%TYPE, -- rolcode
        DTEVENT IN DATE, -- event date
        SDEVCODE IN DOSSIER.DEVCODE%TYPE, -- currency,
        NACTID IN OUT ACTEUR.ACTID%TYPE, -- actor
        NOBJECTIF IN NUMBER, --objectif or limit value
        NNEWVALUE IN NUMBER, -- new value
        SRVACODE IN ROLVARIABLE.RVACODE%TYPE, -- code limit or obj
        SLANCODE IN LANGUE.LANCODE%TYPE, -- language code
        SUTICODE IN UTILISATEUR.UTICODE%TYPE, -- user code
        SNEWRVVCODE IN AAGRVE.RVVCODE%TYPE, -- new rvvcode applicable only for attributes
        STPGCODE IN AAGRVE.TPGCODE%TYPE,
        NPCRID IN AAGRVE.PCRID%TYPE,
        NPCRORDRE IN AAGRVE.PCRORDRE%TYPE,
        DTATTRIBUTE IN AAGRVE.AVEDTDEB%TYPE, -- new date applicable only for attributes
        DTAVEDTFIN IN AAGRVE.AVEDTDEB%TYPE,
        NCREID IN OUT CREVT.CREID%TYPE,
        SACTCODE IN ACTEUR.ACTCODE%TYPE,
		STUGECODE IN UTILISATEUR.UGECODE%TYPE,
        NRETURNCODE IN OUT NUMBER) -- 0 means okay, otherwise error
AS
BEGIN
    DECLARE
        NAVEORDRE AAGRVE.AVEORDRE%TYPE;
        DTREF DATE;
        NPCRID1 AAGRVE.PCRID%TYPE;
        NPCRORDRE1 AAGRVE.PCRORDRE%TYPE;
        DTAVEDTDEB AAGRVE.AVEDTDEB%TYPE;
        STPGCODE1 AAGRVE.TPGCODE%TYPE;
        SUGECODE UTILISATEUR.UGECODE%TYPE := STUGECODE;
        NCOUNT NUMBER;
    BEGIN
        BEGIN
            -- by default everything is okay
            NRETURNCODE := 0;
            DTREF       := NULL;
            IF NACTID   IS NULL THEN
                SELECT COUNT( *) INTO NCOUNT FROM ACTEUR WHERE ACTCODE = SACTCODE AND UGECODE = UGECODE;
                IF NCOUNT > 0 THEN
                    SELECT ACTID INTO NACTID FROM ACTEUR WHERE ACTCODE = SACTCODE AND UGECODE = UGECODE AND ROWNUM = 1;
                ELSE
                    NRETURNCODE := 1;
                END IF;
            END IF;
            IF NRETURNCODE = 0 THEN
                -- new local event
                IF(DTATTRIBUTE IS NULL) THEN
                    DTAVEDTDEB := DTEVENT;
                ELSE
                    DTAVEDTDEB := DTATTRIBUTE;
                END IF;
                SELECT SEQ_CREID.NEXTVAL INTO NCREID FROM DUAL;
                PACOM_EVT.I_EVT('ACTEUR', 'ACTEUR', 'EVACT_UOL', NCREID, NACTID, DTEVENT, 'GLOBAL', 0, SUTICODE, SYSDATE, NRETURNCODE) ;
                IF NRETURNCODE = 0 THEN
                    UPDATE CREVT SET TBAID = NTBAID WHERE CREID = NCREID;
                    SELECT NVL(MAX(AVEORDRE), 0) INTO NAVEORDRE FROM AAGRVE WHERE ACTIDGESTION = NACTIDGESTION AND ACTID = NACTID AND ROLCODE = SROLCODE AND RVACODE = SRVACODE;
                    IF NAVEORDRE > 0 THEN
                        SELECT
                            AAGDTVALID
                          , PCRID
                          , PCRORDRE
                          , TPGCODE
                        INTO
                            DTREF
                          , NPCRID1
                          , NPCRORDRE1
                          , STPGCODE1
                        FROM
                            AAGRVE
                        WHERE
                            ACTIDGESTION = NACTIDGESTION
                            AND ACTID    = NACTID
                            AND ROLCODE  = SROLCODE
                            AND AVEORDRE = NAVEORDRE
                            AND RVACODE  = SRVACODE;
                    ELSE
                        SELECT AAGDTVALID INTO DTREF FROM AROAGE WHERE ACTIDGESTION = NACTIDGESTION AND ACTID = NACTID AND ROLCODE = SROLCODE;
                    END IF;
                    IF SNEWRVVCODE IS NULL THEN
                        NPCRID1    := NULL;
                        NPCRORDRE1 := NULL;
                    END IF;
                    IF(STPGCODE   IS NOT NULL) THEN
                        STPGCODE1 := STPGCODE;
                    END IF;
                    IF(NPCRID   IS NOT NULL) THEN
                        NPCRID1 := NPCRID;
                    END IF;
                    IF(NPCRORDRE   IS NOT NULL) THEN
                        NPCRORDRE1 := NPCRORDRE;
                    END IF;
                    PAV4_UPDATEACTEUR.I_AAGRVE(NACTID, SROLCODE, NACTIDGESTION, DTREF, SRVACODE, NAVEORDRE + 1, DTAVEDTDEB, DTAVEDTFIN, NNEWVALUE, NOBJECTIF, NULL, NULL, NULL, SDEVCODE, SNEWRVVCODE, NULL, NCREID, NULL, NULL, NULL, STPGCODE1, NPCRID1
                    , NPCRORDRE1, NRETURNCODE) ;
                    IF NRETURNCODE = 0 THEN
                        UPDATE
                            AAGRVE
                        SET
                            AVEDTFIN = DTAVEDTDEB - 1
                        WHERE
                            ACTIDGESTION  = NACTIDGESTION
                            AND ACTID     = NACTID
                            AND ROLCODE   = SROLCODE
                            AND AVEORDRE <= NAVEORDRE
                            AND AVEDTFIN IS NULL;
                        -- validation of the event
                        PA_EVT.U_EVT_VALIDE(NCREID,SUTICODE, NRETURNCODE) ;
                    END IF;
                END IF;
            END IF;
        EXCEPTION
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
    END;
END P_EVACT_OBJ;
PROCEDURE P_MAJCOTE(-- call this PROC when for all the actors  eligible and ticked during the global event
        NACTIDGESTION IN ACTEUR.ACTID%TYPE, -- company
        NACTID IN OUT ACTEUR.ACTID%TYPE, -- actor
        SDEVCODE IN DOSSIER.DEVCODE%TYPE, -- currency,
        DTEVENT IN DATE, -- event date
        NTBAID IN CREVT.TBAID%TYPE, -- global event id
        NTCOID IN TCOTATION.TCOID%TYPE, --rating id from criteria
        STVACODE IN TCOVALEUR.TVACODE%TYPE, --rating value selected
        SUTICODE IN UTILISATEUR.UTICODE%TYPE, -- user code
        SLANCODE IN LANGUE.LANCODE%TYPE, -- language code
        SACTCODE IN ACTEUR.ACTCODE%TYPE,
		STUGECODE IN UTILISATEUR.UGECODE%TYPE,
        NRETURNCODE IN OUT NUMBER) -- 0 means okay, otherwise error
AS
BEGIN
    DECLARE
        NCREID CREVT.CREID%TYPE;
        NATVORDRE ACTTCOVALEUR.ATVORDRE%TYPE;
        SUGECODE UTILISATEUR.UGECODE%TYPE := STUGECODE;
        NCOUNT NUMBER;
    BEGIN
        BEGIN
            -- by default everything is okay
            NRETURNCODE := 0;
            IF NACTID   IS NULL THEN
                SELECT COUNT( *) INTO NCOUNT FROM ACTEUR WHERE ACTCODE = SACTCODE AND UGECODE = SUGECODE;
                IF NCOUNT > 0 THEN
                    SELECT ACTID INTO NACTID FROM ACTEUR WHERE ACTCODE = SACTCODE AND UGECODE = SUGECODE AND ROWNUM = 1;
                ELSE
                    NRETURNCODE := 1;
                END IF;
            END IF;
            IF NRETURNCODE = 0 THEN
                -- new local event
                SELECT SEQ_CREID.NEXTVAL INTO NCREID FROM DUAL;
                PACOM_EVT.I_EVT('ACTEUR', 'ACTEUR', 'EVACT_RATREMP', NCREID, NACTID, DTEVENT, 'GLOBAL', 0, SUTICODE, SYSDATE, NRETURNCODE) ;
                IF NRETURNCODE = 0 THEN
                    UPDATE CREVT SET TBAID = NTBAID WHERE CREID = NCREID;
                    SELECT MAX(ATVORDRE) INTO NATVORDRE FROM ACTTCOVALEUR WHERE ACTID = NACTID AND TCOID = NTCOID;
                    IF NATVORDRE IS NOT NULL THEN
                        PA_UPDATEACTEUR.I_ACTTCOVALEUR(NACTID, NATVORDRE + 1, NTCOID, STVACODE, DTEVENT, NULL, SYSDATE, SUTICODE, NCREID, NULL, NULL, NULL, 0, NRETURNCODE) ;
                    END IF;
                    IF NRETURNCODE = 0 THEN
                        UPDATE ACTTCOVALEUR SET ATVDTFIN = DTEVENT - 1 WHERE ACTID = NACTID AND TCOID = NTCOID AND ATVORDRE <= NATVORDRE AND ATVDTFIN IS NULL ;
                        -- validation of the event
                        PA_EVT.U_EVT_VALIDE(NCREID,SUTICODE, NRETURNCODE) ;
                    END IF;
                END IF;
            END IF;
        EXCEPTION
        WHEN OTHERS THEN
            NRETURNCODE := - 1 * SQLCODE;
        END;
    END;
END P_MAJCOTE;
PROCEDURE I_BGUVIRTUAL(
        SBGUBANQUE IN BGUVIRTUAL.BGUBANQUE%TYPE,
        SBGUGUICHET IN BGUVIRTUAL.BGUGUICHET%TYPE,
        SBVIACCOUNT IN BGUVIRTUAL.BVIACCOUNT%TYPE,
        SBVIFLAGUSED IN BGUVIRTUAL.BVIFLAGUSED%TYPE,
        DTBVIDTSTART IN BGUVIRTUAL.BVIDTSTART%TYPE,
        DTBVIDTEND IN BGUVIRTUAL.BVIDTEND%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        INSERT
        INTO
            BGUVIRTUAL
            (
                BGUBANQUE
              , BGUGUICHET
              , BVIACCOUNT
              , BVIFLAGUSED
              , BVIDTSTART
              , BVIDTEND
            )
            VALUES
            (
                SBGUBANQUE
              , SBGUGUICHET
              , SBVIACCOUNT
              , SBVIFLAGUSED
              , DTBVIDTSTART
              , DTBVIDTEND
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_BGUVIRTUAL;
PROCEDURE U_BGUVIRTUAL
    (
        SBGUBANQUE IN BGUVIRTUAL.BGUBANQUE%TYPE,
        SBGUGUICHET IN BGUVIRTUAL.BGUGUICHET%TYPE,
        SBVIACCOUNT IN BGUVIRTUAL.BVIACCOUNT%TYPE,
        SBVIFLAGUSED IN BGUVIRTUAL.BVIFLAGUSED%TYPE,
        DTBVIDTSTART IN BGUVIRTUAL.BVIDTSTART%TYPE,
        DTBVIDTEND IN BGUVIRTUAL.BVIDTEND%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            BGUVIRTUAL
        SET
            BVIFLAGUSED = SBVIFLAGUSED
          , BVIDTSTART  = DTBVIDTSTART
          , BVIDTEND    = DTBVIDTEND
        WHERE
            BGUBANQUE      = SBGUBANQUE
            AND BGUGUICHET = SBGUGUICHET
            AND BVIACCOUNT = SBVIACCOUNT;
        NRETURNCODE       := 0;
        IF SQL%ROWCOUNT    = 0 THEN
            NRETURNCODE   := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_BGUVIRTUAL;
PROCEDURE D_BGUVIRTUAL(
        SBGUBANQUE IN BGUVIRTUAL.BGUBANQUE%TYPE,
        SBGUGUICHET IN BGUVIRTUAL.BGUGUICHET%TYPE,
        SBVIACCOUNT IN BGUVIRTUAL.BVIACCOUNT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM BGUVIRTUAL WHERE BGUBANQUE = SBGUBANQUE AND BGUGUICHET = SBGUGUICHET AND BVIACCOUNT = SBVIACCOUNT;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_BGUVIRTUAL;
PROCEDURE I_ACTSUBROGATION(
        NACTID ACTSUBROGATION.ACTID%TYPE,
        NASUORDER IN OUT ACTSUBROGATION.ASUORDER%TYPE,
        NACTIDSUBROGATOR ACTSUBROGATION.ACTIDSUBROGATOR%TYPE,
        SASUREFERENCE IN OUT ACTSUBROGATION.ASUREFERENCE%TYPE,
        SASUSTATUS ACTSUBROGATION.ASUSTATUS%TYPE,
        DTASUDT ACTSUBROGATION.ASUDT%TYPE,
        SUTICODE ACTSUBROGATION.UTICODE%TYPE,
        DTASUDTUPDATE ACTSUBROGATION.ASUDTUPDATE%TYPE,
        SDPTCODE ACTSUBROGATION.DPTCODE%TYPE,
        NASUFLAGPRINTED ACTSUBROGATION.ASUFLAGPRINTED%TYPE,
        SASUCOMMENT ACTSUBROGATION.ASUCOMMENT%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NCOUNT NUMBER;
    BEGIN
        SELECT NVL(MAX(ASUORDER), 0) + 1 INTO NASUORDER FROM ACTSUBROGATION WHERE ACTID = NACTID;
        I_ACTRELATION(NACTID, NACTIDSUBROGATOR, 'SUBROG', SYSDATE, NULL, NULL, NRETURNCODE) ;
        -- SELECT COUNT(*) +1 INTO nCount FROM ACTSUBROGATION;
        --sAsureference := replace(sDptcode||to_char(sysdate,'YYYY-MM-DD')||'00'||nCount,'-','');
        INSERT
        INTO
            ACTSUBROGATION
            (
                ACTID
              , ASUORDER
              , ACTIDSUBROGATOR
              , ASUREFERENCE
              , ASUSTATUS
              , ASUDT
              , UTICODE
              , ASUDTUPDATE
              , DPTCODE
              , ASUFLAGPRINTED
              , ASUCOMMENT
            )
            VALUES
            (
                NACTID
              , NASUORDER
              , NACTIDSUBROGATOR
              , SASUREFERENCE
              , SASUSTATUS
              , DTASUDT
              , SUTICODE
              , DTASUDTUPDATE
              , SDPTCODE
              , NASUFLAGPRINTED
              , SASUCOMMENT
            ) ;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ACTSUBROGATION;
PROCEDURE U_ACTSUBROGATION
    (
        NACTID ACTSUBROGATION.ACTID%TYPE,
        NASUORDER ACTSUBROGATION.ASUORDER%TYPE,
        NACTIDSUBROGATOR ACTSUBROGATION.ACTIDSUBROGATOR%TYPE,
        SASUREFERENCE ACTSUBROGATION.ASUREFERENCE%TYPE,
        SASUSTATUS ACTSUBROGATION.ASUSTATUS%TYPE,
        DTASUDT ACTSUBROGATION.ASUDT%TYPE,
        SUTICODE ACTSUBROGATION.UTICODE%TYPE,
        DTASUDTUPDATE ACTSUBROGATION.ASUDTUPDATE%TYPE,
        SDPTCODE ACTSUBROGATION.DPTCODE%TYPE,
        NASUFLAGPRINTED ACTSUBROGATION.ASUFLAGPRINTED%TYPE,
        SASUCOMMENT ACTSUBROGATION.ASUCOMMENT%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE ACTSUBROGATION SET ASUSTATUS = SASUSTATUS, ASUDT = DTASUDT, ASUCOMMENT = SASUCOMMENT WHERE ACTID = NACTID AND ASUORDER = NASUORDER;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTSUBROGATION;
PROCEDURE I_ASUIMPUTATION(
        NACTID ASUIMPUTATION.ACTID%TYPE,
        NASUORDER ASUIMPUTATION.ASUORDER%TYPE,
        NASIORDER IN OUT ASUIMPUTATION.ASIORDER%TYPE,
        NDOSID ASUIMPUTATION.DOSID%TYPE,
        NREGID ASUIMPUTATION.REGID%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        SELECT NVL(MAX(ASIORDER), 0) + 1 INTO NASIORDER FROM ASUIMPUTATION WHERE ACTID = NACTID AND ASUORDER = NASUORDER;
        INSERT INTO ASUIMPUTATION
            (ACTID, ASUORDER, ASIORDER, DOSID, REGID
            ) VALUES
            (NACTID, NASUORDER, NASIORDER, NDOSID, NREGID
            ) ;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_ASUIMPUTATION;
PROCEDURE D_ASUIMPUTATION
    (
        NACTID ASUIMPUTATION.ACTID%TYPE,
        NASUORDER ASUIMPUTATION.ASUORDER%TYPE,
        NASIORDER ASUIMPUTATION.ASIORDER%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        DELETE FROM ASUIMPUTATION WHERE ACTID = NACTID AND ASUORDER = NASUORDER AND ASIORDER = NASIORDER;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_ASUIMPUTATION;
PROCEDURE I_RIBCONTACT(
        NRIBID RIBCONTACT.RIBID%TYPE,
        SRCOMEMO RIBCONTACT.RCOMEMO%TYPE,
        SRCONAME RIBCONTACT.RCONAME%TYPE,
        SRCOPHONE RIBCONTACT.RCOPHONE%TYPE,
        SRCOATTRIBUTE RIBCONTACT.RCOATTRIBUTE%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    DECLARE
        NRCOORDER NUMBER;
    BEGIN
        SELECT NVL(MAX(RCOORDER), 0) + 1 INTO NRCOORDER FROM RIBCONTACT WHERE RIBID = NRIBID;
        INSERT INTO RIBCONTACT
            (RIBID, RCOORDER, RCOMEMO, RCONAME, RCOPHONE, RCOATTRIBUTE
            ) VALUES
            (NRIBID, NRCOORDER, SRCOMEMO, SRCONAME, SRCOPHONE, SRCOATTRIBUTE
            ) ;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        NRETURNCODE := ERR_PARENT_BGU_FOUND_CONST;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_BGU_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_BGU_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END I_RIBCONTACT;
PROCEDURE U_RIBCONTACT
    (
        NRIBID RIBCONTACT.RIBID%TYPE,
        NRCOORDER RIBCONTACT.RCOORDER%TYPE,
        SRCOMEMO RIBCONTACT.RCOMEMO%TYPE,
        SRCONAME RIBCONTACT.RCONAME%TYPE,
        SRCOPHONE RIBCONTACT.RCOPHONE%TYPE,
        SRCOATTRIBUTE RIBCONTACT.RCOATTRIBUTE%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        UPDATE
            RIBCONTACT
        SET
            RCOMEMO      = SRCOMEMO
          , RCONAME      = SRCONAME
          , RCOPHONE     = SRCOPHONE
          , RCOATTRIBUTE = SRCOATTRIBUTE
        WHERE
            RIBID        = NRIBID
            AND RCOORDER = NRCOORDER;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_RIBCONTACT;
PROCEDURE D_RIBCONTACT(
        NRIBID RIBCONTACT.RIBID%TYPE,
        NRCOORDER RIBCONTACT.RCOORDER%TYPE,
        NRETURNCODE IN OUT NUMBER)
AS
BEGIN
    BEGIN
        DELETE FROM RIBCONTACT WHERE RIBID = NRIBID AND RCOORDER = NRCOORDER;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END D_RIBCONTACT;

PROCEDURE I_ACTADRESSE2 (
   nAdrId ACTADRESSE.ADRID%TYPE,
   nActId ACTEUR.ACTID%TYPE,
   nAadFlagSiege ACTADRESSE.AADFLAGSIEGE%TYPE,
   nAadFlagCourrier ACTADRESSE.AADFLAGCOURRIER%TYPE,
   nAadFlagFacturation ACTADRESSE.AADFLAGFACTURATION%TYPE,
   nAadFlagLivraison ACTADRESSE.AADFLAGLIVRAISON%TYPE,
   sAadCompl ACTADRESSE.AADCOMPL%TYPE,
   sUtiCode ACTADRESSE.UTICODE%TYPE,
   dtAadDtDeb ACTADRESSE.AADDTDEB%TYPE,
   nAadOrdre ACTADRESSE.AADORDRE%TYPE,
   nReturnCode IN OUT NUMBER) AS
BEGIN
   BEGIN
      INSERT INTO ACTADRESSE (
                            ADRID,
                          ACTID,
                          AADFLAGSIEGE,
                          AADFLAGCOURRIER,
                          AADFLAGFACTURATION,
                          AADFLAGLIVRAISON,
                          AADCOMPL,
                          UTICODE,
                          AADDTMAJ,
                          AADDTDEB,
                          AADORDRE)
      VALUES             (nAdrId,
                          nActId,
                          nAadFlagSiege,
                          nAadFlagCourrier,
                          nAadFlagFacturation,
                          nAadFlagLivraison,
                          sAadCompl,
                          sUtiCode,
                          TRUNC ( SYSDATE ),
                          dtAadDtDeb,
                          nAadOrdre);
      nReturnCode := 0;
      IF SQL%ROWCOUNT=0 THEN
          nReturnCode := ERR_NO_ROWS_CONST;
      END IF;
   EXCEPTION
      WHEN ERR_PARENT_NOT_FOUND THEN
         -- CV-26012012 CFS55477
         -- nReturnCode := ERR_PARENT_AAD_FOUND_CONST;
         nReturnCode := F_GETFKMOREINFO( SQLERRM, ERR_PARENT_AAD_FOUND_CONST );
    WHEN DUP_VAL_ON_INDEX THEN
          nReturnCode := ERR_DUP_VAL_ON_ADR_CONST ;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
          nReturnCode := ERR_VAL_AAD_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
          nReturnCode := ERR_VAL_AAD_NULL_CONST;
    WHEN OTHERS THEN
          nReturnCode := -1 * SQLCODE;
  END;
END I_ACTADRESSE2;

-- ACTRELATION --
PROCEDURE INSERT_ACTRELATION
    (
        NACTID ACTEUR.ACTID%TYPE,
        NACTIDRELATION ACTEUR.ACTID%TYPE,
        STRECODE ACTRELATION.TRECODE%TYPE,
		SARECHANNEL ACTRELATION.ARECHANNEL%TYPE,
        DTAREDTDEB ACTRELATION.AREDTDEB%TYPE,
        NAREQP ACTRELATION.AREQP%TYPE,
        DTAREDTFIN ACTRELATION.AREDTFIN%TYPE,
        NRETURNCODE IN OUT NUMBER
    )
AS
BEGIN
    BEGIN
        IF STRECODE IS NOT NULL THEN
            INSERT INTO ACTRELATION
                (ACTID, ACTIDRELATION, TRECODE, ARECHANNEL, AREDTDEB, AREQP, AREDTFIN
                ) VALUES
                (NACTID, NACTIDRELATION, STRECODE, SARECHANNEL, DTAREDTDEB, NAREQP, DTAREDTFIN
                ) ;
        END IF;
        NRETURNCODE     := 0;
        IF SQL%ROWCOUNT  = 0 THEN
            NRETURNCODE := ERR_NO_ROWS_CONST;
        END IF;
        --ALA 050707
        IF NRETURNCODE = 0 THEN
            UPDATE ACTEUR SET ACTDTMAJ = TRUNC(SYSDATE) WHERE ACTID IN(NACTID, NACTIDRELATION) ;
        END IF;
    EXCEPTION
    WHEN ERR_PARENT_NOT_FOUND THEN
        -- CV-26012012 CFS55477
        -- nReturnCode := ERR_PARENT_ARE_FOUND_CONST;
        NRETURNCODE := F_GETFKMOREINFO(SQLERRM, ERR_PARENT_ARE_FOUND_CONST) ;
    WHEN DUP_VAL_ON_INDEX THEN
        NRETURNCODE := ERR_DUP_VAL_ON_ARE_CONST;
    WHEN ERR_U_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RELAT_NULL_CONST;
    WHEN ERR_I_NULL_MANDATORY_KEY THEN
        NRETURNCODE := ERR_VAL_RELAT_NULL_CONST;
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END INSERT_ACTRELATION;

PROCEDURE  U_ACTEURDATA(
      NACTID ACTEUR.ACTID%TYPE,
      DTACTDTMAJ ACTEUR.ACTDTMAJ%TYPE,
      SUTICODEMAJ ACTEUR.UTICODEMAJ%TYPE,
      NRETURNCODE IN OUT NUMBER
      )
AS
BEGIN
    BEGIN
         UPDATE ACTEUR
         SET ACTDTMAJ = TRUNC(SYSDATE),UTICODEMAJ = SUTICODEMAJ
         WHERE ACTID = NACTID;
    EXCEPTION
    WHEN OTHERS THEN
        NRETURNCODE := - 1 * SQLCODE;
    END;
END U_ACTEURDATA;

PROCEDURE U_ACTEUR_MDTVALID(
    NACTID ACTPHASE.ACTID%TYPE,
    NCREID ACTPHASE.CREID%TYPE,
    DTAPHDTDEB ACTPHASE.APHDTDEB%TYPE,
	DTAPHDTFIN ACTPHASE.APHDTFIN%TYPE,
    NRETURNCODE IN OUT NUMBER)
AS
BEGIN	
	BEGIN				
		UPDATE 	ACTPHASE
		SET 	APHDTDEB	= DTAPHDTDEB,
				CREID		= NCREID
		WHERE 	ACTID  		= NACTID
		AND		PHACODE		= 'ACTIVE'
		AND		APHDTFIN IS NULL;

		UPDATE 	ACTPHASE
		SET 	APHDTFIN	= DTAPHDTFIN,
				CREID		= NCREID
		WHERE 	ACTID  		= NACTID
		AND		PHACODE		= 'INI';

		UPDATE	ACTADRESSE
		SET		AADDTDEB	= DTAPHDTDEB,
				CREID		= NCREID
		WHERE 	ACTID		= NACTID
		AND 	AADORDREREMPLACE IS NULL
		AND 	AADORDRE NOT IN
		(SELECT DISTINCT NVL(AADORDREREMPLACE,0) FROM ACTADRESSE WHERE ACTID = NACTID
		);

		UPDATE 	ACTRIB
		SET 	ARIDTDEB	= DTAPHDTDEB,
				CREID		= NCREID
		WHERE 	ACTID		= NACTID
		AND 	RIBIDREMPLACE IS NULL
		AND RIBID NOT IN
		(SELECT DISTINCT NVL(RIBIDREMPLACE,0) FROM ACTRIB WHERE ACTID = NACTID);
	EXCEPTION
	WHEN OTHERS THEN
		NRETURNCODE := - 1 * SQLCODE;
	END;
END U_ACTEUR_MDTVALID;

END PA_UPDATEACTEUR;